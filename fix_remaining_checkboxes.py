#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–°–¢–ê–í–®–ò–•–°–Ø CHECKBOXES –í GRAPHICSPANEL
–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç clicked() –≤–º–µ—Å—Ç–æ toggled()
"""

import re
from pathlib import Path


def fix_all_checkboxes():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –í–°–ï —á–µ–∫–±–æ–∫—Å—ã –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ toggled() –≤–º–µ—Å—Ç–æ clicked()"""
    panel_file = Path("src/ui/panels/panel_graphics.py")
    content = panel_file.read_text(encoding="utf-8")

    print("üîß –ú–ê–°–°–û–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï CHECKBOXES:")
    print("=" * 70)

    # –°–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã: checkbox_var.clicked.connect -> checkbox_var.toggled.connect
    replacements = [
        # Shadows
        (
            r'(shadows_enabled|enabled)\.clicked\.connect\(lambda checked: self\._update_quality\("shadows\.enabled", checked\)\)',
            r'\1.toggled.connect(lambda checked: self._update_quality("shadows.enabled", checked))',
        ),
        # TAA
        (
            r'taa_check\.clicked\.connect\(lambda checked: self\._update_quality\("taa\.enabled", checked\)\)',
            r'taa_check.toggled.connect(lambda checked: self._update_quality("taa.enabled", checked))',
        ),
        # FXAA
        (
            r'fxaa_check\.clicked\.connect\(lambda checked: self\._update_quality\("fxaa\.enabled", checked\)\)',
            r'fxaa_check.toggled.connect(lambda checked: self._update_quality("fxaa.enabled", checked))',
        ),
        # Specular AA
        (
            r'specular_check\.clicked\.connect\(lambda checked: self\._update_quality\("specular_aa", checked\)\)',
            r'specular_check.toggled.connect(lambda checked: self._update_quality("specular_aa", checked))',
        ),
        # Dithering
        (
            r'dithering_check\.clicked\.connect\(lambda checked: self\._update_quality\("dithering", checked\)\)',
            r'dithering_check.toggled.connect(lambda checked: self._update_quality("dithering", checked))',
        ),
        # OIT
        (
            r'oit_check\.clicked\.connect\(lambda checked: self\._update_quality\("oit", "weighted" if checked else "none"\)\)',
            r'oit_check.toggled.connect(lambda checked: self._update_quality("oit", "weighted" if checked else "none"))',
        ),
        # Auto rotate - —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –≤ camera_tab —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
        # –ù–µ —Ç—Ä–æ–≥–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        # SSAO
        (
            r'enabled\.clicked\.connect\(lambda checked: self\._update_environment\("ao_enabled", checked\)\)',
            r'enabled.toggled.connect(lambda checked: self._update_environment("ao_enabled", checked))',
        ),
        # DoF
        (
            r'enabled\.clicked\.connect\(lambda checked: self\._update_effects\("depth_of_field", checked\)\)',
            r'enabled.toggled.connect(lambda checked: self._update_effects("depth_of_field", checked))',
        ),
        # Motion blur
        (
            r'motion\.clicked\.connect\(lambda checked: self\._update_effects\("motion_blur", checked\)\)',
            r'motion.toggled.connect(lambda checked: self._update_effects("motion_blur", checked))',
        ),
        # Lens flare
        (
            r'lens_flare\.clicked\.connect\(lambda checked: self\._update_effects\("lens_flare", checked\)\)',
            r'lens_flare.toggled.connect(lambda checked: self._update_effects("lens_flare", checked))',
        ),
        # Vignette
        (
            r'vignette\.clicked\.connect\(lambda checked: self\._update_effects\("vignette", checked\)\)',
            r'vignette.toggled.connect(lambda checked: self._update_effects("vignette", checked))',
        ),
        # Tonemap
        (
            r'enabled\.clicked\.connect\(lambda checked: self\._update_effects\("tonemap_enabled", checked\)\)',
            r'enabled.toggled.connect(lambda checked: self._update_effects("tonemap_enabled", checked))',
        ),
        # Lighting shadows (key, fill, rim, point)
        (
            r'(key|fill|rim|point)_shadow\.clicked\.connect\(lambda checked: self\._update_lighting\("(key|fill|rim|point)", "cast_shadow", checked\)\)',
            r'\1_shadow.toggled.connect(lambda checked: self._update_lighting("\2", "cast_shadow", checked))',
        ),
        (
            r'(key|fill|rim|point)_bind\.clicked\.connect\(lambda checked: self\._update_lighting\("(key|fill|rim|point)", "bind_to_camera", checked\)\)',
            r'\1_bind.toggled.connect(lambda checked: self._update_lighting("\2", "bind_to_camera", checked))',
        ),
        # TAA motion adaptive
        (
            r'taa_motion\.clicked\.connect\(lambda checked: self\._update_quality\("taa_motion_adaptive", checked\)\)',
            r'taa_motion.toggled.connect(lambda checked: self._update_quality("taa_motion_adaptive", checked))',
        ),
    ]

    changes_count = 0
    for old_pattern, new_pattern in replacements:
        if re.search(old_pattern, content):
            content = re.sub(old_pattern, new_pattern, content)
            changes_count += 1
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {old_pattern[:50]}...")

    if changes_count == 0:
        print("‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return False

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    panel_file.write_text(content, encoding="utf-8")
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {changes_count} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ {panel_file}")

    return True


def verify_checkboxes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç toggled()"""
    panel_file = Path("src/ui/panels/panel_graphics.py")
    content = panel_file.read_text(encoding="utf-8")

    print("\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• CHECKBOXES:")
    print("=" * 70)

    # –ò—â–µ–º –≤—Å–µ .clicked.connect –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
    clicked_pattern = r"(\w+)\.clicked\.connect"
    clicked_matches = re.findall(clicked_pattern, content)

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —á–µ–∫–±–æ–∫—Å—ã (–∏—Å–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏)
    checkbox_vars = []
    for var in clicked_matches:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è - —ç—Ç–æ —á–µ–∫–±–æ–∫—Å (—Å–æ–¥–µ—Ä–∂–∏—Ç check, enabled, –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∞ –∫–∞–∫ QCheckBox)
        if any(
            keyword in var.lower()
            for keyword in ["check", "enabled", "toggle", "shadow", "bind"]
        ):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ auto_rotate (—É –Ω–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
            if var != "auto_rotate":
                checkbox_vars.append(var)

    if checkbox_vars:
        print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —á–µ–∫–±–æ–∫—Å—ã —Å .clicked.connect:")
        for var in set(checkbox_vars):
            print(f"   ‚Ä¢ {var}")
        print(f"\n–í—Å–µ–≥–æ: {len(set(checkbox_vars))} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤")
        return False
    else:
        print("‚úÖ –í—Å–µ —á–µ–∫–±–æ–∫—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç .toggled.connect")
        print(
            "‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: auto_rotate (–∏–º–µ–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"
        )
        return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–°–¢–ê–í–®–ò–•–°–Ø CHECKBOXES")
    print("=" * 70)

    panel_file = Path("src/ui/panels/panel_graphics.py")

    if not panel_file.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {panel_file}")
        return False

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    fixed = fix_all_checkboxes()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    all_ok = verify_checkboxes()

    print("\n" + "=" * 70)
    if all_ok:
        print("‚úÖ –í–°–ï CHECKBOXES –ò–°–ü–†–ê–í–õ–ï–ù–´!")
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï CHECKBOXES –ï–©–ï –¢–†–ï–ë–£–Æ–¢ –í–ù–ò–ú–ê–ù–ò–Ø")
    print("=" * 70)

    print("\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: py app.py")
    print("  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –í–°–ï–• —á–µ–∫–±–æ–∫—Å–æ–≤")
    print("  3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –æ–Ω–∏ –≤–∫–ª—é—á–∞—é—Ç—Å—è –ò –í–´–ö–õ–Æ–ß–ê–Æ–¢–°–Ø –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    return all_ok


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
