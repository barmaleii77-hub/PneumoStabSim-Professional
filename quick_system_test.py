#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
PneumoStabSim Professional - –ë—ã—Å—Ç—Ä—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–µ—Å—Ç
Quick System Test - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∑–∞–ø—É—Å–∫—É
"""

import sys
import time
from pathlib import Path


def test_app_launch():
    """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    print("üöÄ Testing Application Launch...")

    try:
        # –ó–∞–ø—É—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥)
        import subprocess

        start_time = time.time()

        # –ó–∞–ø—É—Å–∫ —Å —Ç–µ—Å—Ç–æ–≤—ã–º —Ä–µ–∂–∏–º–æ–º
        result = subprocess.run(
            [sys.executable, "app.py", "--test-mode"],
            capture_output=True,
            text=True,
            timeout=10,  # –ú–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
        )

        duration = time.time() - start_time

        print(f"‚è±Ô∏è Launch duration: {duration:.2f}s")
        print(f"üìä Return code: {result.returncode}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≤–æ–¥–∞
        if "APPLICATION READY" in result.stdout:
            print("‚úÖ Application launched successfully")
            return True
        elif result.returncode == 0:
            print("‚úÖ Application completed without errors")
            return True
        else:
            print("‚ùå Application failed to launch properly")
            print("STDOUT:", result.stdout[-500:] if result.stdout else "None")
            print("STDERR:", result.stderr[-500:] if result.stderr else "None")
            return False

    except subprocess.TimeoutExpired:
        print("‚ö†Ô∏è Application launch timeout (but may be working)")
        return True  # –¢–∞–π–º–∞—É—Ç –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    except Exception as e:
        print(f"‚ùå Launch test failed: {e}")
        return False


def quick_system_check():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print("=" * 60)
    print("‚ö° PNEUMOSTABSIM PROFESSIONAL - QUICK SYSTEM CHECK")
    print("=" * 60)

    checks = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    version = sys.version_info
    if version >= (3, 8):
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")
        checks.append(True)
    else:
        print(
            f"‚ùå Python {version.major}.{version.minor}.{version.micro} (—Ç—Ä–µ–±—É–µ—Ç—Å—è 3.8+)"
        )
        checks.append(False)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PySide6
    try:
        import PySide6

        print("‚úÖ PySide6 available")
        checks.append(True)
    except ImportError:
        print("‚ùå PySide6 not found")
        checks.append(False)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    key_files = [
        "app.py",
        "assets/qml/main_optimized.qml",
        "assets/qml/components/IblProbeLoader.qml",
        "src/ui/main_window.py",
    ]

    for file_path in key_files:
        if Path(file_path).exists():
            print(f"‚úÖ {file_path}")
            checks.append(True)
        else:
            print(f"‚ùå {file_path} missing")
            checks.append(False)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HDR —Ñ–∞–π–ª–∞
    hdr_path = Path("assets/hdr/studio.hdr")
    if hdr_path.exists():
        size_mb = hdr_path.stat().st_size / (1024 * 1024)
        print(f"‚úÖ HDR file ({size_mb:.1f}MB)")
        checks.append(True)
    else:
        print("‚ö†Ô∏è HDR file missing (IBL will not work)")
        checks.append(True)  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    success_rate = sum(checks) / len(checks) * 100

    print("\n" + "=" * 60)
    if success_rate >= 90:
        print("üéâ SYSTEM STATUS: READY")
        print("‚úÖ All critical components available")
        return True
    elif success_rate >= 70:
        print("‚ö†Ô∏è SYSTEM STATUS: PARTIALLY READY")
        print("üîß Some components missing but should work")
        return True
    else:
        print("‚ùå SYSTEM STATUS: NOT READY")
        print("üõ†Ô∏è Critical components missing")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞"""

    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    system_ok = quick_system_check()

    if not system_ok:
        print("\nüõë System check failed, skipping launch test")
        return 1

    # –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    print("\n" + "=" * 60)
    launch_ok = test_app_launch()

    print("\n" + "=" * 60)
    if system_ok and launch_ok:
        print("üèÜ OVERALL STATUS: PRODUCTION READY")
        print("üöÄ PneumoStabSim Professional ready to launch!")
        print("\nüí° To launch normally: py app.py")
        return 0
    else:
        print("üîß OVERALL STATUS: NEEDS ATTENTION")
        print("‚ö†Ô∏è Some issues found, check output above")
        return 1


if __name__ == "__main__":
    sys.exit(main())
