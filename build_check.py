#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–±–æ—Ä–∫–∏ PneumoStabSim
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
"""

import sys
import os
import subprocess
from pathlib import Path
import traceback

def print_header(title):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
    print("\n" + "="*60)
    print(f" {title}")
    print("="*60)

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print_header("–ü–†–û–í–ï–†–ö–ê –í–ï–†–°–ò–ò PYTHON")
    
    version = sys.version_info
    print(f"Python –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
    
    if version < (3, 9):
        print("‚ùå –û–®–ò–ë–ö–ê: –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.9 –∏–ª–∏ –≤—ã—à–µ")
        return False
    elif version >= (3, 13):
        print("‚úÖ Python –≤–µ—Ä—Å–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (3.13+)")
    else:
        print("‚úÖ Python –≤–µ—Ä—Å–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
    
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print_header("–ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    
    required_packages = [
        ('numpy', '2.3.3'),
        ('scipy', '1.16.2'),
        ('PySide6', '6.9.3'),
        ('matplotlib', '3.10.6'),
        ('PyOpenGL', '3.1.10')
    ]
    
    failed = []
    
    for package_name, expected_version in required_packages:
        try:
            if package_name == 'PySide6':
                import PySide6
                version = PySide6.__version__
            elif package_name == 'numpy':
                import numpy
                version = numpy.__version__
            elif package_name == 'scipy':
                import scipy
                version = scipy.__version__
            elif package_name == 'matplotlib':
                import matplotlib
                version = matplotlib.__version__
            elif package_name == 'PyOpenGL':
                import OpenGL
                version = OpenGL.__version__
            
            print(f"‚úÖ {package_name}: {version} (–æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_version})")
            
        except ImportError as e:
            print(f"‚ùå {package_name}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù - {e}")
            failed.append(package_name)
        except Exception as e:
            print(f"‚ö†Ô∏è {package_name}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - {e}")
    
    if failed:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(failed)}")
        print("–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("pip install -r requirements.txt")
        return False
    
    print("\n‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def check_project_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    print_header("–ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê")
    
    critical_files = [
        "app.py",
        "pyproject.toml", 
        "requirements.txt",
        "src/__init__.py",
        "src/ui/__init__.py",
        "src/ui/main_window.py",
        "src/runtime/__init__.py",
        "src/runtime/sim_loop.py",
        "src/runtime/state.py",
        "src/runtime/sync.py",
        "src/common/__init__.py",
        "src/common/logging_setup.py",
        "src/physics/__init__.py",
        "src/physics/odes.py",
        "src/physics/integrator.py",
        "assets/qml/main.qml"
    ]
    
    missing = []
    
    for file_path in critical_files:
        path = Path(file_path)
        if path.exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path}: –û–¢–°–£–¢–°–¢–í–£–ï–¢")
            missing.append(file_path)
    
    if missing:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: {len(missing)}")
        return False
    
    print(f"\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ ({len(critical_files)} —Ñ–∞–π–ª–æ–≤)")
    return True

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π"""
    print_header("–ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í")
    
    import_tests = [
        ("src.common", "init_logging, log_ui_event"),
        ("src.ui.main_window", "MainWindow"),
        ("src.runtime.sim_loop", "SimulationManager, PhysicsWorker"),
        ("src.runtime.state", "StateSnapshot, StateBus"),
        ("src.runtime.sync", "LatestOnlyQueue"),
        ("src.physics.odes", "RigidBody3DOF, f_rhs"),
        ("src.physics.integrator", "step_dynamics"),
    ]
    
    failed = []
    
    for module_name, components in import_tests:
        try:
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
            module = __import__(module_name, fromlist=[components])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            for component in components.split(", "):
                if hasattr(module, component):
                    continue
                else:
                    raise AttributeError(f"–ù–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ '{component}'")
            
            print(f"‚úÖ {module_name}: {components}")
            
        except ImportError as e:
            print(f"‚ùå {module_name}: –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ - {e}")
            failed.append(module_name)
        except AttributeError as e:
            print(f"‚ùå {module_name}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç - {e}")
            failed.append(module_name)
        except Exception as e:
            print(f"‚ö†Ô∏è {module_name}: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ - {e}")
    
    if failed:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: –ü—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥—É–ª—è–º–∏: {len(failed)}")
        return False
    
    print(f"\n‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ ({len(import_tests)} –ø—Ä–æ–≤–µ—Ä–æ–∫)")
    return True

def check_compilation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    print_header("–ü–†–û–í–ï–†–ö–ê –ö–û–ú–ü–ò–õ–Ø–¶–ò–ò")
    
    compile_files = [
        "app.py",
        "src/ui/main_window.py", 
        "src/runtime/sim_loop.py",
        "src/common/logging_setup.py"
    ]
    
    failed = []
    
    for file_path in compile_files:
        try:
            import py_compile
            py_compile.compile(file_path, doraise=True)
            print(f"‚úÖ {file_path}: –ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")
        except py_compile.PyCompileError as e:
            print(f"‚ùå {file_path}: –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ - {e}")
            failed.append(file_path)
        except Exception as e:
            print(f"‚ö†Ô∏è {file_path}: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ - {e}")
    
    if failed:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∫–æ–º–ø–∏–ª–∏—Ä—É—é—Ç—Å—è —Ñ–∞–π–ª—ã: {len(failed)}")
        return False
    
    print(f"\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∫–æ–º–ø–∏–ª–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ ({len(compile_files)} —Ñ–∞–π–ª–æ–≤)")
    return True

def check_qml_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ QML —Ñ–∞–π–ª–æ–≤"""
    print_header("–ü–†–û–í–ï–†–ö–ê QML –§–ê–ô–õ–û–í")
    
    qml_files = [
        "assets/qml/main.qml",
    ]
    
    missing = []
    
    for file_path in qml_files:
        path = Path(file_path)
        if path.exists():
            try:
                with open(path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                if "import QtQuick" in content and "import QtQuick3D" in content:
                    print(f"‚úÖ {file_path}: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π QML —Ñ–∞–π–ª")
                else:
                    print(f"‚ö†Ô∏è {file_path}: –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π QML")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è {file_path}: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è - {e}")
        else:
            print(f"‚ùå {file_path}: –û–¢–°–£–¢–°–¢–í–£–ï–¢")
            missing.append(file_path)
    
    if missing:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç QML —Ñ–∞–π–ª—ã: {len(missing)}")
        return False
    
    print(f"\n‚úÖ QML —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã ({len(qml_files)} —Ñ–∞–π–ª–æ–≤)")
    return True

def run_minimal_test():
    """–ó–∞–ø—É—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print_header("–ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ó–ê–ü–£–°–ö–ê")
    
    try:
        # –°–æ–∑–¥–∞—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –±–µ–∑ GUI
        test_code = '''
import sys
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Qt
os.environ.setdefault("QSG_RHI_BACKEND", "d3d11")

from PySide6.QtWidgets import QApplication

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –ø–æ–∫–∞–∑–∞ –æ–∫–æ–Ω
app = QApplication.instance() or QApplication(sys.argv)

# –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from src.ui.main_window import MainWindow
from src.runtime.sim_loop import SimulationManager
from src.common import init_logging

print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
print("‚úÖ Qt Application —Å–æ–∑–¥–∞–Ω")

# –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if hasattr(app, 'quit'):
    app.quit()

print("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
'''
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –≤ —Ç–æ–º –∂–µ –ø—Ä–æ—Ü–µ—Å—Å–µ
        exec(test_code)
        
        print("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        print("–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:")
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîß –ü–†–û–í–ï–†–ö–ê –°–ë–û–†–ö–ò PNEUMOSTABSIM")
    print("–í–µ—Ä—Å–∏—è: 2.0.0 (Russian UI + Qt Quick 3D)")
    
    checks = [
        ("–í–µ—Ä—Å–∏—è Python", check_python_version),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_dependencies), 
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞", check_project_structure),
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", check_imports),
        ("–ö–æ–º–ø–∏–ª—è—Ü–∏—è", check_compilation),
        ("QML —Ñ–∞–π–ª—ã", check_qml_files),
        ("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç", run_minimal_test),
    ]
    
    passed = 0
    failed = 0
    
    for check_name, check_func in checks:
        try:
            if check_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ '{check_name}': {e}")
            traceback.print_exc()
            failed += 1
    
    print_header("–ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {passed}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {failed}")
    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(checks)}")
    
    if failed == 0:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("  python app.py                    # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫") 
        print("  python app.py --test-mode        # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (5 —Å–µ–∫)")
        print("  python app.py --no-block         # –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º")
        return True
    else:
        print(f"\nüí• –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´: {failed}")
        print("‚ùå –ü—Ä–æ–µ–∫—Ç —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
