#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ headless-–æ–∫—Ä—É–∂–µ–Ω–∏–∏."""

from __future__ import annotations

import json
import os
import shutil
import subprocess
import sys
from pathlib import Path
from typing import Callable


def _configure_qt_environment() -> None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ headless-–∑–∞–ø—É—Å–∫–∞."""

    platform = os.environ.get("QT_QPA_PLATFORM", "").lower()
    is_headless = platform == "offscreen" or (
        not platform and not os.environ.get("DISPLAY")
    )

    if is_headless:
        os.environ.setdefault("QT_QPA_PLATFORM", "offscreen")
        os.environ.setdefault("QT_OPENGL", "software")
        os.environ.setdefault("QT_QUICK_BACKEND", "software")
        os.environ.setdefault("QSG_RHI_BACKEND", "software")
    elif sys.platform.startswith("win"):
        os.environ.setdefault("QSG_RHI_BACKEND", "d3d11")
    else:
        os.environ.setdefault("QSG_RHI_BACKEND", "software")

    os.environ.setdefault("QSG_INFO", "1")
    os.environ.setdefault("QT_LOGGING_RULES", "js.debug=true;qt.qml.debug=true")


def _run_make_verify() -> None:
    if shutil.which("make"):
        print("üö¶ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: make verify (smoke + integration)")
        verify_result = subprocess.run(["make", "verify"], check=False)
        print(f"‚ÑπÔ∏è make verify –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: {verify_result.returncode}")
    else:
        print(
            "‚ÑπÔ∏è make –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: python -m pytest -m 'smoke or integration'"
        )


def _validate_graphics_settings(settings_path: Path) -> None:
    from src.ui.environment_schema import (
        EnvironmentValidationError,
        validate_animation_settings,
        validate_environment_settings,
        validate_scene_settings,
    )

    payload = json.loads(settings_path.read_text(encoding="utf-8"))
    graphics = payload.get("current", {}).get("graphics")
    if not isinstance(graphics, dict):
        raise EnvironmentValidationError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è current.graphics")

    validators: dict[str, Callable[[dict], dict]] = {
        "environment": validate_environment_settings,
        "scene": validate_scene_settings,
        "animation": validate_animation_settings,
    }

    for key, validator in validators.items():
        section = graphics.get(key)
        if section is None:
            raise EnvironmentValidationError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è graphics.{key}")
        validator(section)

    print("‚úÖ –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º schema")


def _run_headless_validations() -> int:
    from tools import validate_settings

    settings_path = Path("config/app_settings.json")
    print("üõ°Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º headless-–ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    result = validate_settings.main(["--quiet"])
    if result != 0:
        print("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ config/app_settings.json –ø—Ä–æ—Ç–∏–≤ schema")
        return result

    try:
        _validate_graphics_settings(settings_path)
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: {exc}")
        return 1

    qml_file = Path("assets/qml/main.qml")
    if not qml_file.exists():
        print(f"‚ùå QML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {qml_file}")
        return 1

    linter = os.environ.get("QML_LINTER") or shutil.which("qmllint")
    if not linter:
        linter = shutil.which("pyside6-qmllint")

    if linter:
        print(f"üîç –ó–∞–ø—É—Å–∫–∞–µ–º {linter} –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ main.qml")
        lint_result = subprocess.run([linter, str(qml_file)], check=False)
        if lint_result.returncode != 0:
            print(f"‚ùå {linter} –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–æ–±–ª–µ–º—ã —Å main.qml")
            return lint_result.returncode
        print("‚úÖ main.qml —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª qmllint")
    else:
        print("‚ÑπÔ∏è qmllint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É QML")

    return 0


def _run_gui_smoke() -> int:
    from PySide6.QtCore import QTimer
    from PySide6.QtWidgets import QApplication

    from src.ui.main_window import MainWindow

    print("üß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    app = QApplication(sys.argv)
    print("‚úÖ QApplication —Å–æ–∑–¥–∞–Ω")

    window = MainWindow(use_qml_3d=True)
    print("‚úÖ MainWindow —Å–æ–∑–¥–∞–Ω")

    window.show()
    print("‚úÖ MainWindow –ø–æ–∫–∞–∑–∞–Ω")

    timer = QTimer()
    timer.setSingleShot(True)
    timer.timeout.connect(app.quit)
    timer.start(3000)

    print("üîÑ –ó–∞–ø—É—Å–∫ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã...")
    result = app.exec()
    print(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –∫–æ–¥–æ–º: {result}")

    _run_make_verify()
    return 0


def main() -> int:
    _configure_qt_environment()

    try:
        return _run_gui_smoke()
    except ImportError as exc:
        print(f"‚ö†Ô∏è PySide6 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {exc}")
        return _run_headless_validations()
    except Exception as exc:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ GUI: {exc}")
        fallback_result = _run_headless_validations()
        return 1 if fallback_result == 0 else fallback_result


if __name__ == "__main__":
    sys.exit(main())
