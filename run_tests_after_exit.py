"""Post-Exit Test Runner utilities.

The original version of this script shipped with broken indentation which made the
module unparsable.  The reimplementation below keeps the same high level
behaviour (collecting helper scripts, running them sequentially and saving a
report) while restoring valid Python syntax so the tooling can import it again.
"""

from __future__ import annotations

import os
import shutil
import subprocess
import sys
import time
from functools import lru_cache
from pathlib import Path
from typing import Dict, List, Optional

QT_ENV_DEFAULTS: Dict[str, str] = {
    "QT_QPA_PLATFORM": "offscreen",
    "QT_QUICK_BACKEND": "software",
    "QT_PLUGIN_PATH": "",
    "QML2_IMPORT_PATH": "",
}


@lru_cache(maxsize=1)
def _detect_qt_environment() -> Dict[str, str]:
    """Return environment tweaks that make headless Qt launches succeed."""

    environment = dict(QT_ENV_DEFAULTS)

    try:  # pragma: no cover - PySide might be missing in CI
        from PySide6.QtCore import QLibraryInfo, LibraryLocation  # type: ignore
    except Exception as exc:  # pragma: no cover - diagnostic print only
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç–∏ Qt –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {exc}")
        return environment

    plugin_path = QLibraryInfo.path(LibraryLocation.Plugins)
    if plugin_path:
        environment["QT_PLUGIN_PATH"] = plugin_path

    qml_import_path = QLibraryInfo.path(LibraryLocation.QmlImports)
    if qml_import_path:
        environment["QML2_IMPORT_PATH"] = qml_import_path

    return environment


class PostExitTestRunner:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""

    def __init__(self) -> None:
        self.project_root = Path(__file__).resolve().parent
        self.test_results: List[Dict[str, object]] = []
        self.test_environment = os.environ.copy()
        self.test_environment.update(_detect_qt_environment())
        self.logs_dir = self.project_root / "logs"
        self.logs_dir.mkdir(parents=True, exist_ok=True)

        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Qt –¥–ª—è —Ç–µ—Å—Ç–æ–≤:")
        for key, value in _detect_qt_environment().items():
            print(f" ‚Ä¢ {key}={value}")

        print(f"üóÇÔ∏è –õ–æ–≥–∏ —Ç–µ—Å—Ç–æ–≤ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤: {self.logs_dir}")

    # ------------------------------------------------------------------
    # Discovery helpers
    # ------------------------------------------------------------------
    def discover_test_scripts(self) -> List[Path]:
        """–ù–∞–π—Ç–∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≥–Ω–∞—Ç—å."""

        test_patterns = ["test_*.py", "*_test.py", "analyze_*.py", "diagnose_*.py"]
        exclude_dirs = {
            "venv",
            ".venv",
            "__pycache__",
            ".git",
            "build",
            "dist",
            ".pytest_cache",
            "logs",
        }

        discovered: List[Path] = []
        for pattern in test_patterns:
            for script in self.project_root.rglob(pattern):
                if any(part in exclude_dirs for part in script.parts):
                    continue
                if ("tests" in script.parts and "smoke" in script.parts) or (
                    "tests" in script.parts and "integration" in script.parts
                ):
                    # –≠—Ç–∏ —Ç–µ—Å—Ç—ã –ø–æ–∫—Ä—ã–≤–∞—é—Ç—Å—è make verify.
                    continue
                if script.name == Path(__file__).name:
                    continue

                resolved = script.resolve()
                if not resolved.is_file():
                    continue
                try:
                    resolved.relative_to(self.project_root.resolve())
                except ValueError:
                    print(
                        f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –≤–Ω–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {resolved}"
                    )
                    continue

                discovered.append(resolved)

        return sorted(discovered)

    # ------------------------------------------------------------------
    # Execution helpers
    # ------------------------------------------------------------------
    def run_verify_suite(self) -> Optional[Dict[str, object]]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å smoke/integration –Ω–∞–±–æ—Ä (make verify)."""

        log_file = self.logs_dir / "post_exit_verify.log"

        if shutil.which("make"):
            command: List[str] = ["make", "verify"]
        else:
            command = [
                sys.executable,
                "-m",
                "pytest",
                "-m",
                "smoke or integration",
                "-vv",
                "--color=yes",
                f"--log-file={log_file}",
                "--log-file-level=INFO",
            ]

        print("=" * 60)
        print("üö¶ –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø SMOKE/INTEGRATION")
        print("=" * 60)
        print(f"üìÅ –ö–æ–º–∞–Ω–¥–∞: {' '.join(command)}")

        try:
            result = subprocess.run(  # noqa: S603
                command,
                capture_output=True,
                text=True,
                timeout=600,
                encoding="utf-8",
                errors="replace",
                env=self.test_environment,
                check=False,
            )
        except Exception as exc:  # pragma: no cover - diagnostic path only
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é: {exc}")
            return None

        log_file.write_text(result.stdout + "\n" + result.stderr, encoding="utf-8")

        success = result.returncode == 0
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} make verify –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º {result.returncode}")

        verification_result: Dict[str, object] = {
            "name": "make verify",
            "path": "make verify",
            "success": success,
            "returncode": result.returncode,
            "elapsed": 0.0,
            "stdout": result.stdout,
            "stderr": result.stderr,
        }
        self.test_results.append(verification_result)
        return verification_result

    def run_test_script(self, script_path: Path, timeout: int = 30) -> Dict[str, object]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""

        script_path = script_path.resolve()

        try:
            script_path.relative_to(self.project_root.resolve())
        except ValueError:
            raise ValueError(
                f"–°–∫—Ä–∏–ø—Ç {script_path} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω"
            ) from None

        test_name = script_path.stem
        print(f"\n{'=' * 60}")
        print(f"üß™ –ó–ê–ü–£–°–ö: {test_name}")
        print("=" * 60)

        try:
            start_time = time.perf_counter()
            result = subprocess.run(  # noqa: S603
                [sys.executable, str(script_path)],
                capture_output=True,
                text=True,
                timeout=timeout,
                encoding="utf-8",
                errors="replace",
                env=self.test_environment,
                check=False,
            )
            elapsed = time.perf_counter() - start_time
            success = result.returncode == 0
            test_result: Dict[str, object] = {
                "name": test_name,
                "path": str(script_path),
                "success": success,
                "returncode": result.returncode,
                "elapsed": elapsed,
                "stdout": result.stdout,
                "stderr": result.stderr,
            }
        except subprocess.TimeoutExpired as exc:
            test_result = {
                "name": test_name,
                "path": str(script_path),
                "success": False,
                "returncode": -1,
                "elapsed": float(timeout),
                "stdout": "",
                "stderr": f"Timeout: {exc}",
            }
        except Exception as exc:  # pragma: no cover - protective path
            test_result = {
                "name": test_name,
                "path": str(script_path),
                "success": False,
                "returncode": -2,
                "elapsed": 0.0,
                "stdout": "",
                "stderr": str(exc),
            }

        return test_result

    def run_all_tests(self, scripts: Optional[List[Path]] = None) -> Dict[str, object]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–±–æ—Ä —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ –≤–µ—Ä–Ω—É—Ç—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""

        if scripts is None:
            scripts = self.discover_test_scripts()

        print("=" * 60)
        print("üöÄ POST-EXIT TEST RUNNER")
        print("=" * 60)
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {len(scripts)}")

        if not scripts:
            print("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return {"success": False, "tests": []}

        for script in scripts:
            result = self.run_test_script(script)
            self.test_results.append(result)

        total = len(self.test_results)
        passed = sum(1 for r in self.test_results if r.get("success"))
        failed = total - passed

        print(f"\n{'=' * 60}")
        print("üìä –°–í–û–î–ö–ê –¢–ï–°–¢–û–í")
        print("=" * 60)
        print(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {failed}")

        if failed > 0:
            print("\n‚ùå –¢–ï–°–¢–´ –° –û–®–ò–ë–ö–ê–ú–ò:")
            for result in self.test_results:
                if not result.get("success"):
                    print(f" ‚Ä¢ {result['name']} (–∫–æ–¥: {result['returncode']})")
                    stderr = str(result.get("stderr", ""))
                    if stderr:
                        print(f"   ‚îî‚îÄ {stderr[:100]}")

        summary: Dict[str, object] = {
            "success": failed == 0,
            "total": total,
            "passed": passed,
            "failed": failed,
            "tests": list(self.test_results),
        }
        return summary

    def save_report(self, output_file: Optional[Path] = None) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–æ–≤."""

        if output_file is None:
            output_file = self.project_root / "test_report.md"

        lines: List[str] = [
            "# Post-Exit Test Report",
            "",
            f"**–î–∞—Ç–∞:** {time.strftime('%Y-%m-%d %H:%M:%S')}",
            "",
            "## –°–≤–æ–¥–∫–∞",
        ]

        for result in self.test_results:
            status = "‚úÖ" if result.get("success") else "‚ùå"
            lines.extend(
                [
                    f"### {status} {result['name']}",
                    "",
                    f"- –ü—É—Ç—å: {result['path']}",
                    f"- –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result['returncode']}",
                    f"- –í—Ä–µ–º—è: {float(result['elapsed']):.2f} —Å",
                    "",
                    "**STDOUT:**",
                    "```",
                    str(result.get("stdout", ""))[:500],
                    "```",
                    "",
                ]
            )
            stderr = str(result.get("stderr", ""))
            if stderr:
                lines.extend(
                    [
                        "**STDERR:**",
                        "```",
                        stderr[:500],
                        "```",
                        "",
                    ]
                )

        output_file.write_text("\n".join(lines), encoding="utf-8")
        print(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")


def main() -> int:
    """Entry point for manual execution."""

    print("\n" + "=" * 60)
    print("üß™ POST-EXIT TEST RUNNER")
    print("=" * 60)
    print("–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –ü–û–°–õ–ï –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("=" * 60 + "\n")

    runner = PostExitTestRunner()
    runner.run_verify_suite()

    test_scripts = runner.discover_test_scripts()
    if not test_scripts:
        print("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'test_' –∏–ª–∏ 'analyze_'")
        return 1

    print(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã ({len(test_scripts)}):")
    for index, script in enumerate(test_scripts, 1):
        rel_path = script.relative_to(Path.cwd())
        print(f" {index}. {rel_path}")

    print()

    summary = runner.run_all_tests(test_scripts)
    runner.save_report()

    return 0 if summary.get("success") else 1


if __name__ == "__main__":
    raise SystemExit(main())
