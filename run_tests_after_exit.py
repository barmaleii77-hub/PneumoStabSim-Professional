#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Post-Exit Test Runner
–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –ü–û–°–õ–ï –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

from __future__ import annotations

import os
import shutil
import subprocess
import sys
import time
from functools import lru_cache
from pathlib import Path
from typing import Dict, List, Optional


QT_ENV_DEFAULTS: Dict[str, str] = {
 "QT_QPA_PLATFORM": "offscreen",
 "QT_QUICK_BACKEND": "software",
 "QT_PLUGIN_PATH": "",
 "QML2_IMPORT_PATH": "",
}


@lru_cache(maxsize=1)
def _detect_qt_environment() -> Dict[str, str]:
 """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã Qt."""

 environment = dict(QT_ENV_DEFAULTS)

 try:
 from PySide6.QtCore import QLibraryInfo, LibraryLocation # type: ignore
 except Exception as exc: # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥
 print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç–∏ Qt –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {exc}")
 return environment

 plugin_path = QLibraryInfo.path(LibraryLocation.Plugins)
 if plugin_path:
 environment["QT_PLUGIN_PATH"] = plugin_path

 qml_import_path = QLibraryInfo.path(LibraryLocation.QmlImports)
 if qml_import_path:
 environment["QML2_IMPORT_PATH"] = qml_import_path

 return environment


class PostExitTestRunner:
 """–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

 def __init__(self) -> None:
 self.project_root = Path(__file__).parent
 self.test_results: List[Dict] = []
 self.test_environment = os.environ.copy()
 self.test_environment.update(_detect_qt_environment())
 self.logs_dir = self.project_root / "logs"
 self.logs_dir.mkdir(parents=True, exist_ok=True)

 print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Qt –¥–ª—è —Ç–µ—Å—Ç–æ–≤:")
 for key, value in _detect_qt_environment().items():
 print(f" ‚Ä¢ {key}={value}")

 print(f"üóÇÔ∏è –õ–æ–≥–∏ —Ç–µ—Å—Ç–æ–≤ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤: {self.logs_dir}")

 def run_verify_suite(self) -> Optional[Dict]:
 """–ó–∞–ø—É—Å–∫–∞–µ—Ç make verify –∏–ª–∏ –ø—Ä—è–º–æ–π pytest –¥–ª—è smoke/integration."""

 log_file = self.logs_dir / "post_exit_verify.log"
 command: List[str]

 if shutil.which("make"):
 command = ["make", "verify"]
 else:
 command = [
 sys.executable,
 "-m",
 "pytest",
 "-m",
 "smoke or integration",
 "-vv",
 "--color=yes",
 f"--log-file={log_file}",
 "--log-file-level=INFO",
 ]

 print("=" *60)
 print("üö¶ –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø SMOKE/INTEGRATION")
 print("=" *60)
 print(f"üìÅ –ö–æ–º–∞–Ω–¥–∞: {' '.join(command)}")

 try:
 result = subprocess.run(
 command,
 capture_output=True,
 text=True,
 timeout=600,
 encoding="utf-8",
 errors="replace",
 env=self.test_environment,
 )
 except Exception as exc: # pragma: no cover - diagnostic path
 print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é: {exc}")
 return None

 log_file.write_text(result.stdout + "\n" + result.stderr, encoding="utf-8")

 success = result.returncode ==0
 status = "‚úÖ" if success else "‚ùå"
 print(f"{status} make verify –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º {result.returncode}")

 verification_result = {
 "name": "make verify",
 "path": "make verify",
 "success": success,
 "returncode": result.returncode,
 "elapsed":0.0,
 "stdout": result.stdout,
 "stderr": result.stderr,
 }

 self.test_results.append(verification_result)
 return verification_result

 def run_test_script(self, script_path: Path, timeout: int =30) -> Dict:
 """
 –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç

 Args:
 script_path: –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É
 timeout: –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–µ–∫)

 Returns:
 –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∞
 """
 test_name = script_path.stem

 print(f"\n{'=' *60}")
 print(f"üß™ –ó–ê–ü–£–°–ö: {test_name}")
 print(f"{'=' *60}")

 try:
 start_time = time.perf_counter()

 result = subprocess.run(
 [sys.executable, str(script_path)],
 capture_output=True,
 text=True,
 timeout=timeout,
 encoding="utf-8",
 errors="replace",
 env=self.test_environment,
 )

 elapsed = time.perf_counter() - start_time

 # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –∫–æ–¥—É –≤–æ–∑–≤—Ä–∞—Ç–∞
 success = result.returncode ==0

 test_result = {
 "name": test_name,
 "path": str(script_path),
 "success": success,
 "returncode": result.returncode,
 "elapsed": elapsed,
 "stdout": result.stdout,
 "stderr": result.stderr,
 }
 except subprocess.TimeoutExpired as exc:
 test_result = {
 "name": test_name,
 "path": str(script_path),
 "success": False,
 "returncode": -1,
 "elapsed": timeout,
 "stdout": "",
 "stderr": f"Timeout: {exc}",
 }
 except Exception as exc:
 test_result = {
 "name": test_name,
 "path": str(script_path),
 "success": False,
 "returncode": -2,
 "elapsed":0.0,
 "stdout": "",
 "stderr": str(exc),
 }

 return test_result

 def discover_test_scripts(self) -> List[Path]:
 """
 –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞

 Returns:
 –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ç–µ—Å—Ç–æ–≤—ã–º —Å–∫—Ä–∏–ø—Ç–∞–º
 """
 test_patterns = ["test_*.py", "*_test.py", "analyze_*.py", "diagnose_*.py"]

 test_scripts: List[Path] = []

 # –ò—Å–∫–ª—é—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 exclude_dirs = {
 "venv",
 ".venv",
 "__pycache__",
 ".git",
 "build",
 "dist",
 ".pytest_cache",
 "logs",
 }

 for pattern in test_patterns:
 for script in self.project_root.rglob(pattern):
 # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –≤ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
 if any(excluded in script.parts for excluded in exclude_dirs):
 continue

 # –¢–µ—Å—Ç—ã Pytest —Å GUI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ make verify
 if ("tests" in script.parts and "smoke" in script.parts) or (
 "tests" in script.parts and "integration" in script.parts
 ):
 continue

 # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ñ–∞–π–ª
 if script.name == Path(__file__).name:
 continue

 test_scripts.append(script)

 return sorted(test_scripts)

 def run_all_tests(self, scripts: Optional[List[Path]] = None) -> Dict:
 """
 –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã

 Args:
 scripts: –°–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ (None = –∞–≤—Ç–æ–ø–æ–∏—Å–∫)

 Returns:
 –°–≤–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 """
 if scripts is None:
 scripts = self.discover_test_scripts()

 print("=" *60)
 print("üöÄ POST-EXIT TEST RUNNER")
 print("=" *60)
 print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {len(scripts)}")

 if not scripts:
 print("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
 return {"success": False, "tests": []}

 # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 for script in scripts:
 result = self.run_test_script(script)
 self.test_results.append(result)

 # –°–≤–æ–¥–∫–∞
 total = len(self.test_results)
 passed = sum(1 for r in self.test_results if r["success"])
 failed = total - passed

 print(f"\n{'=' *60}")
 print("üìä –°–í–û–î–ö–ê –¢–ï–°–¢–û–í")
 print(f"{'=' *60}")
 print(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
 print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}")
 print(f"‚ùå –û—à–∏–±–æ–∫: {failed}")

 # –î–µ—Ç–∞–ª–∏ –ø–æ –æ—à–∏–±–∫–∞–º
 if failed >0:
 print("\n‚ùå –¢–ï–°–¢–´ –° –û–®–ò–ë–ö–ê–ú–ò:")
 for result in self.test_results:
 if not result["success"]:
 print(f" ‚Ä¢ {result['name']} (–∫–æ–¥: {result['returncode']})")
 if result["stderr"]:
 print(f" ‚îî‚îÄ {result['stderr'][:100]}")

 print(f"\n{'=' *60}")

 return {
 "success": failed ==0,
 "total": total,
 "passed": passed,
 "failed": failed,
 "tests": self.test_results,
 }

 def save_report(self, output_file: Optional[Path] = None) -> None:
 """
 –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∞—Ö

 Args:
 output_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞
 """
 if output_file is None:
 output_file = self.project_root / "test_report.md"

 report_lines = [
 "# Post-Exit Test Report",
 "",
 f"**–î–∞—Ç–∞:** {time.strftime('%Y-%m-%d %H:%M:%S')}",
 "",
 "## –°–≤–æ–¥–∫–∞",
 ]

 for result in self.test_results:
 status = "‚úÖ" if result["success"] else "‚ùå"
 report_lines.extend(
 [
 f"### {status} {result['name']}",
 "",
 f"- –ü—É—Ç—å: {result['path']}",
 f"- –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result['returncode']}",
 f"- –í—Ä–µ–º—è: {result['elapsed']:.2f} —Å",
 "",
 "**STDOUT:**",
 "```",
 result["stdout"][:500], # –ü–µ—Ä–≤—ã–µ500 —Å–∏–º–≤–æ–ª–æ–≤
 "```",
 "",
 ]
 )
 if result["stderr"]:
 report_lines.extend(
 [
 "**STDERR:**",
 "```",
 result["stderr"][:500], # –ü–µ—Ä–≤—ã–µ500 —Å–∏–º–≤–æ–ª–æ–≤
 "```",
 "",
 ]
 )

 output_file.write_text("\n".join(report_lines), encoding="utf-8")
 print(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")


def main() -> int:
 """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
 print("\n" + "=" *60)
 print("üß™ POST-EXIT TEST RUNNER")
 print("=" *60)
 print("–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –ü–û–°–õ–ï –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
 print("=" *60 + "\n")

 runner = PostExitTestRunner()

 runner.run_verify_suite()

 # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
 test_scripts = runner.discover_test_scripts()

 if not test_scripts:
 print("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
 print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 'test_' –∏–ª–∏ 'analyze_'")
 return 1

 print(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã ({len(test_scripts)}):")
 for i, script in enumerate(test_scripts,1):
 rel_path = script.relative_to(Path.cwd())
 print(f" {i}. {rel_path}")

 print()

 # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 summary = runner.run_all_tests(test_scripts)

 # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
 runner.save_report()

 # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
 return 0 if summary["success"] else 1


if __name__ == "__main__":
 raise SystemExit(main())
