#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è PneumoStabSim
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏
"""
import subprocess
import sys
import os
import json
from pathlib import Path


def run_git_command(command):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å git –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            return True, result.stdout.strip()
        else:
            return False, result.stderr.strip()
    except Exception as e:
        return False, str(e)


def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
    
    success, output = run_git_command("git status --porcelain")
    if success:
        if output:
            print(f"‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
            print(output)
            return False
        else:
            print("‚úÖ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è")
            return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ git —Å—Ç–∞—Ç—É—Å–∞: {output}")
        return False


def count_project_files():
    """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...")
    
    important_dirs = ['src', 'assets', 'tests', 'docs', 'config', 'tools', 'reports']
    important_files = ['app.py', 'requirements.txt', 'pyproject.toml', 'README.md', 'launch.py']
    
    total_files = 0
    structure = {}
    
    for item in important_dirs:
        if os.path.exists(item):
            count = sum(1 for _ in Path(item).rglob('*') if _.is_file())
            structure[item] = count
            total_files += count
            print(f"  üìÅ {item}/: {count} —Ñ–∞–π–ª–æ–≤")
    
    for item in important_files:
        if os.path.exists(item):
            structure[item] = "‚úÖ"
            total_files += 1
            print(f"  üìÑ {item}: ‚úÖ")
        else:
            structure[item] = "‚ùå"
            print(f"  üìÑ {item}: ‚ùå")
    
    print(f"\nüìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    return total_files, structure


def generate_new_repo_names():
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    suggestions = [
        "PneumoStabSim-Professional",
        "PneumaticStabilizer-Qt3D", 
        "StabilizerSim-Russian",
        "PneumoStabSim-Advanced",
        "PneumoStab-Simulator",
        "Qt3D-PneumoStabilizer"
    ]
    return suggestions


def create_migration_script(repo_name):
    """–°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏"""
    script_content = f'''@echo off
echo ===== –ú–ò–ì–†–ê–¶–ò–Ø PNEUMOSTABSIM –í –ù–û–í–´–ô –†–ï–ü–û–ó–ò–¢–û–†–ò–ô =====
echo.
echo –ù–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_name}
echo URL: https://github.com/barmaleii77-hub/{repo_name}
echo.

echo –®–∞–≥ 1: –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π remote...
git remote add new-repo https://github.com/barmaleii77-hub/{repo_name}.git

echo –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ...
git status

echo –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...
git push -u new-repo main

echo –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...
git remote -v

echo.
echo ===== –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê =====
echo –ù–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/barmaleii77-hub/{repo_name}
echo.
pause
'''
    
    with open(f"migrate_to_{repo_name.lower().replace('-', '_')}.bat", 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    return f"migrate_to_{repo_name.lower().replace('-', '_')}.bat"


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–û–î–ì–û–¢–û–í–ö–ê –ö –°–û–ó–î–ê–ù–ò–Æ –ù–û–í–û–ì–û GITHUB –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º git —Å—Ç–∞—Ç—É—Å
    if not check_git_status():
        print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
        return 1
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
    total_files, structure = count_project_files()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω
    print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ò–ú–ï–ù–ê –î–õ–Ø –ù–û–í–û–ì–û –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø:")
    suggestions = generate_new_repo_names()
    for i, name in enumerate(suggestions, 1):
        print(f"  {i}. {name}")
        print(f"     URL: https://github.com/barmaleii77-hub/{name}")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    print(f"\nüìã –ü–û–®–ê–ì–û–í–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø:")
    print(f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ GitHub: https://github.com/barmaleii77-hub")
    print(f"2. –ù–∞–∂–º–∏—Ç–µ 'New repository'")
    print(f"3. –í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {suggestions[0]})")
    print(f"4. –û–ø–∏—Å–∞–Ω–∏–µ: 'Professional Pneumatic Stabilizer Simulator with Qt Quick 3D and Russian UI'")
    print(f"5. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Public")
    print(f"6. –ù–ï –¥–æ–±–∞–≤–ª—è–π—Ç–µ README, .gitignore, License (—É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å)")
    print(f"7. –ù–∞–∂–º–∏—Ç–µ 'Create repository'")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    print(f"\nüîß –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏...")
    for name in suggestions[:3]:  # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è —Ç–æ–ø-3 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        script_file = create_migration_script(name)
        print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω: {script_file}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –ø—Ä–æ–µ–∫—Ç–∞
    project_info = {
        "name": "PneumoStabSim",
        "version": "2.0.0",
        "total_files": total_files,
        "structure": structure,
        "main_features": [
            "Qt Quick 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è",
            "–†—É—Å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
            "–ü–Ω–µ–≤–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å", 
            "–†–µ–∂–∏–º—ã –∑–∞–ø—É—Å–∫–∞: –æ–±—ã—á–Ω—ã–π, –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π, —Ç–µ—Å—Ç–æ–≤—ã–π",
            "Direct3D 11 backend",
            "–ü–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –≤–∫–ª–∞–¥–∫–∞–º–∏"
        ],
        "requirements": [
            "Python 3.8+",
            "PySide6 6.5+",
            "NumPy, SciPy",
            "Windows 10/11"
        ]
    }
    
    with open("project_migration_info.json", "w", encoding="utf-8") as f:
        json.dump(project_info, f, indent=2, ensure_ascii=False)
    
    print(f"\n‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: project_migration_info.json")
    
    print(f"\nüéâ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –ú–ò–ì–†–ê–¶–ò–ò!")
    print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≥–æ—Ç–æ–≤–æ –∫ –ø–µ—Ä–µ–Ω–æ—Å—É: {total_files}")
    print(f"üöÄ –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ bat —Ñ–∞–π–ª–æ–≤")
    print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {suggestions[0]}")
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
