#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –í–°–ï–• –æ—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ä—ã–º –º–æ–Ω–æ–ª–∏—Ç–∞–º
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç: GraphicsPanel, GeometryPanel, ModesPanel
–î–û–ë–ê–í–õ–ï–ù–û: –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""

import re
from pathlib import Path
from typing import Dict, List, Set, Tuple
from dataclasses import dataclass, field


@dataclass
class WidgetUsage:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤–∏–¥–∂–µ—Ç–∞"""
    widget_type: str
    parameter: str
    file: str
    line_number: int
    code_line: str


@dataclass
class ComparisonReport:
    """–û—Ç—á—ë—Ç –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤"""
    panel_name: str = ""
    monolith_widgets: List[WidgetUsage] = field(default_factory=list)
    refactored_widgets: List[WidgetUsage] = field(default_factory=list)
    missing_in_refactored: List[str] = field(default_factory=list)
    extra_in_refactored: List[str] = field(default_factory=list)
    matched_widgets: List[Tuple[str, str]] = field(default_factory=list)
    files_analyzed: Dict[str, int] = field(default_factory=dict)
    
    def print_report(self):
        """–í—ã–≤–µ—Å—Ç–∏ –æ—Ç—á—ë—Ç –Ω–∞ —ç–∫—Ä–∞–Ω"""
        print("=" * 80)
        print(f"–ü–†–û–í–ï–†–ö–ê: {self.panel_name}")
        print("=" * 80)
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í–∏–¥–∂–µ—Ç–æ–≤ –≤ –º–æ–Ω–æ–ª–∏—Ç–µ: {len(self.monolith_widgets)}")
        print(f"   –í–∏–¥–∂–µ—Ç–æ–≤ –≤ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ: {len(self.refactored_widgets)}")
        print(f"   –°–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len(self.matched_widgets)}")
        print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ: {len(self.missing_in_refactored)}")
        print(f"   –õ–∏—à–Ω–∏—Ö –≤ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ: {len(self.extra_in_refactored)}")
        
        print(f"\nüìÅ –ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –§–ê–ô–õ–´ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê:")
        for filename, count in self.files_analyzed.items():
            print(f"   ‚úì {filename}: {count} –≤–∏–¥–∂–µ—Ç–æ–≤")
        
        if len(self.matched_widgets) == len(self.monolith_widgets) and len(self.monolith_widgets) > 0:
            print(f"\n‚úÖ –í–°–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ú–û–ù–û–õ–ò–¢–ê –ü–†–ò–°–£–¢–°–¢–í–£–Æ–¢ –í –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ï!")
        else:
            coverage = len(self.matched_widgets) / len(self.monolith_widgets) * 100 if self.monolith_widgets else 0
            print(f"\n‚ö†Ô∏è  –ü–û–ö–†–´–¢–ò–ï: {coverage:.1f}%")
            
            if self.missing_in_refactored:
                print(f"\n‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–¢ ({len(self.missing_in_refactored)}):")
                for param in sorted(self.missing_in_refactored)[:10]:
                    print(f"   - {param}")
                if len(self.missing_in_refactored) > 10:
                    print(f"   ... –∏ –µ—â—ë {len(self.missing_in_refactored) - 10}")


def extract_labeled_sliders(file_path: Path) -> List[WidgetUsage]:
    """–ò–∑–≤–ª–µ—á—å –≤—Å–µ LabeledSlider –∏–∑ —Ñ–∞–π–ª–∞"""
    widgets = []
    
    if not file_path.exists():
        return widgets
    
    content = file_path.read_text(encoding='utf-8')
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è self.xxx = LabeledSlider
    pattern = re.compile(
        r'self\.(\w+)\s*=\s*LabeledSlider\s*\(\s*["\']([^"\']+)["\']',
        re.MULTILINE | re.DOTALL
    )
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ (–±–µ–∑ self.)
    pattern_old = re.compile(
        r'(?<!self\.)(\w+)\s*=\s*LabeledSlider\(\s*["\']([^"\']+)["\']',
        re.MULTILINE
    )
    
    matches = []
    for match in pattern.finditer(content):
        var_name = match.group(1)
        title = match.group(2).rstrip(':').strip()
        start_pos = match.start()
        line_number = content[:start_pos].count('\n') + 1
        line_start = content.rfind('\n', 0, start_pos) + 1
        line_end = content.find('\n', start_pos)
        if line_end == -1:
            line_end = len(content)
        code_line = content[line_start:line_end].strip()
        
        matches.append(WidgetUsage(
            widget_type='LabeledSlider',
            parameter=title,
            file=str(file_path),
            line_number=line_number,
            code_line=code_line[:80]
        ))
    
    # –°—Ç–∞—Ä—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    for match in pattern_old.finditer(content):
        var_name = match.group(1)
        title = match.group(2).rstrip(':').strip()
        start_pos = match.start()
        
        if not any(w.parameter == title for w in matches):
            line_number = content[:start_pos].count('\n') + 1
            line_start = content.rfind('\n', 0, start_pos) + 1
            line_end = content.find('\n', start_pos)
            if line_end == -1:
                line_end = len(content)
            code_line = content[line_start:line_end].strip()
            
            matches.append(WidgetUsage(
                widget_type='LabeledSlider',
                parameter=title,
                file=str(file_path),
                line_number=line_number,
                code_line=code_line[:80]
            ))
    
    return matches


def compare_panel(monolith_path: Path, refactored_dir: Path, tab_files: List[str], panel_name: str) -> ComparisonReport:
    """–°—Ä–∞–≤–Ω–∏—Ç—å –æ–¥–∏–Ω –º–æ–Ω–æ–ª–∏—Ç —Å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–º–∏ —Ç–∞–±–∞–º–∏"""
    report = ComparisonReport(panel_name=panel_name)
    
    # –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–æ–ª–∏—Ç–∞
    if monolith_path.exists():
        report.monolith_widgets = extract_labeled_sliders(monolith_path)
    
    # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–∞–±–æ–≤
    for tab_name in tab_files:
        tab_path = refactored_dir / tab_name
        if tab_path.exists():
            widgets = extract_labeled_sliders(tab_path)
            report.refactored_widgets.extend(widgets)
            report.files_analyzed[tab_name] = len(widgets)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    monolith_params = {w.parameter for w in report.monolith_widgets}
    refactored_params = {w.parameter for w in report.refactored_widgets}
    
    report.matched_widgets = [(p, p) for p in (monolith_params & refactored_params)]
    report.missing_in_refactored = list(monolith_params - refactored_params)
    report.extra_in_refactored = list(refactored_params - monolith_params)
    
    return report


def generate_migration_plan(report: ComparisonReport, monolith_path: Path):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    if not report.missing_in_refactored:
        return
    
    print("\n" + "=" * 80)
    print(f"üìã –ü–õ–ê–ù –ú–ò–ì–†–ê–¶–ò–ò –î–õ–Ø {report.panel_name}")
    print("=" * 80)
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —Ç–∞–±–∞–º
    tab_assignments = {
        'camera_tab.py': [],
        'environment_tab.py': [],
        'quality_tab.py': [],
        'effects_tab.py': [],
        'lighting_tab.py': [],
    }
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categorization = {
        'camera_tab.py': ['fov', '–∑—Ä–µ–Ω–∏—è', '–ø–ª–æ—Å–∫–æ—Å—Ç—å', 'near', 'far', '—Å–∫–æ—Ä–æ—Å—Ç—å –∫–∞–º–µ—Ä—ã', '–∞–≤—Ç–æ–ø–æ–≤–æ—Ä–æ—Ç–∞'],
        'environment_tab.py': ['ibl', 'skybox', 'fog', '—Ç—É–º–∞–Ω', '–æ–∫—Ä—É–∂–µ–Ω', '–ø–æ–≤–æ—Ä–æ—Ç', '—Å–º–µ—â–µ–Ω–∏–µ'],
        'quality_tab.py': ['shadow', 'bias', '—Ç–µ–Ω', 'fps', '—Ä–µ–Ω–¥–µ—Ä', 'taa', '–º–∞—Å—à—Ç–∞–±'],
        'effects_tab.py': ['bloom', '—Ä–∞–∑–º—ã—Ç', '–≤–∏–Ω—å–µ—Ç', '–ø–æ—Ä–æ–≥', '—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ', '—Ñ–æ–∫—É—Å'],
        'lighting_tab.py': ['—Å–≤–µ—Ç', '—è—Ä–∫–æ—Å—Ç—å'],
    }
    
    # –ß–∏—Ç–∞–µ–º –º–æ–Ω–æ–ª–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
    if monolith_path.exists():
        monolith_content = monolith_path.read_text(encoding='utf-8')
        monolith_lines = monolith_content.split('\n')
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —Ç–∞–±–∞–º
    for param in report.missing_in_refactored:
        param_lower = param.lower()
        assigned = False
        
        # –ù–∞—Ö–æ–¥–∏–º –≤–∏–¥–∂–µ—Ç –≤ –º–æ–Ω–æ–ª–∏—Ç–µ
        widget = next((w for w in report.monolith_widgets if w.parameter == param), None)
        
        for tab, keywords in categorization.items():
            if any(kw in param_lower for kw in keywords):
                if widget:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –º–æ–Ω–æ–ª–∏—Ç–∞
                    start_line = widget.line_number - 1
                    code_snippet = []
                    
                    # –ò—â–µ–º –ø–æ–ª–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–º)
                    for i in range(start_line, min(start_line + 5, len(monolith_lines))):
                        code_snippet.append(monolith_lines[i])
                        if ')' in monolith_lines[i]:
                            break
                    
                    tab_assignments[tab].append({
                        'param': param,
                        'line': widget.line_number,
                        'code': '\n'.join(code_snippet)
                    })
                else:
                    tab_assignments[tab].append({
                        'param': param,
                        'line': 0,
                        'code': f'# TODO: –î–æ–±–∞–≤–∏—Ç—å {param}'
                    })
                assigned = True
                break
        
        if not assigned and widget:
            # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ—á–µ–µ
            print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞–± –¥–ª—è: {param} (—Å—Ç—Ä–æ–∫–∞ {widget.line_number})")
    
    # –í—ã–≤–æ–¥–∏–º –ø–ª–∞–Ω
    for tab, params in tab_assignments.items():
        if params:
            print(f"\n{'='*80}")
            print(f"üìÑ {tab} - –¥–æ–±–∞–≤–∏—Ç—å {len(params)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
            print(f"{'='*80}")
            
            for item in params:
                print(f"\n   ‚ñ∂ {item['param']} (–∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {item['line']})")
                print(f"      –ö–æ–¥ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:")
                for line in item['code'].split('\n'):
                    if line.strip():
                        print(f"      {line}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ –í–°–ï–• –ø–∞–Ω–µ–ª–µ–π"""
    print("üîç –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –†–ï–§–ê–ö–¢–û–†–ï–ù–ù–´–• –ü–ê–ù–ï–õ–ï–ô")
    print("=" * 80)
    print()
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–Ω–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    panels = [
        {
            'name': 'GraphicsPanel',
            'monolith': Path('src/ui/panels/panel_graphics.py'),
            'refactored_dir': Path('src/ui/panels/graphics'),
            'tabs': [
                'lighting_tab.py',
                'environment_tab.py',
                'quality_tab.py',
                'camera_tab.py',
                'materials_tab.py',
                'effects_tab.py',
            ]
        },
        {
            'name': 'GeometryPanel',
            'monolith': Path('src/ui/panels/panel_geometry.py'),
            'refactored_dir': Path('src/ui/panels/geometry'),
            'tabs': [
                'frame_tab.py',
                'suspension_tab.py',
                'cylinder_tab.py',
                'options_tab.py',
            ]
        },
        {
            'name': 'ModesPanel',
            'monolith': Path('src/ui/panels/panel_modes.py'),
            'refactored_dir': Path('src/ui/panels/modes'),
            'tabs': [
                'control_tab.py',
                'simulation_tab.py',
                'physics_tab.py',
                'road_excitation_tab.py',
            ]
        },
    ]
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—Å–µ–º –ø–∞–Ω–µ–ª—è–º
    all_reports: List[ComparisonReport] = []
    
    for panel_config in panels:
        print(f"\n{'='*80}")
        print(f"üìã –ê–Ω–∞–ª–∏–∑: {panel_config['name']}")
        print(f"{'='*80}")
        
        if not panel_config['monolith'].exists():
            print(f"‚ö†Ô∏è  –ú–æ–Ω–æ–ª–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {panel_config['monolith']}")
            continue
        
        if not panel_config['refactored_dir'].exists():
            print(f"‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {panel_config['refactored_dir']}")
            continue
        
        print(f"üìñ –ú–æ–Ω–æ–ª–∏—Ç: {panel_config['monolith']}")
        print(f"üìÅ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥: {panel_config['refactored_dir']}")
        print()
        
        report = compare_panel(
            panel_config['monolith'],
            panel_config['refactored_dir'],
            panel_config['tabs'],
            panel_config['name']
        )
        
        all_reports.append(report)
        report.print_report()
        
        # ‚úÖ –ù–û–í–û–ï: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è GraphicsPanel
        if panel_config['name'] == 'GraphicsPanel' and report.missing_in_refactored:
            generate_migration_plan(report, panel_config['monolith'])
    
    # –û–±—â–∞—è —Å–≤–æ–¥–∫–∞
    print("\n\n" + "=" * 80)
    print("üìä –û–ë–©–ê–Ø –°–í–û–î–ö–ê –ü–û –í–°–ï–ú –ü–ê–ù–ï–õ–Ø–ú")
    print("=" * 80)
    
    total_monolith = sum(len(r.monolith_widgets) for r in all_reports)
    total_refactored = sum(len(r.refactored_widgets) for r in all_reports)
    total_matched = sum(len(r.matched_widgets) for r in all_reports)
    total_missing = sum(len(r.missing_in_refactored) for r in all_reports)
    
    print(f"\nüìà –ò–¢–û–ì–û:")
    print(f"   –í–∏–¥–∂–µ—Ç–æ–≤ –≤ –º–æ–Ω–æ–ª–∏—Ç–∞—Ö: {total_monolith}")
    print(f"   –í–∏–¥–∂–µ—Ç–æ–≤ –≤ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ: {total_refactored}")
    print(f"   –°–æ–≤–ø–∞–¥–∞—é—â–∏—Ö: {total_matched}")
    print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö: {total_missing}")
    
    if total_monolith > 0:
        overall_coverage = total_matched / total_monolith * 100
        print(f"\nüéØ –û–ë–©–ï–ï –ü–û–ö–†–´–¢–ò–ï: {overall_coverage:.1f}%")
    
    print("\nüìã –ü–û –ü–ê–ù–ï–õ–Ø–ú:")
    for report in all_reports:
        if len(report.monolith_widgets) > 0:
            coverage = len(report.matched_widgets) / len(report.monolith_widgets) * 100
            status = "‚úÖ" if coverage == 100 else "‚ö†Ô∏è"
            print(f"   {status} {report.panel_name}: {coverage:.1f}% ({len(report.matched_widgets)}/{len(report.monolith_widgets)})")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n" + "=" * 80)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 80)
    
    ready_panels = [r for r in all_reports if len(r.missing_in_refactored) == 0 and len(r.monolith_widgets) > 0]
    incomplete_panels = [r for r in all_reports if len(r.missing_in_refactored) > 0]
    
    if ready_panels:
        print(f"\n‚úÖ –ì–û–¢–û–í–´ –ö –ó–ê–ú–ï–ù–ï ({len(ready_panels)} –ø–∞–Ω–µ–ª–µ–π):")
        for r in ready_panels:
            print(f"   ‚úì {r.panel_name}")
    
    if incomplete_panels:
        print(f"\n‚ö†Ô∏è  –¢–†–ï–ë–£–Æ–¢ –î–û–†–ê–ë–û–¢–ö–ò ({len(incomplete_panels)} –ø–∞–Ω–µ–ª–µ–π):")
        for r in incomplete_panels:
            print(f"   ‚Ä¢ {r.panel_name}: –¥–æ–±–∞–≤–∏—Ç—å {len(r.missing_in_refactored)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!")
    print("\nüìù –°–º–æ—Ç—Ä–∏—Ç–µ –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")


if __name__ == "__main__":
    main()
