import QtQuick
import QtQuick3D
import QtQuick3D.Helpers
import QtQuick.Controls
import Qt.labs.folderlistmodel
import "components"
import "core"  // ‚úÖ PHASE 1: Core Utilities (MathUtils, GeometryCalculations, StateCache)
import "camera"  // ‚úÖ PHASE 2: Camera System Modules
import "lighting"  // ‚úÖ STEP 1: Lighting System Modules
import "scene"  // ‚úÖ –ù–û–í–û–ï: Materials Module
import "geometry"  // ‚úÖ CRITICAL FIX: Geometry modules (Frame, SuspensionCorner, CylinderGeometry)

/*
 * PneumoStabSim - COMPLETE Graphics Parameters Main 3D View (v4.9.4 SKYBOX FIX)
 * üöÄ ENHANCED: Separate IBL lighting/background controls + procedural geometry quality
 * ‚úÖ All properties match official Qt Quick 3D documentation
 * üêõ FIXED: Removed skyBoxBlurAmount (not exposed by Qt Quick 3D API)
 * üêõ CRITICAL FIX v4.9.4: Skybox rotation with continuous angle accumulation
 *    - Added envYaw for continuous angle tracking (NO flips at 0¬∞/180¬∞)
 *    - probeOrientation uses accumulated envYaw instead of direct cameraYaw
 *    - Background is stable regardless of camera rotation
 * üêõ FIXED: emissiveVector typo ‚Üí emissiveVector
 */
Item {
    id: root
    anchors.fill: parent
    // Toggle to show/hide in-canvas UI controls (to avoid duplication with external GraphicsPanel)
    property bool showOverlayControls: false

    // ===============================================================
    // üöÄ SIGNALS - ACK –¥–ª—è Python –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    // ===============================================================

    signal batchUpdatesApplied(var summary)

    // ===============================================================
    // üöÄ QT VERSION DETECTION (–¥–ª—è —É—Å–ª–æ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π)
    // ===============================================================

    readonly property string qtVersionString: typeof Qt.version !== "undefined" ? Qt.version : "6.0.0"
    readonly property var qtVersionParts: qtVersionString.split('.')
    readonly property int qtMajor: qtVersionParts.length > 0 ? parseInt(qtVersionParts[0]) : 6
    readonly property int qtMinor: qtVersionParts.length > 1 ? parseInt(qtVersionParts[1]) : 0
    readonly property bool supportsQtQuick3D610Features: qtMajor === 6 && qtMinor >= 10

    // ‚úÖ –£—Å–ª–æ–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ dithering (–¥–æ—Å—Ç—É–ø–Ω–æ —Å Qt 6.10)
    property bool ditheringEnabled: true  // –£–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∏–∑ GraphicsPanel
    readonly property bool canUseDithering: supportsQtQuick3D610Features
    // ‚úÖ –ì–µ–π—Ç –¥–ª—è Specular AA (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —à–µ–π–¥–µ—Ä–∞)
    readonly property bool canUseSpecularAA: false

    // ===============================================================
    // üöÄ CRITICAL FIX v4.9.4: SKYBOX ROTATION - INDEPENDENT FROM CAMERA
    // ===============================================================

    // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: Skybox –≤—Ä–∞—â–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ iblRotationDeg
    // –ö–∞–º–µ—Ä–∞ –ù–ï –≤–ª–∏—è–µ—Ç –Ω–∞ skybox –≤–æ–æ–±—â–µ!

    // ‚ùå –£–î–ê–õ–ï–ù–û: envYaw, _prevCameraYaw, updateCameraYaw() - —ç—Ç–æ –±—ã–ª–æ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û
    // –≠—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –°–í–Ø–ó–´–í–ê–õ–ò —Ñ–æ–Ω —Å –∫–∞–º–µ—Ä–æ–π, —á—Ç–æ –≤—ã–∑—ã–≤–∞–ª–æ –ø—Ä–æ–±–ª–µ–º—É

    // ===============================================================
    // üöÄ PERFORMANCE OPTIMIZATION LAYER (‚úÖ PHASE 1: Using StateCache)
    // ===============================================================

    // ‚úÖ PHASE 1: Connect StateCache to root properties
    Connections {
        target: root

        function onAnimationTimeChanged() { StateCache.animationTime = root.animationTime }
        function onUserFrequencyChanged() { StateCache.userFrequency = root.userFrequency }
        function onUserPhaseGlobalChanged() { StateCache.userPhaseGlobal = root.userPhaseGlobal }
        function onUserPhaseFLChanged() { StateCache.userPhaseFL = root.userPhaseFL }
        function onUserPhaseFRChanged() { StateCache.userPhaseFR = root.userPhaseFR }
        function onUserPhaseRLChanged() { StateCache.userPhaseRL = root.userPhaseRL }
        function onUserPhaseRRChanged() { StateCache.userPhaseRR = root.userPhaseRR }
        function onUserAmplitudeChanged() { StateCache.userAmplitude = root.userAmplitude }
        function onUserLeverLengthChanged() { StateCache.userLeverLength = root.userLeverLength }
        function onUserRodPositionChanged() { StateCache.userRodPosition = root.userRodPosition }
        function onUserCylinderLengthChanged() { StateCache.userCylinderLength = root.userCylinderLength }
        function onUserTrackWidthChanged() { StateCache.userTrackWidth = root.userTrackWidth }
        function onUserFrameLengthChanged() { StateCache.userFrameLength = root.userFrameLength }
        function onCameraFovChanged() { StateCache.cameraFov = root.cameraFov }
    }

    // ‚úÖ PHASE 1: Use StateCache (Singleton) instead of local animationCache
    readonly property var animationCache: StateCache

    // ‚úÖ PHASE 1: Use GeometryCalculations (Singleton) instead of local geometryCache
    readonly property var geometryCache: QtObject {
        // ‚úÖ Cached constants from StateCache
        readonly property real leverLengthRodPos: StateCache.leverLengthRodPos
        readonly property real piOver180: StateCache.piOver180
        readonly property real deg180OverPi: StateCache.deg180OverPi

        // ‚úÖ Cached camera calculations from StateCache
        readonly property real cachedFovRad: StateCache.cachedFovRad
        readonly property real cachedTanHalfFov: StateCache.cachedTanHalfFov

        // ‚úÖ PHASE 1: Delegate to GeometryCalculations
        function calculateJRod(j_arm, baseAngle, leverAngle) {
            return GeometryCalculations.calculateJRodPosition(
                j_arm, root.userLeverLength, root.userRodPosition, baseAngle, leverAngle
            )
        }

        // ‚úÖ PHASE 1: Delegate to GeometryCalculations
        function normalizeCylDirection(j_rod, j_tail) {
            return GeometryCalculations.calculateCylinderAxis(j_rod, j_tail)
        }
    }

    // ===============================================================
    // IBL CONTROLLER
    // ===============================================================

    IblProbeLoader {
        id: iblLoader
        primarySource: root.iblPrimarySource
        fallbackSource: root.iblFallbackSource
        onActiveSourceChanged: {
            console.log("üåê IBL activeSource:", activeSource)
        }
    }

    // ===============================================================
    // ‚úÖ PHASE 2: CAMERA SYSTEM (modular)
    // ===============================================================

    // ‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ CameraController - —Å–º. assets/qml/camera/
    // –í—Å–µ 21 camera properties + 5 behaviors + 4 functions (169 lines) ‚Üí 1 component

    // ===============================================================
    // ‚úÖ PHASE 2: CAMERA PROPERTIES (for backward compatibility)
    // ===============================================================

    // ‚úÖ Expose camera properties from CameraController for backward compatibility
    readonly property alias cameraDistance: cameraController.distance
    readonly property alias cameraYaw: cameraController.yawDeg
    readonly property alias cameraPitch: cameraController.pitchDeg
    readonly property alias pivot: cameraController.pivot
    readonly property alias cameraIsMoving: cameraController.isMoving

    // ‚úÖ Camera settings (writable properties synced with CameraState)
    // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤–º–µ—Å—Ç–æ aliases, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø–æ—Ä—è–¥–∫–æ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    property real cameraFov: 60.0
    property real cameraNear: 10.0
    property real cameraFar: 50000.0
    property real cameraSpeed: 1.0
    property bool autoRotate: false
    property real autoRotateSpeed: 0.5

    // ===============================================================
    // ‚úÖ COMPLETE GRAPHICS PROPERTIES (All parameters from GraphicsPanel)
    // ===============================================================

    // HDR resources (–±–µ–∑ –¥–µ—Ñ–æ–ª—Ç–æ–≤ ‚Äî –≤—Å—ë –∑–∞–¥–∞—ë—Ç UI/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
    property url iblPrimarySource: startIblSource && startIblSource !== "" ? resolveUrl(startIblSource) : ""
    property url iblFallbackSource: startIblFallback && startIblFallback !== "" ? resolveUrl(startIblFallback) : ""
    readonly property bool iblReady: iblLoader.ready

    // Environment defaults c —É—á–µ—Ç–æ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Ñ–ª–∞–≥–æ–≤
    // –†–µ–∂–∏–º —Ñ–æ–Ω–∞ (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–ª—é—á –æ—Ç Python; –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ–∫–∞–∑ skybox)
    property string backgroundMode: startBackgroundMode
    property color backgroundColor: "#1f242c"
    property bool iblEnabled: startIblEnabled
    // ‚úÖ CRITICAL FIX v4.9.5: –ù–ï–ó–ê–í–ò–°–ò–ú–û–ï –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è iblLightingEnabled!
    // –ù–ï –∫–æ–ø–∏—Ä—É–µ–º startIblEnabled - –ø—É—Å—Ç—å –∫–∞–∂–¥—ã–π —Ñ–ª–∞–≥ –Ω–µ–∑–∞–≤–∏—Å–∏–º —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞!
    property bool iblLightingEnabled: true   // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –í–ö–õ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç master)
    property bool iblBackgroundEnabled: startSkyboxEnabled
    property real iblRotationDeg: startIblRotation
    property real iblIntensity: startIblIntensity

    // Lighting
    property real keyLightBrightness: 1.2
    property color keyLightColor: "#ffffff"
    property real keyLightAngleX: -35
    property real keyLightAngleY: -40
    property bool keyLightCastsShadow: true
    property bool keyLightBindToCamera: false
    property real keyLightPosX: 0.0
    property real keyLightPosY: 0.0
    property real fillLightBrightness: 0.7
    property color fillLightColor: "#dfe7ff"
    property bool fillLightCastsShadow: false
    property bool fillLightBindToCamera: false
    property real fillLightPosX: 0.0
    property real fillLightPosY: 0.0
    property real rimLightBrightness: 1.0
    property color rimLightColor: "#ffe2b0"
    property bool rimLightCastsShadow: false
    property bool rimLightBindToCamera: false
    property real rimLightPosX: 0.0
    property real rimLightPosY: 0.0
    property real pointLightBrightness: 1000.0
    property color pointLightColor: "#ffffff"
    property real pointLightX: 0.0
    property real pointLightY: 2200.0
    property real pointLightRange: 3200.0
    property bool pointLightCastsShadow: false   // ‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–ª–∞–≥ —Ç–µ–Ω–µ–π —Ç–æ—á–µ—á–Ω–æ–≥–æ —Å–≤–µ—Ç–∞
    property bool pointLightBindToCamera: false

    // Procedural geometry quality
    property int cylinderSegments: 64
    property int cylinderRings: 8

    // Quality and rendering
    property string aaPrimaryMode: "ssaa"
    property string aaQualityLevel: "high"
    property string aaPostMode: "taa"
    property bool taaEnabled: true
    property real taaStrength: 0.4
    property bool taaMotionAdaptive: true
    property bool fxaaEnabled: false
    // –í–†–ï–ú–ï–ù–ù–´–ô –§–ò–ö–°: –æ—Ç–∫–ª—é—á–∞–µ–º Specular AA –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —à–µ–π–¥–µ—Ä–∞ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥—Ä–∞–π–≤–µ—Ä–∞—Ö)
    property bool specularAAEnabled: false
    property real renderScale: 1.05
    property string renderPolicy: "always"
    property real frameRateLimit: 144.0
    property string qualityPreset: "ultra"

    // === Fog properties (Qt 6.10+ Fog object) ===
    property bool fogEnabled: false
    property color fogColor: "#808080"
    property real fogDensity: 0.1
    property real fogNear: 1200.0
    property real fogFar: 12000.0

    // === SSAO properties (Effects/Environment binding) ===
    property bool ssaoEnabled: false
    property real ssaoRadius: 8.0
    property real ssaoIntensity: 1.0

    property var pendingPythonUpdates: null

    onPendingPythonUpdatesChanged: {
        if (!pendingPythonUpdates || Object.keys(pendingPythonUpdates).length === 0)
            return
        applyBatchedUpdates(pendingPythonUpdates)
        pendingPythonUpdates = null
    }

    function syncRenderSettings() {
        if (!view3d || !view3d.renderSettings)
            return
        const settings = view3d.renderSettings
        settings.renderScale = renderScale
        settings.maximumFrameRate = frameRateLimit
        settings.renderPolicy = renderPolicy === "ondemand" ? RenderSettings.OnDemand : RenderSettings.Always
    }

    onRenderScaleChanged: syncRenderSettings()
    onFrameRateLimitChanged: syncRenderSettings()
    onRenderPolicyChanged: syncRenderSettings()
    property bool shadowsEnabled: true
    property string shadowResolution: "4096"
    property int shadowFilterSamples: 32
    property real shadowBias: 8.0
    property real shadowFactor: 80.0
    property string oitMode: "weighted"

    // Post-processing effects
    property bool bloomEnabled: true
    property real bloomIntensity: 0.5
    property real bloomThreshold: 1.0
    property real bloomSpread: 0.65
    property bool depthOfFieldEnabled: false
    property real dofFocusDistance: 2200.0
    property real dofBlurAmount: 4.0
    property bool motionBlurEnabled: false
    property real motionBlurAmount: 0.2
    property bool lensFlareEnabled: false    // ‚úÖ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª, —á—Ç–æ–±—ã –Ω–µ –≤–∫–ª—é—á–∞–ª–æ—Å—å –±–µ–∑ —è–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    property bool vignetteEnabled: false      // ‚úÖ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª, —á—Ç–æ–±—ã –Ω–µ –≤–∫–ª—é—á–∞–ª–æ—Å—å –±–µ–∑ —è–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    property real vignetteStrength: 0.35

    // Tonemap settings
    property bool tonemapEnabled: true
    property string tonemapModeName: "filmic"
    // ‚úÖ –ù–æ–≤—ã–µ —É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–Ω–µ–º–∞–ø–ø–∏–Ω–≥–∞
    property real tonemapExposure: 1.0
    property real tonemapWhitePoint: 2.0

    // Material control properties
    property color frameBaseColor: "#c53030"
    property real frameMetalness: 0.85
    property real frameRoughness: 0.35
    property real frameSpecularAmount: 1.0
    property real frameSpecularTint: 0.0
    property real frameClearcoat: 0.22
    property real frameClearcoatRoughness: 0.1
    property real frameTransmission: 0.0
    property real frameOpacity: 1.0
    property real frameIor: 1.5
    property real frameAttenuationDistance: 10000.0
    property color frameAttenuationColor: "#ffffff"
    property color frameEmissiveColor: "#000000"
    property real frameEmissiveIntensity: 0.0

    property color leverBaseColor: "#9ea4ab"
    property real leverMetalness: 1.0
    property real leverRoughness: 0.28
    property real leverSpecularAmount: 1.0
    property real leverSpecularTint: 0.0
    property real leverClearcoat: 0.3
    property real leverClearcoatRoughness: 0.08
    property real leverTransmission: 0.0
    property real leverOpacity: 1.0
    property real leverIor: 1.5
    property real leverAttenuationDistance: 10000.0
    property color leverAttenuationColor: "#ffffff"
    property color leverEmissiveColor: "#000000"
    property real leverEmissiveIntensity: 0.0

    property color tailRodBaseColor: "#d5d9df"
    property real tailRodMetalness: 1.0
    property real tailRodRoughness: 0.3
    property real tailRodSpecularAmount: 1.0
    property real tailRodSpecularTint: 0.0
    property real tailRodClearcoat: 0.0
    property real tailRodClearcoatRoughness: 0.0
    property real tailRodTransmission: 0.0
    property real tailRodOpacity: 1.0
    property real tailRodIor: 1.5
    property real tailRodAttenuationDistance: 10000.0
    property color tailRodAttenuationColor: "#ffffff"
    property color tailRodEmissiveColor: "#000000"
    property real tailRodEmissiveIntensity: 0.0

    property color cylinderBaseColor: "#e1f5ff"
    property real cylinderMetalness: 0.0
    property real cylinderRoughness: 0.05
    property real cylinderSpecularAmount: 1.0
    property real cylinderSpecularTint: 0.0
    property real cylinderClearcoat: 0.0
    property real cylinderClearcoatRoughness: 0.0
    property real cylinderTransmission: 1.0
    property real cylinderOpacity: 1.0
    property real cylinderIor: 1.52
    property real cylinderAttenuationDistance: 1800.0
    property color cylinderAttenuationColor: "#b7e7ff"
    property color cylinderEmissiveColor: "#000000"
    property real cylinderEmissiveIntensity: 0.0

    property color pistonBodyBaseColor: "#ff3c6e"
    property color pistonBodyWarningColor: "#ff5454"
    property real pistonBodyMetalness: 1.0
    property real pistonBodyRoughness: 0.26
    property real pistonBodySpecularAmount: 1.0
    property real pistonBodySpecularTint: 0.0
    property real pistonBodyClearcoat: 0.18
    property real pistonBodyClearcoatRoughness: 0.06
    property real pistonBodyTransmission: 0.0
    property real pistonBodyOpacity: 1.0
    property real pistonBodyIor: 1.5
    property real pistonBodyAttenuationDistance: 10000.0
    property color pistonBodyAttenuationColor: "#ffffff"
    property color pistonBodyEmissiveColor: "#000000"
    property real pistonBodyEmissiveIntensity: 0.0

    property color pistonRodBaseColor: "#ececec"
    property color pistonRodWarningColor: "#ff2a2a"
    property real pistonRodMetalness: 1.0
    property real pistonRodRoughness: 0.18
    property real pistonRodSpecularAmount: 1.0
    property real pistonRodSpecularTint: 0.0
    property real pistonRodClearcoat: 0.12
    property real pistonRodClearcoatRoughness: 0.05
    property real pistonRodTransmission: 0.0
    property real pistonRodOpacity: 1.0
    property real pistonRodIor: 1.5
    property real pistonRodAttenuationDistance: 10000.0
    property color pistonRodAttenuationColor: "#ffffff"
    property color pistonRodEmissiveColor: "#000000"
    property real pistonRodEmissiveIntensity: 0.0

    property color jointTailBaseColor: "#2a82ff"
    property real jointTailMetalness: 0.9
    property real jointTailRoughness: 0.35
    property real jointTailSpecularAmount: 1.0
    property real jointTailSpecularTint: 0.0
    property real jointTailClearcoat: 0.1
    property real jointTailClearcoatRoughness: 0.08
    property real jointTailTransmission: 0.0
    property real jointTailOpacity: 1.0
    property real jointTailIor: 1.5
    property real jointTailAttenuationDistance: 10000.0
    property color jointTailAttenuationColor: "#ffffff"
    property color jointTailEmissiveColor: "#000000"
    property real jointTailEmissiveIntensity: 0.0

    property color jointArmBaseColor: "#ff9c3a"
    property real jointArmMetalness: 0.9
    property real jointArmRoughness: 0.32
    property real jointArmSpecularAmount: 1.0
    property real jointArmSpecularTint: 0.0
    property real jointArmClearcoat: 0.12
    property real jointArmClearcoatRoughness: 0.08
    property real jointArmTransmission: 0.0
    property real jointArmOpacity: 1.0
    property real jointArmIor: 1.5
    property real jointArmAttenuationDistance: 10000.0
    property color jointArmAttenuationColor: "#ffffff"
    property color jointArmEmissiveColor: "#000000"
    property real jointArmEmissiveIntensity: 0.0

    function emissiveVector(color, intensity) {
        if (intensity === undefined)
            intensity = 1.0
        if (!color)
            return Qt.vector3d(0, 0, 0)
        return Qt.vector3d(color.r * intensity, color.g * intensity, color.b * intensity)
    }

    // ‚úÖ PHASE 1: Using MathUtils.clamp01 instead of local function
    function clamp01(value) {
        return MathUtils.clamp01(value)
    }

    property color jointRodOkColor: "#00ff55"
    property color jointRodErrorColor: "#ff0000"

    // ===============================================================
    // ANIMATION AND GEOMETRY PROPERTIES (preserved)
    // ===============================================================

    property real animationTime: 0.0
    property bool isRunning: false

    // User-controlled animation parameters
    property real userAmplitude: 8.0
    property real userFrequency: 1.0
    property real userPhaseGlobal: 0.0
    property real userPhaseFL: 0.0
    property real userPhaseFR: 0.0
    property real userPhaseRL: 0.0
    property real userPhaseRR: 0.0

    // Piston positions from Python
    property real userPistonPositionFL: 250.0
    property real userPistonPositionFR: 250.0
    property real userPistonPositionRL: 250.0
    property real userPistonPositionRR: 250.0

    // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï —É–≥–ª—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    property real fl_angle: isRunning ? userAmplitude * animationCache.flSin : 0.0
    property real fr_angle: isRunning ? userAmplitude * animationCache.frSin : 0.0
    property real rl_angle: isRunning ? userAmplitude * animationCache.rlSin : 0.0
    property real rr_angle: isRunning ? userAmplitude * animationCache.rrSin : 0.0

    // Geometry parameters
    property real userBeamSize: 120
    property real userFrameHeight: 650
    property real userFrameLength: 3200
    property real userLeverLength: 800
    property real userCylinderLength: 500
    property real userTrackWidth: 1600
    property real userFrameToPivot: 600
    property real userRodPosition: 0.6
    property real userBoreHead: 80
    property real userBoreRod: 80
    property real userRodDiameter: 35
    property real userPistonThickness: 25
    property real userPistonRodLength: 200

    // ===============================================================
    // ‚úÖ PHASE 2: Smooth Camera Behaviors - moved to CameraState.qml
    // ===============================================================

    // ‚úÖ Moved: 5 Behavior animations are now in CameraState.qml

    // ===============================================================
    // UTILITY FUNCTIONS (‚úÖ PHASE 1: Using MathUtils)
    // ===============================================================

    // ‚úÖ PHASE 1: Delegate to MathUtils
    function clamp(v, a, b) { return MathUtils.clamp(v, a, b); }

    // ‚úÖ PHASE 1: Delegate to MathUtils (NO manual normalization!)
    function normAngleDeg(a) {
        return MathUtils.normalizeAngleDeg(a);
    }

    function resolveUrl(path) {
        if (!path || path === "")
            return "";
        if (path.startsWith("file:") || path.startsWith("http:") || path.startsWith("https:") ||
            path.startsWith("qrc:") || path.startsWith("data:"))
            return path;
        if (path.length >= 2 && path.charAt(1) === ":")
            return "file:///" + path.replace(/\\/g, "/");
        if (path.startsWith("/"))
            return "file://" + path;
        return Qt.resolvedUrl(path);
    }

    // ===============================================================
    // ‚úÖ PHASE 2: Camera functions - moved to CameraController
    // ===============================================================

    // ‚úÖ Moved to CameraController:
    // - autoFitFrame(marginFactor) ‚Üí cameraController.autoFitFrame()
    // - resetView() ‚Üí cameraController.resetView()
    // - fullResetView() ‚Üí cameraController.fullResetView()

    // ‚úÖ Wrapper functions for backward compatibility:
    function autoFitFrame(marginFactor) {
        cameraController.autoFitFrame(marginFactor)
    }

    function resetView() {
        cameraController.resetView()
    }

    function fullResetView() {
        cameraController.fullResetView()
    }

    function flagCameraMotion() {
        // Delegate to CameraController
        cameraController.state.flagMotion()
    }

    // ===============================================================
    // ‚úÖ COMPLETE BATCH UPDATE SYSTEM (All functions implemented)
    // ===============================================================

    function applyBatchedUpdates(updates) {
        if (typeof window !== 'undefined' && window && window.logQmlEvent) {
            try { window.logQmlEvent("signal_received", "applyBatchedUpdates"); } catch(e) {}
        }
        console.log("üöÄ Applying batched updates with conflict resolution:", Object.keys(updates))

        // Disable default behaviors temporarily
        var wasAutoUpdate = autoRotate
        autoRotate = false

        try {
            if (updates.geometry) applyGeometryUpdates(updates.geometry)
            if (updates.animation) applyAnimationUpdates(updates.animation)
            if (updates.lighting) applyLightingUpdates(updates.lighting)
            if (updates.materials) applyMaterialUpdates(updates.materials)
            if (updates.environment) applyEnvironmentUpdates(updates.environment)
            if (updates.quality) applyQualityUpdates(updates.quality)
            if (updates.camera) applyCameraUpdates(updates.camera)
            if (updates.effects) applyEffectsUpdates(updates.effects)

            console.log("‚úÖ Batch updates completed successfully")

            // ‚úÖ Send ACK to Python with summary of what was applied
            var summary = {
                timestamp: Date.now(),
                categories: Object.keys(updates),
                success: true
            }
            root.batchUpdatesApplied(summary)
        } finally {
            // Restore auto behaviors
            autoRotate = wasAutoUpdate
        }
    }

    function applyGeometryUpdates(params) {
        if (typeof window !== 'undefined' && window && window.logQmlEvent) {
            try { window.logQmlEvent("function_called", "applyGeometryUpdates"); } catch(e) {}
        }
        console.log("üìê main.qml: applyGeometryUpdates() with conflict resolution")

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ undefined –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º
        if (params.frameLength !== undefined && params.frameLength !== userFrameLength) {
            console.log("  üìè Updating frameLength:", userFrameLength, "‚Üí", params.frameLength)
            userFrameLength = params.frameLength
        }
        if (params.frameHeight !== undefined && params.frameHeight !== userFrameHeight) {
            console.log("  üìè Updating frameHeight:", userFrameHeight, "‚Üí", params.frameHeight)
            userFrameHeight = params.frameHeight
        }
        if (params.frameBeamSize !== undefined && params.frameBeamSize !== userBeamSize) {
            console.log("  üìè Updating frameBeamSize:", userBeamSize, "‚Üí", params.frameBeamSize)
            userBeamSize = params.frameBeamSize
        }
        if (params.leverLength !== undefined && params.leverLength !== userLeverLength) {
            console.log("  üìè Updating leverLength:", userLeverLength, "‚Üí", params.leverLength)
            userLeverLength = params.leverLength
        }
        if (params.cylinderBodyLength !== undefined && params.cylinderBodyLength !== userCylinderLength) {
            console.log("  üìè Updating cylinderLength:", userCylinderLength, "‚Üí", params.cylinderBodyLength)
            userCylinderLength = params.cylinderBodyLength
        }
        if (params.trackWidth !== undefined && params.trackWidth !== userTrackWidth) {
            console.log("  üìè Updating trackWidth:", userTrackWidth, "‚Üí", params.trackWidth)
            userTrackWidth = params.trackWidth
        }
        if (params.frameToPivot !== undefined && params.frameToPivot !== userFrameToPivot) {
            console.log("  üìè Updating frameToPivot:", userFrameToPivot, "‚Üí", params.frameToPivot)
            userFrameToPivot = params.frameToPivot
        }
        if (params.rodPosition !== undefined && params.rodPosition !== userRodPosition) {
            console.log("  ‚ú® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô: Updating rodPosition:", userRodPosition, "‚Üí", params.rodPosition)
            userRodPosition = params.rodPosition
        }

        // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ì–ï–û–ú–ï–¢–†–ò–ò, –ü–†–ò–•–û–î–Ø–©–ò–ï –ò–ó PYTHON (–º–º)
        if (params.boreHead !== undefined) userBoreHead = Number(params.boreHead)
        if (params.boreRod !== undefined) userBoreRod = Number(params.boreRod)
        if (params.rodDiameter !== undefined) userRodDiameter = Number(params.rodDiameter)
        if (params.pistonThickness !== undefined) userPistonThickness = Number(params.pistonThickness)
        if (params.pistonRodLength !== undefined) userPistonRodLength = Number(params.pistonRodLength)

        // ‚úÖ –ü–û–î–î–ï–†–ñ–ö–ê –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• –ö–õ–Æ–ß–ï–ô (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏) ‚Äî —É–∂–µ –≤ –º–º
        if (params.cylDiamM !== undefined) userBoreHead = Number(params.cylDiamM)
        if (params.rodDiameterM !== undefined) userRodDiameter = Number(params.rodDiameterM)
        if (params.pistonThicknessM !== undefined) userPistonThickness = Number(params.pistonThicknessM)
        if (params.pistonRodLengthM !== undefined) userPistonRodLength = Number(params.pistonRodLengthM)

        if (params.cylinderSegments !== undefined) {
            var newSegments = Math.floor(params.cylinderSegments)
            if (!isNaN(newSegments))
                cylinderSegments = Math.max(3, newSegments)
        }
        if (params.cylinderRings !== undefined) {
            var newRings = Math.floor(params.cylinderRings)
            if (!isNaN(newRings))
                cylinderRings = Math.max(1, newRings)
        }

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–±—Ä–æ—Å –≤–∏–¥–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≥–µ–æ–º–µ—Ç—Ä–∏–∏
        var shouldResetView = (params.frameLength !== undefined ||
                              params.frameHeight !== undefined ||
                              params.trackWidth !== undefined)

        if (shouldResetView) {
            console.log("  üîÑ Significant geometry change - resetting view")
            resetView()
        } else {
            console.log("  ‚úÖ Minor geometry change - view preserved")
        }

        console.log("  ‚úÖ Geometry updated successfully")
    }

    function applyAnimationUpdates(params) {
        if (typeof window !== 'undefined' && window && window.logQmlEvent) {
            try { window.logQmlEvent("function_called", "applyAnimationUpdates"); } catch(e) {}
        }
        console.log("üé¨ main.qml: applyAnimationUpdates() called")
        if (params.amplitude !== undefined) userAmplitude = params.amplitude
        if (params.frequency !== undefined) userFrequency = params.frequency
        if (params.phase !== undefined) userPhaseGlobal = params.phase
        if (params.lf_phase !== undefined) userPhaseFL = params.lf_phase
        if (params.rf_phase !== undefined) userPhaseFR = params.rf_phase
        if (params.lr_phase !== undefined) userPhaseRL = params.lr_phase
        if (params.rr_phase !== undefined) userPhaseRR = params.rr_phase
        console.log("  ‚úÖ Animation updated successfully")
    }

    function applyLightingUpdates(params) {
        if (typeof window !== 'undefined' && window && window.logQmlEvent) {
            try { window.logQmlEvent("function_called", "applyLightingUpdates"); } catch(e) {}
        }
        console.log("üí° main.qml: applyLightingUpdates() called")
        if (params.key_light) {
            if (params.key_light.brightness !== undefined) keyLightBrightness = params.key_light.brightness
            if (params.key_light.color !== undefined) keyLightColor = params.key_light.color
            if (params.key_light.angle_x !== undefined) keyLightAngleX = params.key_light.angle_x
            if (params.key_light.angle_y !== undefined) keyLightAngleY = params.key_light.angle_y
            if (params.key_light.casts_shadow !== undefined) keyLightCastsShadow = !!params.key_light.casts_shadow
            if (params.key_light.bind_to_camera !== undefined) keyLightBindToCamera = !!params.key_light.bind_to_camera
            if (params.key_light.position_x !== undefined) keyLightPosX = Number(params.key_light.position_x)
            if (params.key_light.position_y !== undefined) keyLightPosY = Number(params.key_light.position_y)
        }
        if (params.fill_light) {
            if (params.fill_light.brightness !== undefined) fillLightBrightness = params.fill_light.brightness
            if (params.fill_light.color !== undefined) fillLightColor = params.fill_light.color
            if (params.fill_light.casts_shadow !== undefined) fillLightCastsShadow = !!params.fill_light.casts_shadow
            if (params.fill_light.bind_to_camera !== undefined) fillLightBindToCamera = !!params.fill_light.bind_to_camera
            if (params.fill_light.position_x !== undefined) fillLightPosX = Number(params.fill_light.position_x)
            if (params.fill_light.position_y !== undefined) fillLightPosY = Number(params.fill_light.position_y)
        }
        if (params.rim_light) {
            if (params.rim_light.brightness !== undefined) rimLightBrightness = params.rim_light.brightness
            if (params.rim_light.color !== undefined) rimLightColor = params.rim_light.color
            if (params.rim_light.casts_shadow !== undefined) rimLightCastsShadow = !!params.rim_light.casts_shadow
            if (params.rim_light.bind_to_camera !== undefined) rimLightBindToCamera = !!params.rim_light.bind_to_camera
            if (params.rim_light.position_x !== undefined) rimLightPosX = Number(params.rim_light.position_x)
            if (params.rim_light.position_y !== undefined) rimLightPosY = Number(params.rim_light.position_y)
        }
        if (params.point_light) {
            if (params.point_light.brightness !== undefined) pointLightBrightness = params.point_light.brightness
            if (params.point_light.color !== undefined) pointLightColor = params.point_light.color
            if (params.point_light.position_x !== undefined) pointLightX = Number(params.point_light.position_x)
            if (params.point_light.position_y !== undefined) pointLightY = Number(params.pointLight.position_y)
            if (params.point_light.range !== undefined) pointLightRange = Math.max(1, params.point_light.range)
            if (params.point_light.casts_shadow !== undefined) pointLightCastsShadow = !!params.point_light.casts_shadow
            if (params.point_light.bind_to_camera !== undefined) pointLightBindToCamera = !!params.point_light.bind_to_camera
        }
        console.log("  ‚úÖ Lighting updated successfully")
    }

    function applyMaterialUpdates(params) {
        if (typeof window !== 'undefined' && window && window.logQmlEvent) {
            try { window.logQmlEvent("function_called", "applyMaterialUpdates"); } catch(e) {}
        }
        console.log("üé® main.qml: applyMaterialUpdates() called")
        function applyCommon(values, prefix) {
            if (values.base_color !== undefined) root[prefix + "BaseColor"] = values.base_color
            if (values.metalness !== undefined) root[prefix + "Metalness"] = values.metalness
            if (values.roughness !== undefined) root[prefix + "Roughness"] = values.roughness
            if (values.specular !== undefined) root[prefix + "SpecularAmount"] = values.specular
            if (values.specular_tint !== undefined) root[prefix + "SpecularTint"] = values.specular_tint
            if (values.clearcoat !== undefined) root[prefix + "Clearcoat"] = values.clearcoat
            if (values.clearcoat_roughness !== undefined) root[prefix + "ClearcoatRoughness"] = values.clearcoat_roughness
            if (values.transmission !== undefined) root[prefix + "Transmission"] = values.transmission
            if (values.opacity !== undefined) root[prefix + "Opacity"] = values.opacity
            if (values.ior !== undefined) root[prefix + "Ior"] = values.ior
            if (values.attenuation_distance !== undefined) root[prefix + "AttenuationDistance"] = values.attenuation_distance
            if (values.attenuation_color !== undefined) root[prefix + "AttenuationColor"] = values.attenuation_color
            if (values.emissive_color !== undefined) root[prefix + "EmissiveColor"] = values.emissive_color
            if (values.emissive_intensity !== undefined) root[prefix + "EmissiveIntensity"] = values.emissive_intensity
        }

        if (params.frame !== undefined) applyCommon(params.frame, "frame")
        if (params.lever !== undefined) applyCommon(params.lever, "lever")
        if (params.tail !== undefined) applyCommon(params.tail, "tailRod")
        if (params.cylinder !== undefined) applyCommon(params.cylinder, "cylinder")
        if (params.piston_body !== undefined) {
            applyCommon(params.piston_body, "pistonBody")
            if (params.piston_body.warning_color !== undefined) pistonBodyWarningColor = params.piston_body.warning_color
        }
        if (params.piston_rod !== undefined) {
            applyCommon(params.piston_rod, "pistonRod")
            if (params.piston_rod.warning_color !== undefined) pistonRodWarningColor = params.piston_rod.warning_color
        }
        if (params.joint_tail !== undefined) {
            applyCommon(params.joint_tail, "jointTail")
            if (params.joint_tail.ok_color !== undefined) jointRodOkColor = params.joint_tail.ok_color
            if (params.joint_tail.error_color !== undefined) jointRodErrorColor = params.joint_tail.error_color
        }
        if (params.joint_arm !== undefined) {
            applyCommon(params.joint_arm, "jointArm")
        }

        console.log("  ‚úÖ Materials updated successfully")
    }

    // ‚úÖ –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    function applyQualityUpdates(params) {
        if (typeof window !== 'undefined' && window && window.logQmlEvent) {
            try { window.logQmlEvent("function_called", "applyQualityUpdates"); } catch(e) {}
        }
        console.log("‚öôÔ∏è main.qml: applyQualityUpdates() called")

        // Shadows
        if (params.shadows) {
            if (params.shadows.enabled !== undefined) shadowsEnabled = !!params.shadows.enabled
            if (params.shadows.resolution !== undefined) shadowResolution = String(params.shadows.resolution)
            if (params.shadows.filter !== undefined) shadowFilterSamples = Number(params.shadows.filter)
            if (params.shadows.bias !== undefined) shadowBias = Number(params.shadows.bias)
            if (params.shadows.darkness !== undefined) shadowFactor = Number(params.shadows.darkness)
        }

        // Antialiasing
        if (params.antialiasing) {
            var aa = params.antialiasing
            if (aa.primary !== undefined) {
                aaPrimaryMode = String(aa.primary)
                console.log("  üîß AA primary mode:", aaPrimaryMode)
            }
            if (aa.quality !== undefined) {
                aaQualityLevel = String(aa.quality)
                console.log("  üîß AA quality level:", aaQualityLevel)
            }
            if (aa.post !== undefined) {
                aaPostMode = String(aa.post)
                console.log("  üîß AA post mode:", aaPostMode)
            }
        }

        // TAA settings
        if (params.taa_enabled !== undefined) taaEnabled = !!params.taa_enabled
        if (params.taa_strength !== undefined) taaStrength = Number(params.taa_strength)
        if (params.taa_motion_adaptive !== undefined) taaMotionAdaptive = !!params.taa_motion_adaptive

        // FXAA
        if (params.fxaa_enabled !== undefined) fxaaEnabled = !!params.fxaa_enabled

        // Specular AA
        if (params.specular_aa !== undefined) specularAAEnabled = !!params.specular_aa

        // Dithering (Qt 6.10+)
        if (params.dithering !== undefined && canUseDithering) {
            ditheringEnabled = !!params.dithering
        }

        // Rendering settings
        if (params.render_scale !== undefined) renderScale = Number(params.render_scale)
        if (params.render_policy !== undefined) renderPolicy = String(params.render_policy)
        if (params.frame_rate_limit !== undefined) frameRateLimit = Number(params.frame_rate_limit)

        // OIT
        if (params.oit !== undefined) oitMode = String(params.oit)

        console.log("  ‚úÖ Quality updated successfully")
    }

    // ‚úÖ –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    function applyEffectsUpdates(params) {
        if (typeof window !== 'undefined' && window && window.logQmlEvent) {
            try { window.logQmlEvent("function_called", "applyEffectsUpdates"); } catch(e) {}
        }
        console.log("‚ú® main.qml: applyEffectsUpdates() called")

        // Bloom
        if (params.bloom_enabled !== undefined) bloomEnabled = !!params.bloom_enabled
        if (params.bloom_intensity !== undefined) bloomIntensity = Number(params.bloom_intensity)
        if (params.bloom_threshold !== undefined) bloomThreshold = Number(params.bloom_threshold)
        if (params.bloom_spread !== undefined) bloomSpread = Number(params.bloom_spread)

        // SSAO
        if (params.ssao_enabled !== undefined) ssaoEnabled = !!params.ssao_enabled
        if (params.ssao_strength !== undefined) ssaoIntensity = Number(params.ssao_strength)
        if (params.ssao_radius !== undefined) ssaoRadius = Number(params.ssao_radius)

        // Depth of Field
        if (params.depth_of_field !== undefined) depthOfFieldEnabled = !!params.depth_of_field
        if (params.dof_focus_distance !== undefined) dofFocusDistance = Number(params.dof_focus_distance)
        if (params.dof_blur !== undefined) dofBlurAmount = Number(params.dof_blur)

        // Motion Blur
        if (params.motion_blur !== undefined) motionBlurEnabled = !!params.motion_blur
        if (params.motion_blur_amount !== undefined) motionBlurAmount = Number(params.motion_blur_amount)

        // Lens Flare
        if (params.lens_flare !== undefined) lensFlareEnabled = !!params.lens_flare

        // Vignette
        if (params.vignette !== undefined) vignetteEnabled = !!params.vignette
        if (params.vignette_strength !== undefined) vignetteStrength = Number(params.vignette_strength)

        // Tonemap
        if (params.tonemap_enabled !== undefined) tonemapEnabled = !!params.tonemap_enabled
        if (params.tonemap_mode !== undefined) tonemapModeName = String(params.tonemap_mode)
        if (params.tonemap_exposure !== undefined) tonemapExposure = Number(params.tonemap_exposure)
        if (params.tonemap_white_point !== undefined) tonemapWhitePoint = Number(params.tonemap_white_point)

        console.log("  ‚úÖ Effects updated successfully")
    }

    // ‚úÖ –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
    function applyCameraUpdates(params) {
        if (typeof window !== 'undefined' && window && window.logQmlEvent) {
            try { window.logQmlEvent("function_called", "applyCameraUpdates"); } catch(e) {}
        }
        console.log("üì∑ main.qml: applyCameraUpdates() called")

        if (params.fov !== undefined) cameraFov = Number(params.fov)
        if (params.near !== undefined) cameraNear = Number(params.near)
        if (params.far !== undefined) cameraFar = Number(params.far)
        if (params.speed !== undefined) cameraSpeed = Number(params.speed)
        if (params.auto_rotate !== undefined) autoRotate = !!params.auto_rotate
        if (params.auto_rotate_speed !== undefined) autoRotateSpeed = Number(params.auto_rotate_speed)

        console.log("  ‚úÖ Camera updated successfully")
    }

    // ‚úÖ –ü–û–õ–ù–ê–Ø —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è updateEnvironment()
    function applyEnvironmentUpdates(params) {
        if (typeof window !== 'undefined' && window && window.logQmlEvent) {
            try { window.logQmlEvent("function_called", "applyEnvironmentUpdates"); } catch(e) {}
        }

        // ‚úÖ –î–ï–¢–ê–õ–¨–ù–´–ô –õ–û–ì –ù–ê–ß–ê–õ–¨–ù–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø
        console.log("üåç ‚ïê‚ïê‚ïê applyEnvironmentUpdates START ‚ïê‚ïê‚ïê")
        console.log("  üì• –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", JSON.stringify(params))
        console.log("  üìä –¢–ï–ö–£–©–ï–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        console.log("     iblEnabled:", iblEnabled)
        console.log("     iblLightingEnabled:", iblLightingEnabled)
        console.log("     iblBackgroundEnabled:", iblBackgroundEnabled)
        console.log("     iblRotationDeg:", iblRotationDeg)
        console.log("     iblIntensity:", iblIntensity)

        // --- Backward-compatible flat keys ---
        if (params.background_mode !== undefined) backgroundMode = params.background_mode
        if (params.background_color !== undefined) backgroundColor = params.background_color

        // ‚úÖ CRITICAL FIX v4.9.5: –ù–ï–ó–ê–í–ò–°–ò–ú–´–ï –§–õ–ê–ì–ò - –∫–∞–∂–¥—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ!
        // Master —Ñ–ª–∞–≥ ibl_enabled –±–æ–ª—å—à–µ –ù–ï –≤–ª–∏—è–µ—Ç –Ω–∞ lighting/background —Ñ–ª–∞–≥–∏
        if (params.ibl_enabled !== undefined) {
            iblEnabled = !!params.ibl_enabled
            console.log("  üîß IBL master enabled –æ–±–Ω–æ–≤–ª–µ–Ω:", iblEnabled)
            // ‚ùå –í–ê–ñ–ù–û: –ù–ï –∫–æ–ø–∏—Ä—É–µ–º –≤ iblLightingEnabled!
            // –ö–∞–∂–¥—ã–π —Ñ–ª–∞–≥ —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–∑–∞–≤–∏—Å–∏–º
        }

        // ‚úÖ –†–ê–ó–î–ï–õ–¨–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï —á–µ—Ä–µ–∑ –ø–ª–æ—Å–∫–∏–µ –∫–ª—é—á–∏
        if (params.ibl_lighting_enabled !== undefined) {
            iblLightingEnabled = !!params.ibl_lighting_enabled
            console.log("  üí° IBL lighting –æ–±–Ω–æ–≤–ª–µ–Ω:", iblLightingEnabled)
        }

        if (params.ibl_background_enabled !== undefined) {
            iblBackgroundEnabled = !!params.ibl_background_enabled
            console.log("  üé® IBL background –æ–±–Ω–æ–≤–ª–µ–Ω:", iblBackgroundEnabled)
        }

        if (params.skybox_enabled !== undefined) {
            iblBackgroundEnabled = !!params.skybox_enabled
            console.log("  üåå Skybox –æ–±–Ω–æ–≤–ª–µ–Ω:", iblBackgroundEnabled)
        }

        if (params.ibl_intensity !== undefined) {
            iblIntensity = Number(params.ibl_intensity)
            console.log("  ‚ú® IBL intensity –æ–±–Ω–æ–≤–ª–µ–Ω:", iblIntensity)
        }

        if (params.ibl_rotation !== undefined) {
            iblRotationDeg = Number(params.ibl_rotation)
            console.log("  üîÑ IBL rotation –æ–±–Ω–æ–≤–ª–µ–Ω:", iblRotationDeg)
        }

        if (params.ibl_source !== undefined && params.ibl_source) {
            iblPrimarySource = resolveUrl(params.ibl_source)
            console.log("  üìÅ IBL source –æ–±–Ω–æ–≤–ª–µ–Ω:", iblPrimarySource)
        }

        if (params.ibl_fallback !== undefined && params.ibl_fallback) {
            iblFallbackSource = resolveUrl(params.ibl_fallback)
            console.log("  üìÅ IBL fallback –æ–±–Ω–æ–≤–ª–µ–Ω:", iblFallbackSource)
        }

        if (params.fog_enabled !== undefined) fogEnabled = !!params.fog_enabled
        if (params.fog_color !== undefined) fogColor = params.fog_color
        if (params.fog_density !== undefined) fogDensity = Number(params.fog_density)
        if (params.fog_near !== undefined) fogNear = Number(params.fog_near)
        if (params.fog_far !== undefined) fogFar = Number(params.fog_far)
        if (params.ao_enabled !== undefined) ssaoEnabled = !!params.ao_enabled
        if (params.ao_radius !== undefined) ssaoRadius = Number(params.ao_radius)
        if (params.ao_strength !== undefined) ssaoIntensity = Number(params.ao_strength)

        // --- New nested structure from Python panel ---
        if (params.background) {
            const bg = params.background
            if (bg.mode !== undefined) backgroundMode = bg.mode
            if (bg.color !== undefined) backgroundColor = bg.color
            if (bg.skybox_enabled !== undefined) {
                iblBackgroundEnabled = !!bg.skybox_enabled
                console.log("  üåå Skybox (from bg) –æ–±–Ω–æ–≤–ª–µ–Ω:", iblBackgroundEnabled)
            }
        }

        if (params.ibl) {
            const ibl = params.ibl

            // ‚úÖ CRITICAL FIX v4.9.5: Master —Ñ–ª–∞–≥ –±–æ–ª—å—à–µ –ù–ï –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ–¥—Ñ–ª–∞–≥–∏!
            if (ibl.enabled !== undefined) {
                iblEnabled = !!ibl.enabled
                console.log("  üîß IBL master (nested) –æ–±–Ω–æ–≤–ª–µ–Ω:", iblEnabled)
                // ‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º lighting/background!
                // –û–Ω–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ù–ï–ó–ê–í–ò–°–ò–ú–û —á–µ—Ä–µ–∑ —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
            }

            // ‚úÖ –ù–ï–ó–ê–í–ò–°–ò–ú–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï —á–µ—Ä–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
            if (ibl.lighting_enabled !== undefined) {
                iblLightingEnabled = !!ibl.lighting_enabled
                console.log("  üí° IBL lighting (nested) –æ–±–Ω–æ–≤–ª–µ–Ω:", iblLightingEnabled)
            }

            if (ibl.background_enabled !== undefined) {
                iblBackgroundEnabled = !!ibl.background_enabled
                console.log("  üé® IBL background (nested) –æ–±–Ω–æ–≤–ª–µ–Ω:", iblBackgroundEnabled)
            }

            if (ibl.intensity !== undefined) {
                iblIntensity = Number(ibl.intensity)
                console.log("  ‚ú® IBL intensity (nested) –æ–±–Ω–æ–≤–ª–µ–Ω:", iblIntensity)
            }

            if (ibl.rotation !== undefined) {
                iblRotationDeg = Number(ibl.rotation)
                console.log("  üîÑ IBL rotation (nested) –æ–±–Ω–æ–≤–ª–µ–Ω:", iblRotationDeg)
            }

            if (ibl.source !== undefined && ibl.source) {
                iblPrimarySource = resolveUrl(ibl.source)
                console.log("  üìÅ IBL source (nested) –æ–±–Ω–æ–≤–ª–µ–Ω:", iblPrimarySource)
            }

            if (ibl.fallback !== undefined && ibl.fallback) {
                iblFallbackSource = resolveUrl(ibl.fallback)
                console.log("  üìÅ IBL fallback (nested) –æ–±–Ω–æ–≤–ª–µ–Ω:", iblFallbackSource)
            }
            // offset_x/offset_y/bind_to_camera –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        }

        if (params.fog) {
            const fog = params.fog
            if (fog.enabled !== undefined) fogEnabled = !!fog.enabled
            if (fog.color !== undefined) fogColor = fog.color
            if (fog.density !== undefined) fogDensity = Number(fog.density)
            if (fog.near !== undefined) fogNear = Number(fog.near)
            if (fog.far !== undefined) fogFar = Number(fog.far)
        }

        if (params.ambient_occlusion) {
            const ao = params.ambient_occlusion
            if (ao.enabled !== undefined) ssaoEnabled = !!ao.enabled
            if (ao.radius !== undefined) ssaoRadius = Number(ao.radius)
            if (ao.strength !== undefined) ssaoIntensity = Number(ao.strength)
        }

        // ‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ô –õ–û–ì –°–û–°–¢–û–Ø–ù–ò–Ø
        console.log("  üìä –§–ò–ù–ê–õ–¨–ù–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        console.log("     iblEnabled:", iblEnabled)
        console.log("     iblLightingEnabled:", iblLightingEnabled)
        console.log("     iblBackgroundEnabled:", iblBackgroundEnabled)
        console.log("     iblRotationDeg:", iblRotationDeg)
        console.log("     iblIntensity:", iblIntensity)
        console.log("üåç ‚ïê‚ïê‚ïê applyEnvironmentUpdates END ‚ïê‚ïê‚ïê")
    }

    View3D {
        id: view3d
        anchors.fill: parent

        environment: ExtendedSceneEnvironment {
            id: mainEnvironment
            // –ü–æ–∫–∞–∑ —Ñ–æ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –¢–û–õ–¨–ö–û –æ—Ç —á–µ–∫–±–æ–∫—Å–∞ skybox_enabled –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ IBL
            backgroundMode: (iblBackgroundEnabled && iblReady) ? SceneEnvironment.SkyBox : SceneEnvironment.Color
            clearColor: root.backgroundColor
            // ‚úÖ –§–æ–Ω (skybox) —Ç–µ–ø–µ—Ä—å –ù–ï –∑–∞–≤–∏—Å–∏—Ç –æ—Ç lightProbe –∏ –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–º IBL –æ—Å–≤–µ—â–µ–Ω–∏–∏
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º HDR-–ø—Ä–æ–±—É –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –∫—É–±–∫–∞—Ä—Ç—ã —Ñ–æ–Ω–∞
            skyBoxCubeMap: (iblBackgroundEnabled && iblReady) ? iblLoader.probe : null
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —á–µ–∫–±–æ–∫—Å IBL —É–ø—Ä–∞–≤–ª—è–µ—Ç –¢–û–õ–¨–ö–û –æ—Å–≤–µ—â–µ–Ω–∏–µ–º
            // –û—Å–≤–µ—â–µ–Ω–∏–µ –æ—Ç IBL –∑–∞–≤–∏—Å–∏—Ç –æ—Ç iblLightingEnabled, –∞ —Ñ–æ–Ω ‚Äî –æ—Ç iblBackgroundEnabled
            lightProbe: (iblLightingEnabled && iblReady) ? iblLoader.probe : null
            probeExposure: root.iblIntensity
            probeOrientation: Qt.vector3d(0, root.iblRotationDeg, 0)

            // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏–∞–ª–∏–∞—Å–∏–Ω–≥–∞!
            antialiasingMode: {
                if (root.aaPrimaryMode === "ssaa") return SceneEnvironment.SSAA
                if (root.aaPrimaryMode === "msaa") return SceneEnvironment.MSAA
                if (root.aaPrimaryMode === "progressive") return SceneEnvironment.ProgressiveAA
                return SceneEnvironment.NoAA
            }
            antialiasingQuality: {
                if (root.aaQualityLevel === "high") return SceneEnvironment.High
                if (root.aaQualityLevel === "medium") return SceneEnvironment.Medium
                if (root.aaQualityLevel === "low") return SceneEnvironment.Low
                return SceneEnvironment.Medium
            }

            // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Post-processing AA
            temporalAAEnabled: (root.aaPostMode === "taa" && root.taaEnabled && (!root.taaMotionAdaptive || root.cameraIsMoving))
            temporalAAStrength: root.taaStrength
            fxaaEnabled: (root.aaPostMode === "fxaa" || root.fxaaEnabled)
            specularAAEnabled: root.canUseSpecularAA && root.specularAAEnabled

            // ‚úÖ Dithering (Qt 6.10+)
            Component.onCompleted: {
                if (root.canUseDithering) {
                    console.log("‚úÖ Qt 6.10+ - enabling dithering")
                    mainEnvironment.ditheringEnabled = Qt.binding(function() {
                        return root.ditheringEnabled
                    })
                } else {
                    console.log("‚ö†Ô∏è Qt < 6.10 - dithering not available")
                }
            }

            // Fog (Qt 6.10+)
            fog: Fog {
                enabled: root.fogEnabled
                color: root.fogColor
                depthEnabled: true
                depthNear: root.fogNear
                depthFar: root.fogFar
                depthCurve: 1.0
            }

            // Tonemap
            tonemapMode: tonemapEnabled ? (
                tonemapModeName === "filmic" ? SceneEnvironment.TonemapModeFilmic :
                tonemapModeName === "aces" ? SceneEnvironment.TonemapModeFilmic : // –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ–ª–ª–±—ç–∫
                tonemapModeName === "reinhard" ? SceneEnvironment.TonemapModeReinhard :
                tonemapModeName === "gamma" ? SceneEnvironment.TonemapModeLinear : // –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ–ª–ª–±—ç–∫
                tonemapModeName === "linear" ? SceneEnvironment.TonemapModeLinear : SceneEnvironment.TonemapModeNone
            ) : SceneEnvironment.TonemapModeNone
            exposure: root.tonemapExposure
            whitePoint: root.tonemapWhitePoint

            // Bloom / SSAO
            glowEnabled: root.bloomEnabled
            glowIntensity: root.bloomIntensity
            glowHDRMinimumValue: root.bloomThreshold
            glowBloom: root.bloomSpread
            glowQualityHigh: true
            glowUseBicubicUpscale: true
            glowHDRMaximumValue: 8.0
            glowHDRScale: 2.0

            aoEnabled: root.ssaoEnabled
            aoDistance: root.ssaoRadius
            aoStrength: root.ssaoIntensity * 100
            aoSoftness: 20
            aoDither: true
            aoSampleRate: 3

            // Depth of Field
            depthOfFieldEnabled: root.depthOfFieldEnabled
            depthOfFieldFocusDistance: root.dofFocusDistance
            depthOfFieldBlurAmount: root.dofBlurAmount

            // Vignette
            vignetteEnabled: root.vignetteEnabled
            vignetteStrength: root.vignetteStrength
            vignetteRadius: 0.4

            // Lens Flare
            lensFlareEnabled: root.lensFlareEnabled
            lensFlareGhostCount: 3
            lensFlareGhostDispersal: 0.6
            lensFlareHaloWidth: 0.25
            lensFlareBloomBias: 0.35
            lensFlareStretchToAspect: 1.0

            // OIT (Order Independent Transparency)
            oitMethod: root.oitMode === "weighted" ? SceneEnvironment.OITWeightedBlended : SceneEnvironment.OITNone

            // Color adjustments
            colorAdjustmentsEnabled: true
            adjustmentBrightness: 1.0
            adjustmentContrast: 1.05
            adjustmentSaturation: 1.05
        }

        Node {
            id: worldRoot
        }

        // ===============================================================
        // ‚úÖ MATERIAL LIBRARY - –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï
        // ===============================================================

        SharedMaterials {
            id: materials

            // ‚úÖ Bind –≤—Å–µ root properties –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            frameBaseColor: root.frameBaseColor
            frameMetalness: root.frameMetalness
            frameRoughness: root.frameRoughness
            frameSpecularAmount: root.frameSpecularAmount
            frameSpecularTint: root.frameSpecularTint
            frameClearcoat: root.frameClearcoat
            frameClearcoatRoughness: root.frameClearcoatRoughness
            frameTransmission: root.frameTransmission
            frameOpacity: root.frameOpacity
            frameIor: root.frameIor
            frameAttenuationDistance: root.frameAttenuationDistance
            frameAttenuationColor: root.frameAttenuationColor
            frameEmissiveColor: root.frameEmissiveColor
            frameEmissiveIntensity: root.frameEmissiveIntensity

            leverBaseColor: root.leverBaseColor
            leverMetalness: root.leverMetalness
            leverRoughness: root.leverRoughness
            leverSpecularAmount: root.leverSpecularAmount
            leverSpecularTint: root.leverSpecularTint
            leverClearcoat: root.leverClearcoat
            leverClearcoatRoughness: root.leverClearcoatRoughness
            leverTransmission: root.leverTransmission
            leverOpacity: root.leverOpacity
            leverIor: root.leverIor
            leverAttenuationDistance: root.leverAttenuationDistance
            leverAttenuationColor: root.leverAttenuationColor
            leverEmissiveColor: root.leverEmissiveColor
            leverEmissiveIntensity: root.leverEmissiveIntensity

            tailRodBaseColor: root.tailRodBaseColor
            tailRodMetalness: root.tailRodMetalness
            tailRodRoughness: root.tailRodRoughness
            tailRodSpecularAmount: root.tailRodSpecularAmount
            tailRodSpecularTint: root.tailRodSpecularTint
            tailRodClearcoat: root.tailRodClearcoat
            tailRodClearcoatRoughness: root.tailRodClearcoatRoughness
            tailRodTransmission: root.tailRodTransmission
            tailRodOpacity: root.tailRodOpacity
            tailRodIor: root.tailRodIor
            tailRodAttenuationDistance: root.tailRodAttenuationDistance
            tailRodAttenuationColor: root.tailRodAttenuationColor
            tailRodEmissiveColor: root.tailRodEmissiveColor
            tailRodEmissiveIntensity: root.tailRodEmissiveIntensity

            cylinderBaseColor: root.cylinderBaseColor
            cylinderMetalness: root.cylinderMetalness
            cylinderRoughness: root.cylinderRoughness
            cylinderSpecularAmount: root.cylinderSpecularAmount
            cylinderSpecularTint: root.cylinderSpecularTint
            cylinderClearcoat: root.cylinderClearcoat
            cylinderClearcoatRoughness: root.cylinderClearcoatRoughness
            cylinderTransmission: root.cylinderTransmission
            cylinderOpacity: root.cylinderOpacity
            cylinderIor: root.cylinderIor
            cylinderAttenuationDistance: root.cylinderAttenuationDistance
            cylinderAttenuationColor: root.cylinderAttenuationColor
            cylinderEmissiveColor: root.cylinderEmissiveColor
            cylinderEmissiveIntensity: root.cylinderEmissiveIntensity

            pistonBodyBaseColor: root.pistonBodyBaseColor
            pistonBodyWarningColor: root.pistonBodyWarningColor
            pistonBodyMetalness: root.pistonBodyMetalness
            pistonBodyRoughness: root.pistonBodyRoughness
            pistonBodySpecularAmount: root.pistonBodySpecularAmount
            pistonBodySpecularTint: root.pistonBodySpecularTint
            pistonBodyClearcoat: root.pistonBodyClearcoat
            pistonBodyClearcoatRoughness: root.pistonBodyClearcoatRoughness
            pistonBodyTransmission: root.pistonBodyTransmission
            pistonBodyOpacity: root.pistonBodyOpacity
            pistonBodyIor: root.pistonBodyIor
            pistonBodyAttenuationDistance: root.pistonBodyAttenuationDistance
            pistonBodyAttenuationColor: root.pistonBodyAttenuationColor
            pistonBodyEmissiveColor: root.pistonBodyEmissiveColor
            pistonBodyEmissiveIntensity: root.pistonBodyEmissiveIntensity

            pistonRodBaseColor: root.pistonRodBaseColor
            pistonRodWarningColor: root.pistonRodWarningColor
            pistonRodMetalness: root.pistonRodMetalness
            pistonRodRoughness: root.pistonRodRoughness
            pistonRodSpecularAmount: root.pistonRodSpecularAmount
            pistonRodSpecularTint: root.pistonRodSpecularTint
            pistonRodClearcoat: root.pistonRodClearcoat
            pistonRodClearcoatRoughness: root.pistonRodClearcoatRoughness
            pistonRodTransmission: root.pistonRodTransmission
            pistonRodOpacity: root.pistonRodOpacity
            pistonRodIor: root.pistonRodIor
            pistonRodAttenuationDistance: root.pistonRodAttenuationDistance
            pistonRodAttenuationColor: root.pistonRodAttenuationColor
            pistonRodEmissiveColor: root.pistonRodEmissiveColor
            pistonRodEmissiveIntensity: root.pistonRodEmissiveIntensity

            jointTailBaseColor: root.jointTailBaseColor
            jointTailMetalness: root.jointTailMetalness
            jointTailRoughness: root.jointTailRoughness
            jointTailSpecularAmount: root.jointTailSpecularAmount
            jointTailSpecularTint: root.jointTailSpecularTint
            jointTailClearcoat: root.jointTailClearcoat
            jointTailClearcoatRoughness: root.jointTailClearcoatRoughness
            jointTailTransmission: root.jointTailTransmission
            jointTailOpacity: root.jointTailOpacity
            jointTailIor: root.jointTailIor
            jointTailAttenuationDistance: root.jointTailAttenuationDistance
            jointTailAttenuationColor: root.jointTailAttenuationColor
            jointTailEmissiveColor: root.jointTailEmissiveColor
            jointTailEmissiveIntensity: root.jointTailEmissiveIntensity

            jointArmBaseColor: root.jointArmBaseColor
            jointArmMetalness: root.jointArmMetalness
            jointArmRoughness: root.jointArmRoughness
            jointArmSpecularAmount: root.jointArmSpecularAmount
            jointArmSpecularTint: root.jointArmSpecularTint
            jointArmClearcoat: root.jointArmClearcoat
            jointArmClearcoatRoughness: root.jointArmClearcoatRoughness
            jointArmTransmission: root.jointArmTransmission
            jointArmOpacity: root.jointArmOpacity
            jointArmIor: root.jointArmIor
            jointArmAttenuationDistance: root.jointArmAttenuationDistance
            jointArmAttenuationColor: root.jointArmAttenuationColor
            jointArmEmissiveColor: root.jointArmEmissiveColor
            jointArmEmissiveIntensity: root.jointArmEmissiveIntensity

            jointRodOkColor: root.jointRodOkColor
            property color jointRodErrorColor: "#ff0000"
        }

    }  // –∫–æ–Ω–µ—Ü View3D

    // ===============================================================
    // ‚úÖ CRITICAL FIX: CAMERA CONTROLLER AS OVERLAY
    // ===============================================================

    // ‚úÖ CameraController –ü–û–í–ï–†–• View3D –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏!
    CameraController {
        id: cameraController

        // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–ø–æ–ª–Ω—è–µ—Ç –≤–µ—Å—å —ç–∫—Ä–∞–Ω –ø–æ–≤–µ—Ä—Ö View3D!
        anchors.fill: parent

        worldRoot: worldRoot
        view3d: view3d

        // ‚úÖ Bind to geometry for pivot/fit calculations
        frameLength: root.userFrameLength
        frameHeight: root.userFrameHeight
        beamSize: root.userBeamSize
        trackWidth: root.userTrackWidth

        // ‚úÖ Bind to TAA for motion detection
        taaMotionAdaptive: root.taaMotionAdaptive

        // ‚úÖ Callback for animation toggle
        onToggleAnimation: {
            root.isRunning = !root.isRunning
        }

        // ‚úÖ Initial camera state
        Component.onCompleted: {
            // Sync camera settings from root to CameraState
            state.fov = root.cameraFov
            state.nearPlane = root.cameraNear
            state.farPlane = root.cameraFar
            state.speed = root.cameraSpeed
            state.autoRotate = root.autoRotate
            state.autoRotateSpeed = root.autoRotateSpeed

            console.log("üì∑ Camera initialized: distance =", state.distance, "yaw =", state.yawDeg, "pitch =", state.pitchDeg)
            console.log("üñ±Ô∏è Mouse controls: OVERLAY MODE ACTIVE (z=1000)")
        }
    }

    // ===============================================================
    // KEYBOARD SHORTCUTS (preserved)
    // ===============================================================

    Keys.onPressed: (e) => {
        if (e.key === Qt.Key_R) {
            resetView()
        } else if (e.key === Qt.Key_Space) {
            isRunning = !isRunning
        } else if (e.key === Qt.Key_F) {
            autoFitFrame()
        }
    }

    focus: true

    // ===============================================================
    // ‚úÖ UPDATED INFO PANEL (with rod length information)
    // ===============================================================

    Rectangle {
        anchors.top: parent.top
        anchors.left: parent.left
        anchors.margins: 15
        width: 550
        height: 240
        color: "#aa000000"
        border.color: "#60ffffff"
        radius: 8

        Column {
            anchors.centerIn: parent
            spacing: 6

            Text {
                text: "PneumoStabSim Professional | –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ö–ò–ù–ï–ú–ê–¢–ò–ö–ê v4.1"
                color: "#ffffff"
                font.pixelSize: 14
                font.bold: true
            }

            Text {
                text: "üîß Qt " + Qt.version + " | Dithering: " + (canUseDithering ? "‚úÖ Supported" : "‚ùå Not available")
                color: canUseDithering ? "#00ff88" : "#ffaa00"
                font.pixelSize: 10
            }

            Text {
                text: "üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª–∏–Ω—ã —à—Ç–æ–∫–æ–≤"
                color: "#00ff88"
                font.pixelSize: 11
            }

            Text {
                text: "‚úÖ –î–ª–∏–Ω–∞ —à—Ç–æ–∫–∞: " + userPistonRodLength + "–º–º (–ö–û–ù–°–¢–ê–ù–¢–ê)"
                color: "#ffaa00"
                font.pixelSize: 10
            }

            Text {
                text: "üîç –û—à–∏–±–∫–∏ –¥–ª–∏–Ω—ã: FL=" + (flCorner.rodLengthError ? flCorner.rodLengthError.toFixed(2) : "0.00") +
                      "–º–º | FR=" + (frCorner.rodLengthError ? frCorner.rodLengthError.toFixed(2) : "0.00") +
                      "–º–º | RL=" + (rlCorner.rodLengthError ? rlCorner.rodLengthError.toFixed(2) : "0.00") +
                      "–º–º | RR=" + (rrCorner.rodLengthError ? rrCorner.rodLengthError.toFixed(2) : "0.00") + "–º–º"
                color: "#aaddff"
                font.pixelSize: 9
            }

            Text {
                text: "üì∑ –ö–∞–º–µ—Ä–∞: " + cameraController.distance.toFixed(0) + "–º–º | Pivot: (" +
                      cameraController.pivot.x.toFixed(0) + ", " + cameraController.pivot.y.toFixed(0) + ", " + cameraController.pivot.z.toFixed(0) + ")"
                color: "#cccccc"
                font.pixelSize: 10
            }

            Text {
                text: "üéÆ –õ–ö–ú-–≤—Ä–∞—â–µ–Ω–∏–µ | –ü–ö–ú-–ø–∞–Ω–æ—Ä–∞–º–∞ | –ö–æ–ª–µ—Å–æ-–∑—É–º | R-—Å–±—Ä–æ—Å | F-–∞–≤—Ç–æ—Ñ–∏—Ç | Space-–∞–Ω–∏–º–∞—Ü–∏—è"
                color: "#aaddff"
                font.pixelSize: 9
            }
        }
    }

    // ===============================================================
    // INITIALIZATION (with rod length validation)
    // ===============================================================

    Component.onCompleted: {
        // –õ–æ–≥ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∞
        console.log("[START] IBL primary:", iblPrimarySource,
                    "fallback:", iblFallbackSource,
                    "mode:", backgroundMode,
                    "iblEnabled:", iblEnabled,
                    "skybox:", iblBackgroundEnabled)

        console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        console.log("üöÄ PneumoStabSim PHASE 2 CAMERA SYSTEM v1.0")
        console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        console.log("üîß Qt Version:", Qt.version)
        console.log("   Qt Major:", qtMajor, "| Qt Minor:", qtMinor)
        console.log("   Dithering support:", canUseDithering ? "‚úÖ YES (Qt 6.10+)" : "‚ùå NO (Qt < 6.10)")
        console.log("   Specular AA:", canUseSpecularAA ? "ENABLED" : "DISABLED (temporary workaround)")
        console.log("‚úÖ PHASE 2: CAMERA SYSTEM MODULAR")
        console.log("   üé• CameraController: Integrated")
        console.log("   üéØ CameraState: 21 properties ‚Üí 1 module")
        console.log("   üñ±Ô∏è MouseControls: Separated")
        console.log("   üåç CameraRig: Optimized")
        console.log("‚úÖ CRITICAL FIX v4.9.4:")
        console.log("   üîß Skybox rotation: INDEPENDENT from camera")
        console.log("   üîß probeOrientation uses ONLY iblRotationDeg")
        console.log("   üîß Camera yaw does NOT affect skybox orientation")
        console.log("   üîß Skybox and camera are COMPLE–¢ELY DECOUPLED")
        console.log("‚úÖ –í–°–ï –ü–ê–†–ê–ú–ï–¢–†–´ GRAPHICSPANEL:")
        console.log("   üî• –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è (IOR):", cylinderIor)
        console.log("   üî• IBL –æ—Å–≤–µ—â–µ–Ω–∏–µ:", iblLightingEnabled, "| IBL —Ñ–æ–Ω:", iblBackgroundEnabled, "| –ü–æ–≤–æ—Ä–æ—Ç:", iblRotationDeg.toFixed(1) + "¬∞")
        console.log("   üî• –¢—É–º–∞–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∞:", fogEnabled)
        console.log("   üî• –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã: Bloom, SSAO, DoF, Vignette, Lens Flare")
        console.log("   üî• Dithering:", canUseDithering ? "Enabled" : "Not available")
        console.log("   üî• Procedural geometry: segments=" + cylinderSegments + ", rings=" + cylinderRings)
        console.log("üéØ –°–¢–ê–¢–£–°: PHASE 2 CAMERA INTEGRATION COMPLETE")
        console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")

        syncRenderSettings()
        cameraController.resetView()  // ‚úÖ PHASE 2: delegate to CameraController
        view3d.forceActiveFocus()
    }

    // IBL readiness console log for Python-side logger
    onIblReadyChanged: {
        console.log("[IBL] READY:", JSON.stringify({ ready: iblReady }))
    }

    // Model of HDR/EXR files from assets/hdr
    FolderListModel {
        id: hdriModel
        folder: Qt.resolvedUrl("../hdr")
        nameFilters: ["*.hdr", "*.exr"]
        showDirs: false
        showDotAndDotDot: false
    }

}
