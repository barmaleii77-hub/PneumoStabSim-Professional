name: CI Workflow

on:
 push:
 branches:
 - master
 - develop
 pull_request:
 branches:
 - master
 - develop

jobs:
 lint:
 name: Lint & Type Check
 runs-on: ubuntu-latest

 steps:
 - name: Checkout repository
 uses: actions/checkout@v4

 - name: Set up Python
 uses: actions/setup-python@v5
 with:
 python-version: '3.13'
 cache: 'pip'
 cache-dependency-path: |
 pyproject.toml
 requirements*.txt

 - name: Install dependencies
 run: |
 python -m pip install --upgrade pip
 pip install -e .[dev]
 pip install coverage

 - name: Ruff lint
 run: |
 set -o pipefail
 mkdir -p artifacts/lint
 ruff check src tests tools app.py 2>&1 | tee artifacts/lint/ruff-check.log
 ruff format --check src tests tools app.py 2>&1 | tee artifacts/lint/ruff-format.log

 - name: Mypy type check
 run: |
 set -o pipefail
 mkdir -p artifacts/lint
 python -m mypy --config-file mypy.ini $(tr '\n' ' ' < mypy_targets.txt) 2>&1 | tee artifacts/lint/mypy.log

 - name: QML lint
 run: |
 set -o pipefail
 mkdir -p artifacts/lint
 make qml-lint QML_LINTER=pyside6-qmllint 2>&1 | tee artifacts/lint/qmllint.log

 - name: Restore .NET dependencies
 run: dotnet restore PneumoStabSim-Professional.sln

 - name: dotnet format (verify)
 run: dotnet format src/PneumoStabSim.Core/PneumoStabSim.Core.csproj --verify-no-changes --severity error

 - name: Upload lint artifacts
 if: always()
 uses: actions/upload-artifact@v4
 with:
 name: lint-logs-${{ runner.os }}
 path: artifacts/lint
 if-no-files-found: warn

 tests:
 name: Test Matrix
 needs: lint
 strategy:
 fail-fast: false
 matrix:
 os: [ubuntu-latest, windows-latest, macos-latest]
 runs-on: ${{ matrix.os }}

 steps:
 - name: Checkout repository
 uses: actions/checkout@v4

 - name: Set up Python
 uses: actions/setup-python@v5
 with:
 python-version: '3.13'
 cache: 'pip'
 cache-dependency-path: |
 pyproject.toml
 requirements*.txt

 - name: Restore pip cache (legacy)
 if: runner.os == 'Linux'
 uses: actions/cache@v4
 with:
 path: ~/.cache/pip
 key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml', 'requirements*.txt') }}
 restore-keys: |
 ${{ runner.os }}-pip-

 - name: Install Qt
 uses: jurplel/install-qt-action@v4
 with:
 version: 6.6.3
 modules: qtbase qtdeclarative qtquick3d
 cache: true

 - name: Install dependencies
 run: |
 python -m pip install --upgrade pip
 pip install -e .[dev]
 pip install pytest-cov pytest-xdist

 - name: Configure Qt runtime paths
 shell: python
 run: |
 import os
 from pathlib import Path
 from PySide6.QtCore import QLibraryInfo, LibraryLocation

 def append_env(key: str, value: str) -> None:
 if not value:
 return
 env_file = Path(os.environ["GITHUB_ENV"])
