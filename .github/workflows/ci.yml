name: Continuous Integration

on:
 push:
 branches: [ master, develop ]
 pull_request:
 branches: [ master, develop ]
 workflow_dispatch:

env:
 QT_QPA_PLATFORM: offscreen
 QT_QUICK_BACKEND: software

jobs:
 lint:
 name: Lint & Type Check
 runs-on: ubuntu-latest
 steps:
 - name: Checkout repository
 uses: actions/checkout@v4

 - name: Set up Python
 uses: actions/setup-python@v5
 with:
 python-version: '3.13'
 cache: 'pip'
 cache-dependency-path: |
 pyproject.toml
 requirements*.txt

 - name: Install dependencies
 run: |
 python -m pip install --upgrade pip
 pip install -e .[dev]
 pip install coverage

 - name: Ruff lint
 run: |
 set -o pipefail
 mkdir -p artifacts/lint
 ruff check src tests tools app.py2>&1 | tee artifacts/lint/ruff-check.log
 ruff format --check src tests tools app.py2>&1 | tee artifacts/lint/ruff-format.log

 - name: Mypy type check
 run: |
 set -o pipefail
 mkdir -p artifacts/lint
 mypy src tools app.py --config-file pyproject.toml2>&1 | tee artifacts/lint/mypy.log

 - name: Upload lint artifacts
 if: always()
 uses: actions/upload-artifact@v4
 with:
 name: lint-logs-${{ runner.os }}
 path: artifacts/lint
 if-no-files-found: warn

 tests:
 name: Test Matrix
 needs: lint
 strategy:
 fail-fast: false
 matrix:
 os: [ubuntu-latest, windows-latest, macos-latest]
 runs-on: ${{ matrix.os }}

 steps:
 - name: Checkout repository
 uses: actions/checkout@v4

 - name: Set up Python
 uses: actions/setup-python@v5
 with:
 python-version: '3.13'
 cache: 'pip'
 cache-dependency-path: |
 pyproject.toml
 requirements*.txt

 - name: Restore pip cache (legacy)
 if: runner.os == 'Linux'
 uses: actions/cache@v4
 with:
 path: ~/.cache/pip
 key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml', 'requirements*.txt') }}
 restore-keys: |
 ${{ runner.os }}-pip-

 - name: Install Qt
 uses: jurplel/install-qt-action@v4
 with:
 version:6.6.3
 modules: qtbase qtdeclarative qtquick3d
 cache: true

 - name: Install dependencies
 run: |
 python -m pip install --upgrade pip
 pip install -e .[dev]
 pip install pytest-cov pytest-xdist

 - name: Configure Qt runtime paths
 shell: python
 run: |
 import os
 from pathlib import Path
 from PySide6.QtCore import QLibraryInfo, LibraryLocation

 def append_env(key: str, value: str) -> None:
 if not value:
 return
 env_file = Path(os.environ["GITHUB_ENV"])
 with env_file.open("a", encoding="utf-8") as handle:
 handle.write(f"{key}={value}\n")

 append_env("QT_PLUGIN_PATH", QLibraryInfo.path(LibraryLocation.Plugins))
 append_env("QML2_IMPORT_PATH", QLibraryInfo.path(LibraryLocation.QmlImports))

 - name: Enable virtual display on Linux
 if: runner.os == 'Linux'
 run: echo "PYTEST_PREFIX=xvfb-run -a" >> "$GITHUB_ENV"

 - name: Run core pytest suite
 run: |
 set -o pipefail
 mkdir -p artifacts/test
 ${PYTEST_PREFIX:-} pytest -m "not gui" \
 --junitxml=artifacts/test/junit-core.xml \
 --cov=src --cov-report=term-missing \
 --cov-report=xml:artifacts/test/coverage-core.xml \
 tests2>&1 | tee artifacts/test/pytest-core.log

 - name: Run QML/GUI tests
 run: |
 set -o pipefail
 mkdir -p artifacts/test
 ${PYTEST_PREFIX:-} pytest tests/ui -m gui \
 --junitxml=artifacts/test/junit-qml.xml \
 --cov=src --cov-append --cov-report=term-missing \
2>&1 | tee artifacts/test/pytest-qml.log

 - name: Combine coverage
 run: |
 python -m coverage combine
 python -m coverage xml -o artifacts/test/coverage.xml
 python -m coverage html -d artifacts/test/html

 - name: Upload test artifacts
 if: always()
 uses: actions/upload-artifact@v4
 with:
 name: test-results-${{ matrix.os }}
 path: artifacts/test
 if-no-files-found: warn

 summarize:
 name: Summary
 needs: tests
 runs-on: ubuntu-latest
 if: always()
 steps:
 - name: Download artifacts
 uses: actions/download-artifact@v4
 with:
 path: merged-artifacts

 - name: Display artifact tree
 run: |
 echo "ðŸ“¦ Collected artifacts:"
 ls -R merged-artifacts

 - name: Upload consolidated bundle
 uses: actions/upload-artifact@v4
 with:
 name: ci-bundle
 path: merged-artifacts
 if-no-files-found: warn
