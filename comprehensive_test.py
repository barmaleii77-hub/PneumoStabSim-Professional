#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
PneumoStabSim Professional - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
Comprehensive Integration Test Suite –¥–ª—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –ø—Ä–æ–µ–∫—Ç–∞
"""
import sys
import os
import time
from pathlib import Path
from typing import Dict, List
import json

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent / "src"))


def setup_test_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîß Setting up test environment...")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    if sys.platform == "win32":
        try:
            import subprocess

            subprocess.run(["chcp", "65001"], capture_output=True, check=False)
        except:
            pass

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Qt –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    os.environ.setdefault(
        "QSG_RHI_BACKEND", "d3d11" if sys.platform == "win32" else "opengl"
    )
    os.environ.setdefault("QSG_INFO", "0")  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    os.environ.setdefault("QT_LOGGING_RULES", "*.debug=false")

    print("‚úÖ Test environment configured")


class TestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""

    def __init__(self, name: str, success: bool, message: str, duration: float = 0.0):
        self.name = name
        self.success = success
        self.message = message
        self.duration = duration
        self.timestamp = time.time()


class ComprehensiveTestSuite:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è PneumoStabSim Professional"""

    def __init__(self):
        self.results: List[TestResult] = []
        self.start_time = time.time()

    def log_result(self, name: str, success: bool, message: str, duration: float = 0.0):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        result = TestResult(name, success, message, duration)
        self.results.append(result)

        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {name}: {message}")
        if duration > 0:
            print(f"    ‚è±Ô∏è Duration: {duration:.2f}s")

    def test_python_environment(self) -> bool:
        """–¢–µ—Å—Ç Python –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("\nüì¶ Testing Python Environment...")

        start = time.time()

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
            version = sys.version_info
            if version < (3, 8):
                self.log_result(
                    "Python Version",
                    False,
                    f"Python {version.major}.{version.minor}.{version.micro} < 3.8",
                )
                return False
            else:
                self.log_result(
                    "Python Version",
                    True,
                    f"Python {version.major}.{version.minor}.{version.micro} ‚úì",
                )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            dependencies = [
                ("PySide6", "PySide6.QtWidgets"),
                ("NumPy", "numpy"),
                ("Pathlib", "pathlib"),
                ("JSON", "json"),
                ("Logging", "logging"),
            ]

            for dep_name, module_name in dependencies:
                try:
                    __import__(module_name)
                    self.log_result(f"Dependency {dep_name}", True, "Available")
                except ImportError as e:
                    self.log_result(f"Dependency {dep_name}", False, f"Missing: {e}")
                    return False

            duration = time.time() - start
            self.log_result("Python Environment", True, "All dependencies OK", duration)
            return True

        except Exception as e:
            duration = time.time() - start
            self.log_result("Python Environment", False, f"Error: {e}", duration)
            return False

    def test_file_structure(self) -> bool:
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        print("\nüìÅ Testing File Structure...")

        start = time.time()

        critical_files = [
            "app.py",
            "src/common/__init__.py",
            "src/ui/main_window.py",
            "src/ui/panels/panel_geometry.py",
            "src/ui/panels/panel_graphics.py",
            "assets/qml/main_optimized.qml",
            "assets/qml/components/IblProbeLoader.qml",
        ]

        optional_files = [
            "assets/hdr/studio.hdr",
            "assets/hdr/README.md",
            "logs/",
            "src/ui/custom_geometry.py",
        ]

        missing_critical = []
        missing_optional = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        for file_path in critical_files:
            path = Path(file_path)
            if path.exists():
                size = path.stat().st_size if path.is_file() else "DIR"
                self.log_result(f"File {file_path}", True, f"Size: {size}")
            else:
                missing_critical.append(file_path)
                self.log_result(f"File {file_path}", False, "Missing")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for file_path in optional_files:
            path = Path(file_path)
            if path.exists():
                size = path.stat().st_size if path.is_file() else "DIR"
                self.log_result(
                    f"Optional {file_path}", True, f"Available, size: {size}"
                )
            else:
                missing_optional.append(file_path)
                self.log_result(f"Optional {file_path}", False, "Missing (optional)")

        duration = time.time() - start

        if missing_critical:
            self.log_result(
                "File Structure",
                False,
                f"Missing critical files: {missing_critical}",
                duration,
            )
            return False
        else:
            self.log_result(
                "File Structure", True, "All critical files present", duration
            )
            return True

    def test_qml_syntax(self) -> bool:
        """–¢–µ—Å—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ QML —Ñ–∞–π–ª–æ–≤"""
        print("\nüìú Testing QML Syntax...")

        start = time.time()

        qml_files = [
            "assets/qml/main_optimized.qml",
            "assets/qml/components/IblProbeLoader.qml",
        ]

        try:
            for qml_file in qml_files:
                path = Path(qml_file)
                if not path.exists():
                    self.log_result(f"QML {qml_file}", False, "File not found")
                    continue

                # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ QML
                content = path.read_text(encoding="utf-8")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö QML —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                if "import QtQuick" not in content:
                    self.log_result(f"QML {qml_file}", False, "Missing QtQuick import")
                    continue

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–∑–æ–≤—ã–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                brace_count = content.count("{") - content.count("}")
                if brace_count != 0:
                    self.log_result(
                        f"QML {qml_file}", False, f"Unmatched braces: {brace_count}"
                    )
                    continue

                self.log_result(f"QML {qml_file}", True, "Syntax OK")

            duration = time.time() - start
            self.log_result("QML Syntax", True, "All QML files valid", duration)
            return True

        except Exception as e:
            duration = time.time() - start
            self.log_result("QML Syntax", False, f"Error: {e}", duration)
            return False

    def test_python_imports(self) -> bool:
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ Python –º–æ–¥—É–ª–µ–π"""
        print("\nüêç Testing Python Imports...")

        start = time.time()

        try:
            # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
            modules_to_test = [
                ("src.common", "init_logging, log_ui_event"),
                ("src.ui.main_window", "MainWindow"),
                ("src.ui.panels.panel_geometry", "GeometryPanel"),
                ("src.ui.panels.panel_graphics", "GraphicsPanel"),
            ]

            for module_name, imports in modules_to_test:
                try:
                    exec(f"from {module_name} import {imports}")
                    self.log_result(f"Import {module_name}", True, "Success")
                except ImportError as e:
                    self.log_result(f"Import {module_name}", False, f"Failed: {e}")
                    return False
                except Exception as e:
                    self.log_result(f"Import {module_name}", False, f"Error: {e}")
                    return False

            duration = time.time() - start
            self.log_result(
                "Python Imports", True, "All modules imported successfully", duration
            )
            return True

        except Exception as e:
            duration = time.time() - start
            self.log_result("Python Imports", False, f"Error: {e}", duration)
            return False

    def test_qt_integration(self) -> bool:
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Qt (–±–µ–∑ GUI)"""
        print("\nüñºÔ∏è Testing Qt Integration...")

        start = time.time()

        try:
            # –ò–º–ø–æ—Ä—Ç Qt –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            from PySide6.QtWidgets import QApplication
            from PySide6.QtQuickWidgets import QQuickWidget

            self.log_result("Qt Imports", True, "PySide6 components imported")

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ QApplication (–±–µ–∑ –ø–æ–∫–∞–∑–∞ –æ–∫–Ω–∞)
            if not QApplication.instance():
                app = QApplication([])
                self.log_result("QApplication", True, "Created successfully")

                # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è QQuickWidget
                widget = QQuickWidget()
                widget.resize(100, 100)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                self.log_result("QQuickWidget", True, "Created successfully")

                # –û—á–∏—Å—Ç–∫–∞
                widget.deleteLater()
                app.quit()
            else:
                self.log_result("QApplication", True, "Already exists")

            duration = time.time() - start
            self.log_result("Qt Integration", True, "Qt components working", duration)
            return True

        except Exception as e:
            duration = time.time() - start
            self.log_result("Qt Integration", False, f"Error: {e}", duration)
            return False

    def test_graphics_panel_config(self) -> bool:
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ GraphicsPanel"""
        print("\nüé® Testing Graphics Panel Configuration...")

        start = time.time()

        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (–±–µ–∑ GUI)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            test_config = {
                "key_brightness": 2.8,
                "glass_ior": 1.52,
                "ibl_enabled": True,
                "bloom_threshold": 1.0,
                "tonemap_mode": 3,
            }

            self.log_result(
                "Graphics Config", True, f"Test config: {len(test_config)} parameters"
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            critical_params = ["key_brightness", "glass_ior", "ibl_enabled"]
            for param in critical_params:
                if param in test_config:
                    self.log_result(
                        f"Graphics Param {param}", True, f"Value: {test_config[param]}"
                    )
                else:
                    self.log_result(f"Graphics Param {param}", False, "Missing")
                    return False

            duration = time.time() - start
            self.log_result(
                "Graphics Panel Config", True, "Configuration valid", duration
            )
            return True

        except Exception as e:
            duration = time.time() - start
            self.log_result("Graphics Panel Config", False, f"Error: {e}", duration)
            return False

    def test_ibl_system(self) -> bool:
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã IBL"""
        print("\nüåü Testing IBL System...")

        start = time.time()

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ IblProbeLoader
            ibl_loader_path = Path("assets/qml/components/IblProbeLoader.qml")
            if not ibl_loader_path.exists():
                self.log_result(
                    "IBL Loader File", False, "IblProbeLoader.qml not found"
                )
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ IblProbeLoader
            content = ibl_loader_path.read_text(encoding="utf-8")

            ibl_checks = [
                ("primarySource", "primarySource:" in content),
                ("fallbackSource", "fallbackSource:" in content),
                ("ready property", "readonly property bool ready" in content),
                ("Texture component", "Texture {" in content),
                ("Error handling", "onStatusChanged" in content),
            ]

            for check_name, result in ibl_checks:
                self.log_result(
                    f"IBL {check_name}", result, "Present" if result else "Missing"
                )
                if not result:
                    return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ HDR —Ñ–∞–π–ª–æ–≤
            hdr_paths = ["assets/hdr/studio.hdr", "assets/hdr/README.md"]

            hdr_available = False
            for hdr_path in hdr_paths:
                path = Path(hdr_path)
                if path.exists():
                    if hdr_path.endswith(".hdr"):
                        size_mb = path.stat().st_size / (1024 * 1024)
                        self.log_result(
                            f"HDR File {hdr_path}", True, f"Size: {size_mb:.1f}MB"
                        )
                        hdr_available = True
                    else:
                        self.log_result(
                            f"HDR File {hdr_path}", True, "Documentation present"
                        )
                else:
                    self.log_result(f"HDR File {hdr_path}", False, "Not found")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ main_optimized.qml
            main_qml_path = Path("assets/qml/main_optimized.qml")
            if main_qml_path.exists():
                main_content = main_qml_path.read_text(encoding="utf-8")

                main_checks = [
                    ("IblProbeLoader import", "IblProbeLoader {" in main_content),
                    ("iblTextureReady property", "iblTextureReady" in main_content),
                    ("lightProbe binding", "lightProbe:" in main_content),
                ]

                for check_name, result in main_checks:
                    self.log_result(
                        f"Main QML {check_name}",
                        result,
                        "Present" if result else "Missing",
                    )

            duration = time.time() - start
            status_msg = "IBL system configured"
            if hdr_available:
                status_msg += " with HDR assets"
            else:
                status_msg += " (HDR files needed for full functionality)"

            self.log_result("IBL System", True, status_msg, duration)
            return True

        except Exception as e:
            duration = time.time() - start
            self.log_result("IBL System", False, f"Error: {e}", duration)
            return False

    def test_application_startup(self) -> bool:
        """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–±–µ–∑ GUI –ø–æ–∫–∞–∑–∞)"""
        print("\nüöÄ Testing Application Startup...")

        start = time.time()

        try:
            # –ò–º–ø–æ—Ä—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
            import app

            self.log_result("App Module Import", True, "app.py imported successfully")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
            globals_to_check = ["USE_QML_3D_SCHEMA", "app_instance", "window_instance"]

            for global_name in globals_to_check:
                if hasattr(app, global_name):
                    value = getattr(app, global_name)
                    self.log_result(
                        f"App Global {global_name}", True, f"Value: {value}"
                    )
                else:
                    self.log_result(f"App Global {global_name}", False, "Missing")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (–æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è)
            main_functions = ["main", "parse_arguments", "qt_message_handler"]

            for func_name in main_functions:
                if hasattr(app, func_name):
                    self.log_result(f"App Function {func_name}", True, "Present")
                else:
                    self.log_result(f"App Function {func_name}", False, "Missing")
                    return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –º–æ–¥—É–ª–µ app
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ QApplication –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ app
                if hasattr(app, "QApplication"):
                    self.log_result("App Qt Import", True, "QApplication available")
                else:
                    self.log_result("App Qt Import", False, "QApplication not found")
            except:
                self.log_result("App Qt Import", False, "Import issues")

            duration = time.time() - start
            self.log_result(
                "Application Startup", True, "Core application structure OK", duration
            )
            return True

        except Exception as e:
            duration = time.time() - start
            self.log_result("Application Startup", False, f"Error: {e}", duration)
            return False

    def generate_report(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        total_time = time.time() - self.start_time

        passed = sum(1 for r in self.results if r.success)
        failed = sum(1 for r in self.results if not r.success)
        total = len(self.results)

        success_rate = (passed / total * 100) if total > 0 else 0

        report = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "total_tests": total,
            "passed": passed,
            "failed": failed,
            "success_rate": success_rate,
            "total_duration": total_time,
            "results": [
                {
                    "name": r.name,
                    "success": r.success,
                    "message": r.message,
                    "duration": r.duration,
                }
                for r in self.results
            ],
        }

        return report


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print("=" * 70)
    print("üî¨ PNEUMOSTABSIM PROFESSIONAL - COMPREHENSIVE TEST SUITE")
    print("=" * 70)
    print(f"üìÖ Started: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    print()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    setup_test_environment()

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
    test_suite = ComprehensiveTestSuite()

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    tests = [
        test_suite.test_python_environment,
        test_suite.test_file_structure,
        test_suite.test_qml_syntax,
        test_suite.test_python_imports,
        test_suite.test_qt_integration,
        test_suite.test_graphics_panel_config,
        test_suite.test_ibl_system,
        test_suite.test_application_startup,
    ]

    print(f"\nüß™ Running {len(tests)} test categories...")

    overall_success = True
    for test_func in tests:
        try:
            result = test_func()
            if not result:
                overall_success = False
        except Exception as e:
            print(f"‚ùå Test {test_func.__name__} crashed: {e}")
            overall_success = False

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    report = test_suite.generate_report()

    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤
    print("\n" + "=" * 70)
    print("üìä TEST RESULTS SUMMARY")
    print("=" * 70)

    print(f"üìà Total Tests: {report['total_tests']}")
    print(f"‚úÖ Passed: {report['passed']}")
    print(f"‚ùå Failed: {report['failed']}")
    print(f"üìä Success Rate: {report['success_rate']:.1f}%")
    print(f"‚è±Ô∏è Total Duration: {report['total_duration']:.2f}s")

    # –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    if overall_success and report["success_rate"] >= 80:
        print("\nüéâ SYSTEM STATUS: READY FOR PRODUCTION")
        print("‚úÖ All critical systems operational")
        print("üöÄ PneumoStabSim Professional ready to launch!")
    elif report["success_rate"] >= 60:
        print("\n‚ö†Ô∏è SYSTEM STATUS: PARTIALLY READY")
        print("üîß Some issues found, but core functionality works")
        print("üí° Check failed tests above for details")
    else:
        print("\n‚ùå SYSTEM STATUS: NOT READY")
        print("üõ†Ô∏è Critical issues found, requires fixes")
        print("üîç Review all failed tests before deployment")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    try:
        report_path = Path("comprehensive_test_report.json")
        with open(report_path, "w", encoding="utf-8") as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        print(f"\nüíæ Detailed report saved: {report_path}")
    except Exception as e:
        print(f"\n‚ö†Ô∏è Could not save report: {e}")

    print("\n" + "=" * 70)

    # –í–æ–∑–≤—Ä–∞—Ç –∫–æ–¥–∞ –≤—ã—Ö–æ–¥–∞
    return 0 if overall_success else 1


if __name__ == "__main__":
    sys.exit(main())
