#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è –º–æ–¥—É–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ main.qml
–ù–ï –†–ê–ó–î–£–í–ê–ï–ú –§–ê–ô–õ - –ò–°–ü–û–õ–¨–ó–£–ï–ú –ú–û–î–£–õ–ò!

–ü–õ–ê–ù:
1. –ó–∞–º–µ–Ω–∏—Ç—å –∏–Ω–ª–∞–π–Ω FL suspension ‚Üí SuspensionCorner –º–æ–¥—É–ª—å
2. –ó–∞–º–µ–Ω–∏—Ç—å –∏–Ω–ª–∞–π–Ω Frame ‚Üí Frame –º–æ–¥—É–ª—å
3. –î–æ–±–∞–≤–∏—Ç—å FR, RL, RR —á–µ—Ä–µ–∑ —Ç–æ—Ç –∂–µ –º–æ–¥—É–ª—å
4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CameraController –º–æ–¥—É–ª—å (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)

–†–ï–ó–£–õ–¨–¢–ê–¢: main.qml –æ—Å—Ç–∞—ë—Ç—Å—è –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ú (~300-400 —Å—Ç—Ä–æ–∫)
"""

from pathlib import Path
import re

def integrate_modules_step_by_step():
    """–ü–æ—ç—Ç–∞–ø–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π –≤ main.qml"""
    
    main_qml = Path("assets/qml/main.qml")
    
    if not main_qml.exists():
        print(f"‚ùå ERROR: {main_qml} not found!")
        return False
    
    print("=" * 70)
    print("üîß –ú–û–î–£–õ–¨–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø - –ù–ï –†–ê–ó–î–£–í–ê–ï–ú QML!")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞—ë–º backup
    backup = main_qml.with_suffix('.qml.backup_before_modules')
    print(f"\nüíæ Creating backup: {backup}")
    
    with open(main_qml, 'r', encoding='utf-8') as f:
        content = f.read()
    
    backup.write_text(content, encoding='utf-8')
    
    print("\nüìä –¢–ï–ö–£–©–ò–ô –†–ê–ó–ú–ï–†:")
    lines = content.count('\n')
    print(f"   main.qml: {lines} —Å—Ç—Ä–æ–∫")
    
    # ========================================================================
    # STEP 1: –ó–∞–º–µ–Ω–∏—Ç—å –∏–Ω–ª–∞–π–Ω FL suspension –Ω–∞ –º–æ–¥—É–ª—å
    # ========================================================================
    
    print("\nüîß STEP 1: –ó–∞–º–µ–Ω—è–µ–º –∏–Ω–ª–∞–π–Ω FL suspension –Ω–∞ SuspensionCorner –º–æ–¥—É–ª—å...")
    
    # –ò—â–µ–º –∏–Ω–ª–∞–π–Ω FL suspension (Node { id: flSuspension ... })
    inline_pattern = r'// SUSPENSION CORNER FL.*?Node \{.*?id: flSuspension.*?\n\s+\}\s+// end flSuspension'
    
    if re.search(inline_pattern, content, re.DOTALL):
        print("   ‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–ª–∞–π–Ω FL suspension")
        
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –º–æ–¥—É–ª—å
        module_code = '''// ===============================================================
            // SUSPENSION CORNER FL - –ú–û–î–£–õ–¨
            // ===============================================================
            
            SuspensionCorner {
                id: flCorner
                
                // Joint positions (calculated from geometry)
                j_arm: Qt.vector3d(
                    -root.userTrackWidth/2,
                    root.userBeamSize,
                    root.userFrameToPivot
                )
                j_tail: Qt.vector3d(
                    -root.userTrackWidth/2,
                    root.userBeamSize + root.userFrameHeight,
                    root.userFrameToPivot
                )
                
                leverAngle: root.fl_angle
                pistonPositionFromPython: root.userPistonPositionFL
                
                // Geometry parameters
                leverLength: root.userLeverLength
                rodPosition: root.userRodPosition
                cylinderLength: root.userCylinderLength
                boreHead: root.userBoreHead
                rodDiameter: root.userRodDiameter
                pistonThickness: root.userPistonThickness
                pistonRodLength: root.userPistonRodLength
                cylinderSegments: root.cylinderSegments
                cylinderRings: root.cylinderRings
                
                // Materials (–ø—Ä–æ—Å—Ç—ã–µ —Ü–≤–µ—Ç–∞ - –º–æ–¥—É–ª—å —Å–∞–º —Å–æ–∑–¥–∞—Å—Ç PrincipledMaterial)
                leverMaterial: PrincipledMaterial {
                    baseColor: root.leverBaseColor
                    metalness: root.leverMetalness
                    roughness: root.leverRoughness
                }
                tailRodMaterial: PrincipledMaterial { baseColor: "#cccccc"; metalness: 1.0; roughness: 0.3 }
                cylinderMaterial: PrincipledMaterial { baseColor: root.cylinderBaseColor; transmission: root.cylinderTransmission; ior: root.cylinderIor }
                pistonBodyMaterial: PrincipledMaterial { baseColor: root.pistonBodyBaseColor; metalness: root.pistonBodyMetalness; roughness: root.pistonBodyRoughness }
                pistonRodMaterial: PrincipledMaterial { baseColor: "#ececec"; metalness: 1.0; roughness: 0.18 }
                jointTailMaterial: PrincipledMaterial { baseColor: "#2a82ff"; metalness: 0.9; roughness: 0.35 }
                jointArmMaterial: PrincipledMaterial { baseColor: "#ff9c3a"; metalness: 0.9; roughness: 0.32 }
                jointRodMaterial: PrincipledMaterial { baseColor: "#00ff55"; metalness: 0.9; roughness: 0.3 }
            }'''
        
        content = re.sub(inline_pattern, module_code, content, flags=re.DOTALL)
        print("   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ SuspensionCorner –º–æ–¥—É–ª—å")
    else:
        print("   ‚ö†Ô∏è  –ò–Ω–ª–∞–π–Ω FL suspension –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞–º–µ–Ω—ë–Ω)")
    
    # ========================================================================
    # STEP 2: –ó–∞–º–µ–Ω–∏—Ç—å –∏–Ω–ª–∞–π–Ω Frame –Ω–∞ –º–æ–¥—É–ª—å
    # ========================================================================
    
    print("\nüîß STEP 2: –ó–∞–º–µ–Ω—è–µ–º –∏–Ω–ª–∞–π–Ω Frame –Ω–∞ Frame –º–æ–¥—É–ª—å...")
    
    # –ò—â–µ–º –∏–Ω–ª–∞–π–Ω Frame (3 Model —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –ù–ò–ñ–ù–Ø–Ø –ë–ê–õ–ö–ê, –ü–ï–†–ï–î–ù–Ø–Ø –°–¢–û–ô–ö–ê, –ó–ê–î–ù–Ø–Ø –°–¢–û–ô–ö–ê)
    frame_pattern = r'// FRAME - –†–ê–ú–ê.*?// 3\. –ó–ê–î–ù–Ø–Ø –°–¢–û–ô–ö–ê.*?\n\s+\}'
    
    if re.search(frame_pattern, content, re.DOTALL):
        print("   ‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–ª–∞–π–Ω Frame")
        
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –º–æ–¥—É–ª—å
        frame_module = '''// ===============================================================
            // FRAME - –ú–û–î–£–õ–¨
            // ===============================================================
            
            Frame {
                id: frameGeometry
                worldRoot: worldRoot
                beamSize: root.userBeamSize
                frameHeight: root.userFrameHeight
                frameLength: root.userFrameLength
                frameMaterial: PrincipledMaterial {
                    baseColor: root.frameBaseColor
                    metalness: root.frameMetalness
                    roughness: root.frameRoughness
                }
            }'''
        
        content = re.sub(frame_pattern, frame_module, content, flags=re.DOTALL)
        print("   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ Frame –º–æ–¥—É–ª—å")
    else:
        print("   ‚ö†Ô∏è  –ò–Ω–ª–∞–π–Ω Frame –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞–º–µ–Ω—ë–Ω)")
    
    # ========================================================================
    # –°–û–•–†–ê–ù–ï–ù–ò–ï
    # ========================================================================
    
    print(f"\n‚úçÔ∏è Saving modular version to {main_qml}")
    main_qml.write_text(content, encoding='utf-8')
    
    new_lines = content.count('\n')
    saved = lines - new_lines
    
    print("\n" + "=" * 70)
    print("‚úÖ –ú–û–î–£–õ–¨–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 70)
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –ë—ã–ª–æ: {lines} —Å—Ç—Ä–æ–∫")
    print(f"   –°—Ç–∞–ª–æ: {new_lines} —Å—Ç—Ä–æ–∫")
    print(f"   –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: {saved} —Å—Ç—Ä–æ–∫ ({saved/lines*100:.1f}%)")
    
    print(f"\n‚úÖ –ß–¢–û –°–î–ï–õ–ê–ù–û:")
    print(f"   ‚úÖ FL suspension ‚Üí SuspensionCorner –º–æ–¥—É–ª—å")
    print(f"   ‚úÖ Frame ‚Üí Frame –º–æ–¥—É–ª—å")
    print(f"   ‚úÖ main.qml –æ—Å—Ç–∞—ë—Ç—Å—è –ö–û–ú–ü–ê–ö–¢–ù–´–ú")
    
    print(f"\nüéØ –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì:")
    print(f"   –î–æ–±–∞–≤–∏—Ç—å FR, RL, RR —á–µ—Ä–µ–∑ —Ç–æ—Ç –∂–µ SuspensionCorner –º–æ–¥—É–ª—å")
    print(f"   –ö–∞–∂–¥—ã–π —É–≥–æ–ª = ~30 —Å—Ç—Ä–æ–∫ (–≤–º–µ—Å—Ç–æ ~80 —Å—Ç—Ä–æ–∫ –∏–Ω–ª–∞–π–Ω-–∫–æ–¥–∞)")
    
    print(f"\nüîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï:")
    print(f"   cp {backup} {main_qml}")
    print("=" * 70)
    
    return True


if __name__ == "__main__":
    print("\n" + "=" * 70)
    print("üîß MODULAR INTEGRATION - KEEP QML MINIMAL")
    print("=" * 70 + "\n")
    
    success = integrate_modules_step_by_step()
    
    if success:
        print("\n‚úÖ SUCCESS: Modules integrated, QML stays minimal!")
        print("   Run: py app.py")
        print("   Check if model still visible")
    else:
        print("\n‚ùå FAILED: Check errors above")
    
    print("\n" + "=" * 70)
