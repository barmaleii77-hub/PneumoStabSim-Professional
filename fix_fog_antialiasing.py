#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–£–ú–ê–ù–ê –ò –°–ì–õ–ê–ñ–ò–í–ê–ù–ò–Ø
–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç—É–º–∞–Ω–æ–º –∏ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ–º –≤ GraphicsPanel
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent / "src"))


def fix_graphics_panel_fog_antialiasing():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç—É–º–∞–Ω–æ–º –∏ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ–º"""

    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–£–ú–ê–ù–ê –ò –°–ì–õ–ê–ñ–ò–í–ê–ù–ò–Ø")
    print("=" * 70)

    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª GraphicsPanel
    panel_file = Path("src/ui/panels/panel_graphics.py")

    if not panel_file.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {panel_file}")
        return False

    print(f"üìÇ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: {panel_file}")
    content = panel_file.read_text(encoding="utf-8")

    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–µ—Å—Ç–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö

    # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º emit_environment_update - –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    old_emit_env = '''def emit_environment_update(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        environment_params = {
            'background_color': self.current_graphics['background_color'],
            'skybox_enabled': self.current_graphics['skybox_enabled'],
            'skybox_blur': self.current_graphics['skybox_blur'],
            'ibl_enabled': self.current_graphics['ibl_enabled'],      # ‚úÖ –ù–û–í–û–ï: IBL
            'ibl_intensity': self.current_graphics['ibl_intensity'],  # ‚úÖ –ù–û–í–û–ï: IBL
            'ibl_source': self.current_graphics['ibl_source'],
            'ibl_fallback': self.current_graphics['ibl_fallback'],
            'fog_enabled': self.current_graphics['fog_enabled'],
            'fog_color': self.current_graphics['fog_color'],
            'fog_density': self.current_graphics['fog_density']
        }

        self.logger.info(f"Environment updated: {environment_params}")
        self.environment_changed.emit(environment_params)'''

    new_emit_env = '''def emit_environment_update(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        environment_params = {
            'background_color': self.current_graphics['background_color'],
            'skybox_enabled': self.current_graphics['skybox_enabled'],
            'skybox_blur': self.current_graphics['skybox_blur'],
            'ibl_enabled': self.current_graphics['ibl_enabled'],      # ‚úÖ –ù–û–í–û–ï: IBL
            'ibl_intensity': self.current_graphics['ibl_intensity'],  # ‚úÖ –ù–û–í–û–ï: IBL
            'ibl_source': self.current_graphics['ibl_source'],
            'ibl_fallback': self.current_graphics['ibl_fallback'],
            'fog_enabled': self.current_graphics['fog_enabled'],
            'fog_color': self.current_graphics['fog_color'],
            'fog_density': self.current_graphics['fog_density']
        }

        print(f"üå´Ô∏è  GraphicsPanel: EMIT environment_changed")
        print(f"     fog_enabled = {environment_params['fog_enabled']}")
        print(f"     fog_color = {environment_params['fog_color']}")
        print(f"     fog_density = {environment_params['fog_density']}")

        self.logger.info(f"Environment updated: {environment_params}")
        self.environment_changed.emit(environment_params)'''

    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º emit_quality_update - –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    old_emit_quality = '''def emit_quality_update(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞"""
        quality_params = {
            'antialiasing': self.current_graphics['antialiasing'],
            'aa_quality': self.current_graphics['aa_quality'],
            'shadows_enabled': self.current_graphics['shadows_enabled'],
            'shadow_quality': self.current_graphics['shadow_quality'],
            'shadow_softness': self.current_graphics['shadow_softness'],  # ‚úÖ –ù–û–í–û–ï: –ú—è–≥–∫–æ—Å—Ç—å —Ç–µ–Ω–µ–π
        }

        self.logger.info(f"Quality updated: {quality_params}")
        self.quality_changed.emit(quality_params)'''

    new_emit_quality = '''def emit_quality_update(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞"""
        quality_params = {
            'antialiasing': self.current_graphics['antialiasing'],
            'aa_quality': self.current_graphics['aa_quality'],
            'shadows_enabled': self.current_graphics['shadows_enabled'],
            'shadow_quality': self.current_graphics['shadow_quality'],
            'shadow_softness': self.current_graphics['shadow_softness'],  # ‚úÖ –ù–û–í–û–ï: –ú—è–≥–∫–æ—Å—Ç—å —Ç–µ–Ω–µ–π
        }

        print(f"‚öôÔ∏è  GraphicsPanel: EMIT quality_changed")
        print(f"     antialiasing = {quality_params['antialiasing']}")
        print(f"     aa_quality = {quality_params['aa_quality']}")
        print(f"     shadows_enabled = {quality_params['shadows_enabled']}")
        print(f"     shadow_quality = {quality_params['shadow_quality']}")

        self.logger.info(f"Quality updated: {quality_params}")
        self.quality_changed.emit(quality_params)'''

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if old_emit_env in content:
        content = content.replace(old_emit_env, new_emit_env)
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω emit_environment_update()")
    else:
        print("‚ö†Ô∏è emit_environment_update() –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–º–µ–Ω—ã")

    if old_emit_quality in content:
        content = content.replace(old_emit_quality, new_emit_quality)
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω emit_quality_update()")
    else:
        print("‚ö†Ô∏è emit_quality_update() –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–º–µ–Ω—ã")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    panel_file.write_text(content, encoding="utf-8")
    print(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {panel_file}")

    return True


def fix_main_window_handlers():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ MainWindow –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ QML —Ñ—É–Ω–∫—Ü–∏–π"""

    print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï MAIN_WINDOW –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í")
    print("-" * 50)

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª MainWindow
    main_file = Path("src/ui/main_window.py")

    if not main_file.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {main_file}")
        return False

    print(f"üìÇ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: {main_file}")
    content = main_file.read_text(encoding="utf-8")

    # –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ environment –∏ quality

    # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º _on_environment_changed –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ QML
    old_env_handler = '''    @Slot(dict)
    def _on_environment_changed(self, environment_params: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print(f"üåç MainWindow: Environment changed: {environment_params}")

        if self._qml_root_object:
            try:
                from PySide6.QtCore import QMetaObject, Q_ARG, Qt

                success = QMetaObject.invokeMethod(
                    self._qml_root_object,
                    "applyEnvironmentUpdates", # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
                    Qt.ConnectionType.DirectConnection,
                    Q_ARG("QVariant", environment_params)
                )

                if success:
                    self.status_bar.showMessage("–û–∫—Ä—É–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                    print("‚úÖ Successfully called applyEnvironmentUpdates()")
                else:
                    print("‚ùå Failed to call applyEnvironmentUpdates()")

            except Exception as e:
                self.logger.error(f"Environment update failed: {e}")'''

    new_env_handler = '''    @Slot(dict)
    def _on_environment_changed(self, environment_params: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print(f"üåç MainWindow: Environment changed: {environment_params}")

        if self._qml_root_object:
            try:
                from PySide6.QtCore import QMetaObject, Q_ARG, Qt

                print(f"üîß MainWindow: –í—ã–∑—ã–≤–∞–µ–º applyEnvironmentUpdates –Ω–∞–ø—Ä—è–º—É—é...")
                print(f"     fog_enabled = {environment_params.get('fog_enabled', 'N/A')}")

                success = QMetaObject.invokeMethod(
                    self._qml_root_object,
                    "applyEnvironmentUpdates", # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
                    Qt.ConnectionType.DirectConnection,
                    Q_ARG("QVariant", environment_params)
                )

                if success:
                    self.status_bar.showMessage("–û–∫—Ä—É–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                    print("‚úÖ Successfully called applyEnvironmentUpdates()")
                else:
                    print("‚ùå Failed to call applyEnvironmentUpdates()")

            except Exception as e:
                self.logger.error(f"Environment update failed: {e}")
                print(f"‚ùå Exception in environment update: {e}")
                import traceback
                traceback.print_exc()'''

    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º _on_quality_changed –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ QML
    old_quality_handler = '''    @Slot(dict)
    def _on_quality_changed(self, quality_params: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞"""
        print(f"‚öôÔ∏è MainWindow: Quality changed: {quality_params}")

        if self._qml_root_object:
            try:
                from PySide6.QtCore import QMetaObject, Q_ARG, Qt

                success = QMetaObject.invokeMethod(
                    self._qml_root_object,
                    "applyQualityUpdates", # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
                    Qt.ConnectionType.DirectConnection,
                    Q_ARG("QVariant", quality_params)
                )

                if success:
                    self.status_bar.showMessage("–ö–∞—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                    print("‚úÖ Successfully called applyQualityUpdates()")
                else:
                    print("‚ùå Failed to call applyQualityUpdates()")

            except Exception as e:
                self.logger.error(f"Quality update failed: {e}")'''

    new_quality_handler = '''    @Slot(dict)
    def _on_quality_changed(self, quality_params: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞"""
        print(f"‚öôÔ∏è MainWindow: Quality changed: {quality_params}")

        if self._qml_root_object:
            try:
                from PySide6.QtCore import QMetaObject, Q_ARG, Qt

                print(f"üîß MainWindow: –í—ã–∑—ã–≤–∞–µ–º applyQualityUpdates –Ω–∞–ø—Ä—è–º—É—é...")
                print(f"     antialiasing = {quality_params.get('antialiasing', 'N/A')}")
                print(f"     aa_quality = {quality_params.get('aa_quality', 'N/A')}")

                success = QMetaObject.invokeMethod(
                    self._qml_root_object,
                    "applyQualityUpdates", # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
                    Qt.ConnectionType.DirectConnection,
                    Q_ARG("QVariant", quality_params)
                )

                if success:
                    self.status_bar.showMessage("–ö–∞—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                    print("‚úÖ Successfully called applyQualityUpdates()")
                else:
                    print("‚ùå Failed to call applyQualityUpdates()")

            except Exception as e:
                self.logger.error(f"Quality update failed: {e}")
                print(f"‚ùå Exception in quality update: {e}")
                import traceback
                traceback.print_exc()'''

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if old_env_handler in content:
        content = content.replace(old_env_handler, new_env_handler)
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω _on_environment_changed()")
    else:
        print("‚ö†Ô∏è _on_environment_changed() –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–º–µ–Ω—ã")

    if old_quality_handler in content:
        content = content.replace(old_quality_handler, new_quality_handler)
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω _on_quality_changed()")
    else:
        print("‚ö†Ô∏è _on_quality_changed() –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–º–µ–Ω—ã")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    main_file.write_text(content, encoding="utf-8")
    print(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {main_file}")

    return True


if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–£–ú–ê–ù–ê –ò –°–ì–õ–ê–ñ–ò–í–ê–ù–ò–Ø")
    print()

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º GraphicsPanel
    result1 = fix_graphics_panel_fog_antialiasing()

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º MainWindow
    result2 = fix_main_window_handlers()

    print("\n" + "=" * 70)
    if result1 and result2:
        print("‚úÖ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print()
        print("üéØ –ß–¢–û –ò–°–ü–†–ê–í–õ–ï–ù–û:")
        print("   ‚Ä¢ GraphicsPanel —Ç–µ–ø–µ—Ä—å –≤—ã–≤–æ–¥–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        print("   ‚Ä¢ MainWindow handlers –¥–æ–±–∞–≤–ª—è—é—Ç –±–æ–ª—å—à–µ –æ—Ç–ª–∞–¥–∫–∏")
        print("   ‚Ä¢ –£–ª—É—á—à–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º")
        print()
        print("üß™ –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì:")
        print("   py diagnose_fog_antialiasing.py")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≥–¥–µ –ø—Ä–æ–±–ª–µ–º–∞")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ï –£–î–ê–õ–ò–°–¨")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –≤—Ä—É—á–Ω—É—é")
    print("=" * 70)
