#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ï–ö–ë–û–ö–°–û–í –ò –ê–ù–¢–ò–ê–õ–ò–ê–°–ò–ù–ì–ê –í GRAPHICSPANEL
–ü—Ä–æ–±–ª–µ–º—ã:
1. IBL checkbox - –≤–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–æ –Ω–µ –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è (–Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ toggled)
2. –ê–Ω—Ç–∏–∞–ª–∏–∞—Å–∏–Ω–≥ - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç—Ä–∞–Ω–Ω–æ (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
3. –ù–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
"""

import re
from pathlib import Path


def fix_ibl_checkbox():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ IBL checkbox"""
    panel_file = Path("src/ui/panels/panel_graphics.py")
    content = panel_file.read_text(encoding="utf-8")

    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï IBL CHECKBOX:")
    print("-" * 50)

    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º IBL checkbox
    old_pattern = r"ibl_check\.clicked\.connect\(lambda checked: self\._on_ibl_enabled_clicked\(checked\)\)"

    if re.search(old_pattern, content):
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ toggled –≤–º–µ—Å—Ç–æ clicked
        new_code = "ibl_check.toggled.connect(lambda checked: self._on_ibl_enabled_clicked(checked))"
        content = re.sub(old_pattern, new_code, content)
        print("‚úÖ IBL checkbox –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ toggled() –≤–º–µ—Å—Ç–æ clicked()")
    else:
        print("‚ö†Ô∏è IBL checkbox —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")

    return content


def fix_skybox_checkbox(content):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Skybox checkbox"""
    print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï SKYBOX CHECKBOX:")
    print("-" * 50)

    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º Skybox checkbox
    old_pattern = r"skybox_toggle\.clicked\.connect\(lambda checked: self\._on_skybox_enabled_clicked\(checked\)\)"

    if re.search(old_pattern, content):
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ toggled –≤–º–µ—Å—Ç–æ clicked
        new_code = "skybox_toggle.toggled.connect(lambda checked: self._on_skybox_enabled_clicked(checked))"
        content = re.sub(old_pattern, new_code, content)
        print("‚úÖ Skybox checkbox –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ toggled() –≤–º–µ—Å—Ç–æ clicked()")
    else:
        print("‚ö†Ô∏è Skybox checkbox —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")

    return content


def fix_fog_checkbox(content):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Fog checkbox"""
    print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï FOG CHECKBOX:")
    print("-" * 50)

    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º Fog checkbox
    old_pattern = r"enabled\.clicked\.connect\(lambda checked: self\._on_fog_enabled_clicked\(checked\)\)"

    if re.search(old_pattern, content):
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ toggled –≤–º–µ—Å—Ç–æ clicked
        new_code = "enabled.toggled.connect(lambda checked: self._on_fog_enabled_clicked(checked))"
        content = re.sub(old_pattern, new_code, content)
        print("‚úÖ Fog checkbox –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ toggled() –≤–º–µ—Å—Ç–æ clicked()")
    else:
        print("‚ö†Ô∏è Fog checkbox —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")

    return content


def fix_bloom_checkbox(content):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Bloom checkbox"""
    print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï BLOOM CHECKBOX:")
    print("-" * 50)

    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –≤ _build_bloom_group
    old_pattern = r"enabled\.clicked\.connect\(lambda checked: self\._on_bloom_enabled_clicked\(checked\)\)"

    if re.search(old_pattern, content):
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ toggled –≤–º–µ—Å—Ç–æ clicked
        new_code = "enabled.toggled.connect(lambda checked: self._on_bloom_enabled_clicked(checked))"
        content = re.sub(old_pattern, new_code, content)
        print("‚úÖ Bloom checkbox –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ toggled() –≤–º–µ—Å—Ç–æ clicked()")
    else:
        print("‚ö†Ô∏è Bloom checkbox —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")

    return content


def fix_antialiasing_combobox(content):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Antialiasing combobox"""
    print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ANTIALIASING COMBOBOX:")
    print("-" * 50)

    # –ü—Ä–æ–±–ª–µ–º–∞: currentIndexChanged –º–æ–∂–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ
    # –†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥ _updating_ui –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if "primary_combo.currentIndexChanged.connect" in content:
        print("‚úÖ Antialiasing combobox —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–ª–∞–≥ _updating_ui
        if "def _on_primary_aa_changed" in content:
            # –ù–∞—Ö–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é
            pattern = r"def _on_primary_aa_changed\(self, value: str\) -> None:\s+(.*?)(?=\n    def )"
            match = re.search(pattern, content, re.DOTALL)

            if match:
                func_body = match.group(1)
                if "if self._updating_ui:" in func_body:
                    print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–ª–∞–≥ _updating_ui")
                else:
                    print(
                        "‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–ª–∞–≥ _updating_ui - –º–æ–∂–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ª–æ–∂–Ω–æ"
                    )
    else:
        print("‚ùå Antialiasing combobox –ù–ï –ø–æ–¥–∫–ª—é—á–µ–Ω!")

    return content


def verify_all_checkboxes(content):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —á–µ–∫–±–æ–∫—Å—ã"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ß–ï–ö–ë–û–ö–°–û–í:")
    print("-" * 50)

    checkboxes = {
        "ibl_enabled": r"ibl_check\.(clicked|toggled)\.connect",
        "skybox_enabled": r"skybox_toggle\.(clicked|toggled)\.connect",
        "fog_enabled": r"enabled\.(clicked|toggled)\.connect.*fog",
        "bloom_enabled": r"enabled\.(clicked|toggled)\.connect.*bloom",
        "shadows_enabled": r"enabled\.(clicked|toggled)\.connect.*shadows",
        "taa_enabled": r"taa_check\.(clicked|toggled)\.connect",
        "fxaa_enabled": r"fxaa_check\.(clicked|toggled)\.connect",
        "specular_aa": r"specular_check\.(clicked|toggled)\.connect",
        "dithering": r"dithering_check\.(clicked|toggled)\.connect",
        "oit": r"oit_check\.(clicked|toggled)\.connect",
        "auto_rotate": r"auto_rotate\.(clicked|toggled)\.connect",
    }

    for name, pattern in checkboxes.items():
        match = re.search(pattern, content, re.IGNORECASE)
        if match:
            signal = match.group(1)
            icon = "‚úÖ" if signal == "toggled" else "‚ö†Ô∏è"
            print(f"{icon} {name:20s} - {signal}()")
        else:
            print(f"‚ùå {name:20s} - NOT CONNECTED")

    return content


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï CHECKBOXES –ò ANTIALIASING –í GRAPHICSPANEL")
    print("=" * 70)

    panel_file = Path("src/ui/panels/panel_graphics.py")

    if not panel_file.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {panel_file}")
        return False

    # –°–æ–∑–¥–∞—ë–º backup
    backup_file = panel_file.with_suffix(".py.backup")
    content = panel_file.read_text(encoding="utf-8")
    backup_file.write_text(content, encoding="utf-8")
    print(f"üíæ Backup —Å–æ–∑–¥–∞–Ω: {backup_file}")

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    content = fix_ibl_checkbox()
    content = fix_skybox_checkbox(content)
    content = fix_fog_checkbox(content)
    content = fix_bloom_checkbox(content)
    content = fix_antialiasing_combobox(content)
    content = verify_all_checkboxes(content)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    panel_file.write_text(content, encoding="utf-8")
    print(f"\nüíæ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {panel_file}")

    print("\n" + "=" * 70)
    print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´!")
    print("=" * 70)

    print("\nüéØ –ß–¢–û –ò–°–ü–†–ê–í–õ–ï–ù–û:")
    print("  1. IBL checkbox —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç toggled() –≤–º–µ—Å—Ç–æ clicked()")
    print("  2. Skybox checkbox —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç toggled() –≤–º–µ—Å—Ç–æ clicked()")
    print("  3. Fog checkbox —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç toggled() –≤–º–µ—Å—Ç–æ clicked()")
    print("  4. Bloom checkbox —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç toggled() –≤–º–µ—Å—Ç–æ clicked()")
    print("  5. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Antialiasing combobox")

    print("\nüß™ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: py app.py")
    print("  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —á–µ–∫–±–æ–∫—Å–æ–≤ IBL/Skybox/Fog/Bloom")
    print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è")
    print("  4. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —á–µ–∫–±–æ–∫—Å—ã –≤–∫–ª—é—á–∞—é—Ç—Å—è –ò –í–´–ö–õ–Æ–ß–ê–Æ–¢–°–Ø")

    return True


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
