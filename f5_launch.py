#!/usr/bin/env python3
"""
F5 Quick Launch Configuration –¥–ª—è PneumoStabSim Professional
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
"""
import os
import sys
import subprocess
from pathlib import Path

class F5LaunchConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (F5) –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö IDE"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.venv_path = self.project_root / "venv"
        self.requirements_file = self.project_root / "requirements.txt"
        
    def setup_environment(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        print("üîß F5 Launch: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not self._check_venv():
            if not self._create_venv():
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if not self._check_dependencies():
            if not self._install_dependencies():
                return False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self._setup_env_vars()
        
        print("‚úÖ F5 Launch: –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!")
        return True
    
    def _check_venv(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        python_exe = self.venv_path / ("Scripts/python.exe" if os.name == 'nt' else "bin/python")
        return python_exe.exists()
    
    def _create_venv(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        try:
            subprocess.run([sys.executable, "-m", "venv", str(self.venv_path)], 
                         check=True, cwd=self.project_root)
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è venv: {e}")
            return False
    
    def _check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        if not self.requirements_file.exists():
            return True
            
        pip_exe = self.venv_path / ("Scripts/pip.exe" if os.name == 'nt' else "bin/pip")
        if not pip_exe.exists():
            return False
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PySide6 –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            result = subprocess.run([str(pip_exe), "show", "PySide6"], 
                                  capture_output=True, text=True, cwd=self.project_root)
            return result.returncode == 0
        except Exception:
            return False
    
    def _install_dependencies(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        pip_exe = self.venv_path / ("Scripts/pip.exe" if os.name == 'nt' else "bin/pip")
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º pip
            subprocess.run([str(pip_exe), "install", "--upgrade", "pip"], 
                         check=True, cwd=self.project_root)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            subprocess.run([str(pip_exe), "install", "-r", str(self.requirements_file)], 
                         check=True, cwd=self.project_root)
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            return False
    
    def _setup_env_vars(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        env_vars = {
            'PYTHONPATH': f"{self.project_root};{self.project_root / 'src'}",
            'QT_SCALE_FACTOR_ROUNDING_POLICY': 'PassThrough',
            'QT_AUTO_SCREEN_SCALE_FACTOR': '1',
            'QT_ENABLE_HIGHDPI_SCALING': '1',
        }
        
        for key, value in env_vars.items():
            os.environ[key] = str(value)
    
    def launch_debug_mode(self):
        """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏"""
        if not self.setup_environment():
            return False
        
        print("üöÄ F5 Launch: –ó–∞–ø—É—Å–∫ PneumoStabSim –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        debug_env = os.environ.copy()
        debug_env.update({
            'QT_DEBUG_PLUGINS': '1',
            'QT_LOGGING_RULES': '*.debug=true;js.debug=true;qt.qml.debug=true',
            'PYTHONDEBUG': '1'
        })
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        python_exe = self.venv_path / ("Scripts/python.exe" if os.name == 'nt' else "bin/python")
        app_path = self.project_root / "app.py"
        
        try:
            process = subprocess.Popen(
                [str(python_exe), str(app_path), "--debug"],
                cwd=self.project_root,
                env=debug_env
            )
            return process
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            return None
    
    def launch_normal_mode(self):
        """–ó–∞–ø—É—Å–∫ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        if not self.setup_environment():
            return False
        
        print("üöÄ F5 Launch: –ó–∞–ø—É—Å–∫ PneumoStabSim...")
        
        python_exe = self.venv_path / ("Scripts/python.exe" if os.name == 'nt' else "bin/python")
        app_path = self.project_root / "app.py"
        
        try:
            process = subprocess.Popen(
                [str(python_exe), str(app_path)],
                cwd=self.project_root,
                env=os.environ.copy()
            )
            return process
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è F5 –∑–∞–ø—É—Å–∫–∞"""
    launcher = F5LaunchConfig()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    debug_mode = "--debug" in sys.argv or "-d" in sys.argv
    
    if debug_mode:
        process = launcher.launch_debug_mode()
    else:
        process = launcher.launch_normal_mode()
    
    if process:
        try:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            process.wait()
        except KeyboardInterrupt:
            print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
            process.terminate()
            try:
                process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                process.kill()

if __name__ == "__main__":
    main()
