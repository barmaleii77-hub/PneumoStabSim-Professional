# -*- coding: utf-8 -*-
"""
Cleanup Old QML Blocks
–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ inline –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–≤–µ—Ç–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π
"""

import re
import shutil
from pathlib import Path
from datetime import datetime


def create_backup(main_qml_path: Path) -> Path:
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = main_qml_path.with_suffix(f'.qml.backup_cleanup_{timestamp}')
    shutil.copy2(main_qml_path, backup_path)
    print(f"‚úÖ Backup created: {backup_path}")
    return backup_path


def remove_old_materials(content: str) -> str:
    """–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ inline –º–∞—Ç–µ—Ä–∏–∞–ª—ã"""
    print("\nüóëÔ∏è Removing old inline materials...")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ä—ã—Ö PrincipledMaterial –±–ª–æ–∫–æ–≤
    # (—Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –ù–ï –≤–Ω—É—Ç—Ä–∏ SharedMaterials)
    material_pattern = r'\n\s*PrincipledMaterial\s*\{\s*id:\s*(\w+Material)[^}]*?baseColor:[^}]*?\}[^\n]*\n'
    
    matches = list(re.finditer(material_pattern, content, flags=re.MULTILINE | re.DOTALL))
    
    if not matches:
        print("  ‚è≠Ô∏è No old materials found")
        return content
    
    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –ù–ï –≤–Ω—É—Ç—Ä–∏ SharedMaterials
    lines_removed = 0
    for match in matches:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤–Ω—É—Ç—Ä–∏ SharedMaterials
        before_match = content[:match.start()]
        if 'SharedMaterials {' in before_match and '}' not in before_match[before_match.rfind('SharedMaterials {'):]:
            # –≠—Ç–æ –≤–Ω—É—Ç—Ä–∏ SharedMaterials, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue
        
        material_name = match.group(1)
        content = content.replace(match.group(0), f'\n    // REMOVED: old {material_name} (now in SharedMaterials)\n')
        lines_removed += 1
    
    print(f"  ‚úÖ Removed {lines_removed} old material blocks")
    return content


def remove_old_lights(content: str) -> str:
    """–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ inline –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–≤–µ—Ç–∞"""
    print("\nüóëÔ∏è Removing old inline lights...")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ä—ã—Ö DirectionalLight
    dir_light_pattern = r'\n\s*DirectionalLight\s*\{\s*id:\s*(keyLight|fillLight|rimLight)[^}]*?\}[^\n]*\n'
    
    matches = list(re.finditer(dir_light_pattern, content, flags=re.MULTILINE | re.DOTALL))
    
    lines_removed = 0
    for match in matches:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤–Ω—É—Ç—Ä–∏ DirectionalLights
        before_match = content[:match.start()]
        if 'DirectionalLights {' in before_match and '}' not in before_match[before_match.rfind('DirectionalLights {'):]:
            # –≠—Ç–æ –≤–Ω—É—Ç—Ä–∏ DirectionalLights, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue
        
        light_name = match.group(1)
        content = content.replace(match.group(0), f'\n    // REMOVED: old {light_name} (now in DirectionalLights)\n')
        lines_removed += 1
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ PointLight
    point_light_pattern = r'\n\s*PointLight\s*\{\s*id:\s*pointLight[^}]*?\}[^\n]*\n'
    
    matches = list(re.finditer(point_light_pattern, content, flags=re.MULTILINE | re.DOTALL))
    
    for match in matches:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤–Ω—É—Ç—Ä–∏ PointLights
        before_match = content[:match.start()]
        if 'PointLights {' in before_match and '}' not in before_match[before_match.rfind('PointLights {'):]:
            continue
        
        content = content.replace(match.group(0), '\n    // REMOVED: old pointLight (now in PointLights)\n')
        lines_removed += 1
    
    print(f"  ‚úÖ Removed {lines_removed} old light blocks")
    return content


def validate_syntax(content: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"""
    open_braces = content.count('{')
    close_braces = content.count('}')
    
    if open_braces != close_braces:
        print(f"  ‚ùå Brace mismatch: {open_braces} {{ vs {close_braces} }}")
        return False
    
    required_blocks = ['SharedMaterials {', 'DirectionalLights {', 'PointLights {']
    for block in required_blocks:
        if block not in content:
            print(f"  ‚ùå Missing required block: {block}")
            return False
    
    print("  ‚úÖ Syntax validation passed")
    return True


def main():
    main_qml = Path("assets/qml/main.qml")
    
    if not main_qml.exists():
        print(f"‚ùå File not found: {main_qml}")
        return 1
    
    print("=" * 70)
    print("üßπ QML CLEANUP SCRIPT")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø
    backup_path = create_backup(main_qml)
    
    # –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª
    with open(main_qml, 'r', encoding='utf-8') as f:
        content = f.read()
    
    original_lines = len(content.split('\n'))
    print(f"\nüìñ Original: {original_lines} lines")
    
    # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±–ª–æ–∫–∏
    content = remove_old_materials(content)
    content = remove_old_lights(content)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    print("\nüîç Validating QML syntax...")
    if not validate_syntax(content):
        print("\n‚ùå Validation failed! Restoring backup...")
        shutil.copy2(backup_path, main_qml)
        return 1
    
    # –ó–∞–ø–∏—Å–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    with open(main_qml, 'w', encoding='utf-8') as f:
        f.write(content)
    
    new_lines = len(content.split('\n'))
    reduction = original_lines - new_lines
    
    print("\n" + "=" * 70)
    print("‚úÖ CLEANUP COMPLETE!")
    print("=" * 70)
    print(f"\nüìä Statistics:")
    print(f"  Original lines:    {original_lines}")
    print(f"  New lines:         {new_lines}")
    print(f"  Lines reduced:     {reduction} ({reduction/original_lines*100:.1f}%)")
    
    print(f"\nüíæ Backup saved at: {backup_path}")
    print(f"‚úÖ {main_qml} successfully cleaned!")
    
    return 0


if __name__ == "__main__":
    import sys
    sys.exit(main())
