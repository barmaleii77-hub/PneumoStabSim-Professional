#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–µ —Ç–∞–±—ã GraphicsPanel
–ß–∏—Ç–∞–µ—Ç –º–æ–Ω–æ–ª–∏—Ç panel_graphics.py –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ LabeledSlider –≤ —Ç–∞–±—ã
"""

from pathlib import Path


def extract_slider_definition(
    monolith_path: Path, param_name: str, line_number: int
) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ LabeledSlider –∏–∑ –º–æ–Ω–æ–ª–∏—Ç–∞"""
    content = monolith_path.read_text(encoding="utf-8")
    lines = content.split("\n")

    # –ù–∞—á–∏–Ω–∞–µ–º —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    start_idx = line_number - 1
    code_lines = []

    # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    for i in range(start_idx, min(start_idx + 10, len(lines))):
        code_lines.append(lines[i])
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
        if ")" in lines[i] and "=" in "".join(code_lines):
            break

    return "\n".join(code_lines)


# –ö–∞—Ä—Ç–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä –º–æ–Ω–æ–ª–∏—Ç–∞ ‚Üí (—Ç–∞–±, —Å—Ç—Ä–æ–∫–∞ –≤ –º–æ–Ω–æ–ª–∏—Ç–µ)
MISSING_PARAMS = {
    # Camera Tab (5 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
    "–ü–æ–ª–µ –∑—Ä–µ–Ω–∏—è": ("camera_tab.py", 1379),
    "–ë–ª–∏–∂–Ω—è—è –ø–ª–æ—Å–∫–æ—Å—Ç—å": ("camera_tab.py", 1384),
    "–î–∞–ª—å–Ω—è—è –ø–ª–æ—Å–∫–æ—Å—Ç—å": ("camera_tab.py", 1389),
    "–°–∫–æ—Ä–æ—Å—Ç—å –∫–∞–º–µ—Ä—ã": ("camera_tab.py", 1394),
    "–°–∫–æ—Ä–æ—Å—Ç—å –∞–≤—Ç–æ–ø–æ–≤–æ—Ä–æ—Ç–∞": ("camera_tab.py", 1417),
    # Environment Tab (4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
    "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å IBL": ("environment_tab.py", 930),
    "–†–∞–∑–º—ã—Ç–∏–µ skybox": ("environment_tab.py", 936),
    "–ü–æ–≤–æ—Ä–æ—Ç IBL": ("environment_tab.py", 975),
    "–°–º–µ—â–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è X": ("environment_tab.py", 989),
    "–°–º–µ—â–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Y": ("environment_tab.py", 995),
    # Fog –≤ Environment Tab (5 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
    "–ü–ª–æ—Ç–Ω–æ—Å—Ç—å": ("environment_tab.py", 1094),
    "–ù–∞—á–∞–ª–æ": ("environment_tab.py", 1099),
    "–ö–æ–Ω–µ—Ü": ("environment_tab.py", 1104),
    "–†–∞–¥–∏—É—Å": ("environment_tab.py", 1127),  # AO radius
    # Quality Tab (3 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
    "Shadow Bias": ("quality_tab.py", 1202),
    "–¢–µ–º–Ω–æ—Ç–∞": ("quality_tab.py", 1207),
    "–°–∏–ª–∞ TAA": ("quality_tab.py", 1249),
    "–ú–∞—Å—à—Ç–∞–± —Ä–µ–Ω–¥–µ—Ä–∞": ("quality_tab.py", 1277),
    "–õ–∏–º–∏—Ç FPS": ("quality_tab.py", 1290),
    # Effects Tab (3 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
    "–ü–æ—Ä–æ–≥": ("effects_tab.py", 1616),
    "–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ": ("effects_tab.py", 1621),
    "–§–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ": ("effects_tab.py", 1661),
}


def main():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç —Å –∫–æ–¥–æ–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    monolith = Path("src/ui/panels/panel_graphics.py")

    if not monolith.exists():
        print(f"‚ùå –ú–æ–Ω–æ–ª–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {monolith}")
        return

    print("=" * 80)
    print("üìã –ü–õ–ê–ù –î–û–ë–ê–í–õ–ï–ù–ò–Ø –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –ü–ê–†–ê–ú–ï–¢–†–û–í")
    print("=" * 80)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∞–±–∞–º
    by_tab = {}
    for param, (tab, line) in MISSING_PARAMS.items():
        if tab not in by_tab:
            by_tab[tab] = []
        by_tab[tab].append((param, line))

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–±–∞
    for tab, params in sorted(by_tab.items()):
        print(f"\n{'='*80}")
        print(f"üìÑ {tab} - –¥–æ–±–∞–≤–∏—Ç—å {len(params)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        print(f"{'='*80}\n")

        for param, line in params:
            print(f"‚ñ∂ {param} (—Å—Ç—Ä–æ–∫–∞ {line} –≤ –º–æ–Ω–æ–ª–∏—Ç–µ)")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–∑ –º–æ–Ω–æ–ª–∏—Ç–∞
            code = extract_slider_definition(monolith, param, line)

            print("   –ö–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
            print("   " + "-" * 76)
            for code_line in code.split("\n"):
                if code_line.strip():
                    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
                    cleaned = code_line.lstrip()
                    print(f"   {cleaned}")
            print("   " + "-" * 76)
            print()

    print("\n" + "=" * 80)
    print("üí° –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –î–û–ë–ê–í–õ–ï–ù–ò–Æ")
    print("=" * 80)
    print(
        """
1. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞–∂–¥—ã–π —Ç–∞–± –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ
2. –ù–∞–π–¥–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É (QGroupBox)
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "–ö–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
4. –í—Å—Ç–∞–≤—å—Ç–µ –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ (–ø–µ—Ä–µ–¥ layout.addStretch())
5. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–∏–≥–Ω–∞–ª –∫ _emit_changes()
6. –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ get_state() –∏ set_state()
7. –ó–∞–ø—É—Å—Ç–∏—Ç–µ python fix_labeled_slider_calls.py –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:

```python
# –í _create_camera_group():
fov_slider = LabeledSlider(
    "–ü–æ–ª–µ –∑—Ä–µ–Ω–∏—è:",
    minimum=10.0,
    maximum=120.0,
    value=60.0,
    step=0.5,
    suffix="¬∞"
)
layout.addWidget(fov_slider)
self.fov_slider = fov_slider  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É

# –í _connect_signals():
self.fov_slider.value_changed.connect(self._emit_changes)

# –í get_state():
return {
    'fov': self.fov_slider.get_value(),
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
}

# –í set_state():
if 'fov' in state:
    self.fov_slider.set_value(state['fov'])
```
    """
    )

    print("\n‚úÖ –û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")


if __name__ == "__main__":
    main()
