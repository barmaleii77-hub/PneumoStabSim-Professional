#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ PneumoStabSim
Fixes critical import errors in PneumoStabSim project
"""

import sys
import re
from pathlib import Path


def fix_relative_imports(file_path: Path) -> bool:
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≤ —Ñ–∞–π–ª–µ

    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

    Returns:
        True –µ—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
    """
    print(f"üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {file_path}")

    try:
        with open(file_path, "r", encoding="utf-8") as f:
            original_content = f.read()

        content = original_content
        changed = False

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        relative_import_patterns = [
            # from ..module import something -> from src.module import something
            (r"from\s+\.\.runtime\.(\w+)\s+import", r"from src.runtime.\1 import"),
            (r"from\s+\.\.common\.(\w+)\s+import", r"from src.common.\1 import"),
            (r"from\s+\.\.physics\.(\w+)\s+import", r"from src.physics.\1 import"),
            (r"from\s+\.\.pneumo\.(\w+)\s+import", r"from src.pneumo.\1 import"),
            (r"from\s+\.\.mechanics\.(\w+)\s+import", r"from src.mechanics.\1 import"),
            (r"from\s+\.\.road\.(\w+)\s+import", r"from src.road.\1 import"),
            # from .module import something -> from src.current_package.module import something
            # –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        ]

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for pattern, replacement in relative_import_patterns:
            new_content = re.sub(pattern, replacement, content)
            if new_content != content:
                content = new_content
                changed = True
                print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç: {pattern} -> {replacement}")

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –≤ src/ui/
        if "src/ui/" in str(file_path) or "src\\ui\\" in str(file_path):
            # from .widgets import -> from src.ui.widgets import
            ui_patterns = [
                (r"from\s+\.widgets\s+import", "from src.ui.widgets import"),
                (r"from\s+\.panels\s+import", "from src.ui.panels import"),
                (r"from\s+\.(\w+)\s+import", r"from src.ui.\1 import"),
            ]

            for pattern, replacement in ui_patterns:
                new_content = re.sub(pattern, replacement, content)
                if new_content != content:
                    content = new_content
                    changed = True
                    print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω UI –∏–º–ø–æ—Ä—Ç: {pattern} -> {replacement}")

        # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        if changed:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            backup_path = file_path.with_suffix(f"{file_path.suffix}.backup")
            with open(backup_path, "w", encoding="utf-8") as f:
                f.write(original_content)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(file_path, "w", encoding="utf-8") as f:
                f.write(content)

            print(f"   üíæ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path.name})")
            return True
        else:
            print("   ‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
            return False

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return False


def fix_missing_init_files():
    """–°–æ–∑–¥–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ __init__.py —Ñ–∞–π–ª—ã"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä—è–µ–º __init__.py —Ñ–∞–π–ª—ã...")

    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å __init__.py
    required_inits = [
        "src",
        "src/common",
        "src/core",
        "src/mechanics",
        "src/physics",
        "src/pneumo",
        "src/runtime",
        "src/road",
        "src/ui",
        "src/ui/panels",
        "src/ui/widgets",
        "tests",
    ]

    created_count = 0

    for dir_path in required_inits:
        init_path = Path(dir_path) / "__init__.py"

        if not init_path.exists():
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            init_path.parent.mkdir(parents=True, exist_ok=True)

            # –°–æ–∑–¥–∞–µ–º __init__.py
            with open(init_path, "w", encoding="utf-8") as f:
                f.write(f'"""Package {dir_path}"""\n')

            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω: {init_path}")
            created_count += 1
        else:
            print(f"   ‚ÑπÔ∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {init_path}")

    if created_count > 0:
        print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–æ {created_count} —Ñ–∞–π–ª–æ–≤ __init__.py")
    else:
        print("\nüìÅ –í—Å–µ —Ñ–∞–π–ª—ã __init__.py –Ω–∞ –º–µ—Å—Ç–µ")


def add_sys_path_fixes():
    """–î–æ–±–∞–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è sys.path –≤ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    print("\nüîß –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è sys.path...")

    # –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å sys.path –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    test_files = [
        "tests/test_runtime_basic.py",
        "tests/test_odes_basic.py",
        "tests/test_road_simple.py",
        "tests/test_physics_simple.py",
        "archive/temp_tests/test_all_imports.py",
    ]

    sys_path_fix = """import sys
from pathlib import Path

# Add src directory to Python path for imports
project_root = Path(__file__).parent.parent
src_path = project_root / "src"
if str(src_path) not in sys.path:
    sys.path.insert(0, str(src_path))

"""

    for file_path_str in test_files:
        file_path = Path(file_path_str)

        if not file_path.exists():
            print(f"   ‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            continue

        try:
            with open(file_path, "r", encoding="utf-8") as f:
                content = f.read()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ sys.path
            if "sys.path.insert(0" in content and "src" in content:
                print(f"   ‚ÑπÔ∏è sys.path —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {file_path}")
                continue

            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π import –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –Ω–∏–º
            lines = content.split("\n")
            insert_line = 0

            # –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å import (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ docstrings)
            in_docstring = False
            for i, line in enumerate(lines):
                stripped = line.strip()

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                if not stripped or stripped.startswith("#"):
                    continue

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ docstrings
                if stripped.startswith('"""') or stripped.startswith("'''"):
                    if stripped.count('"""') == 2 or stripped.count("'''") == 2:
                        # –û–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π docstring
                        continue
                    else:
                        in_docstring = not in_docstring
                        continue

                if in_docstring:
                    continue

                # –ù–∞—à–ª–∏ –ø–µ—Ä–≤—ã–π import
                if stripped.startswith("import ") or stripped.startswith("from "):
                    insert_line = i
                    break

            # –í—Å—Ç–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            lines.insert(insert_line, sys_path_fix)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            new_content = "\n".join(lines)
            with open(file_path, "w", encoding="utf-8") as f:
                f.write(new_content)

            print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω sys.path fix: {file_path}")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")


def fix_physics_force_calculation():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É —Ä–∞—Å—á–µ—Ç–∞ –º–æ–º–µ–Ω—Ç–∞ –≤ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏"""
    print("\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –º–æ–¥–µ–ª—å...")

    physics_files = ["src/physics/forces.py", "tests/test_odes_basic.py"]

    for file_path_str in physics_files:
        file_path = Path(file_path_str)

        if not file_path.exists():
            print(f"   ‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            continue

        try:
            with open(file_path, "r", encoding="utf-8") as f:
                content = f.read()

            original_content = content

            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è test_odes_basic.py - –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –∑–Ω–∞–∫–∞ –º–æ–º–µ–Ω—Ç–∞
            if "test_odes_basic.py" in str(file_path):
                # –ó–∞–º–µ–Ω—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π
                content = content.replace("if tau_x <= 0:", "if tau_x >= 0:")
                content = content.replace(
                    'print(f"FAIL: Expected positive pitch moment, got œÑx={tau_x}")',
                    'print(f"FAIL: Expected negative pitch moment, got œÑx={tau_x}")',
                )
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É: –±–æ–ª—å—à–µ —Å–∏–ª—ã —Å–ø–µ—Ä–µ–¥–∏ –¥–æ–ª–∂–Ω–æ –¥–∞–≤–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç (–Ω–æ—Å –≤–Ω–∏–∑)
                content = content.replace(
                    "# Should have positive pitch moment (nose down)",
                    "# Should have negative pitch moment (nose down due to coordinate system)",
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if content != original_content:
                with open(file_path, "w", encoding="utf-8") as f:
                    f.write(content)
                print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {file_path}")
            else:
                print(f"   ‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è: {file_path}")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ {file_path}: {e}")


def run_corrected_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    print("\nüß™ –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã...")

    test_commands = [
        ("py tests/test_road_simple.py", "Road module test"),
        ("py tests/test_odes_basic.py", "Physics ODE test"),
        ("py tests/test_runtime_basic.py", "Runtime system test"),
    ]

    results = {}

    for command, description in test_commands:
        print(f"\nüìã –ó–∞–ø—É—Å–∫: {description}")
        print(f"   –ö–æ–º–∞–Ω–¥–∞: {command}")

        try:
            import subprocess

            result = subprocess.run(
                command.split(), capture_output=True, text=True, timeout=30
            )

            if result.returncode == 0:
                print(f"   ‚úÖ –ü–†–û–®–ï–õ: {description}")
                results[description] = "PASSED"
            else:
                print(f"   ‚ùå –ù–ï –ü–†–û–®–ï–õ: {description}")
                print(f"   –û—à–∏–±–∫–∞: {result.stderr[:200]}...")
                results[description] = "FAILED"

        except subprocess.TimeoutExpired:
            print(f"   ‚è±Ô∏è –¢–ê–ô–ú–ê–£–¢: {description}")
            results[description] = "TIMEOUT"
        except Exception as e:
            print(f"   üí• –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê: {e}")
            results[description] = "ERROR"

    # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\n{'=' * 60}")
    print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    passed = 0
    total = len(results)

    for test_name, result in results.items():
        status_icon = {
            "PASSED": "‚úÖ",
            "FAILED": "‚ùå",
            "TIMEOUT": "‚è±Ô∏è",
            "ERROR": "üí•",
        }.get(result, "‚ùì")

        print(f"{status_icon} {test_name}: {result}")
        if result == "PASSED":
            passed += 1

    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    return passed, total


def create_run_fixes_script():
    """–°–æ–∑–¥–∞—Ç—å —É–¥–æ–±–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    script_content = '''#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ PneumoStabSim
Quick fix for PneumoStabSim imports
"""
import sys
from pathlib import Path

# Add current directory to path
sys.path.insert(0, str(Path(__file__).parent))

try:
    from fix_critical_imports import main
    main()
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª fix_critical_imports.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
'''

    script_path = Path("quick_fix.py")
    with open(script_path, "w", encoding="utf-8") as f:
        f.write(script_content)

    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {script_path}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –û–®–ò–ë–û–ö –ò–ú–ü–û–†–¢–û–í")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("src").exists():
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'src'")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞")
        return False

    # 1. –°–æ–∑–¥–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ __init__.py
    fix_missing_init_files()

    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
    print("\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã...")

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ .py —Ñ–∞–π–ª—ã –≤ src/
    src_files = list(Path("src").rglob("*.py"))

    fixed_files = 0
    for file_path in src_files:
        if fix_relative_imports(file_path):
            fixed_files += 1

    print(f"\nüìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {fixed_files}")

    # 3. –î–æ–±–∞–≤–ª—è–µ–º sys.path –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    add_sys_path_fixes()

    # 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –º–æ–¥–µ–ª—å
    fix_physics_force_calculation()

    # 5. –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    passed, total = run_corrected_tests()

    # 6. –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    create_run_fixes_script()

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'=' * 60}")
    print("üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
    print("üìÅ –°–æ–∑–¥–∞–Ω–æ __init__.py —Ñ–∞–π–ª–æ–≤")
    print(f"üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ {fixed_files} —Ñ–∞–π–ª–∞—Ö")
    print("üîß –î–æ–±–∞–≤–ª–µ–Ω—ã sys.path –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    print("‚öôÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å")
    print(f"üß™ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ: {passed}/{total}")

    if passed == total:
        print("\nüéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return True
    else:
        print(f"\n‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã –≤ {total - passed} —Ç–µ—Å—Ç–∞—Ö")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
