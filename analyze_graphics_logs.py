#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–£—Ç–∏–ª–∏—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import json
import sys
from pathlib import Path
from typing import List, Dict, Any
from datetime import datetime
from collections import defaultdict


class LogAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ª–æ–≥–æ–≤ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    
    def __init__(self, log_file: Path):
        self.log_file = log_file
        self.events: List[Dict[str, Any]] = []
        self.session_info: Dict[str, Any] = {}
        self.load_log()
    
    def load_log(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥ –∏–∑ —Ñ–∞–π–ª–∞"""
        if not self.log_file.exists():
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.log_file}")
            return
        
        with open(self.log_file, 'r', encoding='utf-8') as f:
            for line in f:
                try:
                    event = json.loads(line.strip())
                    
                    if event.get('event_type') == 'session_start':
                        self.session_info = event
                    elif event.get('event_type') in ('parameter_change', 'parameter_update'):
                        self.events.append(event)
                    elif event.get('event_type') == 'session_end':
                        self.session_info.update(event.get('stats', {}))
                except json.JSONDecodeError as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {e}")
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.events)} —Å–æ–±—ã—Ç–∏–π –∏–∑ {self.log_file.name}")
    
    def print_summary(self):
        """–í—ã–≤–µ—Å—Ç–∏ –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\n" + "="*60)
        print("üìä SUMMARY")
        print("="*60)
        
        if 'session_id' in self.session_info:
            print(f"Session ID: {self.session_info['session_id']}")
        if 'timestamp' in self.session_info:
            print(f"Started: {self.session_info['timestamp']}")
        
        print(f"Total events: {len(self.events)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        by_category = defaultdict(int)
        for event in self.events:
            category = event.get('category', 'unknown')
            by_category[category] += 1
        
        print("\nBy category:")
        for cat, count in sorted(by_category.items()):
            print(f"  {cat}: {count} events")
        
        # QML sync
        with_qml = sum(1 for e in self.events if e.get('qml_state'))
        successful = sum(1 for e in self.events if e.get('applied_to_qml'))
        failed = sum(1 for e in self.events if e.get('error'))
        
        print(f"\nQML Synchronization:")
        print(f"  With QML update: {with_qml}/{len(self.events)}")
        print(f"  Successful: {successful}")
        print(f"  Failed: {failed}")
        if len(self.events) > 0:
            print(f"  Sync rate: {(successful/len(self.events)*100):.1f}%")
        
        print("="*60 + "\n")
    
    def print_timeline(self, limit: int = 20):
        """–í—ã–≤–µ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        print("‚è±Ô∏è  TIMELINE (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {})".format(min(limit, len(self.events))))
        print("-"*60)
        
        for event in self.events[-limit:]:
            ts = event.get('timestamp', 'N/A')
            param = event.get('parameter_name', 'N/A')
            old = event.get('old_value')
            new = event.get('new_value')
            category = event.get('category', 'N/A')
            applied = event.get('applied_to_qml', False)
            error = event.get('error')
            
            status = "‚úÖ" if applied else ("‚ùå" if error else "‚è≥")
            
            print(f"{status} [{ts}] {category}.{param}")
            print(f"   {old} ‚Üí {new}")
            if error:
                print(f"   ‚ö†Ô∏è Error: {error}")
            print()
        
        print("-"*60 + "\n")
    
    def analyze_errors(self):
        """–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫"""
        errors = [e for e in self.events if e.get('error')]
        
        if not errors:
            print("‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n")
            return
        
        print(f"‚ö†Ô∏è  ERRORS ANALYSIS ({len(errors)} errors)")
        print("-"*60)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        by_param = defaultdict(list)
        for event in errors:
            param = event.get('parameter_name')
            error = event.get('error')
            by_param[param].append(error)
        
        for param, error_list in sorted(by_param.items()):
            print(f"\n{param}:")
            for i, error in enumerate(error_list, 1):
                print(f"  {i}. {error}")
        
        print("-"*60 + "\n")
    
    def analyze_patterns(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        print("üîç PATTERN ANALYSIS")
        print("-"*60)
        
        # –°–∞–º—ã–µ —á–∞—Å—Ç–æ –º–µ–Ω—è–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        param_counts = defaultdict(int)
        for event in self.events:
            param = event.get('parameter_name')
            param_counts[param] += 1
        
        print("\n–ú–æ—Å—Ç frequently changed parameters:")
        for param, count in sorted(param_counts.items(), key=lambda x: x[1], reverse=True)[:10]:
            print(f"  {param}: {count} changes")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑ QML —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        no_sync = []
        for event in self.events:
            if not event.get('qml_state') and not event.get('applied_to_qml'):
                no_sync.append(event.get('parameter_name'))
        
        if no_sync:
            print(f"\n‚ö†Ô∏è Parameters without QML sync ({len(set(no_sync))} unique):")
            for param in sorted(set(no_sync)):
                count = no_sync.count(param)
                print(f"  {param}: {count} times")
        
        print("-"*60 + "\n")
    
    def export_csv(self, output_file: Path):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ CSV –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ Excel"""
        import csv
        
        with open(output_file, 'w', newline='', encoding='utf-8') as f:
            fieldnames = ['timestamp', 'category', 'parameter_name', 'old_value', 
                         'new_value', 'applied_to_qml', 'error']
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            
            writer.writeheader()
            for event in self.events:
                row = {k: event.get(k, '') for k in fieldnames}
                writer.writerow(row)
        
        print(f"üìÑ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ CSV: {output_file}\n")
    
    def compare_panel_qml_states(self):
        """–°—Ä–∞–≤–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –∏ QML"""
        print("üîÑ PANEL ‚Üî QML STATE COMPARISON")
        print("-"*60)
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å QML —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        last_with_qml = None
        for event in reversed(self.events):
            if event.get('qml_state'):
                last_with_qml = event
                break
        
        if not last_with_qml:
            print("‚ö†Ô∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π —Å QML —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º\n")
            return
        
        panel_state = last_with_qml.get('panel_state', {})
        qml_state = last_with_qml.get('qml_state', {})
        
        print(f"Last event with QML state: {last_with_qml.get('timestamp')}")
        print(f"Parameter: {last_with_qml.get('parameter_name')}")
        print(f"\nPanel state keys: {len(panel_state)}")
        print(f"QML state keys: {len(qml_state)}")
        print("-"*60 + "\n")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("Usage: python analyze_graphics_logs.py <log_file.jsonl>")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–≥–∏:")
        
        log_dir = Path("logs/graphics")
        if log_dir.exists():
            for log_file in sorted(log_dir.glob("session_*.jsonl")):
                print(f"  {log_file}")
        else:
            print("  (–Ω–µ—Ç –ª–æ–≥–æ–≤ –≤ logs/graphics/)")
        
        return
    
    log_file = Path(sys.argv[1])
    analyzer = LogAnalyzer(log_file)
    
    if not analyzer.events:
        print("‚ùå –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∞–Ω–∞–ª–∏–∑—ã
    analyzer.print_summary()
    analyzer.print_timeline(limit=15)
    analyzer.analyze_errors()
    analyzer.analyze_patterns()
    analyzer.compare_panel_qml_states()
    
    # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
    if '--csv' in sys.argv or '-c' in sys.argv:
        csv_file = log_file.with_suffix('.csv')
        analyzer.export_csv(csv_file)
    
    print("üí° Tip: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --csv –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV")


if __name__ == "__main__":
    main()
