"""
–ü–æ–∏—Å–∫ –í–°–ï–• –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—à–∏–±–æ–∫ QML
"""
import subprocess
import sys
import re


def find_all_qml_errors():
    print("=" * 70)
    print("–ü–û–ò–°–ö –í–°–ï–• –û–®–ò–ë–û–ö QML")
    print("=" * 70)

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        result = subprocess.run(
            [sys.executable, "app.py", "--test-mode"],
            capture_output=True,
            text=True,
            timeout=15,
            encoding="utf-8",
            errors="replace",
        )

        output = result.stdout + result.stderr

        # –ò—â–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ "Cannot assign"
        cannot_assign_pattern = r'Cannot assign to non-existent property "([^"]+)"'
        cannot_errors = re.findall(cannot_assign_pattern, output)

        # –ò—â–µ–º –≤—Å–µ QML –æ—à–∏–±–∫–∏
        qml_error_pattern = r"file:///.*\.qml:\d+:\d+: (.+)"
        qml_errors = re.findall(qml_error_pattern, output)

        # –ò—â–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        critical_pattern = r"\[CRITICAL\] (.+)"
        critical_errors = re.findall(critical_pattern, output)

        print("\n" + "=" * 70)
        print("–ù–ê–ô–î–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò:")
        print("=" * 70)

        if cannot_errors:
            print(
                f"\n1. –ù–ï–°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –°–í–û–ô–°–¢–í–ê ({len(set(cannot_errors))} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö):"
            )
            for prop in sorted(set(cannot_errors)):
                print(f"   - {prop}")

        if qml_errors:
            print(f"\n2. QML –û–®–ò–ë–ö–ò ({len(qml_errors)}):")
            for i, error in enumerate(qml_errors[:10], 1):
                print(f"   {i}. {error}")
            if len(qml_errors) > 10:
                print(f"   ... –∏ –µ—â—ë {len(qml_errors) - 10} –æ—à–∏–±–æ–∫")

        if critical_errors:
            print(f"\n3. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò ({len(critical_errors)}):")
            for i, error in enumerate(critical_errors[:5], 1):
                print(f"   {i}. {error}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞
        if "APPLICATION READY" in output:
            print("\n" + "=" * 70)
            print("‚úÖ –°–¢–ê–¢–£–°: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ")
        else:
            print("\n" + "=" * 70)
            print("‚ùå –°–¢–ê–¢–£–°: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ù–ï –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –ª–æ–≥
        with open("full_qml_log.txt", "w", encoding="utf-8", errors="replace") as f:
            f.write(output)

        print("\nüìÑ –ü–æ–ª–Ω—ã–π –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: full_qml_log.txt")
        print("=" * 70)

        return len(cannot_errors) > 0 or len(critical_errors) > 0

    except subprocess.TimeoutExpired:
        print("\n‚è∞ TIMEOUT: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å –∑–∞ 15 —Å–µ–∫—É–Ω–¥")
        return True
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback

        traceback.print_exc()
        return True


if __name__ == "__main__":
    has_errors = find_all_qml_errors()
    sys.exit(1 if has_errors else 0)
