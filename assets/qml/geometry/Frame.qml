import QtQuick
import QtQuick3D

/*
 * Frame Component - U-shaped frame (3 beams)
 * Extracted from main.qml for modular QML architecture
 *
 * Constructs a U-frame with:
 * - Bottom horizontal beam (along Z axis)
 * - Front vertical beam (at front end)
 * - Rear vertical beam (at rear end)
 */
Node {
    id: frame

    // ===============================================================
    // REQUIRED PROPERTIES
    // ===============================================================

    required property Node worldRoot
    required property real beamSize       // mm - cross-section size
    required property real frameHeight    // mm - height of vertical beams
    required property real frameLength    // mm - length along Z axis
    required property var frameMaterial

    // ===============================================================
    // FRAME GEOMETRY (3 beams forming U-shape)
    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º U-—Ä–∞–º—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω—É–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ –æ—Å–∏ Z.
    // –ù–∏–∂–Ω—è—è –±–∞–ª–∫–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ—Ç -L/2 –¥–æ +L/2, —Å—Ç–æ–π–∫–∏ –Ω–∞ –∫–æ–Ω—Ü–∞—Ö.
    // ===============================================================

    // 1. BOTTOM BEAM (horizontal, along Z axis) ‚Äî —Ü–µ–Ω—Ç—Ä –ø–æ Z –≤ 0
    Model {
        parent: worldRoot
        source: "#Cube"
        position: Qt.vector3d(0, beamSize/2, 0)
        scale: Qt.vector3d(beamSize/100, beamSize/100, frameLength/100)
        materials: [frameMaterial]
    }

    // 2. FRONT VERTICAL BEAM (at Z = -frameLength/2 + beamSize/2)
    Model {
        parent: worldRoot
        source: "#Cube"
        position: Qt.vector3d(0, beamSize + frameHeight/2, -frameLength/2 + beamSize/2)
        scale: Qt.vector3d(beamSize/100, frameHeight/100, beamSize/100)
        materials: [frameMaterial]
    }

    // 3. REAR VERTICAL BEAM (at Z = +frameLength/2 - beamSize/2)
    Model {
        parent: worldRoot
        source: "#Cube"
        position: Qt.vector3d(0, beamSize + frameHeight/2, frameLength/2 - beamSize/2)
        scale: Qt.vector3d(beamSize/100, frameHeight/100, beamSize/100)
        materials: [frameMaterial]
    }

    // ===============================================================
    // INITIALIZATION
    // ===============================================================

    Component.onCompleted: {
        console.log("üèóÔ∏è Frame initialized (centered): " + beamSize + " √ó " + frameHeight + " √ó " + frameLength + " mm")
    }
}
