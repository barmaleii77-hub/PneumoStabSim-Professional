import QtQuick
import "../core" as Core

/*
 * MouseControls.qml - Mouse & Keyboard Input Handler
 * PneumoStabSim Professional - Phase 2
 * Version: 1.0.0
 *
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞:
 * - –õ–ö–ú: –≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã (orbital)
 * - –ü–ö–ú: panning (–ª–æ–∫–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ)
 * - –ö–æ–ª–µ—Å–æ: zoom (–∏–∑–º–µ–Ω–µ–Ω–∏–µ distance)
 * - –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫: reset view
 * - –ö–ª–∞–≤–∏—à–∏: R (reset), F (auto-fit), Space (toggle animation)
 */
MouseArea {
    id: mouseControls

    // ===============================================================
    // VERSION INFO
    // ===============================================================
    readonly property string version: "1.0.0"
    readonly property string module: "MouseControls"

    // ===============================================================
    // REQUIRED PROPERTIES
    // ===============================================================

    /**
     * Reference to CameraState
     */
    required property var cameraState

    /**
     * Reference to camera object (for pan calculation)
     */
    required property var camera

    /**
     * View height (for pan world-space calculation)
     */
    required property real viewHeight

    // ===============================================================
    // OPTIONAL PROPERTIES
    // ===============================================================

    /**
     * TAA motion adaptive enabled
     */
    property bool taaMotionAdaptive: false

    /**
     * Callback for auto-fit (external)
     */
    property var onAutoFit: null

    /**
     * Callback for reset view (external)
     */
    property var onResetView: null

    /**
     * Callback for toggle animation (external)
     */
    property var onToggleAnimation: null

    /**
     * Callback for toggling the camera HUD (Ctrl+H)
     */
    property var onToggleCameraHud: null

    /**
     * Duration (ms) after which motion is considered settled
     */
    readonly property int motionSettlingMs: cameraMotionSettler.interval

    // ===============================================================
    // MOUSE STATE
    // ===============================================================

    property bool mouseDown: false
    property int mouseButton: 0
    property real lastX: 0
    property real lastY: 0

    // ===============================================================
    // CONFIGURATION
    // ===============================================================

    anchors.fill: parent
    hoverEnabled: true
    acceptedButtons: Qt.LeftButton | Qt.RightButton
    focus: true  // –î–ª—è keyboard events

    // ===============================================================
    // MOUSE HANDLERS
    // ===============================================================

    onPressed: (mouse) => {
        // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ä—ã–≤–∫–∞
        mouseDown = true
        mouseButton = mouse.button
        lastX = mouse.x
        lastY = mouse.y

        if (taaMotionAdaptive) {
            cameraState.flagMotion()
        }

        console.log("üñ±Ô∏è Mouse pressed: button =", mouse.button, "at", mouse.x, mouse.y)
    }

    onReleased: (mouse) => {
        mouseDown = false
        mouseButton = 0

        if (taaMotionAdaptive) {
            cameraMotionSettler.restart()
        }

        console.log("üñ±Ô∏è Mouse released")
    }

    onPositionChanged: (mouse) => {
        if (!mouseDown) return

        var dx = mouse.x - lastX
        var dy = mouse.y - lastY

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è delta –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ä—ã–≤–∫–æ–≤
        if (Math.abs(dx) > 100 || Math.abs(dy) > 100) {
            console.log("‚ö†Ô∏è Ignoring large mouse delta:", dx, dy)
            lastX = mouse.x
            lastY = mouse.y
            return
        }

        if (mouseButton === Qt.LeftButton) {
            // ‚úÖ ROTATION (orbital)
            // Qt —Å–∞–º –∑–Ω–∞–µ—Ç –∫–∞–∫ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ SLERP - NO manual normalization!
            cameraState.yawDeg = cameraState.yawDeg - dx * cameraState.rotateSpeed
            cameraState.pitchDeg = cameraState.clampPitch(
                cameraState.pitchDeg - dy * cameraState.rotateSpeed
            )

        } else if (mouseButton === Qt.RightButton) {
            // ‚úÖ PANNING (local camera movement)
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º world-space movement –∏–∑ pixel delta

            var fovRad = camera.fieldOfView * Math.PI / 180.0
            var worldPerPixel = (2 * cameraState.distance * Math.tan(fovRad / 2)) / viewHeight
            var speed = worldPerPixel * cameraState.speed

            cameraState.panX -= dx * speed
            cameraState.panY += dy * speed
        }

        lastX = mouse.x
        lastY = mouse.y

        if (taaMotionAdaptive) {
            cameraState.flagMotion()
        }
    }

    onWheel: (wheel) => {
        // ‚úÖ ZOOM (–∏–∑–º–µ–Ω–µ–Ω–∏–µ distance)
        var zoomFactor = 1.0 + (wheel.angleDelta.y / 1200.0)

        cameraState.distance = cameraState.clampDistance(
            cameraState.distance * zoomFactor
        )

        if (taaMotionAdaptive) {
            cameraState.flagMotion()
        }
    }

    onDoubleClicked: () => {
        console.log("üñ±Ô∏è Double-click: resetting view")

        if (onResetView) {
            onResetView()
        }
    }

    // ===============================================================
    // KEYBOARD HANDLERS
    // ===============================================================

    Keys.onPressed: (event) => {
        if (event.key === Qt.Key_R) {
            // Reset view
            console.log("‚å®Ô∏è Key R: reset view")

            if (onResetView) {
                onResetView()
            }

            event.accepted = true

        } else if (event.key === Qt.Key_F) {
            // Auto-fit frame
            console.log("‚å®Ô∏è Key F: auto-fit frame")

            if (onAutoFit) {
                onAutoFit()
            }

            event.accepted = true

        } else if (event.key === Qt.Key_Space) {
            // Toggle animation
            console.log("‚å®Ô∏è Key Space: toggle animation")

            if (onToggleAnimation) {
                onToggleAnimation()
            }

            event.accepted = true
        } else if (event.key === Qt.Key_H && (event.modifiers & Qt.ControlModifier)) {
            console.log("‚å®Ô∏è Ctrl+H: toggle camera HUD")

            if (onToggleCameraHud) {
                onToggleCameraHud()
            }

            event.accepted = true
        }
    }

    // ===============================================================
    // CAMERA MOTION SETTLER (for TAA)
    // ===============================================================

    Timer {
        id: cameraMotionSettler
        interval: 240
        repeat: false
        onTriggered: {
            cameraState.clearMotion()
        }
    }

    // ===============================================================
    // INITIALIZATION
    // ===============================================================

    Component.onCompleted: {
        console.log("‚úÖ MouseControls initialized (v" + version + ")")
        console.log("   üñ±Ô∏è Left button: rotation")
        console.log("   üñ±Ô∏è Right button: panning")
        console.log("   üñ±Ô∏è Wheel: zoom")
        console.log("   üñ±Ô∏è Double-click: reset view")
        console.log("   ‚å®Ô∏è Keys: R (reset), F (auto-fit), Space (animation), Ctrl+H (camera HUD)")
    }
}
