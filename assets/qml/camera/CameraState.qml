import QtQuick
import "../core" as Core

/*
 * CameraState.qml - Camera State Management
 * PneumoStabSim Professional - Phase 2
 * Version: 1.0.0
 * 
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–∞–º–µ—Ä—ã: –ø–æ–∑–∏—Ü–∏—è, –≤—Ä–∞—â–µ–Ω–∏–µ, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
 * –í–∫–ª—é—á–∞–µ—Ç smooth behaviors –∏ auto-rotation logic.
 */
QtObject {
    id: cameraState
    
    // ===============================================================
    // VERSION INFO
    // ===============================================================
    readonly property string version: "1.0.0"
    readonly property string module: "CameraState"
    
    // ===============================================================
    // PIVOT & POSITION
    // ===============================================================
    
    /**
     * Pivot point (—Ü–µ–Ω—Ç—Ä –≤—Ä–∞—â–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã)
     * –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ü–µ–Ω—Ç—Ä —Ä–∞–º—ã –ø–æ–¥–≤–µ—Å–∫–∏
     */
    property vector3d pivot: Qt.vector3d(0, 0, 0)
    
    /**
     * –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä—ã –æ—Ç pivot point (–≤ –º–º)
     */
    property real distance: 3500
    
    /**
     * –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ/–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
     */
    readonly property real minDistance: 150
    readonly property real maxDistance: 30000
    
    // ===============================================================
    // ROTATION (Orbital Camera)
    // ===============================================================
    
    /**
     * Yaw (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ) –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
     * 0¬∞ = –≤–∏–¥ —Å –≤–æ—Å—Ç–æ–∫–∞, 90¬∞ = –≤–∏–¥ —Å —Å–µ–≤–µ—Ä–∞, 180¬∞ = –≤–∏–¥ —Å –∑–∞–ø–∞–¥–∞
     */
    property real yawDeg: 225
    
    /**
     * Pitch (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ) –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
     * 0¬∞ = –≥–æ—Ä–∏–∑–æ–Ω—Ç, -90¬∞ = –≤–∏–¥ —Å–≤–µ—Ä—Ö—É, +90¬∞ = –≤–∏–¥ —Å–Ω–∏–∑—É
     */
    property real pitchDeg: -25
    
    /**
     * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è pitch (–∏–∑–±–µ–∂–∞–Ω–∏–µ gimbal lock)
     */
    readonly property real minPitchDeg: -89
    readonly property real maxPitchDeg: 89
    
    // ===============================================================
    // PANNING (Local Camera Movement)
    // ===============================================================
    
    /**
     * Pan offset –ø–æ –ª–æ–∫–∞–ª—å–Ω—ã–º –æ—Å—è–º –∫–∞–º–µ—Ä—ã (–≤ –º–º)
     */
    property real panX: 0
    property real panY: 0
    
    // ===============================================================
    // CAMERA PROPERTIES
    // ===============================================================
    
    /**
     * Field of View (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö)
     */
    property real fov: 60.0
    
    /**
     * Near/Far clipping planes (–≤ –º–º)
     */
    property real nearPlane: 10.0
    property real farPlane: 50000.0
    
    /**
     * Camera movement speed multiplier
     */
    property real speed: 1.0
    
    // ===============================================================
    // MOUSE CONTROL SETTINGS
    // ===============================================================
    
    /**
     * Mouse rotation sensitivity
     */
    property real rotateSpeed: 0.35
    
    // ===============================================================
    // AUTO-ROTATION
    // ===============================================================
    
    /**
     * Auto-rotation enabled/disabled
     */
    property bool autoRotate: false
    
    /**
     * Auto-rotation speed (degrees per second)
     */
    property real autoRotateSpeed: 0.5
    
    // ===============================================================
    // MOTION TRACKING (for TAA)
    // ===============================================================
    
    /**
     * Camera is currently moving (for TAA motion adaptive)
     */
    property bool isMoving: false
    
    // ===============================================================
    // SMOOTH BEHAVIORS
    // ===============================================================
    
    Behavior on yawDeg {
        NumberAnimation {
            duration: 90
            easing.type: Easing.OutCubic
        }
    }
    
    Behavior on pitchDeg {
        NumberAnimation {
            duration: 90
            easing.type: Easing.OutCubic
        }
    }
    
    Behavior on distance {
        NumberAnimation {
            duration: 90
            easing.type: Easing.OutCubic
        }
    }
    
    Behavior on panX {
        NumberAnimation {
            duration: 60
            easing.type: Easing.OutQuad
        }
    }
    
    Behavior on panY {
        NumberAnimation {
            duration: 60
            easing.type: Easing.OutQuad
        }
    }
    
    // ===============================================================
    // SIGNALS
    // ===============================================================
    
    signal viewReset()
    signal cameraChanged()
    
    // ===============================================================
    // FUNCTIONS
    // ===============================================================
    
    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä—ã –¥–ª—è —Ñ—Ä–µ–π–º–∞
     * 
     * @param frameLength - –¥–ª–∏–Ω–∞ —Ä–∞–º—ã (–º–º)
     * @param trackWidth - –∫–æ–ª–µ—è (–º–º)
     * @param frameHeight - –≤—ã—Å–æ—Ç–∞ —Ä–∞–º—ã (–º–º)
     * @param margin - –∑–∞–ø–∞—Å (1.0 = –±–µ–∑ –∑–∞–ø–∞—Å–∞, 1.5 = +50%)
     */
    function calculateOptimalDistance(frameLength, trackWidth, frameHeight, margin) {
        if (margin === undefined) {
            margin = 1.15
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º GeometryCalculations –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        var optimalDist = Core.GeometryCalculations.calculateOptimalCameraDistance(
            frameLength, frameHeight, trackWidth, fov, margin
        )
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
        return Core.MathUtils.clamp(optimalDist, minDistance, maxDistance)
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å pivot point –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏
     * 
     * @param beamSize - —Ä–∞–∑–º–µ—Ä –±–∞–ª–∫–∏ (–º–º)
     * @param frameHeight - –≤—ã—Å–æ—Ç–∞ —Ä–∞–º—ã (–º–º)
     * @param frameLength - –¥–ª–∏–Ω–∞ —Ä–∞–º—ã (–º–º)
     */
    function calculatePivot(beamSize, frameHeight, frameLength) {
        return Core.GeometryCalculations.calculateCameraPivot(
            beamSize, frameHeight, frameLength
        )
    }
    
    /**
     * Auto-fit camera to frame
     * 
     * @param frameLength - –¥–ª–∏–Ω–∞ —Ä–∞–º—ã (–º–º)
     * @param trackWidth - –∫–æ–ª–µ—è (–º–º)
     * @param frameHeight - –≤—ã—Å–æ—Ç–∞ —Ä–∞–º—ã (–º–º)
     * @param beamSize - —Ä–∞–∑–º–µ—Ä –±–∞–ª–∫–∏ (–º–º)
     * @param marginFactor - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–ø–∞—Å–∞ (default: 1.15)
     */
    function autoFitFrame(frameLength, trackWidth, frameHeight, beamSize, marginFactor) {
        console.log("üì∑ CameraState: auto-fitting to frame...")
        
        // –û–±–Ω–æ–≤–ª—è–µ–º pivot
        pivot = calculatePivot(beamSize, frameHeight, frameLength)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º distance
        distance = calculateOptimalDistance(frameLength, trackWidth, frameHeight, marginFactor)
        
        console.log("   Pivot:", pivot)
        console.log("   Distance:", distance.toFixed(0), "mm")
        
        cameraChanged()
    }
    
    /**
     * Soft reset - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–º–µ—Ä—É –µ—Å–ª–∏ –æ–Ω–∞ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
     * 
     * @param beamSize - —Ä–∞–∑–º–µ—Ä –±–∞–ª–∫–∏ (–º–º)
     * @param frameHeight - –≤—ã—Å–æ—Ç–∞ —Ä–∞–º—ã (–º–º)
     * @param frameLength - –¥–ª–∏–Ω–∞ —Ä–∞–º—ã (–º–º)
     */
    function resetView(beamSize, frameHeight, frameLength) {
        console.log("üîÑ CameraState: soft reset view...")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–º–µ—Ä–∞ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        var preserveCamera = (
            Math.abs(yawDeg) < 720 && 
            Math.abs(pitchDeg) < maxPitchDeg && 
            distance > minDistance && 
            distance < maxDistance
        )
        
        if (preserveCamera) {
            console.log("   Preserving camera position, updating only pivot")
            pivot = calculatePivot(beamSize, frameHeight, frameLength)
        } else {
            console.log("   Full reset: camera out of bounds")
            fullResetView(beamSize, frameHeight, frameLength, frameLength, 1600)
        }
        
        viewReset()
        cameraChanged()
    }
    
    /**
     * Full reset - —Å–±—Ä–æ—Å –∫–∞–º–µ—Ä—ã –∫ defaults
     * 
     * @param beamSize - —Ä–∞–∑–º–µ—Ä –±–∞–ª–∫–∏ (–º–º)
     * @param frameHeight - –≤—ã—Å–æ—Ç–∞ —Ä–∞–º—ã (–º–º)
     * @param frameLength - –¥–ª–∏–Ω–∞ —Ä–∞–º—ã (–º–º)
     * @param trackWidth - –∫–æ–ª–µ—è (–º–º) –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ distance
     * @param defaultTrackWidth - default –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–µ–∏
     */
    function fullResetView(beamSize, frameHeight, frameLength, trackWidth, defaultTrackWidth) {
        console.log("üîÑ CameraState: FULL reset view to defaults...")
        
        // Reset pivot
        pivot = calculatePivot(beamSize, frameHeight, frameLength)
        
        // Reset rotation to defaults
        yawDeg = 225
        pitchDeg = -25
        
        // Reset pan
        panX = 0
        panY = 0
        
        // Calculate optimal distance
        var tw = trackWidth !== undefined ? trackWidth : defaultTrackWidth
        distance = calculateOptimalDistance(frameLength, tw, frameHeight, 1.15)
        
        console.log("   Reset to defaults:")
        console.log("     Pivot:", pivot)
        console.log("     Yaw:", yawDeg, "Pitch:", pitchDeg)
        console.log("     Distance:", distance.toFixed(0), "mm")
        
        viewReset()
        cameraChanged()
    }
    
    /**
     * Flag camera motion (–¥–ª—è TAA motion adaptive)
     */
    function flagMotion() {
        if (!isMoving) {
            isMoving = true
        }
    }
    
    /**
     * Clear motion flag (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ MouseControls —á–µ—Ä–µ–∑ Timer)
     */
    function clearMotion() {
        isMoving = false
    }
    
    /**
     * Clamp pitch to limits
     * 
     * @param pitch - pitch angle to clamp
     * @returns clamped pitch
     */
    function clampPitch(pitch) {
        return Core.MathUtils.clamp(pitch, minPitchDeg, maxPitchDeg)
    }
    
    /**
     * Clamp distance to limits
     * 
     * @param dist - distance to clamp
     * @returns clamped distance
     */
    function clampDistance(dist) {
        return Core.MathUtils.clamp(dist, minDistance, maxDistance)
    }
    
    // ===============================================================
    // INITIALIZATION
    // ===============================================================
    
    Component.onCompleted: {
        console.log("‚úÖ CameraState initialized (v" + version + ")")
        console.log("   üì∑ Pivot:", pivot)
        console.log("   üì∑ Distance:", distance, "mm")
        console.log("   üì∑ Yaw:", yawDeg, "¬∞ | Pitch:", pitchDeg, "¬∞")
        console.log("   üì∑ FOV:", fov, "¬∞")
    }
}
