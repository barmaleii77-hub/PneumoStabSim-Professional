import QtQuick
import QtQuick3D

/*
 * CameraRig.qml - 3D Camera Rig Structure
 * PneumoStabSim Professional - Phase 2
 * Version: 1.0.0
 *
 * 3D Node hierarchy –¥–ª—è orbital camera:
 * cameraRig (pivot + rotation) ‚Üí panNode (local offset) ‚Üí camera
 */
Node {
    id: cameraRig

    // ===============================================================
    // VERSION INFO
    // ===============================================================
    readonly property string version: "1.0.0"
    readonly property string module: "CameraRig"

    // ===============================================================
    // REQUIRED PROPERTIES (must be set by parent)
    // ===============================================================

    /**
     * Reference to CameraState
     */
    required property var cameraState

    // ===============================================================
    // PUBLIC API
    // ===============================================================

    /**
     * Access to camera object
     */
    readonly property alias camera: perspectiveCamera

    /**
     * Access to pan node
     */
    readonly property alias panNode: localPanNode

    // ===============================================================
    // POSITION & ROTATION (bind to CameraState)
    // ===============================================================

    position: cameraState.pivot
    eulerRotation: Qt.vector3d(cameraState.pitchDeg, cameraState.yawDeg, 0)

    // ===============================================================
    // PAN NODE (local camera offset)
    // ===============================================================

    Node {
        id: localPanNode

        position: Qt.vector3d(cameraState.panX, cameraState.panY, 0)

        // ===============================================================
        // PERSPECTIVE CAMERA
        // ===============================================================

        PerspectiveCamera {
            id: perspectiveCamera

            // –ö–∞–º–µ—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ distance –æ—Ç pivot –≤–¥–æ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Å–∏ Z
            position: Qt.vector3d(0, 0, cameraState.distance)

            // Camera properties (bind to CameraState)
            fieldOfView: cameraState.fov
            clipNear: cameraState.nearPlane
            clipFar: cameraState.farPlane

            // ===============================================================
            // CAMERA INFO (for debugging)
            // ===============================================================

            Component.onCompleted: {
                console.log("‚úÖ PerspectiveCamera initialized")
                console.log("   üì∑ Position:", position)
                console.log("   üì∑ FOV:", fieldOfView, "¬∞")
                console.log("   üì∑ Near:", clipNear, "mm | Far:", clipFar, "mm")
            }
        }

        Component.onCompleted: {
            console.log("‚úÖ PanNode initialized")
            console.log("   üì∑ Local offset:", position)
        }
    }

    // ===============================================================
    // INITIALIZATION
    // ===============================================================

    Component.onCompleted: {
        console.log("‚úÖ CameraRig initialized (v" + version + ")")
        console.log("   üì∑ Pivot:", position)
        console.log("   üì∑ Rotation: Yaw", eulerRotation.y, "¬∞ | Pitch", eulerRotation.x, "¬∞")
    }

    // ===============================================================
    // DEBUG: Log rotation changes
    // ===============================================================

    onEulerRotationChanged: {
        // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        // console.log("üì∑ Camera rotation changed: Yaw", eulerRotation.y, "¬∞ | Pitch", eulerRotation.x, "¬∞")
    }
}
