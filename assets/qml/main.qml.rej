diff a/assets/qml/main.qml b/assets/qml/main.qml	(rejected hunks)
@@ -1,28 +1,30 @@
 import QtQuick
 import QtQuick3D
 import QtQuick3D.Helpers
+import QtQuick3D.RenderSettings
+import "components"
 
 /*
  * PneumoStabSim - COMPLETE Graphics Parameters Main 3D View (v4.0)
  * üöÄ –ü–û–õ–ù–ê–Ø –ò–ù–¢–ï–†–ê–¶–ò–Ø: –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã GraphicsPanel —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
  * ‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è, IBL, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, —Ç–æ–Ω–µ–º–∞–ø–ø–∏–Ω–≥
  */
 Item {
     id: root
     anchors.fill: parent
 
     // ===============================================================
     // üöÄ PERFORMANCE OPTIMIZATION LAYER (preserved)
     // ===============================================================
     
     // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø #1: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
     QtObject {
         id: animationCache
         
         // –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–≤—ã—á–∏—Å–ª—è—é—Ç—Å—è 1 —Ä–∞–∑ –∑–∞ —Ñ—Ä–µ–π–º –≤–º–µ—Å—Ç–æ 4—Ö)
         property real basePhase: animationTime * userFrequency * 2 * Math.PI
         property real globalPhaseRad: userPhaseGlobal * Math.PI / 180
         
         // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Ñ–∞–∑—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–≥–ª–∞
         property real flPhaseRad: globalPhaseRad + userPhaseFL * Math.PI / 180
         property real frPhaseRad: globalPhaseRad + userPhaseFR * Math.PI / 180
@@ -52,145 +54,294 @@ Item {
         // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∫–∞–º–µ—Ä—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
         onCachedFovRadChanged: cachedTanHalfFov = Math.tan(cachedFovRad / 2)
         
         function calculateJRod(j_arm, baseAngle, leverAngle) {
             var totalAngleRad = (baseAngle + leverAngle) * piOver180
             return Qt.vector3d(
                 j_arm.x + leverLengthRodPos * Math.cos(totalAngleRad),
                 j_arm.y + leverLengthRodPos * Math.sin(totalAngleRad),
                 j_arm.z
             )
         }
         
         function normalizeCylDirection(j_rod, j_tail) {
             var dx = j_rod.x - j_tail.x
             var dy = j_rod.y - j_tail.y
             var length = Math.hypot(dx, dy)
             return {
                 direction: Qt.vector3d(dx, dy, 0),
                 length: length,
                 normalized: Qt.vector3d(dx/length, dy/length, 0),
                 angle: Math.atan2(dy, dx) * _180OverPi + 90
             }
         }
     }
 
+    // ===============================================================
+    // IBL CONTROLLER
+    // ===============================================================
+
+    IblProbeLoader {
+        id: iblLoader
+        primarySource: root.iblPrimarySource
+        fallbackSource: root.iblFallbackSource
+    }
+
     // ===============================================================
     // CAMERA SYSTEM (preserved)
     // ===============================================================
     
     property vector3d pivot: Qt.vector3d(0, userBeamSize/2, userFrameLength/2)
     
     // Camera orbital parameters
     property real cameraDistance: 3500
     property real minDistance: 150
     property real maxDistance: 30000
     property real yawDeg: 225
     property real pitchDeg: -25
     
     property real panX: 0
     property real panY: 0
     
     // Camera properties
-    property real cameraFov: 50.0
-    property real cameraNear: 2.0
+    property real cameraFov: 60.0
+    property real cameraNear: 10.0
     property real cameraFar: 50000.0
     property real cameraSpeed: 1.0
     
     // Auto rotation
     property bool autoRotate: false
     property real autoRotateSpeed: 0.5
 
     // Mouse input state
     property bool mouseDown: false
     property int mouseButton: 0
     property real lastX: 0
     property real lastY: 0
     property real rotateSpeed: 0.35
 
     // ===============================================================
     // ‚úÖ COMPLETE GRAPHICS PROPERTIES (All parameters from GraphicsPanel)
     // ===============================================================
-    
-    // Environment and IBL
-    property string backgroundColor: "#2a2a2a"
-    property bool skyboxEnabled: true
-    property bool iblEnabled: true         // ‚úÖ –ù–û–í–û–ï: IBL –≤–∫–ª—é—á–µ–Ω–∏–µ
-    property real iblIntensity: 1.0        // ‚úÖ –ù–û–í–û–ï: IBL –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
-    
-    // Fog
-    property bool fogEnabled: false
-    property string fogColor: "#808080"
-    property real fogDensity: 0.1
-    
-    // Quality settings  
-    property int antialiasingMode: 2
-    property int antialiasingQuality: 2
+
+    // HDR resources
+    property url iblPrimarySource: Qt.resolvedUrl("../hdr/studio.hdr")
+    property url iblFallbackSource: Qt.resolvedUrl("assets/studio_small_09_2k.hdr")
+    readonly property bool iblReady: iblLoader.ready
+
+    // Lighting
+    property real keyLightBrightness: 1.2
+    property color keyLightColor: "#ffffff"
+    property real keyLightAngleX: -35
+    property real keyLightAngleY: -40
+    property real fillLightBrightness: 0.7
+    property color fillLightColor: "#dfe7ff"
+    property real rimLightBrightness: 1.0
+    property color rimLightColor: "#ffe2b0"
+    property real pointLightBrightness: 1500.0
+    property color pointLightColor: "#ffffff"
+    property real pointLightY: 2200.0
+    property real pointLightRange: 3200.0
+
+    // Environment
+    property string backgroundMode: "skybox"
+    property color backgroundColor: "#1f242c"
+    property real skyboxBlur: 0.08
+    property bool iblEnabled: true
+    property real iblIntensity: 1.3
+    property bool fogEnabled: true
+    property color fogColor: "#b0c4d8"
+    property real fogDensity: 0.12
+    property real fogNear: 1200.0
+    property real fogFar: 12000.0
+    property bool aoEnabled: true
+    property real aoStrength: 1.0
+    property real aoRadius: 8.0
+
+    // Quality and rendering
+    property string aaPrimaryMode: "ssaa"
+    property string aaQualityLevel: "high"
+    property string aaPostMode: "taa"
+    property bool taaEnabled: true
+    property real taaStrength: 0.4
+    property bool fxaaEnabled: false
+    property bool specularAAEnabled: true
+    property bool ditheringEnabled: true
+    property real renderScale: 1.05
+    property string renderPolicy: "always"
+    property real frameRateLimit: 144.0
+    property string qualityPreset: "ultra"
     property bool shadowsEnabled: true
-    property int shadowQuality: 2
-    property real shadowSoftness: 0.5      // ‚úÖ –ù–û–í–û–ï: –ú—è–≥–∫–æ—Å—Ç—å —Ç–µ–Ω–µ–π
-    
-    // Post-processing effects - EXPANDED
+    property string shadowResolution: "4096"
+    property int shadowFilterSamples: 32
+    property real shadowBias: 8.0
+    property real shadowFactor: 80.0
+    property string oitMode: "weighted"
+
+    // Post-processing effects
     property bool bloomEnabled: true
-    property real bloomThreshold: 1.0       // ‚úÖ –ù–û–í–û–ï: –ü–æ—Ä–æ–≥ Bloom
-    property real bloomIntensity: 0.8
-    property bool ssaoEnabled: true
-    property real ssaoRadius: 8.0           // ‚úÖ –ù–û–í–û–ï: –†–∞–¥–∏—É—Å SSAO
-    property real ssaoIntensity: 0.6
-    
-    // Tonemap settings
-    property bool tonemapEnabled: true      // ‚úÖ –ù–û–í–û–ï: –¢–æ–Ω–µ–º–∞–ø–ø–∏–Ω–≥
-    property int tonemapMode: 3             // ‚úÖ –ù–û–í–û–ï: –†–µ–∂–∏–º —Ç–æ–Ω–µ–º–∞–ø–ø–∏–Ω–≥–∞
-    
-    // Advanced effects
+    property real bloomIntensity: 0.5
+    property real bloomThreshold: 1.0
+    property real bloomSpread: 0.65
     property bool depthOfFieldEnabled: false
-    property real dofFocusDistance: 2000    // ‚úÖ –ù–û–í–û–ï: –î–∏—Å—Ç–∞–Ω—Ü–∏—è —Ñ–æ–∫—É—Å–∞
-    property real dofFocusRange: 900        // ‚úÖ –ù–û–í–û–ï: –î–∏–∞–ø–∞–∑–æ–Ω —Ñ–æ–∫—É—Å–∞
+    property real dofFocusDistance: 2200.0
+    property real dofBlurAmount: 4.0
+    property bool motionBlurEnabled: false
+    property real motionBlurAmount: 0.2
     property bool lensFlareEnabled: true
-    property bool vignetteEnabled: true     // ‚úÖ –ù–û–í–û–ï: –í–∏–Ω—å–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
-    property real vignetteStrength: 0.45    // ‚úÖ –ù–û–í–û–ï: –°–∏–ª–∞ –≤–∏–Ω—å–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
-    property bool motionBlurEnabled: false  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ
-    
-    // Lighting control properties
-    property real keyLightBrightness: 2.8
-    property string keyLightColor: "#ffffff"
-    property real keyLightAngleX: -30
-    property real keyLightAngleY: -45
-    property real fillLightBrightness: 1.2
-    property string fillLightColor: "#f0f0ff"
-    property real pointLightBrightness: 20000
-    property real pointLightY: 1800
-
-    // Material control properties - EXPANDED
-    property real metalRoughness: 0.28
-    property real metalMetalness: 1.0
-    property real metalClearcoat: 0.25
-    property real glassOpacity: 0.35
-    property real glassRoughness: 0.05
-    property real glassIOR: 1.52            // ‚úÖ –ù–û–í–û–ï: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è!
-    property real frameMetalness: 0.8
-    property real frameRoughness: 0.4
+    property bool vignetteEnabled: true
+    property real vignetteStrength: 0.35
+
+    // Tonemap settings
+    property bool tonemapEnabled: true
+    property string tonemapModeName: "filmic"
+
+    // Material control properties
+    property color frameBaseColor: "#c53030"
+    property real frameMetalness: 0.85
+    property real frameRoughness: 0.35
+    property real frameSpecularAmount: 1.0
+    property real frameSpecularTint: 0.0
+    property real frameClearcoat: 0.22
+    property real frameClearcoatRoughness: 0.1
+    property real frameTransmission: 0.0
+    property real frameOpacity: 1.0
+    property real frameIor: 1.5
+    property real frameAttenuationDistance: 10000.0
+    property color frameAttenuationColor: "#ffffff"
+    property color frameEmissiveColor: "#000000"
+    property real frameEmissiveIntensity: 0.0
+
+    property color leverBaseColor: "#9ea4ab"
+    property real leverMetalness: 1.0
+    property real leverRoughness: 0.28
+    property real leverSpecularAmount: 1.0
+    property real leverSpecularTint: 0.0
+    property real leverClearcoat: 0.3
+    property real leverClearcoatRoughness: 0.08
+    property real leverTransmission: 0.0
+    property real leverOpacity: 1.0
+    property real leverIor: 1.5
+    property real leverAttenuationDistance: 10000.0
+    property color leverAttenuationColor: "#ffffff"
+    property color leverEmissiveColor: "#000000"
+    property real leverEmissiveIntensity: 0.0
+
+    property color tailRodBaseColor: "#d5d9df"
+    property real tailRodMetalness: 1.0
+    property real tailRodRoughness: 0.3
+    property real tailRodSpecularAmount: 1.0
+    property real tailRodSpecularTint: 0.0
+    property real tailRodClearcoat: 0.0
+    property real tailRodClearcoatRoughness: 0.0
+    property real tailRodTransmission: 0.0
+    property real tailRodOpacity: 1.0
+    property real tailRodIor: 1.5
+    property real tailRodAttenuationDistance: 10000.0
+    property color tailRodAttenuationColor: "#ffffff"
+    property color tailRodEmissiveColor: "#000000"
+    property real tailRodEmissiveIntensity: 0.0
+
+    property color cylinderBaseColor: "#e1f5ff"
+    property real cylinderMetalness: 0.0
+    property real cylinderRoughness: 0.05
+    property real cylinderSpecularAmount: 1.0
+    property real cylinderSpecularTint: 0.0
+    property real cylinderClearcoat: 0.0
+    property real cylinderClearcoatRoughness: 0.0
+    property real cylinderTransmission: 1.0
+    property real cylinderOpacity: 1.0
+    property real cylinderIor: 1.52
+    property real cylinderAttenuationDistance: 1800.0
+    property color cylinderAttenuationColor: "#b7e7ff"
+    property color cylinderEmissiveColor: "#000000"
+    property real cylinderEmissiveIntensity: 0.0
+
+    property color pistonBodyBaseColor: "#ff3c6e"
+    property color pistonBodyWarningColor: "#ff5454"
+    property real pistonBodyMetalness: 1.0
+    property real pistonBodyRoughness: 0.26
+    property real pistonBodySpecularAmount: 1.0
+    property real pistonBodySpecularTint: 0.0
+    property real pistonBodyClearcoat: 0.18
+    property real pistonBodyClearcoatRoughness: 0.06
+    property real pistonBodyTransmission: 0.0
+    property real pistonBodyOpacity: 1.0
+    property real pistonBodyIor: 1.5
+    property real pistonBodyAttenuationDistance: 10000.0
+    property color pistonBodyAttenuationColor: "#ffffff"
+    property color pistonBodyEmissiveColor: "#000000"
+    property real pistonBodyEmissiveIntensity: 0.0
+
+    property color pistonRodBaseColor: "#ececec"
+    property color pistonRodWarningColor: "#ff2a2a"
+    property real pistonRodMetalness: 1.0
+    property real pistonRodRoughness: 0.18
+    property real pistonRodSpecularAmount: 1.0
+    property real pistonRodSpecularTint: 0.0
+    property real pistonRodClearcoat: 0.12
+    property real pistonRodClearcoatRoughness: 0.05
+    property real pistonRodTransmission: 0.0
+    property real pistonRodOpacity: 1.0
+    property real pistonRodIor: 1.5
+    property real pistonRodAttenuationDistance: 10000.0
+    property color pistonRodAttenuationColor: "#ffffff"
+    property color pistonRodEmissiveColor: "#000000"
+    property real pistonRodEmissiveIntensity: 0.0
+
+    property color jointTailBaseColor: "#2a82ff"
+    property real jointTailMetalness: 0.9
+    property real jointTailRoughness: 0.35
+    property real jointTailSpecularAmount: 1.0
+    property real jointTailSpecularTint: 0.0
+    property real jointTailClearcoat: 0.1
+    property real jointTailClearcoatRoughness: 0.08
+    property real jointTailTransmission: 0.0
+    property real jointTailOpacity: 1.0
+    property real jointTailIor: 1.5
+    property real jointTailAttenuationDistance: 10000.0
+    property color jointTailAttenuationColor: "#ffffff"
+    property color jointTailEmissiveColor: "#000000"
+    property real jointTailEmissiveIntensity: 0.0
+
+    property color jointArmBaseColor: "#ff9c3a"
+    property real jointArmMetalness: 0.9
+    property real jointArmRoughness: 0.32
+    property real jointArmSpecularAmount: 1.0
+    property real jointArmSpecularTint: 0.0
+    property real jointArmClearcoat: 0.12
+    property real jointArmClearcoatRoughness: 0.08
+    property real jointArmTransmission: 0.0
+    property real jointArmOpacity: 1.0
+    property real jointArmIor: 1.5
+    property real jointArmAttenuationDistance: 10000.0
+    property color jointArmAttenuationColor: "#ffffff"
+    property color jointArmEmissiveColor: "#000000"
+    property real jointArmEmissiveIntensity: 0.0
+
+    property color jointRodOkColor: "#00ff55"
+    property color jointRodErrorColor: "#ff0000"
 
     // ===============================================================
     // ANIMATION AND GEOMETRY PROPERTIES (preserved)
     // ===============================================================
     
     property real animationTime: 0.0
     property bool isRunning: false
 
     // User-controlled animation parameters
     property real userAmplitude: 8.0
     property real userFrequency: 1.0
     property real userPhaseGlobal: 0.0
     property real userPhaseFL: 0.0
     property real userPhaseFR: 0.0
     property real userPhaseRL: 0.0
     property real userPhaseRR: 0.0
 
     // Piston positions from Python
     property real userPistonPositionFL: 250.0
     property real userPistonPositionFR: 250.0
     property real userPistonPositionRL: 250.0
     property real userPistonPositionRR: 250.0
 
     // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï —É–≥–ª—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
     property real fl_angle: isRunning ? userAmplitude * animationCache.flSin : 0.0
@@ -213,50 +364,63 @@ Item {
     property real userPistonThickness: 25
     property real userPistonRodLength: 200
 
     // ===============================================================
     // SMOOTH CAMERA BEHAVIORS (preserved)
     // ===============================================================
     
     Behavior on yawDeg         { NumberAnimation { duration: 90; easing.type: Easing.OutCubic } }
     Behavior on pitchDeg       { NumberAnimation { duration: 90; easing.type: Easing.OutCubic } }
     Behavior on cameraDistance { NumberAnimation { duration: 90; easing.type: Easing.OutCubic } }
     Behavior on panX           { NumberAnimation { duration: 60; easing.type: Easing.OutQuad } }
     Behavior on panY           { NumberAnimation { duration: 60; easing.type: Easing.OutQuad } }
 
     // ===============================================================
     // UTILITY FUNCTIONS (preserved)
     // ===============================================================
     
     function clamp(v, a, b) { return Math.max(a, Math.min(b, v)); }
     
     function normAngleDeg(a) {
         var x = a % 360;
         if (x > 180) x -= 360;
         if (x < -180) x += 360;
         return x;
     }
+
+    function resolveUrl(path) {
+        if (!path || path === "")
+            return "";
+        if (path.startsWith("file:") || path.startsWith("http:") || path.startsWith("https:") ||
+            path.startsWith("qrc:") || path.startsWith("data:"))
+            return path;
+        if (path.length >= 2 && path.charAt(1) === ":")
+            return "file:///" + path.replace(/\\/g, "/");
+        if (path.startsWith("/"))
+            return "file://" + path;
+        return Qt.resolvedUrl(path);
+    }
     
     function autoFitFrame(marginFactor) {
         const L = Math.max(1, userFrameLength)
         const T = Math.max(1, userTrackWidth)  
         const H = Math.max(1, userFrameHeight)
         const margin = marginFactor !== undefined ? marginFactor : 1.15
         const R = 0.5 * Math.sqrt(L*L + T*T + H*H)
         const fov = cameraFov * Math.PI / 180.0
         const dist = (R * margin) / Math.tan(fov * 0.5)
         cameraDistance = Math.max(minDistance, Math.min(maxDistance, dist))
     }
     
     // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è resetView —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä—ã
     function resetView() {
         // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã –µ—Å–ª–∏ –æ–Ω–∞ —Ä–∞–∑—É–º–Ω–∞—è
         var preserveCamera = (Math.abs(yawDeg) < 720 && 
                              Math.abs(pitchDeg) < 90 && 
                              cameraDistance > minDistance && 
                              cameraDistance < maxDistance)
         
         if (preserveCamera) {
             console.log("üîÑ Soft reset: preserving camera position")
             // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ pivot, –∫–∞–º–µ—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è
             pivot = Qt.vector3d(0, userBeamSize/2, userFrameLength/2)
         } else {
@@ -371,390 +535,549 @@ Item {
     
     function applyAnimationUpdates(params) {
         console.log("üé¨ main.qml: applyAnimationUpdates() called")
         if (params.amplitude !== undefined) userAmplitude = params.amplitude
         if (params.frequency !== undefined) userFrequency = params.frequency
         if (params.phase !== undefined) userPhaseGlobal = params.phase
         if (params.lf_phase !== undefined) userPhaseFL = params.lf_phase
         if (params.rf_phase !== undefined) userPhaseFR = params.rf_phase
         if (params.lr_phase !== undefined) userPhaseRL = params.lr_phase
         if (params.rr_phase !== undefined) userPhaseRR = params.rr_phase
         console.log("  ‚úÖ Animation updated successfully")
     }
     
     function applyLightingUpdates(params) {
         console.log("üí° main.qml: applyLightingUpdates() called")
         if (params.key_light) {
             if (params.key_light.brightness !== undefined) keyLightBrightness = params.key_light.brightness
             if (params.key_light.color !== undefined) keyLightColor = params.key_light.color
             if (params.key_light.angle_x !== undefined) keyLightAngleX = params.key_light.angle_x
             if (params.key_light.angle_y !== undefined) keyLightAngleY = params.key_light.angle_y
         }
         if (params.fill_light) {
             if (params.fill_light.brightness !== undefined) fillLightBrightness = params.fill_light.brightness
             if (params.fill_light.color !== undefined) fillLightColor = params.fill_light.color
         }
+        if (params.rim_light) {
+            if (params.rim_light.brightness !== undefined) rimLightBrightness = params.rim_light.brightness
+            if (params.rim_light.color !== undefined) rimLightColor = params.rim_light.color
+        }
         if (params.point_light) {
             if (params.point_light.brightness !== undefined) pointLightBrightness = params.point_light.brightness
+            if (params.point_light.color !== undefined) pointLightColor = params.point_light.color
             if (params.point_light.position_y !== undefined) pointLightY = params.point_light.position_y
+            if (params.point_light.range !== undefined) pointLightRange = Math.max(1, params.point_light.range)
         }
         console.log("  ‚úÖ Lighting updated successfully")
     }
 
-    // ‚úÖ –ü–û–õ–ù–ê–Ø —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è updateMaterials()
     function applyMaterialUpdates(params) {
         console.log("üé® main.qml: applyMaterialUpdates() called")
-        
-        if (params.metal !== undefined) {
-            if (params.metal.roughness !== undefined) metalRoughness = params.metal.roughness
-            if (params.metal.metalness !== undefined) metalMetalness = params.metal.metalness
-            if (params.metal.clearcoat !== undefined) metalClearcoat = params.metal.clearcoat
+        function applyCommon(values, prefix) {
+            if (values.base_color !== undefined) root[prefix + "BaseColor"] = values.base_color
+            if (values.metalness !== undefined) root[prefix + "Metalness"] = values.metalness
+            if (values.roughness !== undefined) root[prefix + "Roughness"] = values.roughness
+            if (values.specular !== undefined) root[prefix + "SpecularAmount"] = values.specular
+            if (values.specular_tint !== undefined) root[prefix + "SpecularTint"] = values.specular_tint
+            if (values.clearcoat !== undefined) root[prefix + "Clearcoat"] = values.clearcoat
+            if (values.clearcoat_roughness !== undefined) root[prefix + "ClearcoatRoughness"] = values.clearcoat_roughness
+            if (values.transmission !== undefined) root[prefix + "Transmission"] = values.transmission
+            if (values.opacity !== undefined) root[prefix + "Opacity"] = values.opacity
+            if (values.ior !== undefined) root[prefix + "Ior"] = values.ior
+            if (values.attenuation_distance !== undefined) root[prefix + "AttenuationDistance"] = values.attenuation_distance
+            if (values.attenuation_color !== undefined) root[prefix + "AttenuationColor"] = values.attenuation_color
+            if (values.emissive_color !== undefined) root[prefix + "EmissiveColor"] = values.emissive_color
+            if (values.emissive_intensity !== undefined) root[prefix + "EmissiveIntensity"] = values.emissive_intensity
         }
-        
-        if (params.glass !== undefined) {
-            if (params.glass.opacity !== undefined) glassOpacity = params.glass.opacity
-            if (params.glass.roughness !== undefined) glassRoughness = params.glass.roughness
-            // ‚úÖ –ù–û–í–û–ï: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è
-            if (params.glass.ior !== undefined) {
-                glassIOR = params.glass.ior
-                console.log("  üîç Glass IOR updated to:", glassIOR)
-            }
+
+        if (params.frame !== undefined) applyCommon(params.frame, "frame")
+        if (params.lever !== undefined) applyCommon(params.lever, "lever")
+        if (params.tail !== undefined) applyCommon(params.tail, "tailRod")
+        if (params.cylinder !== undefined) applyCommon(params.cylinder, "cylinder")
+        if (params.piston_body !== undefined) {
+            applyCommon(params.piston_body, "pistonBody")
+            if (params.piston_body.warning_color !== undefined) pistonBodyWarningColor = params.piston_body.warning_color
         }
-        
-        if (params.frame !== undefined) {
-            if (params.frame.metalness !== undefined) frameMetalness = params.frame.metalness
-            if (params.frame.roughness !== undefined) frameRoughness = params.frame.roughness
+        if (params.piston_rod !== undefined) {
+            applyCommon(params.piston_rod, "pistonRod")
+            if (params.piston_rod.warning_color !== undefined) pistonRodWarningColor = params.piston_rod.warning_color
         }
-        
-        console.log("  ‚úÖ Materials updated successfully (including IOR)")
+        if (params.joint_tail !== undefined) {
+            applyCommon(params.joint_tail, "jointTail")
+            if (params.joint_tail.ok_color !== undefined) jointRodOkColor = params.joint_tail.ok_color
+            if (params.joint_tail.error_color !== undefined) jointRodErrorColor = params.joint_tail.error_color
+        }
+        if (params.joint_arm !== undefined) {
+            applyCommon(params.joint_arm, "jointArm")
+        }
+
+        console.log("  ‚úÖ Materials updated successfully")
     }
 
     // ‚úÖ –ü–û–õ–ù–ê–Ø —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è updateEnvironment()
     function applyEnvironmentUpdates(params) {
         console.log("üåç main.qml: applyEnvironmentUpdates() called")
-        
-        if (params.background_color !== undefined) backgroundColor = params.background_color
-        if (params.skybox_enabled !== undefined) skyboxEnabled = params.skybox_enabled
-        
-        // ‚úÖ –ù–û–í–û–ï: IBL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
-        if (params.ibl_enabled !== undefined) {
-            iblEnabled = params.ibl_enabled
-            console.log("  üåü IBL enabled:", iblEnabled)
+
+        if (params.background) {
+            if (params.background.mode !== undefined) backgroundMode = params.background.mode
+            if (params.background.color !== undefined) backgroundColor = params.background.color
         }
-        if (params.ibl_intensity !== undefined) {
-            iblIntensity = params.ibl_intensity
-            console.log("  üåü IBL intensity:", iblIntensity)
+
+        if (params.ibl) {
+            if (params.ibl.enabled !== undefined) iblEnabled = params.ibl.enabled
+            if (params.ibl.intensity !== undefined) iblIntensity = params.ibl.intensity
+            if (params.ibl.blur !== undefined) skyboxBlur = params.ibl.blur
+            if (params.ibl.source !== undefined) {
+                var resolvedSource = resolveUrl(params.ibl.source)
+                if (resolvedSource && resolvedSource !== "") {
+                    iblLoader._fallbackTried = false
+                    iblPrimarySource = resolvedSource
+                    console.log("  üåü IBL source:", iblPrimarySource)
+                }
+            }
+            if (params.ibl.fallback !== undefined) {
+                var resolvedFallback = resolveUrl(params.ibl.fallback)
+                if (resolvedFallback && resolvedFallback !== "") {
+                    iblLoader._fallbackTried = false
+                    iblFallbackSource = resolvedFallback
+                    console.log("  üåü IBL fallback:", iblFallbackSource)
+                }
+            }
         }
-        
-        // –¢—É–º–∞–Ω
-        if (params.fog_enabled !== undefined) fogEnabled = params.fog_enabled
-        if (params.fog_color !== undefined) fogColor = params.fog_color
-        if (params.fog_density !== undefined) fogDensity = params.fog_density
-        
-        console.log("  ‚úÖ Environment updated successfully (including IBL)")
+
+        if (params.fog) {
+            if (params.fog.enabled !== undefined) fogEnabled = params.fog.enabled
+            if (params.fog.color !== undefined) fogColor = params.fog.color
+            if (params.fog.density !== undefined) fogDensity = params.fog.density
+            if (params.fog.near !== undefined) fogNear = params.fog.near
+            if (params.fog.far !== undefined) fogFar = params.fog.far
+        }
+
+        if (params.ambient_occlusion) {
+            if (params.ambient_occlusion.enabled !== undefined) aoEnabled = params.ambient_occlusion.enabled
+            if (params.ambient_occlusion.strength !== undefined) aoStrength = params.ambient_occlusion.strength
+            if (params.ambient_occlusion.radius !== undefined) aoRadius = params.ambient_occlusion.radius
+        }
+
+        console.log("  ‚úÖ Environment updated successfully")
     }
 
     // ‚úÖ –ü–û–õ–ù–ê–Ø —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è updateQuality()
     function applyQualityUpdates(params) {
         console.log("‚öôÔ∏è main.qml: applyQualityUpdates() called")
-        
-        if (params.antialiasing !== undefined) antialiasingMode = params.antialiasing
-        if (params.aa_quality !== undefined) antialiasingQuality = params.aa_quality
-        if (params.shadows_enabled !== undefined) shadowsEnabled = params.shadows_enabled
-        if (params.shadow_quality !== undefined) shadowQuality = params.shadow_quality
-        
-        // ‚úÖ –ù–û–í–û–ï: –ú—è–≥–∫–æ—Å—Ç—å —Ç–µ–Ω–µ–π
-        if (params.shadow_softness !== undefined) {
-            shadowSoftness = params.shadow_softness
-            console.log("  üå´Ô∏è Shadow softness:", shadowSoftness)
+
+        if (params.shadows) {
+            if (params.shadows.enabled !== undefined) shadowsEnabled = params.shadows.enabled
+            if (params.shadows.resolution !== undefined) shadowResolution = params.shadows.resolution
+            if (params.shadows.filter !== undefined) shadowFilterSamples = params.shadows.filter
+            if (params.shadows.bias !== undefined) shadowBias = params.shadows.bias
+            if (params.shadows.darkness !== undefined) shadowFactor = params.shadows.darkness
         }
-        
-        console.log("  ‚úÖ Quality updated successfully (including shadow softness)")
+
+        if (params.antialiasing) {
+            if (params.antialiasing.primary !== undefined) aaPrimaryMode = params.antialiasing.primary
+            if (params.antialiasing.quality !== undefined) aaQualityLevel = params.antialiasing.quality
+            if (params.antialiasing.post !== undefined) aaPostMode = params.antialiasing.post
+        }
+
+        if (params.taa_enabled !== undefined) taaEnabled = params.taa_enabled
+        if (params.taa_strength !== undefined) taaStrength = params.taa_strength
+        if (params.fxaa_enabled !== undefined) fxaaEnabled = params.fxaa_enabled
+        if (params.specular_aa !== undefined) specularAAEnabled = params.specular_aa
+        if (params.dithering !== undefined) ditheringEnabled = params.dithering
+        if (params.render_scale !== undefined) renderScale = params.render_scale
+        if (params.render_policy !== undefined) renderPolicy = params.render_policy
+        if (params.frame_rate_limit !== undefined) frameRateLimit = params.frame_rate_limit
+        if (params.oit !== undefined) oitMode = params.oit
+        if (params.preset !== undefined) qualityPreset = params.preset
+
+        console.log("  üéö Quality preset:", qualityPreset, ", FPS limit:", frameRateLimit)
+        console.log("  ‚úÖ Quality updated successfully")
     }
 
     // ‚úÖ –ü–û–õ–ù–ê–Ø —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è updateCamera()
     function applyCameraUpdates(params) {
         console.log("üì∑ main.qml: applyCameraUpdates() called")
         
         if (params.fov !== undefined) cameraFov = params.fov
         if (params.near !== undefined) cameraNear = params.near
         if (params.far !== undefined) cameraFar = params.far
         if (params.speed !== undefined) cameraSpeed = params.speed
         if (params.auto_rotate !== undefined) autoRotate = params.auto_rotate
         if (params.auto_rotate_speed !== undefined) autoRotateSpeed = params.auto_rotate_speed
         
         console.log("  ‚úÖ Camera updated successfully")
     }
 
     // ‚úÖ –ü–û–õ–ù–ê–Ø —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è updateEffects()
     function applyEffectsUpdates(params) {
         console.log("‚ú® main.qml: applyEffectsUpdates() called")
         
-        // Bloom - –†–ê–°–®–ò–†–ï–ù–ù–´–ô
         if (params.bloom_enabled !== undefined) bloomEnabled = params.bloom_enabled
         if (params.bloom_intensity !== undefined) bloomIntensity = params.bloom_intensity
-        if (params.bloom_threshold !== undefined) {
-            bloomThreshold = params.bloom_threshold
-            console.log("  üåü Bloom threshold:", bloomThreshold)
-        }
-        
-        // SSAO - –†–ê–°–®–ò–†–ï–ù–ù–´–ô
-        if (params.ssao_enabled !== undefined) ssaoEnabled = params.ssao_enabled
-        if (params.ssao_intensity !== undefined) ssaoIntensity = params.ssao_intensity
-        if (params.ssao_radius !== undefined) {
-            ssaoRadius = params.ssao_radius
-            console.log("  üåë SSAO radius:", ssaoRadius)
-        }
-        
-        // ‚úÖ –ù–û–í–û–ï: –¢–æ–Ω–µ–º–∞–ø–ø–∏–Ω–≥
-        if (params.tonemap_enabled !== undefined) {
-            tonemapEnabled = params.tonemap_enabled
-            console.log("  üé® Tonemap enabled:", tonemapEnabled)
-        }
-        if (params.tonemap_mode !== undefined) {
-            tonemapMode = params.tonemap_mode
-            console.log("  üé® Tonemap mode:", tonemapMode)
-        }
-        
-        // ‚úÖ –ù–û–í–û–ï: Depth of Field
+        if (params.bloom_threshold !== undefined) bloomThreshold = params.bloom_threshold
+        if (params.bloom_spread !== undefined) bloomSpread = params.bloom_spread
+
         if (params.depth_of_field !== undefined) depthOfFieldEnabled = params.depth_of_field
-        if (params.dof_focus_distance !== undefined) {
-            dofFocusDistance = params.dof_focus_distance
-            console.log("  üîç DoF focus distance:", dofFocusDistance)
-        }
-        if (params.dof_focus_range !== undefined) {
-            dofFocusRange = params.dof_focus_range
-            console.log("  üîç DoF focus range:", dofFocusRange)
-        }
-        
-        // ‚úÖ –ù–û–í–û–ï: –í–∏–Ω—å–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
-        if (params.vignette_enabled !== undefined) {
-            vignetteEnabled = params.vignette_enabled
-            console.log("  üñºÔ∏è Vignette enabled:", vignetteEnabled)
-        }
-        if (params.vignette_strength !== undefined) {
-            vignetteStrength = params.vignette_strength
-            console.log("  üñºÔ∏è Vignette strength:", vignetteStrength)
-        }
-        
-        // ‚úÖ –ù–û–í–û–ï: Lens Flare
-        if (params.lens_flare_enabled !== undefined) {
-            lensFlareEnabled = params.lens_flare_enabled
-            console.log("  ‚ú® Lens Flare enabled:", lensFlareEnabled)
-        }
-        
-        // Motion Blur
+        if (params.dof_focus_distance !== undefined) dofFocusDistance = params.dof_focus_distance
+        if (params.dof_blur !== undefined) dofBlurAmount = params.dof_blur
+
         if (params.motion_blur !== undefined) motionBlurEnabled = params.motion_blur
-        
-        console.log("  ‚úÖ Visual effects updated successfully (COMPLETE)")
+        if (params.motion_blur_amount !== undefined) motionBlurAmount = params.motion_blur_amount
+
+        if (params.lens_flare !== undefined) lensFlareEnabled = params.lens_flare
+        if (params.vignette !== undefined) vignetteEnabled = params.vignette
+        if (params.vignette_strength !== undefined) vignetteStrength = params.vignette_strength
+
+        if (params.tonemap_enabled !== undefined) tonemapEnabled = params.tonemap_enabled
+        if (params.tonemap_mode !== undefined) {
+            var allowedModes = ["filmic", "aces", "reinhard", "gamma", "linear"]
+            if (allowedModes.indexOf(params.tonemap_mode) !== -1)
+                tonemapModeName = params.tonemap_mode
+        }
+
+        console.log("  ‚úÖ Visual effects updated successfully")
     }
 
     // Legacy functions for backward compatibility
     function updateGeometry(params) { applyGeometryUpdates(params) }
     function updateLighting(params) { applyLightingUpdates(params) }
     function updateMaterials(params) { applyMaterialUpdates(params) }     // ‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù–û
     function updateEnvironment(params) { applyEnvironmentUpdates(params) } // ‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù–û
     function updateQuality(params) { applyQualityUpdates(params) }         // ‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù–û
     function updateEffects(params) { applyEffectsUpdates(params) }         // ‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù–û
     function updateCamera(params) { applyCameraUpdates(params) }           // ‚úÖ –†–ï–ê–õ–ò–ó–û–í–ê–ù–û
     
     function updatePistonPositions(positions) {
         if (positions.fl !== undefined) userPistonPositionFL = Number(positions.fl)
         if (positions.fr !== undefined) userPistonPositionFR = Number(positions.fr)
         if (positions.rl !== undefined) userPistonPositionRL = Number(positions.rl)
         if (positions.rr !== undefined) userPistonPositionRR = Number(positions.rr)
     }
 
     // ===============================================================
     // 3D SCENE (ENHANCED with all new parameters)
     // ===============================================================
 
     View3D {
         id: view3d
         anchors.fill: parent
 
+        renderSettings: RenderSettings {
+            renderScale: root.renderScale
+            renderPolicy: root.renderPolicy === "ondemand" ? RenderSettings.OnDemand : RenderSettings.Always
+            maximumFrameRate: root.frameRateLimit
+        }
+
         environment: ExtendedSceneEnvironment {
-            backgroundMode: skyboxEnabled ? SceneEnvironment.SkyBox : SceneEnvironment.Color
-            clearColor: backgroundColor
-            lightProbe: iblEnabled ? null : null                           // ‚úÖ –ù–û–í–û–ï: IBL
-            probeExposure: iblIntensity                                    // ‚úÖ –ù–û–í–û–ï: IBL
-            
-            tonemapMode: tonemapEnabled ? 
-                (tonemapMode === 3 ? SceneEnvironment.TonemapModeFilmic :
-                 tonemapMode === 2 ? SceneEnvironment.TonemapModeReinhard :
-                 tonemapMode === 1 ? SceneEnvironment.TonemapModeLinear :
-                 SceneEnvironment.TonemapModeNone) : SceneEnvironment.TonemapModeNone
+            id: mainEnvironment
+            backgroundMode: root.backgroundMode === "skybox" && root.iblReady ? SceneEnvironment.SkyBox : SceneEnvironment.Color
+            clearColor: root.backgroundColor
+            lightProbe: root.iblEnabled && root.iblReady ? iblLoader.probe : null
+            probeExposure: root.iblIntensity
+            skyBoxBlurAmount: root.skyboxBlur
+            fogEnabled: root.fogEnabled
+            fogColor: root.fogColor
+            fogDensity: root.fogDensity
+            fogDepthBegin: root.fogNear
+            fogDepthEnd: root.fogFar
+
+            tonemapMode: root.tonemapEnabled ?
+                (root.tonemapModeName === "filmic" ? SceneEnvironment.TonemapModeFilmic :
+                 root.tonemapModeName === "aces" ?
+                     (SceneEnvironment.TonemapModeAces !== undefined ? SceneEnvironment.TonemapModeAces
+                                                                       : SceneEnvironment.TonemapModeFilmic) :
+                 root.tonemapModeName === "reinhard" ? SceneEnvironment.TonemapModeReinhard :
+                 root.tonemapModeName === "gamma" ?
+                     (SceneEnvironment.TonemapModeGamma !== undefined ? SceneEnvironment.TonemapModeGamma
+                                                                       : SceneEnvironment.TonemapModeLinear) :
+                 SceneEnvironment.TonemapModeLinear) : SceneEnvironment.TonemapModeNone
             exposure: 1.0
             whitePoint: 2.0
-            
-            antialiasingMode: antialiasingMode === 3 ? SceneEnvironment.ProgressiveAA :
-                             antialiasingMode === 2 ? SceneEnvironment.MSAA :
-                             antialiasingMode === 1 ? SceneEnvironment.SSAA :
+
+            antialiasingMode: root.aaPrimaryMode === "msaa" ? SceneEnvironment.MSAA :
+                             root.aaPrimaryMode === "ssaa" ? SceneEnvironment.SSAA :
                              SceneEnvironment.NoAA
-            antialiasingQuality: (antialiasingQuality !== undefined && antialiasingQuality === 2) ? SceneEnvironment.High :
-                               (antialiasingQuality !== undefined && antialiasingQuality === 1) ? SceneEnvironment.Medium :
+            antialiasingQuality: root.aaQualityLevel === "high" ? SceneEnvironment.High :
+                               root.aaQualityLevel === "medium" ? SceneEnvironment.Medium :
                                SceneEnvironment.Low
-            
-            specularAAEnabled: true
-            ditheringEnabled: true
-            fxaaEnabled: true
-            temporalAAEnabled: isRunning
-            
-            aoEnabled: ssaoEnabled
-            aoStrength: ssaoIntensity * 100
-            aoDistance: ssaoRadius                                         // ‚úÖ –ù–û–í–û–ï: –†–∞–¥–∏—É—Å SSAO
+            fxaaEnabled: root.aaPostMode === "fxaa" && root.fxaaEnabled
+            temporalAAEnabled: (root.aaPostMode === "taa" && root.taaEnabled && root.aaPrimaryMode !== "msaa")
+            temporalAAStrength: root.taaStrength
+            specularAAEnabled: root.specularAAEnabled
+            ditheringEnabled: root.ditheringEnabled
+
+            aoEnabled: root.aoEnabled
+            aoStrength: root.aoStrength
+            aoDistance: Math.max(1.0, root.aoRadius)
             aoSoftness: 20
             aoDither: true
             aoSampleRate: 3
-            
-            glowEnabled: bloomEnabled
-            glowIntensity: bloomIntensity
-            glowBloom: 0.5
-            glowStrength: 0.8
+
+            glowEnabled: root.bloomEnabled
+            glowIntensity: root.bloomIntensity
+            glowBloom: root.bloomSpread
+            glowStrength: 0.9
             glowQualityHigh: true
             glowUseBicubicUpscale: true
-            glowHDRMinimumValue: bloomThreshold                            // ‚úÖ –ù–û–í–û–ï: –ü–æ—Ä–æ–≥ Bloom
-            glowHDRMaximumValue: 8.0
-            glowHDRScale: 2.0
-            
-            lensFlareEnabled: lensFlareEnabled                             // ‚úÖ –ù–û–í–û–ï: Lens Flare
+            glowHDRMinimumValue: root.bloomThreshold
+            glowHDRMaximumValue: 6.0
+            glowHDRScale: 1.5
+
+            lensFlareEnabled: root.lensFlareEnabled
             lensFlareGhostCount: 3
             lensFlareGhostDispersal: 0.6
             lensFlareHaloWidth: 0.25
             lensFlareBloomBias: 0.35
             lensFlareStretchToAspect: 1.0
-            
-            depthOfFieldEnabled: depthOfFieldEnabled
-            depthOfFieldFocusDistance: dofFocusDistance                    // ‚úÖ –ù–û–í–û–ï: –î–∏—Å—Ç–∞–Ω—Ü–∏—è —Ñ–æ–∫—É—Å–∞
-            depthOfFieldFocusRange: dofFocusRange                          // ‚úÖ –ù–û–í–û–ï: –î–∏–∞–ø–∞–∑–æ–Ω —Ñ–æ–∫—É—Å–∞
-            depthOfFieldBlurAmount: 3.0
-            
-            vignetteEnabled: vignetteEnabled                               // ‚úÖ –ù–û–í–û–ï: –í–∏–Ω—å–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
+
+            depthOfFieldEnabled: root.depthOfFieldEnabled
+            depthOfFieldFocusDistance: root.dofFocusDistance
+            depthOfFieldBlurAmount: root.dofBlurAmount
+
+            motionBlurEnabled: root.motionBlurEnabled
+            motionBlurAmount: root.motionBlurAmount
+
+            vignetteEnabled: root.vignetteEnabled
             vignetteRadius: 0.4
-            vignetteStrength: vignetteStrength                             // ‚úÖ –ù–û–í–û–ï: –°–∏–ª–∞ –≤–∏–Ω—å–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
-            
+            vignetteStrength: root.vignetteStrength
+
+            oitMethod: root.oitMode === "weighted" ? SceneEnvironment.OITWeightedBlended : SceneEnvironment.OITNone
+
             colorAdjustmentsEnabled: true
             adjustmentBrightness: 1.0
             adjustmentContrast: 1.05
             adjustmentSaturation: 1.05
         }
 
+        // ===============================================================
+        // MATERIAL LIBRARY (shared instances to avoid duplication)
+        // ===============================================================
+
+        PrincipledMaterial {
+            id: frameMaterial
+            baseColor: frameBaseColor
+            metalness: frameMetalness
+            roughness: frameRoughness
+            specularAmount: frameSpecularAmount
+            specularTint: frameSpecularTint
+            clearcoatAmount: frameClearcoat
+            clearcoatRoughnessAmount: frameClearcoatRoughness
+            transmissionFactor: frameTransmission
+            opacity: frameOpacity
+            indexOfRefraction: frameIor
+            attenuationDistance: frameAttenuationDistance
+            attenuationColor: frameAttenuationColor
+            emissiveColor: frameEmissiveColor
+            emissiveFactor: frameEmissiveIntensity
+        }
+
+        PrincipledMaterial {
+            id: leverMaterial
+            baseColor: leverBaseColor
+            metalness: leverMetalness
+            roughness: leverRoughness
+            specularAmount: leverSpecularAmount
+            specularTint: leverSpecularTint
+            clearcoatAmount: leverClearcoat
+            clearcoatRoughnessAmount: leverClearcoatRoughness
+            transmissionFactor: leverTransmission
+            opacity: leverOpacity
+            indexOfRefraction: leverIor
+            attenuationDistance: leverAttenuationDistance
+            attenuationColor: leverAttenuationColor
+            emissiveColor: leverEmissiveColor
+            emissiveFactor: leverEmissiveIntensity
+        }
+
+        PrincipledMaterial {
+            id: tailRodMaterial
+            baseColor: tailRodBaseColor
+            metalness: tailRodMetalness
+            roughness: tailRodRoughness
+            specularAmount: tailRodSpecularAmount
+            specularTint: tailRodSpecularTint
+            clearcoatAmount: tailRodClearcoat
+            clearcoatRoughnessAmount: tailRodClearcoatRoughness
+            transmissionFactor: tailRodTransmission
+            opacity: tailRodOpacity
+            indexOfRefraction: tailRodIor
+            attenuationDistance: tailRodAttenuationDistance
+            attenuationColor: tailRodAttenuationColor
+            emissiveColor: tailRodEmissiveColor
+            emissiveFactor: tailRodEmissiveIntensity
+        }
+
+        PrincipledMaterial {
+            id: cylinderMaterial
+            baseColor: cylinderBaseColor
+            metalness: cylinderMetalness
+            roughness: cylinderRoughness
+            specularAmount: cylinderSpecularAmount
+            specularTint: cylinderSpecularTint
+            clearcoatAmount: cylinderClearcoat
+            clearcoatRoughnessAmount: cylinderClearcoatRoughness
+            transmissionFactor: cylinderTransmission
+            opacity: cylinderOpacity
+            indexOfRefraction: cylinderIor
+            attenuationDistance: cylinderAttenuationDistance
+            attenuationColor: cylinderAttenuationColor
+            emissiveColor: cylinderEmissiveColor
+            emissiveFactor: cylinderEmissiveIntensity
+            alphaMode: PrincipledMaterial.Blend
+        }
+
+        PrincipledMaterial {
+            id: jointTailMaterial
+            baseColor: jointTailBaseColor
+            metalness: jointTailMetalness
+            roughness: jointTailRoughness
+            specularAmount: jointTailSpecularAmount
+            specularTint: jointTailSpecularTint
+            clearcoatAmount: jointTailClearcoat
+            clearcoatRoughnessAmount: jointTailClearcoatRoughness
+            transmissionFactor: jointTailTransmission
+            opacity: jointTailOpacity
+            indexOfRefraction: jointTailIor
+            attenuationDistance: jointTailAttenuationDistance
+            attenuationColor: jointTailAttenuationColor
+            emissiveColor: jointTailEmissiveColor
+            emissiveFactor: jointTailEmissiveIntensity
+        }
+
+        PrincipledMaterial {
+            id: jointArmMaterial
+            baseColor: jointArmBaseColor
+            metalness: jointArmMetalness
+            roughness: jointArmRoughness
+            specularAmount: jointArmSpecularAmount
+            specularTint: jointArmSpecularTint
+            clearcoatAmount: jointArmClearcoat
+            clearcoatRoughnessAmount: jointArmClearcoatRoughness
+            transmissionFactor: jointArmTransmission
+            opacity: jointArmOpacity
+            indexOfRefraction: jointArmIor
+            attenuationDistance: jointArmAttenuationDistance
+            attenuationColor: jointArmAttenuationColor
+            emissiveColor: jointArmEmissiveColor
+            emissiveFactor: jointArmEmissiveIntensity
+        }
+
         // Camera rig (preserved)
         Node {
             id: cameraRig
             position: root.pivot
             eulerRotation: Qt.vector3d(root.pitchDeg, root.yawDeg, 0)
 
             Node {
                 id: panNode
                 position: Qt.vector3d(root.panX, root.panY, 0)
 
                 PerspectiveCamera {
                     id: camera
                     position: Qt.vector3d(0, 0, root.cameraDistance)
                     fieldOfView: root.cameraFov
                     clipNear: root.cameraNear
                     clipFar: root.cameraFar
                 }
             }
         }
 
         // Lighting (with shadow softness)
         DirectionalLight {
             id: keyLight
-            eulerRotation.x: keyLightAngleX
-            eulerRotation.y: keyLightAngleY
-            brightness: keyLightBrightness
-            color: keyLightColor
-            castsShadow: shadowsEnabled
-            shadowMapQuality: shadowQuality === 2 ? Light.ShadowMapQualityHigh :
-                             shadowQuality === 1 ? Light.ShadowMapQualityMedium :
+            eulerRotation.x: root.keyLightAngleX
+            eulerRotation.y: root.keyLightAngleY
+            brightness: root.keyLightBrightness
+            color: root.keyLightColor
+            castsShadow: root.shadowsEnabled
+            shadowMapQuality: root.shadowResolution === "4096" ?
+                                 (typeof Light.ShadowMapQualityUltra !== "undefined" ? Light.ShadowMapQualityUltra
+                                                                                       : Light.ShadowMapQualityVeryHigh) :
+                             root.shadowResolution === "2048" ? Light.ShadowMapQualityVeryHigh :
+                             root.shadowResolution === "1024" ? Light.ShadowMapQualityHigh :
+                             root.shadowResolution === "512" ? Light.ShadowMapQualityMedium :
                              Light.ShadowMapQualityLow
-            shadowFactor: 75
-            shadowBias: shadowSoftness * 0.001                            // ‚úÖ –ù–û–í–û–ï: –ú—è–≥–∫–æ—Å—Ç—å —Ç–µ–Ω–µ–π
+            shadowFactor: root.shadowFactor
+            shadowBias: root.shadowBias
+            shadowFilter: root.shadowFilterSamples === 32 ? Light.ShadowFilterPCF32 :
+                           root.shadowFilterSamples === 16 ? Light.ShadowFilterPCF16 :
+                           root.shadowFilterSamples === 8 ? Light.ShadowFilterPCF8 :
+                           root.shadowFilterSamples === 4 ? Light.ShadowFilterPCF4 :
+                           Light.ShadowFilterNone
         }
-        
+
         DirectionalLight {
             id: fillLight
             eulerRotation.x: -60
             eulerRotation.y: 135
-            brightness: fillLightBrightness
-            color: fillLightColor
+            brightness: root.fillLightBrightness
+            color: root.fillLightColor
             castsShadow: false
         }
-        
+
         DirectionalLight {
             id: rimLight
             eulerRotation.x: 15
             eulerRotation.y: 180
-            brightness: 1.5
-            color: "#ffffcc"
+            brightness: root.rimLightBrightness
+            color: root.rimLightColor
             castsShadow: false
         }
-        
+
         PointLight {
             id: accentLight
-            position: Qt.vector3d(0, pointLightY, 1500)
-            brightness: pointLightBrightness
-            color: "#ffffff"
-            quadraticFade: 0.00008
+            position: Qt.vector3d(0, root.pointLightY, 1500)
+            brightness: root.pointLightBrightness
+            color: root.pointLightColor
+            constantFade: 1.0
+            linearFade: 2.0 / Math.max(200.0, root.pointLightRange)
+            quadraticFade: 1.0 / Math.pow(Math.max(200.0, root.pointLightRange), 2)
         }
 
         // ===============================================================
         // SUSPENSION SYSTEM GEOMETRY (with IOR support)
         // ===============================================================
 
         // U-FRAME (3 beams) with controlled materials
         Model {
             source: "#Cube"
             position: Qt.vector3d(0, userBeamSize/2, userFrameLength/2)
             scale: Qt.vector3d(userBeamSize/100, userBeamSize/100, userFrameLength/100)
-            materials: PrincipledMaterial { 
-                baseColor: "#cc0000"
-                metalness: frameMetalness
-                roughness: frameRoughness
-            }
+            materials: [frameMaterial]
         }
         Model {
             source: "#Cube"
             position: Qt.vector3d(0, userBeamSize + userFrameHeight/2, userBeamSize/2)
             scale: Qt.vector3d(userBeamSize/100, userFrameHeight/100, userBeamSize/100)
-            materials: PrincipledMaterial { 
-                baseColor: "#cc0000"
-                metalness: frameMetalness
-                roughness: frameRoughness
-            }
+            materials: [frameMaterial]
         }
         Model {
             source: "#Cube"
             position: Qt.vector3d(0, userBeamSize + userFrameHeight/2, userFrameLength - userBeamSize/2)
             scale: Qt.vector3d(userBeamSize/100, userFrameHeight/100, userBeamSize/100)
-            materials: PrincipledMaterial { 
-                baseColor: "#cc0000"
-                metalness: frameMetalness
-                roughness: frameRoughness
-            }
+            materials: [frameMaterial]
         }
 
         // ‚úÖ OPTIMIZED SUSPENSION COMPONENT (with CORRECT rod length calculation)
         component OptimizedSuspensionCorner: Node {
             property vector3d j_arm
             property vector3d j_tail  
             property real leverAngle
             property real pistonPositionFromPython: 250.0
             
             // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
             // –ë–∞–∑–æ–≤–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è —Ä—ã—á–∞–≥–∞
             readonly property real baseAngle: (j_arm.x < 0) ? 180 : 0
             readonly property real totalAngle: baseAngle + leverAngle
             readonly property real totalAngleRad: totalAngle * Math.PI / 180
             
             // –ü–æ–∑–∏—Ü–∏—è —à–∞—Ä–Ω–∏—Ä–∞ —à—Ç–æ–∫–∞ –Ω–∞ —Ä—ã—á–∞–≥–µ
             readonly property vector3d j_rod: Qt.vector3d(
                 j_arm.x + (userLeverLength * userRodPosition) * Math.cos(totalAngleRad),
                 j_arm.y + (userLeverLength * userRodPosition) * Math.sin(totalAngleRad),
                 j_arm.z
             )
             
             // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç j_tail –∫ j_rod (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–∏–ª–∏–Ω–¥—Ä–∞)
             readonly property vector3d cylDirection: Qt.vector3d(j_rod.x - j_tail.x, j_rod.y - j_tail.y, 0)
             readonly property real cylDirectionLength: Math.hypot(cylDirection.x, cylDirection.y)
@@ -806,153 +1129,162 @@ Item {
             readonly property real rodLengthSquared: pistonRodLength * pistonRodLength
             readonly property real perpDistSquared: perpendicularDistance * perpendicularDistance
             readonly property real axialDistanceFromProjection: Math.sqrt(Math.max(0, rodLengthSquared - perpDistSquared))
             
             // –ü–æ–∑–∏—Ü–∏—è –ø–æ—Ä—à–Ω—è –Ω–∞ –æ—Å–∏ —Ü–∏–ª–∏–Ω–¥—Ä–∞ (–Ω–∞–∑–∞–¥ –æ—Ç –ø—Ä–æ–µ–∫—Ü–∏–∏ j_rod)
             readonly property real pistonPositionOnAxis: projectionOnCylAxis - axialDistanceFromProjection
             
             // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ—Ä—à–µ–Ω—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ü–∏–ª–∏–Ω–¥—Ä–∞
             readonly property real clampedPistonPosition: Math.max(10, Math.min(userCylinderLength - 10, pistonPositionOnAxis))
             
             // ‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ø–æ–∑–∏—Ü–∏—è –ø–æ—Ä—à–Ω—è (–Ω–∞ –æ—Å–∏ —Ü–∏–ª–∏–Ω–¥—Ä–∞)
             readonly property vector3d pistonCenter: Qt.vector3d(
                 tailRodEnd.x + cylDirectionNorm.x * clampedPistonPosition,
                 tailRodEnd.y + cylDirectionNorm.y * clampedPistonPosition,
                 tailRodEnd.z
             )
             
             // ‚úÖ –ü–†–û–í–ï–†–ö–ê: —Ä–µ–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —à—Ç–æ–∫–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
             readonly property real actualRodLength: Math.hypot(j_rod.x - pistonCenter.x, j_rod.y - pistonCenter.y)
             readonly property real rodLengthError: Math.abs(actualRodLength - pistonRodLength)
             
             // LEVER (—Ä—ã—á–∞–≥)
             Model {
                 source: "#Cube"
                 position: Qt.vector3d(
-                    j_arm.x + (userLeverLength/2) * Math.cos(totalAngleRad), 
-                    j_arm.y + (userLeverLength/2) * Math.sin(totalAngleRad), 
+                    j_arm.x + (userLeverLength/2) * Math.cos(totalAngleRad),
+                    j_arm.y + (userLeverLength/2) * Math.sin(totalAngleRad),
                     j_arm.z
                 )
                 scale: Qt.vector3d(userLeverLength/100, 0.8, 0.8)
                 eulerRotation: Qt.vector3d(0, 0, totalAngle)
-                materials: PrincipledMaterial { 
-                    baseColor: "#888888"
-                    metalness: metalMetalness
-                    roughness: metalRoughness
-                    clearcoatAmount: metalClearcoat
-                }
+                materials: [leverMaterial]
             }
             
             // TAIL ROD (—Ö–≤–æ—Å—Ç–æ–≤–æ–π —à—Ç–æ–∫) - –ö–û–ù–°–¢–ê–ù–¢–ù–ê–Ø –¥–ª–∏–Ω–∞
             Model {
                 source: "#Cylinder"
                 position: Qt.vector3d((j_tail.x + tailRodEnd.x)/2, (j_tail.y + tailRodEnd.y)/2, j_tail.z)
                 scale: Qt.vector3d(userRodDiameter/100, tailRodLength/100, userRodDiameter/100)
                 eulerRotation: Qt.vector3d(0, 0, cylAngle)
-                materials: PrincipledMaterial { 
-                    baseColor: "#cccccc"
-                    metalness: metalMetalness
-                    roughness: metalRoughness
-                }
+                materials: [tailRodMaterial]
             }
             
             // CYLINDER BODY (–∫–æ—Ä–ø—É—Å —Ü–∏–ª–∏–Ω–¥—Ä–∞) —Å IOR
             Model {
                 source: "#Cylinder"
                 position: Qt.vector3d((tailRodEnd.x + cylinderEnd.x)/2, (tailRodEnd.y + cylinderEnd.y)/2, tailRodEnd.z)
                 scale: Qt.vector3d(userBoreHead/100, userCylinderLength/100, userBoreHead/100)
                 eulerRotation: Qt.vector3d(0, 0, cylAngle)
-                materials: PrincipledMaterial { 
-                    baseColor: "#ffffff"
-                    metalness: 0.0
-                    roughness: glassRoughness
-                    opacity: glassOpacity
-                    indexOfRefraction: glassIOR          // ‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è
-                    alphaMode: PrincipledMaterial.Blend 
-                }
+                materials: [cylinderMaterial]
             }
             
             // ‚úÖ PISTON (–ø–æ—Ä—à–µ–Ω—å) - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–π –¥–ª–∏–Ω—ã —à—Ç–æ–∫–∞
             Model {
                 source: "#Cylinder"
                 position: pistonCenter
                 scale: Qt.vector3d((userBoreHead - 2)/100, userPistonThickness/100, (userBoreHead - 2)/100)
                 eulerRotation: Qt.vector3d(0, 0, cylAngle)
-                materials: PrincipledMaterial { 
-                    baseColor: rodLengthError > 1.0 ? "#ff4444" : "#ff0066"  // –ö—Ä–∞—Å–Ω–µ–µ –µ—Å–ª–∏ –±–æ–ª—å—à–∞—è –æ—à–∏–±–∫–∞
-                    metalness: metalMetalness
-                    roughness: metalRoughness
+                materials: PrincipledMaterial {
+                    baseColor: rodLengthError > 1.0 ? pistonBodyWarningColor : pistonBodyBaseColor
+                    metalness: pistonBodyMetalness
+                    roughness: pistonBodyRoughness
+                    specularAmount: pistonBodySpecularAmount
+                    specularTint: pistonBodySpecularTint
+                    clearcoatAmount: pistonBodyClearcoat
+                    clearcoatRoughnessAmount: pistonBodyClearcoatRoughness
+                    transmissionFactor: pistonBodyTransmission
+                    opacity: pistonBodyOpacity
+                    indexOfRefraction: pistonBodyIor
+                    attenuationDistance: pistonBodyAttenuationDistance
+                    attenuationColor: pistonBodyAttenuationColor
+                    emissiveColor: pistonBodyEmissiveColor
+                    emissiveFactor: pistonBodyEmissiveIntensity
                 }
             }
-            
+
             // ‚úÖ PISTON ROD (—à—Ç–æ–∫ –ø–æ—Ä—à–Ω—è) - –ö–û–ù–°–¢–ê–ù–¢–ù–ê–Ø –¥–ª–∏–Ω–∞!
             Model {
                 source: "#Cylinder"
                 position: Qt.vector3d((pistonCenter.x + j_rod.x)/2, (pistonCenter.y + j_rod.y)/2, pistonCenter.z)
                 scale: Qt.vector3d(userRodDiameter/100, pistonRodLength/100, userRodDiameter/100)  // ‚úÖ –ö–û–ù–°–¢–ê–ù–¢–ù–ê–Ø –î–õ–ò–ù–ê!
                 eulerRotation: Qt.vector3d(0, 0, Math.atan2(j_rod.y - pistonCenter.y, j_rod.x - pistonCenter.x) * 180 / Math.PI + 90)
-                materials: PrincipledMaterial { 
-                    baseColor: rodLengthError > 1.0 ? "#ff0000" : "#cccccc"  // –ö—Ä–∞—Å–Ω—ã–π –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ > 1–º–º
-                    metalness: metalMetalness
-                    roughness: metalRoughness
+                materials: PrincipledMaterial {
+                    baseColor: rodLengthError > 1.0 ? pistonRodWarningColor : pistonRodBaseColor  // –ö—Ä–∞—Å–Ω—ã–π –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ > 1–º–º
+                    metalness: pistonRodMetalness
+                    roughness: pistonRodRoughness
+                    specularAmount: pistonRodSpecularAmount
+                    specularTint: pistonRodSpecularTint
+                    clearcoatAmount: pistonRodClearcoat
+                    clearcoatRoughnessAmount: pistonRodClearcoatRoughness
+                    transmissionFactor: pistonRodTransmission
+                    opacity: pistonRodOpacity
+                    indexOfRefraction: pistonRodIor
+                    attenuationDistance: pistonRodAttenuationDistance
+                    attenuationColor: pistonRodAttenuationColor
+                    emissiveColor: pistonRodEmissiveColor
+                    emissiveFactor: pistonRodEmissiveIntensity
                 }
             }
             
             // JOINTS (—à–∞—Ä–Ω–∏—Ä—ã) - —Ü–≤–µ—Ç–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
             Model {
                 source: "#Cylinder"
                 position: j_tail
                 scale: Qt.vector3d(1.2, 2.4, 1.2)
                 eulerRotation: Qt.vector3d(90, 0, 0)
-                materials: PrincipledMaterial { 
-                    baseColor: "#0088ff"  // –°–∏–Ω–∏–π - —à–∞—Ä–Ω–∏—Ä —Ü–∏–ª–∏–Ω–¥—Ä–∞
-                    metalness: metalMetalness
-                    roughness: metalRoughness
-                }
+                materials: [jointTailMaterial]
             }
             
             Model {
                 source: "#Cylinder"
                 position: j_arm
                 scale: Qt.vector3d(1.0, 2.0, 1.0)
                 eulerRotation: Qt.vector3d(90, 0, 0)
-                materials: PrincipledMaterial { 
-                    baseColor: "#ff8800"  // –û—Ä–∞–Ω–∂–µ–≤—ã–π - —à–∞—Ä–Ω–∏—Ä —Ä—ã—á–∞–≥–∞
-                    metalness: metalMetalness
-                    roughness: metalRoughness
-                }
+                materials: [jointArmMaterial]
             }
             
             Model {
                 source: "#Cylinder"
                 position: j_rod
                 scale: Qt.vector3d(0.8, 1.6, 0.8)
                 eulerRotation: Qt.vector3d(90, 0, leverAngle * 0.1)
-                materials: PrincipledMaterial { 
-                    baseColor: rodLengthError > 1.0 ? "#ff0000" : "#00ff44"  // –ö—Ä–∞—Å–Ω—ã–π –µ—Å–ª–∏ –æ—à–∏–±–∫–∞, –∑–µ–ª–µ–Ω—ã–π –µ—Å–ª–∏ OK
-                    metalness: metalMetalness
-                    roughness: metalRoughness
+                materials: PrincipledMaterial {
+                    baseColor: rodLengthError > 1.0 ? jointRodErrorColor : jointRodOkColor  // –ö—Ä–∞—Å–Ω—ã–π –µ—Å–ª–∏ –æ—à–∏–±–∫–∞, –∑–µ–ª–µ–Ω—ã–π –µ—Å–ª–∏ OK
+                    metalness: jointTailMetalness
+                    roughness: jointTailRoughness
+                    specularAmount: jointTailSpecularAmount
+                    specularTint: jointTailSpecularTint
+                    clearcoatAmount: jointTailClearcoat
+                    clearcoatRoughnessAmount: jointTailClearcoatRoughness
+                    transmissionFactor: jointTailTransmission
+                    opacity: jointTailOpacity
+                    indexOfRefraction: jointTailIor
+                    attenuationDistance: jointTailAttenuationDistance
+                    attenuationColor: jointTailAttenuationColor
+                    emissiveColor: jointTailEmissiveColor
+                    emissiveFactor: jointTailEmissiveIntensity
                 }
             }
             
             // ‚úÖ DEBUG: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –¥–ª–∏–Ω—ã —à—Ç–æ–∫–∞
             onRodLengthErrorChanged: {
                 if (rodLengthError > 1.0) {  // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –±–æ–ª—å—à–µ 1–º–º
                     console.warn("‚ö†Ô∏è Rod length error:", rodLengthError.toFixed(2), "mm (target:", pistonRodLength, "actual:", actualRodLength.toFixed(2), ")")
                 }
             }
         }
 
         // Four suspension corners with fixed rod lengths
         OptimizedSuspensionCorner { 
             id: flCorner
             j_arm: Qt.vector3d(-userFrameToPivot, userBeamSize, userBeamSize/2)
             j_tail: Qt.vector3d(-userTrackWidth/2, userBeamSize + userFrameHeight, userBeamSize/2)
             leverAngle: fl_angle
             pistonPositionFromPython: root.userPistonPositionFL
         }
         
         OptimizedSuspensionCorner { 
             id: frCorner
             j_arm: Qt.vector3d(userFrameToPivot, userBeamSize, userBeamSize/2)
             j_tail: Qt.vector3d(userTrackWidth/2, userBeamSize + userFrameHeight, userBeamSize/2)
             leverAngle: fr_angle
