import QtQuick
import QtQuick3D
import QtQuick3D.Helpers
import "components"

/*
 * PneumoStabSim - COMPLETE Graphics Parameters Main 3D View (v4.7.1 FIRST CLICK FIX)
 * üöÄ –ü–û–õ–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã GraphicsPanel —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
 * ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï v4.7.1: –£—Å—Ç—Ä–∞–Ω—ë–Ω —Ä—ã–≤–æ–∫ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ
 * ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï v4.7.1: –§–æ–Ω –í–°–ï–ì–î–ê –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç)
 * üèÜ 100% –ü–ê–†–ê–ú–ï–¢–†–û–í –î–û–•–û–î–Ø–¢ –î–û CANVAS!
 */
Item {
    id: root
    anchors.fill: parent

    // ===============================================================
    // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï v4.7.1: –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è Behavior
    // ===============================================================
    
    property bool cameraInitialized: false  // ‚úÖ –§–ª–∞–≥ –ø–µ—Ä–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    
    // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï v4.7.1: –¢–∞–π–º–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ø–í–ù–û –≤ Component.onCompleted
    Timer {
        id: initTimer
        interval: 10  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û v4.7.1: –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ (–±—ã–ª–æ 50–º—Å)
        running: true  // ‚úÖ –ù–û–í–û–ï v4.7.2: –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏!
        repeat: false
        onTriggered: {
            console.log("üéØ Camera initialization complete - enabling smooth behaviors")
            root.cameraInitialized = true
        }
    }

    // ===============================================================
    // üöÄ PERFORMANCE OPTIMIZATION LAYER (preserved)
    // ===============================================================
    
    // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø #1: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    QtObject {
        id: animationCache
        
        // –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–≤—ã—á–∏—Å–ª—è—é—Ç—Å—è 1 —Ä–∞–∑ –∑–∞ —Ñ—Ä–µ–π–º –≤–º–µ—Å—Ç–æ 4—Ö)
        property real basePhase: animationTime * userFrequency * 2 * Math.PI
        property real globalPhaseRad: userPhaseGlobal * Math.PI / 180
        
        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Ñ–∞–∑—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–≥–ª–∞
        property real flPhaseRad: globalPhaseRad + userPhaseFL * Math.PI / 180
        property real frPhaseRad: globalPhaseRad + userPhaseFR * Math.PI / 180
        property real rlPhaseRad: globalPhaseRad + userPhaseRL * Math.PI / 180
        property real rrPhaseRad: globalPhaseRad + userPhaseRR * Math.PI / 180
        
        // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–Ω—É—Å—ã (4 sin() –≤—ã–∑–æ–≤–∞ ‚Üí 4 –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è)
        property real flSin: Math.sin(basePhase + flPhaseRad)
        property real frSin: Math.sin(basePhase + frPhaseRad)
        property real rlSin: Math.sin(basePhase + rlPhaseRad)
        property real rrSin: Math.sin(basePhase + rrPhaseRad)
    }
    
    // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø #2: –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    QtObject {
        id: geometryCache
        
        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–≤—ã—á–∏—Å–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
        property real leverLengthRodPos: userLeverLength * userRodPosition
        property real piOver180: Math.PI / 180
        property real _180OverPi: 180 / Math.PI
        
        // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
        property real cachedFovRad: cameraFov * piOver180
        property real cachedTanHalfFov: Math.tan(cachedFovRad / 2)
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∫–∞–º–µ—Ä—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        onCachedFovRadChanged: cachedTanHalfFov = Math.tan(cachedFovRad / 2)
        
        function calculateJRod(j_arm, baseAngle, leverAngle) {
            var totalAngleRad = (baseAngle + leverAngle) * piOver180
            return Qt.vector3d(
                j_arm.x + leverLengthRodPos * Math.cos(totalAngleRad),
                j_arm.y + leverLengthRodPos * Math.sin(totalAngleRad),
                j_arm.z
            )
        }
        
        function normalizeCylDirection(j_rod, j_tail) {
            var dx = j_rod.x - j_tail.x
            var dy = j_rod.y - j_tail.y
            var length = Math.hypot(dx, dy)
            return {
                direction: Qt.vector3d(dx, dy, 0),
                length: length,
                normalized: Qt.vector3d(dx/length, dy/length, 0),
                angle: Math.atan2(dy, dx) * _180OverPi + 90
            }
        }
    }

    // ===============================================================
    // CAMERA SYSTEM (preserved)
    // ===============================================================
    
    property vector3d pivot: Qt.vector3d(0, userBeamSize/2, userFrameLength/2)
    
    // Camera orbital parameters
    property real cameraDistance: 3500
    property real minDistance: 150
    property real maxDistance: 30000
    property real yawDeg: 225
    property real pitchDeg: -25
    
    property real panX: 0
    property real panY: 0
    
    // Camera properties
    property real cameraFov: 50.0
    property real cameraNear: 10.0      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ 2.0 ‚Üí 10.0 (—É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –º—É–∞—Ä–∞)
    property real cameraFar: 50000.0
    property real cameraSpeed: 1.0
    
    // Auto rotation
    property bool autoRotate: false
    property real autoRotateSpeed: 0.5

    // Mouse input state
    property bool mouseDown: false
    property int mouseButton: 0
    property real lastX: 0
    property real lastY: 0
    property real rotateSpeed: 0.35
    property real lastUpdateTime: 0  // ‚úÖ –ù–û–í–û–ï: Throttling –¥–ª—è mouse events

    // ===============================================================
    // ‚úÖ COMPLETE GRAPHICS PROPERTIES (All parameters from GraphicsPanel)
    // ===============================================================
    
    // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï v4.7: –Ø–≤–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç backgroundColor
    property string backgroundColor: "#2a2a2a"  // ‚úÖ –Ø–≤–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç - –ù–ï –ø—É—Å—Ç–æ–π!
    
    // Environment and IBL
    property bool iblEnabled: true         // ‚úÖ –ù–û–í–û–ï: IBL –≤–∫–ª—é—á–µ–Ω–∏–µ
    property real iblIntensity: 1.0        // ‚úÖ –ù–û–í–û–ï: IBL –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
    property url iblPrimarySource: Qt.resolvedUrl("../hdr/studio.hdr")
    property url iblFallbackSource: Qt.resolvedUrl("assets/studio_small_09_2k.hdr")
    readonly property bool iblReady: iblLoader.ready
    
    // Fog
    property bool fogEnabled: false
    property string fogColor: "#808080"
    property real fogDensity: 0.1
    
    // Quality settings  
    property int antialiasingMode: 3        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ 2 (MSAA) ‚Üí 3 (ProgressiveAA)
    property int antialiasingQuality: 2
    property bool shadowsEnabled: true
    property int shadowQuality: 2
    property real shadowSoftness: 1.5       // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ 0.5 ‚Üí 1.5 (–±–æ–ª–µ–µ –º—è–≥–∫–∏–µ —Ç–µ–Ω–∏)
    
    // Post-processing effects - EXPANDED
    property bool bloomEnabled: false
    property real bloomThreshold: 1.0       // ‚úÖ –ù–û–í–û–ï: –ü–æ—Ä–æ–≥ Bloom
    property real bloomIntensity: 0.3
    property bool ssaoEnabled: false
    property real ssaoRadius: 8.0           // ‚úÖ –ù–û–í–û–ï: –†–∞–¥–∏—É—Å SSAO
    property real ssaoIntensity: 0.5
    
    // Tonemap settings
    property bool tonemapEnabled: true      // ‚úÖ –ù–û–í–û–ï: –¢–æ–Ω–µ–º–∞–ø–ø–∏–Ω–≥
    property int tonemapMode: 3             // ‚úÖ –ù–û–í–û–ï: –†–µ–∂–∏–º —Ç–æ–Ω–µ–º–∞–ø–ø–∏–Ω–≥–∞
    
    // Advanced effects
    property bool depthOfFieldEnabled: false
    property real dofFocusDistance: 2000    // ‚úÖ –ù–û–í–û–ï: –î–∏—Å—Ç–∞–Ω—Ü–∏—è —Ñ–æ–∫—É—Å–∞
    property real dofFocusRange: 900        // ‚úÖ –ù–û–í–û–ï: –î–∏–∞–ø–∞–∑–æ–Ω —Ñ–æ–∫—É—Å–∞
    property bool vignetteEnabled: true    // ‚úÖ –ù–û–í–û–ï: –í–∏–Ω—å–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    property real vignetteStrength: 0.45    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Python
    property bool lensFlareEnabled: true
    property bool motionBlurEnabled: false  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ

    // Lighting control properties
    property real keyLightBrightness: 2.8       // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –±—ã–ª–æ 2.8
    property string keyLightColor: "#ffffff"
    property real keyLightAngleX: -30
    property real keyLightAngleY: -45
    property real fillLightBrightness: 1.2      // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –±—ã–ª–æ 1.2
    property string fillLightColor: "#f0f0ff"
    property real pointLightBrightness: 20000
    property real pointLightY: 1800
    property real rimLightBrightness: 1.5       // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –±—ã–ª–æ 1.5
    property string rimLightColor: "#ffffcc"
    property string pointLightColor: "#ffffff"
    property real pointLightFade: 0.00008

    // Material control properties - EXPANDED
    property real metalRoughness: 0.28
    property real metalMetalness: 1.0
    property real metalClearcoat: 0.25
    property real glassOpacity: 0.35
    property real glassRoughness: 0.05
    property real glassIOR: 1.52            // ‚úÖ –ù–û–í–û–ï: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è!
    property color frameBaseColor: "#cc0000"
    property real frameMetalness: 0.8
    property real frameRoughness: 0.4
    property real frameClearcoat: 0.1
    property real frameClearcoatRoughness: 0.2

    property color leverBaseColor: "#888888"
    property real leverMetalness: 1.0
    property real leverRoughness: 0.28
    property real leverClearcoat: 0.25
    property real leverClearcoatRoughness: 0.1

    property color tailRodColor: "#cccccc"
    property real tailRodMetalness: 1.0
    property real tailRodRoughness: 0.3

    property color cylinderBodyColor: "#ffffff"
    property real cylinderMetalness: 0.0
    property real cylinderRoughness: 0.05

    property color pistonBodyColor: "#ff0066"
    property color pistonBodyWarningColor: "#ff4444"
    property real pistonBodyMetalness: 1.0
    property real pistonBodyRoughness: 0.28

    property color pistonRodColor: "#cccccc"
    property color pistonRodWarningColor: "#ff0000"
    property real pistonRodMetalness: 1.0
    property real pistonRodRoughness: 0.28

    property color jointTailColor: "#0088ff"
    property color jointArmColor: "#ff8800"
    property color jointRodOkColor: "#00ff44"
    property color jointRodErrorColor: "#ff0000"
    property real jointMetalness: 0.9
    property real jointRoughness: 0.35

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    property alias frameColor: root.frameBaseColor      // –ê–ª–∏–∞—Å –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∏–º–µ–Ω–∏
    property alias leverColor: root.leverBaseColor      // –ê–ª–∏–∞—Å –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∏–º–µ–Ω–∏
    property alias cylinderColor: root.cylinderBodyColor // –ê–ª–∏–∞—Å –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∏–º–µ–Ω–∏
    property alias tailColor: root.tailRodColor         // –ê–ª–∏–∞—Å –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∏–º–µ–Ω–∏
    property alias rimColor: root.rimLightColor         // –ê–ª–∏–∞—Å –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∏–º–µ–Ω–∏
    property alias pointColor: root.pointLightColor     // –ê–ª–∏–∞—Å –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∏–º–µ–Ω–∏

    // ===============================================================
    // ANIMATION AND GEOMETRY PROPERTIES (preserved)
    // ===============================================================
    
    property real animationTime: 0.0
    property bool isRunning: false

    // User-controlled animation parameters
    property real userAmplitude: 8.0
    property real userFrequency: 1.0
    property real userPhaseGlobal: 0.0
    property real userPhaseFL: 0.0
    property real userPhaseFR: 0.0
    property real userPhaseRL: 0.0
    property real userPhaseRR: 0.0

    // Piston positions from Python
    property real userPistonPositionFL: 250.0
    property real userPistonPositionFR: 250.0
    property real userPistonPositionRL: 250.0
    property real userPistonPositionRR: 250.0

    // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï —É–≥–ª—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    property real fl_angle: isRunning ? userAmplitude * animationCache.flSin : 0.0
    property real fr_angle: isRunning ? userAmplitude * animationCache.frSin : 0.0
    property real rl_angle: isRunning ? userAmplitude * animationCache.rlSin : 0.0
    property real rr_angle: isRunning ? userAmplitude * animationCache.rrSin : 0.0

    // Geometry parameters
    property real userBeamSize: 120
    property real userFrameHeight: 650
    property real userFrameLength: 3200
    property real userLeverLength: 800
    property real userCylinderLength: 500
    property real userTrackWidth: 1600
    property real userFrameToPivot: 600
    property real userRodPosition: 0.6
    
    // ‚úÖ –°–¢–ê–†–´–ï –°–í–û–ô–°–¢–í–ê (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    property real userBoreHead: 80
    property real userBoreRod: 80
    property real userRodDiameter: 35
    property real userPistonThickness: 25
    property real userPistonRodLength: 200
    
    // ‚úÖ –ù–û–í–´–ï –°–í–û–ô–°–¢–í–ê –° –°–£–§–§–ò–ö–°–û–ú M (–æ—Å–Ω–æ–≤–Ω—ã–µ!)
    property real userCylDiamM: 80           // –º–º - –¥–∏–∞–º–µ—Ç—Ä —Ü–∏–ª–∏–Ω–¥—Ä–∞
    property real userStrokeM: 300           // –º–º - —Ö–æ–¥ –ø–æ—Ä—à–Ω—è
    property real userDeadGapM: 5            // –º–º - –º–µ—Ä—Ç–≤—ã–π –∑–∞–∑–æ—Ä
    property real userRodDiameterM: 35       // –º–º - –¥–∏–∞–º–µ—Ç—Ä —à—Ç–æ–∫–∞
    property real userPistonRodLengthM: 200  // –º–º - –¥–ª–∏–Ω–∞ —à—Ç–æ–∫–∞ –ø–æ—Ä—à–Ω—è
    property real userPistonThicknessM: 25   // –º–º - —Ç–æ–ª—â–∏–Ω–∞ –ø–æ—Ä—à–Ω—è
    
    // ===============================================================
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï SMOOTH CAMERA BEHAVIORS (—É—Å–ª–æ–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏!)
    // ===============================================================
    
    // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Behavior —Å—Ä–∞–±–∞—Ç—ã—é—Ç –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!
    Behavior on yawDeg { 
        enabled: root.cameraInitialized  // ‚úÖ –ù–û–í–û–ï: –í–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        NumberAnimation { 
            duration: 90
            easing.type: Easing.OutCubic 
        } 
    }
    
    Behavior on pitchDeg { 
        enabled: root.cameraInitialized  // ‚úÖ –ù–û–í–û–ï: –í–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        NumberAnimation { 
            duration: 90
            easing.type: Easing.OutCubic 
        } 
    }
    
    Behavior on cameraDistance { 
        enabled: root.cameraInitialized  // ‚úÖ –ù–û–í–û–ï: –í–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        NumberAnimation { 
            duration: 90
            easing.type: Easing.OutCubic 
        } 
    }
    
    Behavior on panX { 
        enabled: root.cameraInitialized  // ‚úÖ –ù–û–í–û–ï: –í–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        NumberAnimation { 
            duration: 60
            easing.type: Easing.OutQuad 
        } 
    }
    
    Behavior on panY { 
        enabled: root.cameraInitialized  // ‚úÖ –ù–û–í–û–ï: –í–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        NumberAnimation { 
            duration: 60
            easing.type: Easing.OutQuad 
        } 
    }

    // ===============================================================
    // UTILITY FUNCTIONS (preserved)
    // ===============================================================

    function clamp(v, a, b) { return Math.max(a, Math.min(b, v)); }
    
    function normAngleDeg(a) {
        var x = a % 360;
        if (x > 180) x -= 360;
        if (x < -180) x += 360;
        return x;
    }
    
    function autoFitFrame(marginFactor) {
        const L = Math.max(1, userFrameLength)
        const T = Math.max(1, userTrackWidth)  
        const H = Math.max(1, userFrameHeight)
        const margin = marginFactor !== undefined ? marginFactor : 1.15
        const R = 0.5 * Math.sqrt(L*L + T*T + H*H)
        const fov = cameraFov * Math.PI / 180.0
        const dist = (R * margin) / Math.tan(fov * 0.5)
        cameraDistance = Math.max(minDistance, Math.min(maxDistance, dist))
    }
    
    // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è resetView —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä—ã
    function resetView() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã –µ—Å–ª–∏ –æ–Ω–∞ —Ä–∞–∑—É–º–Ω–∞—è
        var preserveCamera = (Math.abs(yawDeg) < 720 && 
                             Math.abs(pitchDeg) < 90 && 
                             cameraDistance > minDistance && 
                             cameraDistance < maxDistance)
        
        if (preserveCamera) {
            console.log("üîÑ Soft reset: preserving camera position")
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ pivot, –∫–∞–º–µ—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è
            pivot = Qt.vector3d(0, userBeamSize/2, userFrameLength/2)
        } else {
            console.log("üîÑ Full reset: resetting camera to defaults")
            // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∫–∞–º–µ—Ä—ã
            pivot = Qt.vector3d(0, userBeamSize/2, userFrameLength/2)
            yawDeg = 225
            pitchDeg = -25
            panX = 0
            panY = 0
            autoFitFrame()
        }
        
        console.log("üîÑ View reset completed: pivot =", pivot, "distance =", cameraDistance)
    }
    
    // ‚úÖ –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –∫–∞–º–µ—Ä—ã
    function fullResetView() {
        console.log("üîÑ Full camera reset requested")
        pivot = Qt.vector3d(0, userBeamSize/2, userFrameLength/2)
        yawDeg = 225
        pitchDeg = -25
        panX = 0
        panY = 0
        autoFitFrame()
        console.log("üîÑ Full reset completed")
    }

    // ===============================================================
    // ‚úÖ COMPLETE BATCH UPDATE SYSTEM (All functions implemented)
    // ===============================================================
    
    // ===============================================================
    // ‚úÖ ENHANCED BATCH UPDATE SYSTEM (Conflict Resolution + Debug Logging)
    // ===============================================================
    
    function applyBatchedUpdates(updates) {
        console.log("üöÄ Applying batched updates with conflict resolution:", Object.keys(updates))
        
        // Disable default behaviors temporarily 
        var wasAutoUpdate = autoRotate
        autoRotate = false
        
        try {
            if (updates.geometry) applyGeometryUpdates(updates.geometry)
            if (updates.animation) applyAnimationUpdates(updates.animation)  
            if (updates.lighting) applyLightingUpdates(updates.lighting)
            if (updates.materials) applyMaterialUpdates(updates.materials)
            if (updates.environment) applyEnvironmentUpdates(updates.environment)
            if (updates.quality) applyQualityUpdates(updates.quality)
            if (updates.camera) applyCameraUpdates(updates.camera)
            if (updates.effects) applyEffectsUpdates(updates.effects)
            
            console.log("‚úÖ Batch updates completed successfully")
        } finally {
            // Restore auto behaviors
            autoRotate = wasAutoUpdate
        }
    }
    
    function applyGeometryUpdates(params) {
        console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        console.log("üìê main.qml: applyGeometryUpdates() with DETAILED DEBUG")
        console.log("   Received parameters:", Object.keys(params))
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ undefined –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º
        if (params.frameLength !== undefined && params.frameLength !== userFrameLength) {
            console.log("  üîß frameLength: " + userFrameLength + " ‚Üí " + params.frameLength + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
            userFrameLength = params.frameLength
        } else if (params.frameLength !== undefined) {
            console.log("  ‚è≠Ô∏è frameLength: " + params.frameLength + " (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)")
        }
        
        if (params.frameHeight !== undefined && params.frameHeight !== userFrameHeight) {
            console.log("  üîß frameHeight: " + userFrameHeight + " ‚Üí " + params.frameHeight + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
            userFrameHeight = params.frameHeight
        } else if (params.frameHeight !== undefined) {
            console.log("  ‚è≠Ô∏è frameHeight: " + params.frameHeight + " (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)")
        }
        
        if (params.frameBeamSize !== undefined && params.frameBeamSize !== userBeamSize) {
            console.log("  üîß frameBeamSize: " + userBeamSize + " ‚Üí " + params.frameBeamSize + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
            userBeamSize = params.frameBeamSize
        } else if (params.frameBeamSize !== undefined) {
            console.log("  ‚è≠Ô∏è frameBeamSize: " + params.frameBeamSize + " (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)")
        }
        
        if (params.leverLength !== undefined && params.leverLength !== userLeverLength) {
            console.log("  üîß leverLength: " + userLeverLength + " ‚Üí " + params.leverLength + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
            userLeverLength = params.leverLength
        } else if (params.leverLength !== undefined) {
            console.log("  ‚è≠Ô∏è leverLength: " + params.leverLength + " (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)")
        }
        
        if (params.cylinderBodyLength !== undefined && params.cylinderBodyLength !== userCylinderLength) {
            console.log("  üîß cylinderLength: " + userCylinderLength + " ‚Üí " + params.cylinderBodyLength + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
            userCylinderLength = params.cylinderBodyLength
        } else if (params.cylinderBodyLength !== undefined) {
            console.log("  ‚è≠Ô∏è cylinderLength: " + params.cylinderBodyLength + " (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)")
        }
        
        if (params.trackWidth !== undefined && params.trackWidth !== userTrackWidth) {
            console.log("  üîß trackWidth: " + userTrackWidth + " ‚Üí " + params.trackWidth + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
            userTrackWidth = params.trackWidth
        } else if (params.trackWidth !== undefined) {
            console.log("  ‚è≠Ô∏è trackWidth: " + params.trackWidth + " (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)")
        }
        
        if (params.frameToPivot !== undefined && params.frameToPivot !== userFrameToPivot) {
            console.log("  üîß frameToPivot: " + userFrameToPivot + " ‚Üí " + params.frameToPivot + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
            userFrameToPivot = params.frameToPivot
        } else if (params.frameToPivot !== undefined) {
            console.log("  ‚è≠Ô∏è frameToPivot: " + params.frameToPivot + " (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)")
        }
        
        if (params.rodPosition !== undefined && params.rodPosition !== userRodPosition) {
            console.log("  ‚ú® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô rodPosition: " + userRodPosition + " ‚Üí " + params.rodPosition + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
            userRodPosition = params.rodPosition
        } else if (params.rodPosition !== undefined) {
            console.log("  ‚è≠Ô∏è rodPosition: " + params.rodPosition + " (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)")
        }
        
        // ‚úÖ –ù–û–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –¶–ò–õ–ò–ù–î–†–ê –° –°–£–§–§–ò–ö–°–û–ú M
        if (params.cylDiamM !== undefined && params.cylDiamM !== userCylDiamM) {
            console.log("  üîß cylDiamM: " + userCylDiamM + " ‚Üí " + params.cylDiamM + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
            userCylDiamM = params.cylDiamM
            userBoreHead = params.cylDiamM  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            userBoreRod = params.cylDiamM
        } else if (params.cylDiamM !== undefined) {
            console.log("  ‚è≠Ô∏è cylDiamM: " + params.cylDiamM + " (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)")
        }
        
        if (params.strokeM !== undefined && params.strokeM !== userStrokeM) {
            console.log("  üîß strokeM: " + userStrokeM + " ‚Üí " + params.strokeM + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
            userStrokeM = params.strokeM
        } else if (params.strokeM !== undefined) {
            console.log("  ‚è≠Ô∏è strokeM: " + params.strokeM + " (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)")
        }
        
        if (params.deadGapM !== undefined && params.deadGapM !== userDeadGapM) {
            console.log("  üîß deadGapM: " + userDeadGapM + " ‚Üí " + params.deadGapM + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
            userDeadGapM = params.deadGapM
        } else if (params.deadGapM !== undefined) {
            console.log("  ‚è≠Ô∏è deadGapM: " + params.deadGapM + " (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)")
        }
        
        if (params.rodDiameterM !== undefined && params.rodDiameterM !== userRodDiameterM) {
            console.log("  üîß rodDiameterM: " + userRodDiameterM + " ‚Üí " + params.rodDiameterM + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
            userRodDiameterM = params.rodDiameterM
            userRodDiameter = params.rodDiameterM  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        } else if (params.rodDiameterM !== undefined) {
            console.log("  ‚è≠Ô∏è rodDiameterM: " + params.rodDiameterM + " (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)")
        }
        
        if (params.pistonRodLengthM !== undefined && params.pistonRodLengthM !== userPistonRodLengthM) {
            console.log("  üîß pistonRodLengthM: " + userPistonRodLengthM + " ‚Üí " + params.pistonRodLengthM + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
            userPistonRodLengthM = params.pistonRodLengthM
            userPistonRodLength = params.pistonRodLengthM  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        } else if (params.pistonRodLengthM !== undefined) {
            console.log("  ‚è≠Ô∏è pistonRodLengthM: " + params.pistonRodLengthM + " (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)")
        }
        
        if (params.pistonThicknessM !== undefined && params.pistonThicknessM !== userPistonThicknessM) {
            console.log("  üîß pistonThicknessM: " + userPistonThicknessM + " ‚Üí " + params.pistonThicknessM + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
            userPistonThicknessM = params.pistonThicknessM
            userPistonThickness = params.pistonThicknessM  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        } else if (params.pistonThicknessM !== undefined) {
            console.log("  ‚è≠Ô∏è pistonThicknessM: " + params.pistonThicknessM + " (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)")
        }
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û: –°–±—Ä–æ—Å –≤–∏–¥–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≥–µ–æ–º–µ—Ç—Ä–∏–∏
        var shouldResetView = (params.frameLength !== undefined || 
                              params.frameHeight !== undefined || 
                              params.trackWidth !== undefined)
        
        if (shouldResetView) {
            console.log("  üîÑ Significant geometry change - resetting view")
            resetView()
        } else {
            console.log("  ‚úÖ Minor geometry change - view preserved")
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ü–∏–ª–∏–Ω–¥—Ä–∞
        var isValid = true
        if (userStrokeM <= 0 || userStrokeM > 1000) {
            console.warn("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ H–æ–¥–∞ –ø–æ—Ä—à–Ω—è (strokeM):", userStrokeM)
            isValid = false
        }
        if (userDeadGapM < 0 || userDeadGapM > 20) {
            console.warn("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ M–µ—Ä—Ç–≤–æ–≥–æ –∑–∞–∑–æ—Ä–∞ (deadGapM):", userDeadGapM)
            isValid = false
        }
        if (userCylDiamM <= 0 || userCylDiamM > 100) {
            console.warn("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –î–∏–∞–º–µ—Ç—Ä–∞ —Ü–∏–ª–∏–Ω–¥—Ä–∞ (cylDiamM):", userCylDiamM)
            isValid = false
        }
        if (userRodDiameterM <= 0 || userRodDiameterM > 50) {
            console.warn("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –î–∏–∞–º–µ—Ç—Ä–∞ —à—Ç–æ–∫–∞ (rodDiameterM):", userRodDiameterM)
            isValid = false
        }
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        if (isValid) {
            console.log("  ‚úÖ Geometry updated successfully")
        } else {
            console.log("  ‚ö†Ô∏è Geometry update skipped due to invalid settings")
        }
        
        console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    }
    
    function applyAnimationUpdates(params) {
        console.log("üé¨ main.qml: applyAnimationUpdates() called")
        if (params.amplitude !== undefined) userAmplitude = params.amplitude
        if (params.frequency !== undefined) userFrequency = params.frequency
        if (params.phase !== undefined) userPhaseGlobal = params.phase
        if (params.lf_phase !== undefined) userPhaseFL = params.lf_phase
        if (params.rf_phase !== undefined) userPhaseFR = params.rf_phase
        if (params.lr_phase !== undefined) userPhaseRL = params.lr_phase
        if (params.rr_phase !== undefined) userPhaseRR = params.rr_phase
        console.log("  ‚úÖ Animation updated successfully")
    }
    
    function applyLightingUpdates(params) {
        console.log("üí° main.qml: applyLightingUpdates() called")
        console.log("üí° Received params:", JSON.stringify(params))
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –î–í–£–• —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö + –í–°–ï –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–º–µ–Ω–∞
        // –§–æ—Ä–º–∞—Ç 1: —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (params.key_light.brightness)
        // –§–æ—Ä–º–∞—Ç 2: –ø–ª–æ—Å–∫–∏–π –∏–∑ Python (params.keyLightBrightness)
        
        // Key Light
        if (params.key_light) {
            if (params.key_light.brightness !== undefined) {
                console.log("üí° Key Light brightness: " + keyLightBrightness + " ‚Üí " + params.key_light.brightness)
                keyLightBrightness = params.key_light.brightness
            }
            if (params.key_light.color !== undefined) keyLightColor = params.key_light.color
            if (params.key_light.angle_x !== undefined) keyLightAngleX = params.key_light.angle_x
            if (params.key_light.angle_y !== undefined) keyLightAngleY = params.key_light.angle_y
        }
        
        // ‚úÖ –ü–õ–û–°–ö–ò–ô —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Å–≤–µ—â–µ–Ω–∏—è
        if (params.keyLightBrightness !== undefined) {
            console.log("üí° Key Light brightness (flat): " + keyLightBrightness + " ‚Üí " + params.keyLightBrightness)
            keyLightBrightness = params.keyLightBrightness
        }
        if (params.keyLightColor !== undefined) keyLightColor = params.keyLightColor
        if (params.keyLightAngleX !== undefined) keyLightAngleX = params.keyLightAngleX
        if (params.keyLightAngleY !== undefined) keyLightAngleY = params.keyLightAngleY
        
        // Fill Light
        if (params.fill_light) {
            if (params.fill_light.brightness !== undefined) {
                console.log("üí° Fill Light brightness: " + fillLightBrightness + " ‚Üí " + params.fill_light.brightness)
                fillLightBrightness = params.fill_light.brightness
            }
            if (params.fill_light.color !== undefined) fillLightColor = params.fill_light.color
        }
        if (params.fillLightBrightness !== undefined) {
            console.log("üí° Fill Light brightness (flat): " + fillLightBrightness + " ‚Üí " + params.fillLightBrightness)
            fillLightBrightness = params.fillLightBrightness
        }
        if (params.fillLightColor !== undefined) fillLightColor = params.fillLightColor
        
        // Point Light
        if (params.point_light) {
            if (params.point_light.brightness !== undefined) {
                console.log("üí° Point Light brightness: " + pointLightBrightness + " ‚Üí " + params.point_light.brightness)
                pointLightBrightness = params.point_light.brightness
            }
            if (params.point_light.position_y !== undefined) pointLightY = params.point_light.position_y
            if (params.point_light.color !== undefined) pointLightColor = params.point_light.color
            if (params.point_light.fade !== undefined) pointLightFade = params.point_light.fade
        }
        if (params.pointLightBrightness !== undefined) {
            console.log("üí° Point Light brightness (flat): " + pointLightBrightness + " ‚Üí " + params.pointLightBrightness)
            pointLightBrightness = params.pointLightBrightness
        }
        if (params.pointLightColor !== undefined) pointLightColor = params.pointLightColor
        if (params.pointLightY !== undefined) pointLightY = params.pointLightY
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –í–°–ï–• –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∏–º–µ–Ω –¥–ª—è —Ç–æ—á–µ—á–Ω–æ–≥–æ —Å–≤–µ—Ç–∞
        if (params.pointFade !== undefined) {
            console.log("üí° Point Fade (Python name): " + pointLightFade + " ‚Üí " + params.pointFade)
            pointLightFade = params.pointFade
        }
        if (params.pointLightFade !== undefined) {
            console.log("üí° Point Fade (QML name): " + pointLightFade + " ‚Üí " + params.pointLightFade)
            pointLightFade = params.pointLightFade
        }
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: Rim Light - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –í–°–ï–• –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∏–º–µ–Ω
        if (params.rim_light) {
            if (params.rim_light.brightness !== undefined) {
                console.log("üí° Rim Light brightness: " + rimLightBrightness + " ‚Üí " + params.rim_light.brightness)
                rimLightBrightness = params.rim_light.brightness
            }
            if (params.rim_light.color !== undefined) rimLightColor = params.rim_light.color
        }
        
        // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ rimBrightness –∏–∑ Python
        if (params.rimBrightness !== undefined) {
            console.log("üí° Rim Light brightness (Python name): " + rimLightBrightness + " ‚Üí " + params.rimBrightness)
            rimLightBrightness = params.rimBrightness
        }
        if (params.rimLightBrightness !== undefined) {
            console.log("üí° Rim Light brightness (QML name): " + rimLightBrightness + " ‚Üí " + params.rimLightBrightness)
            rimLightBrightness = params.rimLightBrightness
        }
        
        // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ rimColor –∏–∑ Python  
        if (params.rimColor !== undefined) {
            console.log("üí° Rim Light color (Python name): " + rimLightColor + " ‚Üí " + params.rimColor)
            rimLightColor = params.rimColor
        }
        if (params.rimLightColor !== undefined) {
            console.log("üí° Rim Light color (QML name): " + rimLightColor + " ‚Üí " + params.rimLightColor)
            rimLightColor = params.rimLightColor
        }
        
        console.log("üí° Final lighting values:")
        console.log("   Key: " + keyLightBrightness + ", Fill: " + fillLightBrightness)
        console.log("   Point: " + pointLightBrightness + ", Rim: " + rimLightBrightness)
        console.log("  ‚úÖ Lighting updated successfully (ALL NAMES SUPPORTED)")
    }
    
    // ‚úÖ –ü–û–õ–ù–ê–Ø —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è updateMaterials()
    function applyMaterialUpdates(params) {
        console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        console.log("üé® main.qml: applyMaterialUpdates() with DETAILED DEBUG")
        console.log("   Received parameters:", Object.keys(params))
        console.log("üé® Received params:", JSON.stringify(params))
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –î–í–£–• —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –≤ –æ—Å–≤–µ—â–µ–Ω–∏–∏)
        // –§–æ—Ä–º–∞—Ç 1: —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (params.metal.roughness)
        // –§–æ—Ä–º–∞—Ç 2: –ø–ª–æ—Å–∫–∏–π –∏–∑ Python (params.metalRoughness)
        
        // Metal parameters
        if (params.metal !== undefined) {
            console.log("  üî© Processing METAL parameters...")
            if (params.metal.roughness !== undefined && params.metal.roughness !== metalRoughness) {
                console.log("    üîß metalRoughness: " + metalRoughness + " ‚Üí " + params.metal.roughness + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
                metalRoughness = params.metal.roughness
            }
            if (params.metal.metalness !== undefined && params.metal.metalness !== metalMetalness) {
                console.log("    üîß metalMetalness: " + metalMetalness + " ‚Üí " + params.metal.metalness + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
                metalMetalness = params.metal.metalness
            }
            if (params.metal.clearcoat !== undefined && params.metal.clearcoat !== metalClearcoat) {
                console.log("    üîß metalClearcoat: " + metalClearcoat + " ‚Üí " + params.metal.clearcoat + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
                metalClearcoat = params.metal.clearcoat
            }
        }
        
        // ‚úÖ –ù–û–í–û–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–ª–æ—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –º–µ—Ç–∞–ª–ª–∞
        if (params.metalRoughness !== undefined) {
            console.log("  üî© metalRoughness (flat): " + metalRoughness + " ‚Üí " + params.metalRoughness)
            metalRoughness = params.metalRoughness
        }
        if (params.metalMetalness !== undefined) {
            console.log("  üî© metalMetalness (flat): " + metalMetalness + " ‚Üí " + params.metalMetalness)
            metalMetalness = params.metalMetalness
        }
        if (params.metalClearcoat !== undefined) {
            console.log("  üî© metalClearcoat (flat): " + metalClearcoat + " ‚Üí " + params.metalClearcoat)
            metalClearcoat = params.metalClearcoat
        }
        
        // Glass parameters
        if (params.glass !== undefined) {
            console.log("  ü™ü Processing GLASS parameters...")
            if (params.glass.opacity !== undefined && params.glass.opacity !== glassOpacity) {
                console.log("    üîß glassOpacity: " + glassOpacity + " ‚Üí " + params.glass.opacity + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
                glassOpacity = params.glass.opacity
            }
            if (params.glass.roughness !== undefined && params.glass.roughness !== glassRoughness) {
                console.log("    üîß glassRoughness: " + glassRoughness + " ‚Üí " + params.glass.roughness + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
                glassRoughness = params.glass.roughness
            }
            // ‚úÖ –ù–û–í–û–ï: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è
            if (params.glass.ior !== undefined && params.glass.ior !== glassIOR) {
                console.log("    üîç glassIOR (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô): " + glassIOR + " ‚Üí " + params.glass.ior + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
                glassIOR = params.glass.ior
            }
        }
        
        // ‚úÖ –ù–û–í–û–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–ª–æ—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è —Å—Ç–µ–∫–ª–∞
        if (params.glassOpacity !== undefined) {
            console.log("  ü™ü glassOpacity (flat): " + glassOpacity + " ‚Üí " + params.glassOpacity)
            glassOpacity = params.glassOpacity
        }
        if (params.glassRoughness !== undefined) {
            console.log("  ü™ü glassRoughness (flat): " + glassRoughness + " ‚Üí " + params.glassRoughness)
            glassRoughness = params.glassRoughness
        }
        if (params.glassIOR !== undefined) {
            console.log("  üîç glassIOR (flat): " + glassIOR + " ‚Üí " + params.glassIOR)
            glassIOR = params.glassIOR
        }
        
        // Frame parameters
        if (params.frame !== undefined) {
            console.log("  üèóÔ∏è Processing FRAME parameters...")
            
            // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–≤–µ—Ç–∞ —Ä–∞–º—ã –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞!
            if (params.frame.color !== undefined && params.frame.color !== frameBaseColor) {
                console.log("    üé® frameBaseColor (–ò–°–ü–†–ê–í–õ–ï–ù–û): " + frameBaseColor + " ‚Üí " + params.frame.color + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
                frameBaseColor = params.frame.color
            }
            
            if (params.frame.metalness !== undefined && params.frame.metalness !== frameMetalness) {
                console.log("    üîß frameMetalness: " + frameMetalness + " ‚Üí " + params.frame.metalness + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
                frameMetalness = params.frame.metalness
            }
            if (params.frame.roughness !== undefined && params.frame.roughness !== frameRoughness) {
                console.log("    üîß frameRoughness: " + frameRoughness + " ‚Üí " + params.frame.roughness + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
                frameRoughness = params.frame.roughness
            }
        }
        
        // ‚úÖ –ù–û–í–û–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–ª–æ—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è —Ä–∞–º—ã
        if (params.frameMetalness !== undefined) {
            console.log("  üèóÔ∏è frameMetalness (flat): " + frameMetalness + " ‚Üí " + params.frameMetalness)
            frameMetalness = params.frameMetalness
        }
        if (params.frameRoughness !== undefined) {
            console.log("  üèóÔ∏è frameRoughness (flat): " + frameRoughness + " ‚Üí " + params.frameRoughness)
            frameRoughness = params.frameRoughness
        }
      
        // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–≤–µ—Ç–æ–≤ –í–°–ï –ú–ê–¢–ï–†–ò–ê–õ–û–í –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–µ—Å—Ç!
        
        // Lever (—Ä—ã—á–∞–≥–∏)
        if (params.lever !== undefined) {
            console.log("  ü¶æ Processing LEVER parameters...")
            if (params.lever.color !== undefined && params.lever.color !== leverBaseColor) {
                console.log("    üé® leverBaseColor: " + leverBaseColor + " ‚Üí " + params.lever.color + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
                leverBaseColor = params.lever.color
            }
        }
        
        // Tail (—Ö–≤–æ—Å—Ç–æ–≤–æ–π —à—Ç–æ–∫)
        if (params.tail !== undefined) {
            console.log("  üî© Processing TAIL parameters...")
            if (params.tail.color !== undefined && params.tail.color !== tailRodColor) {
                console.log("    üé® tailRodColor: " + tailRodColor + " ‚Üí " + params.tail.color + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
                tailRodColor = params.tail.color
            }
        }
        
        // Cylinder (–∫–æ—Ä–ø—É—Å —Ü–∏–ª–∏–Ω–¥—Ä–∞)
        if (params.cylinder !== undefined) {
            console.log("  üõ¢Ô∏è Processing CYLINDER parameters...")
            if (params.cylinder.color !== undefined && params.cylinder.color !== cylinderBodyColor) {
                console.log("    üé® cylinderBodyColor: " + cylinderBodyColor + " ‚Üí " + params.cylinder.color + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
                cylinderBodyColor = params.cylinder.color
            }
        }
        
        // Piston body (–∫–æ—Ä–ø—É—Å –ø–æ—Ä—à–Ω—è)
        if (params.piston_body !== undefined) {
            console.log("  ‚öôÔ∏è Processing PISTON BODY parameters...")
            if (params.piston_body.color !== undefined && params.piston_body.color !== pistonBodyColor) {
                console.log("    üé® pistonBodyColor: " + pistonBodyColor + " ‚Üí " + params.piston_body.color + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
                pistonBodyColor = params.piston_body.color
            }
            if (params.piston_body.warning_color !== undefined && params.piston_body.warning_color !== pistonBodyWarningColor) {
                console.log("    üö® pistonBodyWarningColor: " + pistonBodyWarningColor + " ‚Üí " + params.piston_body.warning_color + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
                pistonBodyWarningColor = params.piston_body.warning_color
            }
        }
        
        // Piston rod (—à—Ç–æ–∫ –ø–æ—Ä—à–Ω—è)
        if (params.piston_rod !== undefined) {
            console.log("  üîß Processing PISTON ROD parameters...")
            if (params.piston_rod.color !== undefined && params.piston_rod.color !== pistonRodColor) {
                console.log("    üé® pistonRodColor: " + pistonRodColor + " ‚Üí " + params.piston_rod.color + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
                pistonRodColor = params.piston_rod.color
            }
            if (params.piston_rod.warning_color !== undefined && params.piston_rod.warning_color !== pistonRodWarningColor) {
                console.log("    üö® pistonRodWarningColor: " + pistonRodWarningColor + " ‚Üí " + params.piston_rod.warning_color + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
                pistonRodWarningColor = params.piston_rod.warning_color
            }
        }
        
        // Joints (—à–∞—Ä–Ω–∏—Ä—ã)
        if (params.joint !== undefined) {
            console.log("  üîó Processing JOINT parameters...")
            if (params.joint.tail_color !== undefined && params.joint.tail_color !== jointTailColor) {
                console.log("    üé® jointTailColor: " + jointTailColor + " ‚Üí " + params.joint.tail_color + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
                jointTailColor = params.joint.tail_color
            }
            if (params.joint.arm_color !== undefined && params.joint.arm_color !== jointArmColor) {
                console.log("    üé® jointArmColor: " + jointArmColor + " ‚Üí " + params.joint.arm_color + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
                jointArmColor = params.joint.arm_color
            }
            if (params.joint.rod_ok_color !== undefined && params.joint.rod_ok_color !== jointRodOkColor) {
                console.log("    üé® jointRodOkColor: " + jointRodOkColor + " ‚Üí " + params.joint.rod_ok_color + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
                jointRodOkColor = params.joint.rod_ok_color
            }
            if (params.joint.rod_error_color !== undefined && params.joint.rod_error_color !== jointRodErrorColor) {
                console.log("    üé® jointRodErrorColor: " + jointRodErrorColor + " ‚Üí " + params.joint.rod_error_color + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
                jointRodErrorColor = params.joint.rod_error_color
            }
        }
        
        console.log("üé® Final material values:")
        console.log("   Metal: roughness=" + metalRoughness + ", metalness=" + metalMetalness)
        console.log("   Glass: opacity=" + glassOpacity + ", IOR=" + glassIOR)
        console.log("   Frame: metalness=" + frameMetalness + ", roughness=" + frameRoughness + ", color=" + frameBaseColor)
        
        console.log("  ‚úÖ Materials updated successfully (including IOR AND ALL COLORS)")
        console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        if (params.colors !== undefined) {
            console.log("  üé® Processing material COLORS...")
            if (params.colors.frameBaseColor !== undefined) {
                console.log("    üîß frameBaseColor: " + frameBaseColor + " ‚Üí " + params.colors.frameBaseColor)
                frameBaseColor = params.colors.frameBaseColor
            }
            if (params.colors.leverBaseColor !== undefined) {
                console.log("    üîß leverBaseColor: " + leverBaseColor + " ‚Üí " + params.colors.leverBaseColor)
                leverBaseColor = params.colors.leverBaseColor
            }
            if (params.colors.tailRodColor !== undefined) {
                console.log("    üîß tailRodColor: " + tailRodColor + " ‚Üí " + params.colors.tailRodColor)
                tailRodColor = params.colors.tailRodColor
            }
            if (params.colors.cylinderBodyColor !== undefined) {
                console.log("    üîß cylinderBodyColor: " + cylinderBodyColor + " ‚Üí " + params.colors.cylinderBodyColor)
                cylinderBodyColor = params.colors.cylinderBodyColor
            }
            if (params.colors.pistonBodyColor !== undefined) {
                console.log("    üîß pistonBodyColor: " + pistonBodyColor + " ‚Üí " + params.colors.pistonBodyColor)
                pistonBodyColor = params.colors.pistonBodyColor
            }
            if (params.colors.pistonRodColor !== undefined) {
                console.log("    üîß pistonRodColor: " + pistonRodColor + " ‚Üí " + params.colors.pistonRodColor)
                pistonRodColor = params.colors.pistonRodColor
            }
            if (params.colors.jointTailColor !== undefined) {
                console.log("    üîß jointTailColor: " + jointTailColor + " ‚Üí " + params.colors.jointTailColor)
                jointTailColor = params.colors.jointTailColor
            }
            if (params.colors.jointArmColor !== undefined) {
                console.log("    üîß jointArmColor: " + jointArmColor + " ‚Üí " + params.colors.jointArmColor)
                jointArmColor = params.colors.jointArmColor
            }
            if (params.colors.jointRodOkColor !== undefined) {
                console.log("    üîß jointRodOkColor: " + jointRodOkColor + " ‚Üí " + params.colors.jointRodOkColor)
                jointRodOkColor = params.colors.jointRodOkColor
            }
            if (params.colors.jointRodErrorColor !== undefined) {
                console.log("    üîß jointRodErrorColor: " + jointRodErrorColor + " ‚Üí " + params.colors.jointRodErrorColor)
                jointRodErrorColor = params.colors.jointRodErrorColor
            }
            
            console.log("  üé® Material colors updated:", params.colors)
        }
    }

    // ‚úÖ –ü–û–õ–ù–ê—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è updateEnvironment()
    function applyEnvironmentUpdates(params) {
        console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        console.log("üåç main.qml: applyEnvironmentUpdates() with DETAILED DEBUG")
        console.log("   Received parameters:", Object.keys(params))
        console.log("üåç Received params:", JSON.stringify(params))
        
        // Background Color (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ IBL –≤—ã–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω)
        if (params.background_color !== undefined && params.background_color !== backgroundColor) {
            console.log("  üîß backgroundColor: " + backgroundColor + " ‚Üí " + params.background_color + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
            backgroundColor = params.background_color
        } else if (params.backgroundColor !== undefined) {
            console.log("  üîß backgroundColor (flat): " + backgroundColor + " ‚Üí " + params.backgroundColor)
            backgroundColor = params.backgroundColor
        }
        
        // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: Skybox –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —á–µ—Ä–µ–∑ IBL
        // –ï—Å–ª–∏ Python –ø—ã—Ç–∞–µ—Ç—Å—è —É–ø—Ä–∞–≤–ª—è—Ç—å skybox –Ω–∞–ø—Ä—è–º—É—é - –ª–æ–≥–∏—Ä—É–µ–º –Ω–æ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º
        if (params.skybox_enabled !== undefined || params.skyboxEnabled !== undefined) {
            console.log("  ‚ÑπÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø: skybox —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ IBL (iblEnabled)")
        }
        if (params.skybox_blur !== undefined || params.skyboxBlur !== undefined) {
            console.log("  ‚ÑπÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø: skybox blur –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ IBL —Ä–µ–∂–∏–º–µ")
        }
        
        // IBL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–ª—è –æ—Å–≤–µ—â–µ–Ω–∏—è –ò —Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ SkyBox!)
        if (params.ibl_enabled !== undefined && params.ibl_enabled !== iblEnabled) {
            console.log("  üåü IBL enabled (–æ—Å–≤–µ—â–µ–Ω–∏–µ + —Ñ–æ–Ω): " + iblEnabled + " ‚Üí " + params.ibl_enabled + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
            iblEnabled = params.ibl_enabled
        } else if (params.iblEnabled !== undefined) {
            console.log("  üåü IBL enabled (flat): " + iblEnabled + " ‚Üí " + params.iblEnabled)
            iblEnabled = params.iblEnabled
        }
        
        if (params.ibl_intensity !== undefined && params.ibl_intensity !== iblIntensity) {
            console.log("  üåü IBL intensity: " + iblIntensity + " ‚Üí " + params.ibl_intensity + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
            iblIntensity = params.ibl_intensity
        } else if (params.iblIntensity !== undefined) {
            console.log("  üåü IBL intensity (flat): " + iblIntensity + " ‚Üí " + params.iblIntensity)
            iblIntensity = params.iblIntensity
        }
        
        // Fog –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if (params.fog_enabled !== undefined && params.fog_enabled !== fogEnabled) {
            console.log("  üå´Ô∏è Fog enabled: " + fogEnabled + " ‚Üí " + params.fog_enabled + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
            fogEnabled = params.fog_enabled
        } else if (params.fogEnabled !== undefined) {
            console.log("  üå´Ô∏è Fog enabled (flat): " + fogEnabled + " ‚Üí " + params.fogEnabled)
            fogEnabled = params.fogEnabled
        }
        
        if (params.fog_color !== undefined && params.fog_color !== fogColor) {
            console.log("  üå´Ô∏è Fog color: " + fogColor + " ‚Üí " + params.fog_color + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
            fogColor = params.fog_color
        } else if (params.fogColor !== undefined) {
            console.log("  üå´Ô∏è Fog color (flat): " + fogColor + " ‚Üí " + params.fogColor)
            fogColor = params.fogColor
        }
        
        if (params.fog_density !== undefined && params.fog_density !== fogDensity) {
            console.log("  üå´Ô∏è Fog density: " + fogDensity + " ‚Üí " + params.fog_density + " (–ò–ó–ú–ï–ù–ï–ù–ò–ï!)")
            fogDensity = params.fog_density
        } else if (params.fogDensity !== undefined) {
            console.log("  üå´Ô∏è Fog density (flat): " + fogDensity + " ‚Üí " + params.fogDensity)
            fogDensity = params.fogDensity
        }
        
        console.log("üåç Final environment values:")
        console.log("   Background: " + (iblEnabled && iblReady ? "SkyBox HDR" : backgroundColor + " (color)"))
        console.log("   IBL: enabled=" + iblEnabled + ", intensity=" + iblIntensity + ", ready=" + iblReady)
        console.log("   Fog: enabled=" + fogEnabled + ", density=" + fogDensity)
        
        console.log("  ‚úÖ Environment updated (SkyBox –∏–∑ IBL –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤)")
        console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    }

    // ===============================================================
    // 3D SCENE (ENHANCED with all new parameters)
    // ===============================================================

    View3D {
        id: view3d
        anchors.fill: parent

        environment: ExtendedSceneEnvironment {
            id: mainEnvironment
            
            // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ò–°–ü–û–õ–¨–ó–£–ï–ú SKYBOX –ò–ó IBL –ö–û–ì–î–ê –û–ù –ì–û–¢–û–í!
            // SkyBox –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç HDR –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ–Ω
            backgroundMode: (iblEnabled && iblReady) ? SceneEnvironment.SkyBox : SceneEnvironment.Color
            clearColor: backgroundColor
            
            // ‚úÖ IBL –¥–ª—è –æ—Å–≤–µ—â–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –∫–æ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤)
            lightProbe: iblEnabled && iblReady ? iblLoader.probe : null
            probeExposure: iblIntensity
            
            // ‚úÖ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–±—ã (–Ω–µ –≤—Ä–∞—â–∞–µ—Ç—Å—è —Å –∫–∞–º–µ—Ä–æ–π)
            probeOrientation: Qt.vector3d(0, 0, 0)  
            
            fogEnabled: fogEnabled
            fogColor: fogColor
            fogDensity: fogDensity
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û: –ü—Ä—è–º–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ tonemapMode (–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï v4.4)
            tonemapMode: {
                if (!root.tonemapEnabled)
                    return SceneEnvironment.TonemapModeNone
                
                switch (root.tonemapMode) {
                    case 3: return SceneEnvironment.TonemapModeFilmic
                    case 2: return SceneEnvironment.TonemapModeReinhard
                    case 1: return SceneEnvironment.TonemapModeLinear
                    case 0: return SceneEnvironment.TonemapModeNone
                    default: return SceneEnvironment.TonemapModeFilmic
                }
            }
            
            // ‚úÖ –ù–û–í–û–ï: Antialiasing –∏ –∫–∞—á–µ—Å—Ç–≤–æ
            antialiasingMode: antialiasingMode === 3 ? SceneEnvironment.ProgressiveAA :
                             antialiasingMode === 2 ? SceneEnvironment.MSAA :
                             antialiasingMode === 1 ? SceneEnvironment.SSAA :
                             SceneEnvironment.NoAA
            antialiasingQuality: {
                switch (root.antialiasingQuality) {
                    case 2: return SceneEnvironment.High
                    case 1: return SceneEnvironment.Medium
                    case 0: return SceneEnvironment.Low
                    default: return SceneEnvironment.High
                }
            }
            
            // ‚úÖ –ù–û–í–û–ï: Post-processing effects
            bloomEnabled: bloomEnabled
            bloomIntensity: bloomIntensity
            bloomThreshold: bloomThreshold
            ssaoEnabled: ssaoEnabled
            ssaoStrength: ssaoIntensity * 100
            ssaoDistance: ssaoRadius
            ssaoSoftness: 20
            ssaoDither: true
            ssaoSampleRate: 3
            
            glowEnabled: bloomEnabled
            glowIntensity: bloomIntensity
            glowBloom: 0.5
            glowStrength: 0.8
            glowQualityHigh: true
            glowUseBicubicUpscale: true
            glowHDRMinimumValue: bloomThreshold
            glowHDRMaximumValue: 8.0
            glowHDRScale: 2.0
            
            lensFlareEnabled: lensFlareEnabled
            lensFlareGhostCount: 3
            lensFlareGhostDispersal: 0.6
            lensFlareHaloWidth: 0.25
            lensFlareBloomBias: 0.35
            lensFlareStretchToAspect: 1.0
            
            depthOfFieldEnabled: depthOfFieldEnabled
            depthOfFieldFocusDistance: dofFocusDistance
            depthOfFieldFocusRange: dofFocusRange
            depthOfFieldBlurAmount: 3.0
        }

        // Camera rig (preserved)
        Node {
            id: cameraRig
            position: root.pivot
            eulerRotation: Qt.vector3d(root.pitchDeg, root.yawDeg, 0)

            Node {
                id: panNode
                position: Qt.vector3d(root.panX, root.panY, 0)

                PerspectiveCamera {
                    id: camera
                    position: Qt.vector3d(0, 0, root.cameraDistance)
                    fieldOfView: root.cameraFov
                    clipNear: root.cameraNear
                    clipFar: root.cameraFar
                }
            }
        }

        // Lighting (with shadow softness)
        DirectionalLight {
            id: keyLight
            eulerRotation.x: keyLightAngleX
            eulerRotation.y: keyLightAngleY
            brightness: keyLightBrightness
            color: keyLightColor
            castsShadow: shadowsEnabled
            shadowMapQuality: shadowQuality === 2 ? Light.ShadowMapQualityHigh :
                             shadowQuality === 1 ? Light.ShadowMapQualityMedium :
                             Light.ShadowMapQualityLow
            shadowFactor: 75
            shadowBias: 0.001  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–£–ê–†–ê: —É–º–µ–Ω—å—à–µ–Ω–æ —Å 0.0015
            shadowFilter: 8 + Math.max(0, shadowSoftness) * 56   // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ 4 + ... * 28 ‚Üí 8 + ... * 56 (–¥–∏–∞–ø–∞–∑–æ–Ω 8-92)
        }
        
        DirectionalLight {
            id: fillLight
            eulerRotation.x: -60
            eulerRotation.y: 135
            brightness: fillLightBrightness
            color: fillLightColor
            castsShadow: false
        }
        
        DirectionalLight {
            id: rimLight
            eulerRotation.x: 15
            eulerRotation.y: 180
            brightness: rimLightBrightness
            color: rimLightColor
            castsShadow: false
        }
        
        PointLight {
            id: accentLight
            position: Qt.vector3d(0, pointLightY, 1500)
            brightness: pointLightBrightness
            color: pointLightColor
            quadraticFade: Math.max(0.0, pointLightFade)
        }

        // ===============================================================
        // SUSPENSION SYSTEM GEOMETRY (with IOR support)
        // ===============================================================

        // U-FRAME (3 beams) with controlled materials
        Model {
            source: "#Cube"
            position: Qt.vector3d(0, userBeamSize/2, userFrameLength/2)
            scale: Qt.vector3d(userBeamSize/100, userBeamSize/100, userFrameLength/100)
            materials: PrincipledMaterial {
                baseColor: frameBaseColor                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                metalness: frameMetalness
                roughness: frameRoughness
                clearcoatAmount: frameClearcoat
                clearcoatRoughnessAmount: frameClearcoatRoughness
            }
        }
        Model {
            source: "#Cube"
            position: Qt.vector3d(0, userBeamSize + userFrameHeight/2, userBeamSize/2)
            scale: Qt.vector3d(userBeamSize/100, userFrameHeight/100, userBeamSize/100)
            materials: PrincipledMaterial {
                baseColor: frameBaseColor                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                metalness: frameMetalness
                roughness: frameRoughness
                clearcoatAmount: frameClearcoat
                clearcoatRoughnessAmount: frameClearcoatRoughness
            }
        }
        Model {
            source: "#Cube"
            position: Qt.vector3d(0, userBeamSize + userFrameHeight/2, userFrameLength - userBeamSize/2)
            scale: Qt.vector3d(userBeamSize/100, userFrameHeight/100, userBeamSize/100)
            materials: PrincipledMaterial {
                baseColor: frameBaseColor                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                metalness: frameMetalness
                roughness: frameRoughness
                clearcoatAmount: frameClearcoat
                clearcoatRoughnessAmount: frameClearcoatRoughness
            }
        }

        // ‚úÖ OPTIMIZED SUSPENSION COMPONENT (with CORRECT rod length calculation and ALL material colors)
        component OptimizedSuspensionCorner: Node {
            property vector3d j_arm
            property vector3d j_tail  
            property real leverAngle
            property real pistonPositionFromPython: 250.0
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
            // –ë–∞–∑–æ–≤–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è —Ä—ã—á–∞–≥–∞
            readonly property real baseAngle: (j_arm.x < 0) ? 180 : 0
            readonly property real totalAngle: baseAngle + leverAngle
            readonly property real totalAngleRad: totalAngle * Math.PI / 180
            
            // –ü–æ–∑–∏—Ü–∏—è —à–∞—Ä–Ω–∏—Ä–∞ —à—Ç–æ–∫–∞ –Ω–∞ —Ä—ã—á–∞–≥–µ
            readonly property vector3d j_rod: Qt.vector3d(
                j_arm.x + (userLeverLength * userRodPosition) * Math.cos(totalAngleRad),
                j_arm.y + (userLeverLength * userRodPosition) * Math.sin(totalAngleRad),
                j_arm.z
            )
            
            // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç j_tail –∫ j_rod (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–∏–ª–∏–Ω–¥—Ä–∞)
            readonly property vector3d cylDirection: Qt.vector3d(j_rod.x - j_tail.x, j_rod.y - j_tail.y, 0)
            readonly property real cylDirectionLength: Math.hypot(cylDirection.x, cylDirection.y)
            readonly property vector3d cylDirectionNorm: Qt.vector3d(
                cylDirection.x / cylDirectionLength,
                cylDirection.y / cylDirectionLength,
                0
            )
            readonly property real cylAngle: Math.atan2(cylDirection.y, cylDirection.x) * 180 / Math.PI + 90
            readonly property real invCylAngle: cylAngle - 180
            
            // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª–∏–Ω
            readonly property real tailRodLength: 100                    // –º–º - —Ö–≤–æ—Å—Ç–æ–≤–æ–π —à—Ç–æ–∫
            readonly property real pistonRodLength: userPistonRodLength  // –º–º - —à—Ç–æ–∫ –ø–æ—Ä—à–Ω—è (–ö–û–ù–°–¢–ê–ù–¢–ê!)
            
            // –ë–∞–∑–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Ü–∏–ª–∏–Ω–¥—Ä–∞
            readonly property vector3d tailRodEnd: Qt.vector3d(
                j_tail.x + cylDirectionNorm.x * tailRodLength,
                j_tail.y + cylDirectionNorm.y * tailRodLength,
                j_tail.z
            )
            
            readonly property vector3d cylinderEnd: Qt.vector3d(
                tailRodEnd.x + cylDirectionNorm.x * userCylinderLength,
                tailRodEnd.y + cylDirectionNorm.y * userCylinderLength,
                tailRodEnd.z
            )
            
            // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢ –ü–û–ó–ò–¶–ò–ò –ü–û–†–®–ù–Ø –¥–ª—è –ö–û–ù–°–¢–ê–ù–¢–ù–û–ô –¥–ª–∏–Ω—ã —à—Ç–æ–∫–∞
            // –ü—Ä–æ–µ–∫—Ü–∏—è j_rod –Ω–∞ –æ—Å—å —Ü–∏–ª–∏–Ω–¥—Ä–∞
            readonly property vector3d j_rodToCylStart: Qt.vector3d(j_rod.x - tailRodEnd.x, j_rod.y - tailRodEnd.y, 0)
            readonly property real projectionOnCylAxis: j_rodToCylStart.x * cylDirectionNorm.x + j_rodToCylStart.y * cylDirectionNorm.y
            
            // –¢–æ—á–∫–∞ –Ω–∞ –æ—Å–∏ —Ü–∏–ª–∏–Ω–¥—Ä–∞ –±–ª–∏–∂–∞–π—à–∞—è –∫ j_rod
            readonly property vector3d j_rodProjection: Qt.vector3d(
                tailRodEnd.x + cylDirectionNorm.x * projectionOnCylAxis,
                tailRodEnd.y + cylDirectionNorm.y * projectionOnCylAxis,
                tailRodEnd.z
            )
            
            // –ü–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç j_rod –¥–æ –æ—Å–∏ —Ü–∏–ª–∏–Ω–¥—Ä–∞
            readonly property real perpendicularDistance: Math.hypot(
                j_rod.x - j_rodProjection.x,
                j_rod.y - j_rodProjection.y
            )
            
            // ‚úÖ –†–ï–®–ï–ù–ò–ï –¢–†–ï–£–ì–û–õ–¨–ù–ò–ö–ê: –Ω–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Ä—à–Ω—è –¥–ª—è –ö–ü–û–ù–°–¢–ê–ù–¢–ù–û–ô –¥–ª–∏–Ω—ã —à—Ç–æ–∫–∞
            // –¢–µ–æ—Ä–µ–º–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞: rod_length¬≤ = perpendicular_distance¬≤ + axial_distance¬≤
            readonly property real rodLengthSquared: pistonRodLength * pistonRodLength
            readonly property real perpDistSquared: perpendicularDistance * perpendicularDistance
            readonly property real axialDistanceFromProjection: Math.sqrt(Math.max(0, rodLengthSquared - perpDistSquared))
            
            // –ü–æ–∑–∏—Ü–∏—è –ø–æ—Ä—à–Ω—è –Ω–∞ –æ—Å–∏ —Ü–∏–ª–∏–Ω–¥—Ä–∞ (–Ω–∞–∑–∞–¥ –æ—Ç –ø—Ä–æ–µ–∫—Ü–∏–∏ j_rod)
            readonly property real pistonPositionOnAxis: projectionOnCylAxis - axialDistanceFromProjection
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ—Ä—à–µ–Ω—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ü–∏–ª–∏–Ω–¥—Ä–∞
            readonly property real clampedPistonPosition: Math.max(10, Math.min(userCylinderLength - 10, pistonPositionOnAxis))
            
            // ‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ø–æ–∑–∏—Ü–∏—è –ø–æ—Ä—à–Ω—è (–Ω–∞ –æ—Å–∏ —Ü–∏–ª–∏–Ω–¥—Ä–∞)
            readonly property vector3d pistonCenter: Qt.vector3d(
                tailRodEnd.x + cylDirectionNorm.x * clampedPistonPosition,
                tailRodEnd.y + cylDirectionNorm.y * clampedPistonPosition,
                tailRodEnd.z
            )
            
            // ‚úÖ –ü–†–û–í–ï–†–ö–ê: —Ä–µ–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —à—Ç–æ–∫–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
            readonly property real actualRodLength: Math.hypot(j_rod.x - pistonCenter.x, j_rod.y - pistonCenter.y)
            readonly property real rodLengthError: Math.abs(actualRodLength - pistonRodLength)
            
            // LEVER (—Ä—ã—á–∞–≥) with proper colors
            Model {
                source: "#Cube"
                position: Qt.vector3d(
                    j_arm.x + (userLeverLength/2) * Math.cos(totalAngleRad), 
                    j_arm.y + (userLeverLength/2) * Math.sin(totalAngleRad), 
                    j_arm.z
                )
                scale: Qt.vector3d(userLeverLength/100, 0.8, 0.8)
                eulerRotation: Qt.vector3d(0, 0, totalAngle)
                materials: PrincipledMaterial {
                    baseColor: leverBaseColor
                    metalness: leverMetalness
                    roughness: leverRoughness
                    clearcoatAmount: leverClearcoat
                    clearcoatRoughnessAmount: leverClearcoatRoughness
                }
            }
            
            // Tail (—Ö–≤–æ—Å—Ç–æ–≤–æ–π —à—Ç–æ–∫) with proper colors
            Model {
                source: "#Cylinder"
                position: Qt.vector3d((j_tail.x + tailRodEnd.x)/2, (j_tail.y + tailRodEnd.y)/2, j_tail.z)
                scale: Qt.vector3d(userRodDiameter/100, tailRodLength/100, userRodDiameter/100)
                eulerRotation: Qt.vector3d(0, 0, cylAngle)
                materials: PrincipledMaterial {
                    baseColor: tailRodColor
                    metalness: tailRodMetalness
                    roughness: tailRodRoughness
                }
            }
            
            // Cylinder (–∫–æ—Ä–ø—É—Å —Ü–∏–ª–∏–Ω–¥—Ä–∞) with proper colors
            Model {
                source: "#Cylinder"
                position: Qt.vector3d((tailRodEnd.x + cylinderEnd.x)/2, (tailRodEnd.y + cylinderEnd.y)/2, tailRodEnd.z)
                scale: Qt.vector3d(userBoreHead/100, userCylinderLength/100, userBoreHead/100)
                eulerRotation: Qt.vector3d(0, 0, cylAngle)
                materials: PrincipledMaterial {
                    baseColor: cylinderBodyColor
                    metalness: cylinderMetalness
                    roughness: cylinderRoughness
                    opacity: glassOpacity
                    indexOfRefraction: glassIOR          // ‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è
                    alphaMode: PrincipledMaterial.Blend
                }
            }
            
            // ‚úÖ PISTON (–ø–æ—Ä—à–µ–Ω—å) with proper colors
            Model {
                source: "#Cylinder"
                position: pistonCenter
                scale: Qt.vector3d((userBoreHead - 2)/100, userPistonThickness/100, (userBoreHead - 2)/100)
                eulerRotation: Qt.vector3d(0, 0, cylAngle)
                materials: PrincipledMaterial {
                    baseColor: rodLengthError > 1.0 ? pistonBodyWarningColor : pistonBodyColor
                    metalness: pistonBodyMetalness
                    roughness: pistonBodyRoughness
                }
            }
            
            // ‚úÖ PISTON ROD (—à—Ç–æ–∫ –ø–æ—Ä—à–Ω—è) with proper colors
            Model {
                source: "#Cylinder"
                position: Qt.vector3d((pistonCenter.x + j_rod.x)/2, (pistonCenter.y + j_rod.y)/2, pistonCenter.z)
                scale: Qt.vector3d(userRodDiameter/100, pistonRodLength/100, userRodDiameter/100)  // ‚úÖ –ö–û–ù–°–¢–ê–ù–¢–ù–ê–Ø –î–õ–ò–ù–ê!
                eulerRotation: Qt.vector3d(0, 0, Math.atan2(j_rod.y - pistonCenter.y, j_rod.x - pistonCenter.x) * 180 / Math.PI + 90)
                materials: PrincipledMaterial {
                    baseColor: rodLengthError > 1.0 ? pistonRodWarningColor : pistonRodColor
                    metalness: pistonRodMetalness
                    roughness: pistonRodRoughness
                }
            }
            
            // JOINTS (—à–∞—Ä–Ω–∏—Ä—ã) with proper colors
            Model {
                source: "#Cylinder"
                position: j_tail
                scale: Qt.vector3d(1.2, 2.4, 1.2)
                eulerRotation: Qt.vector3d(90, 0, 0)
                materials: PrincipledMaterial {
                    baseColor: jointTailColor
                    metalness: jointMetalness
                    roughness: jointRoughness
                }
            }
            
            Model {
                source: "#Cylinder"
                position: j_arm
                scale: Qt.vector3d(1.0, 2.0, 1.0)
                eulerRotation: Qt.vector3d(90, 0, 0)
                materials: PrincipledMaterial {
                    baseColor: jointArmColor
                    metalness: jointMetalness
                    roughness: jointRoughness
                }
            }
            
            Model {
                source: "#Cylinder"
                position: j_rod
                scale: Qt.vector3d(0.8, 1.6, 0.8)
                eulerRotation: Qt.vector3d(90, 0, leverAngle * 0.1)
                materials: PrincipledMaterial {
                    baseColor: rodLengthError > 1.0 ? jointRodErrorColor : jointRodOkColor
                    metalness: jointMetalness
                    roughness: jointRoughness
                }
            }
            
            // ...existing rod length error logging...
        }

        // Four suspension corners with fixed rod lengths
        OptimizedSuspensionCorner { 
            id: flCorner
            j_arm: Qt.vector3d(-userFrameToPivot, userBeamSize, userBeamSize/2)
            j_tail: Qt.vector3d(-userTrackWidth/2, userBeamSize + userFrameHeight, userBeamSize/2)
            leverAngle: fl_angle
            pistonPositionFromPython: root.userPistonPositionFL
        }
        
        OptimizedSuspensionCorner { 
            id: frCorner
            j_arm: Qt.vector3d(userFrameToPivot, userBeamSize, userBeamSize/2)
            j_tail: Qt.vector3d(userTrackWidth/2, userBeamSize + userFrameHeight, userBeamSize/2)
            leverAngle: fr_angle
            pistonPositionFromPython: root.userPistonPositionFR
        }
        
        OptimizedSuspensionCorner { 
            id: rlCorner
            j_arm: Qt.vector3d(-userFrameToPivot, userBeamSize, userFrameLength - userBeamSize/2)
            j_tail: Qt.vector3d(-userTrackWidth/2, userBeamSize + userFrameHeight, userFrameLength - userBeamSize/2)
            leverAngle: rl_angle
            pistonPositionFromPython: root.userPistonPositionRL
        }
        
        OptimizedSuspensionCorner { 
            id: rrCorner
            j_arm: Qt.vector3d(userFrameToPivot, userBeamSize, userFrameLength - userBeamSize/2)
            j_tail: Qt.vector3d(userTrackWidth/2, userBeamSize + userFrameHeight, userFrameLength - userBeamSize/2)
            leverAngle: rr_angle
            pistonPositionFromPython: root.userPistonPositionRR
        }
    }

    // ===============================================================
    // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï MOUSE CONTROLS (preserved)
    // ===============================================================

    MouseArea {
        anchors.fill: parent
        hoverEnabled: true
        acceptedButtons: Qt.LeftButton | Qt.RightButton

        onPressed: (mouse) => {
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ä—ã–≤–∫–∞
            root.mouseDown = true
            root.mouseButton = mouse.button
            root.lastX = mouse.x
            root.lastY = mouse.y
            
            console.log("Mouse pressed: button =", mouse.button, "at", mouse.x, mouse.y)
        }

        onReleased: (mouse) => {
            root.mouseDown = false
            root.mouseButton = 0
            console.log("Mouse released")
        }

        onPositionChanged: (mouse) => {
            if (!root.mouseDown) return
          
            // ‚úÖ –ù–û–í–û–ï: Throttling –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            const currentTime = Date.now()
            if (currentTime - root.lastUpdateTime < 8) return  // –ú–∞–∫—Å–∏–º—É–º 120 FPS –¥–ª—è mouse
            root.lastUpdateTime = currentTime
          
            const dx = mouse.x - root.lastX
            const dy = mouse.y - root.lastY

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è delta –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ä—ã–≤–∫–æ–≤
            if (Math.abs(dx) > 100 || Math.abs(dy) > 100) {
                console.log("‚ö†Ô∏è Ignoring large mouse delta:", dx, dy)
                root.lastX = mouse.x
                root.lastY = mouse.y
                return
            }

            if (root.mouseButton === Qt.LeftButton) {
                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –∏–Ω–≤–µ—Ä—Å–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
                root.yawDeg = root.normAngleDeg(root.yawDeg - dx * root.rotateSpeed)
                root.pitchDeg = root.clamp(root.pitchDeg - dy * root.rotateSpeed, -85, 85)
            } else if (root.mouseButton === Qt.RightButton) {
                // Panning: move camera in rig's local X/Y
                const fovRad = camera.fieldOfView * Math.PI / 180.0
                const worldPerPixel = (2 * root.cameraDistance * Math.tan(fovRad / 2)) / view3d.height
                const s = worldPerPixel * root.cameraSpeed
                
                root.panX -= dx * s
                root.panY += dy * s
            }

            root.lastX = mouse.x
            root.lastY = mouse.y
        }

        onWheel: (wheel) => {
            const zoomFactor = 1.0 + (wheel.angleDelta.y / 1200.0)
            root.cameraDistance = Math.max(root.minDistance, 
                                     Math.min(root.maxDistance, 
                                              root.cameraDistance * zoomFactor))
        }

        onDoubleClicked: () => {
            console.log("üîÑ Double-click: resetting view")
            resetView()
        }
    }

    // ===============================================================
    // ANIMATION TIMERS (preserved)
    // ===============================================================

    Timer {
        running: isRunning
        interval: 16  // 60 FPS
        repeat: true
        onTriggered: {
            animationTime += 0.016
        }
    }
    
    Timer {
        running: autoRotate
        interval: 16
        repeat: true
        onTriggered: {
            yawDeg = normAngleDeg(yawDeg + autoRotateSpeed * 0.016 * 10)
        }
    }

    // ===============================================================
    // KEYBOARD SHORTCUTS (preserved)
    // ===============================================================

    Keys.onPressed: (e) => {
        if (e.key === Qt.Key_R) {
            resetView()
        } else if (e.key === Qt.Key_Space) {
            isRunning = !isRunning
        } else if (e.key === Qt.Key_F) {
            autoFitFrame()
        }
    }

    focus: true

    // ===============================================================
    // ‚úÖ UPDATED INFO PANEL (with rod length information)
    // ===============================================================

    Rectangle {
        anchors.top: parent.top
        anchors.left: parent.left
        anchors.margins: 15
        width: 550
        height: 280
        color: "#aa000000"
        border.color: "#60ffffff"
        radius: 8

        Column {
            anchors.centerIn: parent
            spacing: 6
            
            Text { 
                text: "PneumoStabSim Professional | –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ö–ò–ù–ï–ú–ê–¢–ò–ö–ê v4.3"
                color: "#ffffff"
                font.pixelSize: 14
                font.bold: true 
            }
            
            Text { 
                text: "üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª–∏–Ω—ã —à—Ç–æ–∫–æ–≤"
                color: "#00ff88"
                font.pixelSize: 11 
            }
            
            Text { 
                text: "‚úÖ –î–ª–∏–Ω–∞ —à—Ç–æ–∫–∞: " + userPistonRodLength + "–º–º (–ö–û–ù–°–¢–ê–ù–¢–ê)"
                color: "#ffaa00"
                font.pixelSize: 10 
            }
            
            Text { 
                text: "üåü IBL —Å—Ç–∞—Ç—É—Å: " + (iblEnabled ? (iblLoader.ready ? "–ó–ê–ì–†–£–ñ–ï–ù (–æ—Å–≤–µ—â–µ–Ω–∏–µ + SkyBox —Ñ–æ–Ω)" : "–ó–ê–ì–†–£–ñ–ê–ï–¢–°–Ø...") : "–í–´–ö–õ–Æ–ß–ï–ù")
                color: iblEnabled ? (iblLoader.ready ? "#00ff88" : "#ffaa00") : "#888888"
                font.pixelSize: 10 
            }
            
            Text { 
                text: "üé® –§–æ–Ω: " + (iblEnabled && iblLoader.ready ? "SkyBox HDR (–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å –∫–∞–º–µ—Ä–æ–π)" : backgroundColor + " (–ø—Ä–æ—Å—Ç–æ–π —Ü–≤–µ—Ç)")
                color: "#aaddff"
                font.pixelSize: 9 
            }

            Text { 
                text: "üîç –û—à–∏–±–∫–∏ –¥–ª–∏–Ω—ã: FL=" + (flCorner.rodLengthError ? flCorner.rodLengthError.toFixed(2) : "0.00") + 
                      "–º–º | FR=" + (frCorner.rodLengthError ? frCorner.rodLengthError.toFixed(2) : "0.00") + 
                      "–º–º | RL=" + (rlCorner.rodLengthError ? rlCorner.rodLengthError.toFixed(2) : "0.00") + 
                      "–º–º | RR=" + (rrCorner.rodLengthError ? rrCorner.rodLengthError.toFixed(2) : "0.00") + "–º–º"
                color: "#aaddff"
                font.pixelSize: 9 
            }
            
            Text { 
                text: "üì∑ –ö–∞–º–µ—Ä–∞: " + cameraDistance.toFixed(0) + "–º–º | Pivot: (" + 
                      pivot.x.toFixed(0) + ", " + pivot.y.toFixed(0) + ", " + pivot.z.toFixed(0) + ")"
                color: "#cccccc"
                font.pixelSize: 10 
            }
            
            Text { 
                text: "üéÆ –õ–ö–ú-–≤—Ä–∞—â–µ–Ω–∏–µ |–ü–ö–ú-–ø–∞–Ω–æ—Ä–∞–º–∞ | –ö–æ–ª–µ—Å–æ-–∑—É–º | R-—Å–±—Ä–æ—Å | F-–∞–≤—Ç–æ—Ñ–∏—Ç | Space-–∞–Ω–∏–º–∞—Ü–∏—è"
                color: "#aaddff"
                font.pixelSize: 9 
            }
            
            // Animation status
            Rectangle {
                width: 520
                height: 70
                color: "#33000000"
                border.color: isRunning ? "#00ff00" : "#ff0000"
                border.width: 2
                radius: 6
                
                Column {
                    anchors.centerIn: parent
                    spacing: 4
                    
                    Text {
                        text: isRunning ? "üé¨ –ê–ù–ò–ú–ê–¶–ò–Ø –° –ü–†–ê–í–ò–õ–¨–ù–û–ô –ö–ò–ù–ï–ú–ê–¢–ò–ö–û–ô –®–¢–û–ö–û–í" : "‚è∏Ô∏è –ê–Ω–∏–º–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
                        color: isRunning ? "#00ff88" : "#ff6666"
                        font.pixelSize: 12
                        font.bold: true
                    }
                    
                    Text {
                        text: "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: A=" + userAmplitude.toFixed(1) + "¬∞ | f=" + userFrequency.toFixed(1) + "–ì—Ü | œÜ=" + userPhaseGlobal.toFixed(0) + "¬∞"
                        color: "#cccccc"
                        font.pixelSize: 9
                    }
                    
                    Text {
                        text: "üîß –£–≥–ª—ã: FL=" + fl_angle.toFixed(1) + "¬∞ | FR=" + fr_angle.toFixed(1) + 
                              "¬∞ | RL=" + rl_angle.toFixed(1) + "¬∞ | RR=" + rr_angle.toFixed(1) + "¬∞"
                        color: "#aaaaaa"
                        font.pixelSize: 8
                    }
                }
            }
        }
    }

    // ===============================================================
    // INITIALIZATION (with behavior fix)
    // ===============================================================

    Component.onCompleted: {
        // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –î–õ–Ø –í–ö–õ–Æ–ß–ï–ù–ò–Ø Behavior –°–†–ê–ó–£!
        initTimer.start()
        
        console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        console.log("üöÄ PneumoStabSim v4.8 IBL SKYBOX LOADED")
        console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        console.log("‚úÖ IBL –û–ö–†–£–ñ–ï–ù–ò–ï:")
        console.log("   üîß SkyBox —Ñ–æ–Ω –∏–∑ HDR —Ñ–∞–π–ª–∞")
        console.log("   üîß IBL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Å–≤–µ—â–µ–Ω–∏—è")
        console.log("   üîß Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ü–≤–µ—Ç—É –µ—Å–ª–∏ HDR –Ω–µ –≥–æ—Ç–æ–≤")
        console.log("   üîß –ü–ª–∞–≤–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤")
        console.log("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø BEHAVIOR v4.7.1:")
        console.log("   üîß Behavior –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        console.log("   üîß –í–∫–ª—é—á–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ 10–º—Å –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏")
        console.log("   üîß –≠—Ç–æ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç '—Ä—ã–≤–æ–∫ –∫–∞—Ä—Ç–∏–Ω–∫–∏' –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ")
        console.log("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–ò–ù–´ –®–¢OK–û–í:")
        console.log("   üîß –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –¥–ª–∏–Ω–∞ —à—Ç–æ–∫–∞:", userPistonRodLength, "–º–º")
        console.log("   üîß –ü–æ—Ä—à–Ω–∏ –¥–≤–∏–∂—É—Ç—Å—è –í–î–û–õ–¨ –û–°–ò —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤")
        console.log("‚úÖ –í–°–ï –ü–ê–†–ê–ú–ï–¢–†–´ GRAPHICSPANEL:")
        console.log("   üî• –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è (IOR):", glassIOR)
        console.log("   üî• IBL –ø–æ–¥–¥–µ—Ä–∂–∫–∞:", iblEnabled, "(–æ—Å–≤–µ—â–µ–Ω–∏–µ + —Ñ–æ–Ω)")
        console.log("   üî• –¢—É–º–∞–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∞:", fogEnabled)
        console.log("   üî• –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã: Bloom, SSAO, DoF, Vignette")
        console.log("üéØ –°–¢–ê–¢–£–°: main.qml v4.8 –ó–ê–ì–†–£–ñ–ï–ù –£–°–ü–ï–®–ù–û")
        console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        
        resetView()
        view3d.forceActiveFocus()
    }

    // ===============================================================
    // IBL MANAGEMENT SYSTEM
    // ===============================================================
    
    IblProbeLoader {
        id: iblLoader
        primarySource: root.iblPrimarySource
        fallbackSource: root.iblFallbackSource
    }
}
