import QtQuick
import QtQuick3D
import QtQuick3D.Helpers

/*
 * PneumoStabSim - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ö–ò–ù–ï–ú–ê–¢–ò–ö–ê –®–¢–û–ö–û–í v4.1
 * üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª–∏–Ω—ã —à—Ç–æ–∫–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–π –ø–æ—Ä—à–Ω–µ–π
 * ‚úÖ –®—Ç–æ–∫–∏ –∏–º–µ—é—Ç –ü–û–°–¢–û–Ø–ù–ù–£–Æ –¥–ª–∏–Ω—É –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —É–≥–ª–∞ —Ä—ã—á–∞–≥–∞
 * ‚úÖ –ü–æ—Ä—à–Ω–∏ –¥–≤–∏–∂—É—Ç—Å—è –í–î–û–õ–¨ –û–°–ò —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª–∏–Ω—ã —à—Ç–æ–∫–∞
 */
Item {
    id: root
    anchors.fill: parent

    // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –≤ main_optimized.qml
    // ... (–∫–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—É—é —á–∞—Å—Ç—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)

    // Geometry parameters
    property real userBeamSize: 120
    property real userFrameHeight: 650
    property real userFrameLength: 3200
    property real userLeverLength: 800
    property real userCylinderLength: 500
    property real userTrackWidth: 1600
    property real userFrameToPivot: 600
    property real userRodPosition: 0.6
    property real userBoreHead: 80
    property real userRodDiameter: 35
    property real userPistonThickness: 25
    property real userPistonRodLength: 200  // ‚úÖ –ö–û–ù–°–¢–ê–ù–¢–ù–ê–Ø –î–õ–ò–ù–ê –®–¢–û–ö–ê

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô SUSPENSION COMPONENT —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–∏–Ω–µ–º–∞—Ç–∏–∫–æ–π
    component FixedRodSuspensionCorner: Node {
        property vector3d j_arm
        property vector3d j_tail  
        property real leverAngle
        property real pistonPositionFromPython: 250.0  // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ö–ò–ù–ï–ú–ê–¢–ò–ö–ê: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º j_rod
        property real baseAngle: (j_arm.x < 0) ? 180 : 0
        property real totalAngle: baseAngle + leverAngle
        property vector3d j_rod: Qt.vector3d(
            j_arm.x + (userLeverLength * userRodPosition) * Math.cos(totalAngle * Math.PI / 180),
            j_arm.y + (userLeverLength * userRodPosition) * Math.sin(totalAngle * Math.PI / 180),
            j_arm.z
        )
        
        // ‚úÖ –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –¶–ò–õ–ò–ù–î–†–ê
        property vector3d cylDirection: Qt.vector3d(j_rod.x - j_tail.x, j_rod.y - j_tail.y, 0)
        property real cylDirectionLength: Math.hypot(cylDirection.x, cylDirection.y)
        property vector3d cylDirectionNorm: Qt.vector3d(
            cylDirection.x / cylDirectionLength,
            cylDirection.y / cylDirectionLength,
            0
        )
        property real cylAngle: Math.atan2(cylDirection.y, cylDirection.x) * 180 / Math.PI + 90
        
        // ‚úÖ –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ï –î–õ–ò–ù–´ (–Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è!)
        property real TAIL_ROD_LENGTH: 100                    // –º–º - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞
        property real PISTON_ROD_LENGTH: userPistonRodLength  // –º–º - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –∏–∑ UI
        
        // ‚úÖ –ë–ê–ó–û–í–´–ï –ü–û–ó–ò–¶–ò–ò –¶–ò–õ–ò–ù–î–†–ê
        property vector3d tailRodEnd: Qt.vector3d(
            j_tail.x + cylDirectionNorm.x * TAIL_ROD_LENGTH,
            j_tail.y + cylDirectionNorm.y * TAIL_ROD_LENGTH,
            j_tail.z
        )
        
        property vector3d cylinderEnd: Qt.vector3d(
            tailRodEnd.x + cylDirectionNorm.x * userCylinderLength,
            tailRodEnd.y + cylDirectionNorm.y * userCylinderLength,
            tailRodEnd.z
        )
        
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢ –ü–û–ó–ò–¶–ò–ò –ü–û–†–®–ù–Ø –¥–ª—è –ö–û–ù–°–¢–ê–ù–¢–ù–û–ô –¥–ª–∏–Ω—ã —à—Ç–æ–∫–∞
        // –ü–æ—Ä—à–µ–Ω—å –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ PISTON_ROD_LENGTH –æ—Ç j_rod –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫ —Ü–∏–ª–∏–Ω–¥—Ä—É
        property vector3d rodDirection: Qt.vector3d(
            cylDirectionNorm.x,  // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç j_rod –∫ –æ—Å–∏ —Ü–∏–ª–∏–Ω–¥—Ä–∞
            cylDirectionNorm.y,
            0
        )
        
        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ü–∏—é j_rod –Ω–∞ –æ—Å—å —Ü–∏–ª–∏–Ω–¥—Ä–∞
        property vector3d j_rodToCylStart: Qt.vector3d(j_rod.x - tailRodEnd.x, j_rod.y - tailRodEnd.y, 0)
        property real projectionOnCylAxis: j_rodToCylStart.x * cylDirectionNorm.x + j_rodToCylStart.y * cylDirectionNorm.y
        
        // –¢–æ—á–∫–∞ –Ω–∞ –æ—Å–∏ —Ü–∏–ª–∏–Ω–¥—Ä–∞ –±–ª–∏–∂–∞–π—à–∞—è –∫ j_rod
        property vector3d j_rodProjection: Qt.vector3d(
            tailRodEnd.x + cylDirectionNorm.x * projectionOnCylAxis,
            tailRodEnd.y + cylDirectionNorm.y * projectionOnCylAxis,
            tailRodEnd.z
        )
        
        // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç j_rod –¥–æ –µ–≥–æ –ø—Ä–æ–µ–∫—Ü–∏–∏ –Ω–∞ –æ—Å—å —Ü–∏–ª–∏–Ω–¥—Ä–∞ (–ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ)
        property real perpendicularDistance: Math.hypot(
            j_rod.x - j_rodProjection.x,
            j_rod.y - j_rodProjection.y
        )
        
        // ‚úÖ –†–ï–®–ê–ï–ú –¢–†–ï–£–ì–û–õ–¨–ù–ò–ö: –Ω–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Ä—à–Ω—è –¥–ª—è –ö–û–ù–°–¢–ê–ù–¢–ù–û–ô –¥–ª–∏–Ω—ã —à—Ç–æ–∫–∞
        // –¢–µ–æ—Ä–µ–º–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞: rod_length¬≤ = perpendicular_distance¬≤ + axial_distance¬≤
        property real rodLengthSquared: PISTON_ROD_LENGTH * PISTON_ROD_LENGTH
        property real perpDistSquared: perpendicularDistance * perpendicularDistance
        property real axialDistanceFromProjection: Math.sqrt(Math.max(0, rodLengthSquared - perpDistSquared))
        
        // –ü–æ–∑–∏—Ü–∏—è –ø–æ—Ä—à–Ω—è –Ω–∞ –æ—Å–∏ —Ü–∏–ª–∏–Ω–¥—Ä–∞ (–Ω–∞–∑–∞–¥ –æ—Ç –ø—Ä–æ–µ–∫—Ü–∏–∏ j_rod –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ axialDistance)
        property real pistonPositionOnAxis: projectionOnCylAxis - axialDistanceFromProjection
        
        // ‚úÖ –û–ì–†–ê–ù–ò–ß–ò–í–ê–ï–ú –ü–û–†–®–ï–ù–¨ –í –ü–†–ï–î–ï–õ–ê–• –¶–ò–õ–ò–ù–î–†–ê
        property real clampedPistonPosition: Math.max(10, Math.min(userCylinderLength - 10, pistonPositionOnAxis))
        
        // ‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–û–ó–ò–¶–ò–Ø –ü–û–†–®–ù–Ø (–Ω–∞ –æ—Å–∏ —Ü–∏–ª–∏–Ω–¥—Ä–∞)
        property vector3d pistonCenter: Qt.vector3d(
            tailRodEnd.x + cylDirectionNorm.x * clampedPistonPosition,
            tailRodEnd.y + cylDirectionNorm.y * clampedPistonPosition,
            tailRodEnd.z
        )
        
        // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ê–õ–¨–ù–£–Æ –î–õ–ò–ù–£ –®–¢–û–ö–ê (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        property real actualRodLength: Math.hypot(j_rod.x - pistonCenter.x, j_rod.y - pistonCenter.y)
        property real rodLengthError: Math.abs(actualRodLength - PISTON_ROD_LENGTH)
        
        // ‚úÖ DEBUG: –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –±–æ–ª—å—à–∏–µ –æ—à–∏–±–∫–∏
        onRodLengthErrorChanged: {
            if (rodLengthError > 1.0) {  // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –±–æ–ª—å—à–µ 1–º–º
                console.warn("‚ö†Ô∏è Rod length error:", rodLengthError.toFixed(2), "mm (target:", PISTON_ROD_LENGTH, "actual:", actualRodLength.toFixed(2), ")")
            }
        }
        
        // –ö–û–ú–ü–û–ù–ï–ù–¢–´ –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò
        
        // LEVER (—Ä—ã—á–∞–≥)
        Model {
            source: "#Cube"
            position: Qt.vector3d(
                j_arm.x + (userLeverLength/2) * Math.cos(totalAngle * Math.PI / 180), 
                j_arm.y + (userLeverLength/2) * Math.sin(totalAngle * Math.PI / 180), 
                j_arm.z
            )
            scale: Qt.vector3d(userLeverLength/100, 0.8, 0.8)
            eulerRotation: Qt.vector3d(0, 0, totalAngle)
            materials: PrincipledMaterial { 
                baseColor: "#888888"
                metalness: 1.0
                roughness: 0.28
            }
        }
        
        // TAIL ROD (—Ö–≤–æ—Å—Ç–æ–≤–æ–π —à—Ç–æ–∫) - –ö–û–ù–°–¢–ê–ù–¢–ù–ê–Ø –¥–ª–∏–Ω–∞
        Model {
            source: "#Cylinder"
            position: Qt.vector3d((j_tail.x + tailRodEnd.x)/2, (j_tail.y + tailRodEnd.y)/2, j_tail.z)
            scale: Qt.vector3d(userRodDiameter/100, TAIL_ROD_LENGTH/100, userRodDiameter/100)
            eulerRotation: Qt.vector3d(0, 0, cylAngle)
            materials: PrincipledMaterial { 
                baseColor: "#cccccc"
                metalness: 1.0
                roughness: 0.28
            }
        }
        
        // CYLINDER BODY (–∫–æ—Ä–ø—É—Å —Ü–∏–ª–∏–Ω–¥—Ä–∞)
        Model {
            source: "#Cylinder"
            position: Qt.vector3d((tailRodEnd.x + cylinderEnd.x)/2, (tailRodEnd.y + cylinderEnd.y)/2, tailRodEnd.z)
            scale: Qt.vector3d(userBoreHead/100, userCylinderLength/100, userBoreHead/100)
            eulerRotation: Qt.vector3d(0, 0, cylAngle)
            materials: PrincipledMaterial { 
                baseColor: "#ffffff"
                metalness: 0.0
                roughness: 0.05
                opacity: 0.35
                alphaMode: PrincipledMaterial.Blend 
            }
        }
        
        // ‚úÖ PISTON (–ø–æ—Ä—à–µ–Ω—å) - –ö–û–†–†–ï–ö–¢–ù–ê–Ø –ø–æ–∑–∏—Ü–∏—è
        Model {
            source: "#Cylinder"
            position: pistonCenter
            scale: Qt.vector3d((userBoreHead - 2)/100, userPistonThickness/100, (userBoreHead - 2)/100)
            eulerRotation: Qt.vector3d(0, 0, cylAngle)
            materials: PrincipledMaterial { 
                baseColor: "#ff0066"
                metalness: 1.0
                roughness: 0.28
            }
        }
        
        // ‚úÖ PISTON ROD (—à—Ç–æ–∫ –ø–æ—Ä—à–Ω—è) - –ö–û–ù–°–¢–ê–ù–¢–ù–ê–Ø –¥–ª–∏–Ω–∞!
        Model {
            source: "#Cylinder"
            position: Qt.vector3d((pistonCenter.x + j_rod.x)/2, (pistonCenter.y + j_rod.y)/2, pistonCenter.z)
            scale: Qt.vector3d(userRodDiameter/100, PISTON_ROD_LENGTH/100, userRodDiameter/100)  // ‚úÖ –ö–û–ù–°–¢–ê–ù–¢–ù–ê–Ø –î–õ–ò–ù–ê!
            eulerRotation: Qt.vector3d(0, 0, Math.atan2(j_rod.y - pistonCenter.y, j_rod.x - pistonCenter.x) * 180 / Math.PI + 90)
            materials: PrincipledMaterial { 
                baseColor: rodLengthError > 1.0 ? "#ff0000" : "#cccccc"  // –ö—Ä–∞—Å–Ω—ã–π –µ—Å–ª–∏ –±–æ–ª—å—à–∞—è –æ—à–∏–±–∫–∞
                metalness: 1.0
                roughness: 0.28
            }
        }
        
        // JOINTS (—à–∞—Ä–Ω–∏—Ä—ã) - —Ü–≤–µ—Ç–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        Model {
            source: "#Sphere"
            position: j_tail
            scale: Qt.vector3d(1.2, 1.2, 1.2)
            materials: PrincipledMaterial { 
                baseColor: "#0088ff"  // –°–∏–Ω–∏–π - —à–∞—Ä–Ω–∏—Ä —Ü–∏–ª–∏–Ω–¥—Ä–∞
                metalness: 1.0
                roughness: 0.28
            }
        }
        
        Model {
            source: "#Sphere"
            position: j_arm
            scale: Qt.vector3d(1.0, 1.0, 1.0)
            materials: PrincipledMaterial { 
                baseColor: "#ff8800"  // –û—Ä–∞–Ω–∂–µ–≤—ã–π - —à–∞—Ä–Ω–∏—Ä —Ä—ã—á–∞–≥–∞
                metalness: 1.0
                roughness: 0.28
            }
        }
        
        Model {
            source: "#Sphere"
            position: j_rod
            scale: Qt.vector3d(0.8, 0.8, 0.8)
            materials: PrincipledMaterial { 
                baseColor: rodLengthError > 1.0 ? "#ff0000" : "#00ff44"  // –ö—Ä–∞—Å–Ω—ã–π –µ—Å–ª–∏ –æ—à–∏–±–∫–∞, –∑–µ–ª–µ–Ω—ã–π –µ—Å–ª–∏ OK
                metalness: 1.0
                roughness: 0.28
            }
        }
        
        // ‚úÖ DEBUG –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ù–ê –≠–ö–†–ê–ù–ï
        Text {
            anchors.top: parent.top
            anchors.left: parent.left
            text: "Rod Length: " + actualRodLength.toFixed(1) + "mm (target: " + PISTON_ROD_LENGTH + "mm)\n" +
                  "Error: " + rodLengthError.toFixed(2) + "mm\n" +
                  "Piston Pos: " + clampedPistonPosition.toFixed(1) + "mm"
            color: rodLengthError > 1.0 ? "#ff0000" : "#00ff00"
            font.pixelSize: 8
            visible: false  // –í–∫–ª—é—á–∏—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        }
    }

    // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    View3D {
        id: view3d
        anchors.fill: parent
        
        environment: SceneEnvironment {
            backgroundMode: SceneEnvironment.Color
            clearColor: "#2a2a2a"
        }

        PerspectiveCamera {
            id: camera
            position: Qt.vector3d(0, 0, 4000)
            fieldOfView: 45
        }

        DirectionalLight {
            eulerRotation.x: -30
            eulerRotation.y: -45
            brightness: 2.8
        }

        // –¢–µ—Å—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ø–æ–¥–≤–µ—Å–∫–∏
        FixedRodSuspensionCorner { 
            id: testCorner
            j_arm: Qt.vector3d(-600, 120, 60)
            j_tail: Qt.vector3d(-800, 770, 60)
            leverAngle: 15.0  // –¢–µ—Å—Ç–æ–≤—ã–π —É–≥–æ–ª
        }
        
        // U-–æ–±—Ä–∞–∑–Ω–∞—è —Ä–∞–º–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
        Model {
            source: "#Cube"
            position: Qt.vector3d(0, 60, 1600)
            scale: Qt.vector3d(1.2, 1.2, 32)
            materials: PrincipledMaterial { baseColor: "#cc0000" }
        }
    }

    Component.onCompleted: {
        console.log("üîß FixedRodSuspensionCorner loaded with CORRECT rod length calculation")
        console.log("‚úÖ Piston rod length is CONSTANT:", userPistonRodLength, "mm")
        console.log("‚úÖ Piston moves along cylinder axis to maintain rod length")
        console.log("‚úÖ Rod length error monitoring enabled")
    }
}
