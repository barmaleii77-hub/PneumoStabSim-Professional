#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PneumoStabSim Quick Diagnostic Tool
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
"""

import sys
import os
import time
import psutil
from pathlib import Path

def check_system_resources():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–ù–´–• –†–ï–°–£–†–°–û–í")
    print("=" * 40)
    
    # CPU
    cpu_count = psutil.cpu_count()
    cpu_percent = psutil.cpu_percent(interval=1)
    print(f"CPU: {cpu_count} —è–¥–µ—Ä, –∑–∞–≥—Ä—É–∑–∫–∞: {cpu_percent}%")
    
    # –ü–∞–º—è—Ç—å
    memory = psutil.virtual_memory()
    print(f"–ü–∞–º—è—Ç—å: {memory.total // (1024**3)} GB –≤—Å–µ–≥–æ, {memory.available // (1024**3)} GB –¥–æ—Å—Ç—É–ø–Ω–æ ({memory.percent}% –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)")
    
    # –î–∏—Å–∫
    disk = psutil.disk_usage('.')
    print(f"–î–∏—Å–∫: {disk.total // (1024**3)} GB –≤—Å–µ–≥–æ, {disk.free // (1024**3)} GB —Å–≤–æ–±–æ–¥–Ω–æ")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if cpu_percent > 80:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU")
    if memory.percent > 80:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏")
    if disk.free < 1024**3:  # –ú–µ–Ω—å—à–µ 1GB
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")
    
    print()

def check_python_environment():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Python –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    print("üêç –ü–†–û–í–ï–†–ö–ê PYTHON –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("=" * 40)
    
    print(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    print(f"–ü—É—Ç—å –∫ Python: {sys.executable}")
    print(f"–ö–æ–¥–∏—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {sys.getdefaultencoding()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞–∫–µ—Ç—ã
    packages_to_check = [
        'PySide6',
        'psutil',
        'numpy',
        'logging'
    ]
    
    for package in packages_to_check:
        try:
            __import__(package)
            print(f"‚úÖ {package}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print(f"‚ùå {package}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
    
    print()

def check_qtquick3d_setup():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É QtQuick3D"""
    print("üé® –ü–†–û–í–ï–†–ö–ê QTQUICK3D")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    qt_vars = [
        'QML2_IMPORT_PATH',
        'QML_IMPORT_PATH', 
        'QT_PLUGIN_PATH',
        'QT_QML_IMPORT_PATH',
        'QSG_RHI_BACKEND'
    ]
    
    for var in qt_vars:
        value = os.environ.get(var, '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê')
        print(f"{var}: {value}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PySide6
    try:
        from PySide6.QtCore import QLibraryInfo
        qml_path = QLibraryInfo.path(QLibraryInfo.LibraryPath.Qml2ImportsPath)
        print(f"‚úÖ QML Import Path: {qml_path}")
        
        if Path(qml_path).exists():
            print("‚úÖ QML –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print("‚ùå QML –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except ImportError:
        print("‚ùå PySide6 –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    print()

def check_file_structure():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üìÅ –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê")
    print("=" * 40)
    
    critical_files = [
        'app.py',
        'src/common.py',
        'src/ui/main_window.py',
        'assets/qml/main.qml',
        'src/ui/panels/panel_graphics.py'
    ]
    
    for file_path in critical_files:
        if Path(file_path).exists():
            size = Path(file_path).stat().st_size
            print(f"‚úÖ {file_path} ({size} bytes)")
        else:
            print(f"‚ùå {file_path}: –ù–ï –ù–ê–ô–î–ï–ù")
    
    print()

def check_processes():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
    print("üîÑ –ü–†–û–í–ï–†–ö–ê –ü–†–û–¶–ï–°–°–û–í")
    print("=" * 40)
    
    # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã Python
    python_processes = []
    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_info']):
        try:
            if 'python' in proc.info['name'].lower():
                python_processes.append(proc)
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass
    
    if python_processes:
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(python_processes)} Python –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:")
        for proc in python_processes[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            try:
                memory_mb = proc.info['memory_info'].rss / 1024 / 1024
                print(f"  PID {proc.info['pid']}: CPU {proc.info['cpu_percent']}%, –ü–∞–º—è—Ç—å {memory_mb:.1f}MB")
            except:
                print(f"  PID {proc.info['pid']}: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    else:
        print("Python –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    print()

def run_quick_diagnostic():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"""
    print("üöÄ PNEUMOSTABSIM QUICK DIAGNOSTIC")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print("=" * 50)
    print()
    
    check_system_resources()
    check_python_environment()
    check_qtquick3d_setup()
    check_file_structure()
    check_processes()
    
    print("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 50)

if __name__ == "__main__":
    try:
        run_quick_diagnostic()
    except KeyboardInterrupt:
        print("\n‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")
        import traceback
        traceback.print_exc()
