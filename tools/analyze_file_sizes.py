# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
–ü–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å —Ñ–∞–π–ª—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
"""
import os
from pathlib import Path
from dataclasses import dataclass
from typing import List
import json


@dataclass
class FileStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞"""
    path: Path
    lines: int
    size_kb: float
    
    @property
    def relative_path(self) -> str:
        """–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            return str(self.path.relative_to(Path.cwd()))
        except ValueError:
            return str(self.path)
    
    @property
    def priority(self) -> str:
        """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏"""
        if self.lines > 1000:
            return "‚≠ê‚≠ê‚≠ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô"
        elif self.lines > 700:
            return "‚≠ê‚≠ê –í–´–°–û–ö–ò–ô"
        elif self.lines > 500:
            return "‚≠ê –°–†–ï–î–ù–ò–ô"
        else:
            return "‚úÖ OK"


def count_lines(file_path: Path) -> int:
    """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–∞–π–ª–µ"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return len(f.readlines())
    except Exception:
        return 0


def get_file_size_kb(file_path: Path) -> float:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –ö–ë"""
    try:
        return file_path.stat().st_size / 1024
    except Exception:
        return 0.0


def analyze_directory(
    directory: Path,
    extensions: List[str] = ['.py'],
    exclude_patterns: List[str] = ['__pycache__', 'venv', '.git', 'build', 'dist']
) -> List[FileStats]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    
    Args:
        directory: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        extensions: –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        exclude_patterns: –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    
    Returns:
        –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–∞–∑–º–µ—Ä–∞
    """
    stats: List[FileStats] = []
    
    for root, dirs, files in os.walk(directory):
        # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        dirs[:] = [d for d in dirs if not any(pattern in d for pattern in exclude_patterns)]
        
        for file in files:
            if any(file.endswith(ext) for ext in extensions):
                file_path = Path(root) / file
                lines = count_lines(file_path)
                size_kb = get_file_size_kb(file_path)
                
                stats.append(FileStats(
                    path=file_path,
                    lines=lines,
                    size_kb=size_kb
                ))
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ç—Ä–æ–∫
    stats.sort(key=lambda x: x.lines, reverse=True)
    return stats


def print_report(stats: List[FileStats], top_n: int = 20):
    """–í—ã–≤–µ—Å—Ç–∏ –æ—Ç—á—ë—Ç –æ —Ñ–∞–π–ª–∞—Ö"""
    print("=" * 100)
    print("üìä –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–†–û–í –§–ê–ô–õ–û–í –ü–†–û–ï–ö–¢–ê")
    print("=" * 100)
    print()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_files = len(stats)
    critical = sum(1 for s in stats if s.lines > 1000)
    high = sum(1 for s in stats if 700 < s.lines <= 1000)
    medium = sum(1 for s in stats if 500 < s.lines <= 700)
    
    print(f"–í—Å–µ–≥–æ Python —Ñ–∞–π–ª–æ–≤: {total_files}")
    print(f"  ‚≠ê‚≠ê‚≠ê –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ (>1000 —Å—Ç—Ä–æ–∫): {critical}")
    print(f"  ‚≠ê‚≠ê   –í—ã—Å–æ–∫–∏–µ (700-1000 —Å—Ç—Ä–æ–∫): {high}")
    print(f"  ‚≠ê     –°—Ä–µ–¥–Ω–∏–µ (500-700 —Å—Ç—Ä–æ–∫): {medium}")
    print()
    
    # –¢–æ–ø —Ñ–∞–π–ª–æ–≤
    print(f"üîù –¢–û–ü-{top_n} –°–ê–ú–´–• –ë–û–õ–¨–®–ò–• –§–ê–ô–õ–û–í:")
    print()
    print(f"{'‚Ññ':<4} {'–°—Ç—Ä–æ–∫':<7} {'–†–∞–∑–º–µ—Ä':<10} {'–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç':<20} {'–§–∞–π–ª':<60}")
    print("-" * 100)
    
    for i, stat in enumerate(stats[:top_n], 1):
        print(f"{i:<4} {stat.lines:<7} {stat.size_kb:<10.2f} {stat.priority:<20} {stat.relative_path:<60}")
    
    print()
    print("=" * 100)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print()
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print()
    if critical > 0:
        print(f"  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {critical} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ - –°–†–û–ß–ù–û —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥!")
    if high > 0:
        print(f"  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {high} —Ñ–∞–π–ª–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥")
    if medium > 0:
        print(f"  ‚ÑπÔ∏è  –ù–∞–π–¥–µ–Ω–æ {medium} —Ñ–∞–π–ª–æ–≤ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ - —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥")
    
    if critical == 0 and high == 0:
        print("  ‚úÖ –ü—Ä–æ–µ–∫—Ç –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏! –ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤.")
    
    print()


def export_json(stats: List[FileStats], output_path: Path):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ JSON"""
    data = {
        "timestamp": str(Path.cwd()),
        "total_files": len(stats),
        "files": [
            {
                "path": s.relative_path,
                "lines": s.lines,
                "size_kb": round(s.size_kb, 2),
                "priority": s.priority
            }
            for s in stats
        ]
    }
    
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)
    
    print(f"üìÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤: {output_path}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
    project_root = Path.cwd()
    src_dir = project_root / "src"
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞: {project_root}")
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è src: {src_dir}")
    print()
    
    if not src_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è src –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = analyze_directory(
        directory=src_dir,
        extensions=['.py'],
        exclude_patterns=['__pycache__', 'venv', '.git', 'build', 'dist', '.pytest_cache']
    )
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á—ë—Ç
    print_report(stats, top_n=30)
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
    output_path = project_root / "file_stats.json"
    export_json(stats, output_path)


if __name__ == "__main__":
    main()
