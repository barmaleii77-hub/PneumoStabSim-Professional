# -*- coding: utf-8 -*-
"""
–ü—Ä–µ–¥-–∞—É–¥–∏—Ç –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –º–∏–∫—Ä–æ—à–∞–≥–∞–º–∏ UI
"""
import sys
import json
import time
from pathlib import Path


def ensure_dir(path):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    Path(path).mkdir(parents=True, exist_ok=True)
    return Path(path)


def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    info = {
        "python_version": sys.version.split()[0],
        "platform": sys.platform,
        "executable": sys.executable,
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PySide6
    try:
        import PySide6

        info["pyside6_available"] = True
        info["pyside6_version"] = getattr(PySide6, "__version__", "unknown")
    except ImportError:
        info["pyside6_available"] = False

    return info


def check_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    paths = ["src/", "tests/", "reports/", "logs/", "artifacts/", "assets/qml/"]
    result = {}

    for path in paths:
        p = Path(path)
        result[path] = {
            "exists": p.exists(),
            "is_dir": p.is_dir() if p.exists() else False,
            "file_count": len(list(p.rglob("*"))) if p.exists() and p.is_dir() else 0,
        }

    return result


def check_key_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    files = [
        "src/ui/main_window.py",
        "src/ui/panels/panel_geometry.py",
        "src/ui/panels/panel_pneumo.py",
        "src/ui/geo_state.py",
        "src/ui/geo_state_new.py",
        "src/pneumo/receiver.py",
        "src/runtime/state.py",
        "src/runtime/sim_loop.py",
    ]

    result = {}
    for file_path in files:
        p = Path(file_path)
        result[file_path] = {
            "exists": p.exists(),
            "size": p.stat().st_size if p.exists() else 0,
            "modified": time.ctime(p.stat().st_mtime) if p.exists() else None,
        }

    return result


def check_geometry_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ (–ß–∞—Å—Ç—å A)"""
    status = {
        "files_present": False,
        "unified_params": False,
        "si_units": False,
        "validation": False,
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    geo_files = [
        "src/ui/panels/panel_geometry.py",
        "src/ui/geo_state.py",
        "src/ui/geo_state_new.py",
    ]
    status["files_present"] = all(Path(f).exists() for f in geo_files)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ panel_geometry.py
    panel_geo = Path("src/ui/panels/panel_geometry.py")
    if panel_geo.exists():
        try:
            content = panel_geo.read_text(encoding="utf-8")
            # 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ü–∏–ª–∏–Ω–¥—Ä–∞
            required_params = [
                "cyl_diam_m",
                "rod_diam_m",
                "stroke_m",
                "piston_thickness_m",
                "dead_gap_m",
            ]
            status["unified_params"] = all(
                param in content for param in required_params
            )
            status["si_units"] = "decimals=3" in content and "step=0.001" in content
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {panel_geo}: {e}")

    return status


def check_receiver_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Å–∏–≤–µ—Ä–∞ (–ß–∞—Å—Ç—å B)"""
    status = {
        "files_present": False,
        "dual_modes": False,
        "volume_control": False,
        "thermodynamics": False,
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    recv_files = ["src/pneumo/receiver.py", "src/ui/panels/panel_pneumo.py"]
    status["files_present"] = all(Path(f).exists() for f in recv_files)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ panel_pneumo.py
    panel_pneumo = Path("src/ui/panels/panel_pneumo.py")
    if panel_pneumo.exists():
        try:
            content = panel_pneumo.read_text(encoding="utf-8")
            status["dual_modes"] = "R1" in content and "R2" in content
            status["volume_control"] = "receiver_change_volume" in content
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {panel_pneumo}: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ receiver.py
    receiver_py = Path("src/pneumo/receiver.py")
    if receiver_py.exists():
        try:
            content = receiver_py.read_text(encoding="utf-8")
            status["thermodynamics"] = (
                "isothermal" in content and "adiabatic" in content
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {receiver_py}: {e}")

    return status


def check_ui_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã UI"""
    status = {
        "main_window": False,
        "tabs": False,
        "scroll_areas": False,
        "splitters": False,
    }

    main_window = Path("src/ui/main_window.py")
    if main_window.exists():
        try:
            content = main_window.read_text(encoding="utf-8")
            status["main_window"] = True
            status["tabs"] = "QTabWidget" in content
            status["scroll_areas"] = "QScrollArea" in content
            status["splitters"] = "QSplitter" in content
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {main_window}: {e}")

    return status


def check_tests():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    status = {
        "tests_dir": False,
        "ui_tests": False,
        "geometry_tests": False,
        "receiver_tests": False,
        "smoke_tests": False,
    }

    tests_dir = Path("tests")
    status["tests_dir"] = tests_dir.exists() and tests_dir.is_dir()

    if status["tests_dir"]:
        ui_tests = tests_dir / "ui"
        status["ui_tests"] = ui_tests.exists()

        if status["ui_tests"]:
            test_files = list(ui_tests.glob("*.py"))
            status["geometry_tests"] = any("geometry" in f.name for f in test_files)
            status["receiver_tests"] = any("receiver" in f.name for f in test_files)

        smoke_tests = list(tests_dir.rglob("*smoke*.py"))
        status["smoke_tests"] = len(smoke_tests) > 0

    return status


def create_report(audit_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    reports_dir = ensure_dir("reports/ui")
    artifacts_dir = ensure_dir("artifacts/ui")
    ensure_dir("logs/ui")

    # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
    report_path = reports_dir / "audit_pre.md"

    with open(report_path, "w", encoding="utf-8") as f:
        f.write("# –ü—Ä–µ–¥-–∞—É–¥–∏—Ç –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –º–∏–∫—Ä–æ—à–∞–≥–∞–º–∏ UI\n\n")
        f.write(f"**–î–∞—Ç–∞:** {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n")

        # –û–∫—Ä—É–∂–µ–Ω–∏–µ
        f.write("## üêç –û–∫—Ä—É–∂–µ–Ω–∏–µ Python\n\n")
        env = audit_data["environment"]
        f.write(f"- **–í–µ—Ä—Å–∏—è Python:** {env['python_version']}\n")
        f.write(f"- **–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:** {env['platform']}\n")
        f.write(f"- **PySide6 –¥–æ—Å—Ç—É–ø–µ–Ω:** {'‚úÖ' if env['pyside6_available'] else '‚ùå'}\n")
        if env.get("pyside6_version"):
            f.write(f"- **–í–µ—Ä—Å–∏—è PySide6:** {env['pyside6_version']}\n")
        f.write("\n")

        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞
        f.write("## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞\n\n")
        for path, info in audit_data["structure"].items():
            icon = "‚úÖ" if info["exists"] else "‚ùå"
            f.write(f"- **{path}** {icon}")
            if info["exists"] and info["is_dir"]:
                f.write(f" ({info['file_count']} —Ñ–∞–π–ª–æ–≤)")
            f.write("\n")
        f.write("\n")

        # –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
        f.write("## üìÑ –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã\n\n")
        for file_path, info in audit_data["files"].items():
            icon = "‚úÖ" if info["exists"] else "‚ùå"
            f.write(f"- **{file_path}** {icon}")
            if info["exists"]:
                f.write(f" ({info['size']} bytes)")
            f.write("\n")
        f.write("\n")

        # –ì–µ–æ–º–µ—Ç—Ä–∏—è
        f.write("## üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ (–ß–∞—Å—Ç—å A)\n\n")
        geo = audit_data["geometry"]
        f.write(f"- **–§–∞–π–ª—ã –≥–µ–æ–º–µ—Ç—Ä–∏–∏:** {'‚úÖ' if geo['files_present'] else '‚ùå'}\n")
        f.write(
            f"- **–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:** {'‚úÖ' if geo['unified_params'] else '‚ùå'}\n"
        )
        f.write(
            f"- **–°–ò –µ–¥–∏–Ω–∏—Ü—ã (–º, —à–∞–≥ 0.001, decimals=3):** {'‚úÖ' if geo['si_units'] else '‚ùå'}\n"
        )
        f.write("\n")

        # –†–µ—Å–∏–≤–µ—Ä
        f.write("## üåÄ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ—Å–∏–≤–µ—Ä–∞ (–ß–∞—Å—Ç—å B)\n\n")
        recv = audit_data["receiver"]
        f.write(f"- **–§–∞–π–ª—ã —Ä–µ—Å–∏–≤–µ—Ä–∞:** {'‚úÖ' if recv['files_present'] else '‚ùå'}\n")
        f.write(f"- **–†–µ–∂–∏–º—ã R1/R2:** {'‚úÖ' if recv['dual_modes'] else '‚ùå'}\n")
        f.write(f"- **–ö–æ–Ω—Ç—Ä–æ–ª—å –æ–±—ä–µ–º–∞:** {'‚úÖ' if recv['volume_control'] else '‚ùå'}\n")
        f.write(
            f"- **–¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞ (–∏–∑–æ—Ç–µ—Ä–º–∞/–∞–¥–∏–∞–±–∞—Ç–∞):** {'‚úÖ' if recv['thermodynamics'] else '‚ùå'}\n"
        )
        f.write("\n")

        # UI —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        f.write("## üñºÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ UI\n\n")
        ui = audit_data["ui"]
        f.write(f"- **–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ:** {'‚úÖ' if ui['main_window'] else '‚ùå'}\n")
        f.write(f"- **–í–∫–ª–∞–¥–∫–∏ (QTabWidget):** {'‚úÖ' if ui['tabs'] else '‚ùå'}\n")
        f.write(f"- **–û–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏:** {'‚úÖ' if ui['scroll_areas'] else '‚ùå'}\n")
        f.write(f"- **–°–ø–ª–∏—Ç—Ç–µ—Ä—ã:** {'‚úÖ' if ui['splitters'] else '‚ùå'}\n")
        f.write("\n")

        # –¢–µ—Å—Ç—ã
        f.write("## üß™ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤\n\n")
        tests = audit_data["tests"]
        f.write(f"- **–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è tests/:** {'‚úÖ' if tests['tests_dir'] else '‚ùå'}\n")
        f.write(f"- **UI —Ç–µ—Å—Ç—ã:** {'‚úÖ' if tests['ui_tests'] else '‚ùå'}\n")
        f.write(f"- **–¢–µ—Å—Ç—ã –≥–µ–æ–º–µ—Ç—Ä–∏–∏:** {'‚úÖ' if tests['geometry_tests'] else '‚ùå'}\n")
        f.write(f"- **–¢–µ—Å—Ç—ã —Ä–µ—Å–∏–≤–µ—Ä–∞:** {'‚úÖ' if tests['receiver_tests'] else '‚ùå'}\n")
        f.write(f"- **Smoke —Ç–µ—Å—Ç—ã:** {'‚úÖ' if tests['smoke_tests'] else '‚ùå'}\n")
        f.write("\n")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        f.write("## üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –º–∏–∫—Ä–æ—à–∞–≥–æ–≤\n\n")
        f.write("### MS-A-ACCEPT (–ü—Ä–∏–µ–º–∫–∞ –≥–µ–æ–º–µ—Ç—Ä–∏–∏)\n")
        if not geo["unified_params"]:
            f.write("- ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏—é 5 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ü–∏–ª–∏–Ω–¥—Ä–∞\n")
        if not geo["si_units"]:
            f.write("- ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–¥–∏–Ω–∏—Ü—ã –°–ò (–º–µ—Ç—Ä—ã, —à–∞–≥ 0.001, decimals=3)\n")

        f.write("\n### MS-B-ACCEPT (–ü—Ä–∏–µ–º–∫–∞ —Ä–µ—Å–∏–≤–µ—Ä–∞)\n")
        if not recv["dual_modes"]:
            f.write("- ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∂–∏–º–æ–≤ R1/R2\n")
        if not recv["thermodynamics"]:
            f.write("- ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã\n")

        f.write("\n### MS-C (–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–ø–ª–∏—Ç—Ç–µ—Ä)\n")
        f.write("- üìù –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–ø–ª–∏—Ç—Ç–µ—Ä (–ª–µ–≤–∞—è –æ–±–ª–∞—Å—Ç—å ‚Üî –≤–∫–ª–∞–¥–∫–∏)\n")

        f.write("\n### MS-D (–ü–Ω–µ–≤–º–æ-–ø–∞–Ω–µ–ª—å —Ç—É–º–±–ª–µ—Ä—ã)\n")
        f.write("- üìù –î–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—É–º–±–ª–µ—Ä—ã –≤ –ø–Ω–µ–≤–º–æ-–ø–∞–Ω–µ–ª—å\n")

    # JSON –¥–∞–º–ø –¥–∞–Ω–Ω—ã—Ö
    json_path = artifacts_dir / "audit_data.json"
    with open(json_path, "w", encoding="utf-8") as f:
        json.dump(audit_data, f, indent=2, ensure_ascii=False, default=str)

    return report_path, json_path


def main():
    print("üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–µ–¥-–∞—É–¥–∏—Ç –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –º–∏–∫—Ä–æ—à–∞–≥–∞–º–∏ UI...")

    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏—Ç–∞
    audit_data = {
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
        "environment": check_environment(),
        "structure": check_structure(),
        "files": check_key_files(),
        "geometry": check_geometry_status(),
        "receiver": check_receiver_status(),
        "ui": check_ui_structure(),
        "tests": check_tests(),
    }

    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
    report_path, json_path = create_report(audit_data)

    # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
    print("\nüìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –ü–†–ï–î-–ê–£–î–ò–¢–ê:")
    print(f"üêç Python: {audit_data['environment']['python_version']}")
    print(
        f"üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {sum(1 for info in audit_data['structure'].values() if info['exists'])}/{len(audit_data['structure'])} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
    )
    print(
        f"üìÑ –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã: {sum(1 for info in audit_data['files'].values() if info['exists'])}/{len(audit_data['files'])}"
    )
    print(
        f"üîß –ì–µ–æ–º–µ—Ç—Ä–∏—è –≥–æ—Ç–æ–≤–∞: {'‚úÖ' if audit_data['geometry']['unified_params'] else '‚ùå'}"
    )
    print(f"üåÄ –†–µ—Å–∏–≤–µ—Ä –≥–æ—Ç–æ–≤: {'‚úÖ' if audit_data['receiver']['dual_modes'] else '‚ùå'}")
    print(f"üñºÔ∏è UI —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {'‚úÖ' if audit_data['ui']['main_window'] else '‚ùå'}")
    print(f"üß™ –¢–µ—Å—Ç—ã: {'‚úÖ' if audit_data['tests']['ui_tests'] else '‚ùå'}")

    print("\n‚úÖ –ü—Ä–µ–¥-–∞—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìÑ –û—Ç—á–µ—Ç: {report_path}")
    print(f"üóÇÔ∏è –î–∞–Ω–Ω—ã–µ: {json_path}")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_plan_path = Path("reports/feedback/CONTROL_PLAN.json")
    if control_plan_path.exists():
        try:
            with open(control_plan_path, "r", encoding="utf-8") as f:
                plan = json.load(f)

            step_info = {
                "area": "ui",
                "step": "pre_audit",
                "status": "completed",
                "timestamp": audit_data["timestamp"],
                "artifacts": {"report": str(report_path), "data": str(json_path)},
            }

            plan.setdefault("microsteps", []).append(step_info)

            with open(control_plan_path, "w", encoding="utf-8") as f:
                json.dump(plan, f, indent=2, ensure_ascii=False)

            print(f"üìã –ü–ª–∞–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω: {control_plan_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")


if __name__ == "__main__":
    main()
