#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Quick Performance Test
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import sys
import time
import subprocess


def quick_startup_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞"""
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞...")

    start_time = time.time()

    try:
        result = subprocess.run(
            ["py", "app.py", "--test-mode"],
            capture_output=True,
            text=True,
            timeout=20,
            encoding="utf-8",
            errors="ignore",
        )

        elapsed = time.time() - start_time

        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {elapsed:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"   ‚úÖ –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")

        if result.returncode == 0:
            print("   üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:")
            if result.stderr:
                print(f"   STDERR: {result.stderr[-200:]}")
            return False

    except subprocess.TimeoutExpired:
        print("   ‚ùå –¢–∞–π–º-–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ (>20 —Å–µ–∫—É–Ω–¥)")
        return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def quick_monitoring_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üìà –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")

    try:
        result = subprocess.run(
            ["py", "app.py", "--test-mode", "--monitor-perf"],
            capture_output=True,
            text=True,
            timeout=15,
            encoding="utf-8",
            errors="ignore",
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–æ–¥—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        success = result.returncode == 0

        print(f"   ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω: {success}")

        return success

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def quick_diagnostic_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...")

    try:
        result = subprocess.run(
            ["py", "diag.py"],
            capture_output=True,
            text=True,
            timeout=10,
            encoding="utf-8",
            errors="ignore",
        )

        success = result.returncode == 0
        has_output = len(result.stdout) > 50

        print(f"   ‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {success}")
        print(f"   ‚úÖ –ï—Å—Ç—å –≤—ã–≤–æ–¥: {has_output}")

        return success and has_output

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def quick_caching_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üíæ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        result = subprocess.run(
            [
                "py",
                "-c",
                "import app; info1 = app.get_cached_system_info(); info2 = app.get_cached_system_info(); print('Cache works:', bool(info1 and info2 and info1 == info2))",
            ],
            capture_output=True,
            text=True,
            timeout=5,
            encoding="utf-8",
            errors="ignore",
        )

        cache_works = "Cache works: True" in result.stdout

        print(f"   ‚úÖ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç: {cache_works}")

        return cache_works

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print("‚ö° PNEUMOSTABSIM QUICK PERFORMANCE TEST")
    print("=" * 40)

    tests = [
        ("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", quick_startup_test),
        ("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", quick_monitoring_test),
        ("–£—Ç–∏–ª–∏—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏", quick_diagnostic_test),
        ("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ", quick_caching_test),
    ]

    results = []

    for test_name, test_func in tests:
        print(f"\n--- {test_name.upper()} ---")

        try:
            start_time = time.time()
            success = test_func()
            test_time = time.time() - start_time

            results.append((test_name, success, test_time))

            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"   {status} ({test_time:.1f}—Å)")

        except Exception as e:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
            results.append((test_name, False, 0))

    # –°–≤–æ–¥–∫–∞
    print("\n" + "=" * 40)
    print("üìä –°–í–û–î–ö–ê –ë–´–°–¢–†–û–ì–û –¢–ï–°–¢–ê")
    print("=" * 40)

    passed = sum(1 for _, success, _ in results if success)
    total = len(results)

    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {passed / total * 100:.1f}%")

    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")

    print("=" * 40)

    return 0 if passed == total else 1


if __name__ == "__main__":
    sys.exit(main())
