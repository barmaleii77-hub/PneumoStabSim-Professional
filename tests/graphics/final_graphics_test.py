#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢: –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã PneumoStabSim
Complete performance and functionality analysis of optimized graphics system
"""

import sys
import time
import json
from pathlib import Path


def generate_final_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢: –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –ì–†–ê–§–ò–ö–ò")
    print("=" * 80)

    # –ü—É—Ç—å –∫ QML —Ñ–∞–π–ª—É
    project_root = Path(__file__).parent.parent.parent
    qml_file = project_root / "assets" / "qml" / "main_optimized.qml"

    if not qml_file.exists():
        print(f"‚ùå QML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {qml_file}")
        return False

    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    with open(qml_file, "r", encoding="utf-8") as f:
        qml_content = f.read()

    print(f"üìÑ QML —Ñ–∞–π–ª: {qml_file.name}")
    print(
        f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(qml_content):,} —Å–∏–º–≤–æ–ª–æ–≤ ({len(qml_content.splitlines())} —Å—Ç—Ä–æ–∫)"
    )
    print()

    # ==========================================
    # –ê–ù–ê–õ–ò–ó –û–°–ù–û–í–ù–´–• –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô
    # ==========================================

    print("üöÄ –ê–ù–ê–õ–ò–ó –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô:")
    print("=" * 50)

    optimizations = {
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        "animationCache": ("üß† –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏", "basePhase:", "flSin:", "frSin:"),
        "geometryCache": (
            "‚öôÔ∏è –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –∫—ç—à",
            "calculateJRod",
            "normalizeCylDirection",
        ),
        "_geometryDirty": ("‚ö° –õ–µ–Ω–∏–≤–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ", "getGeometry()", "_cachedGeometry"),
        "cachedWorldPerPixel": ("üñ±Ô∏è –ö—ç—à –º—ã—à–∏", "updateMouseCache", "Connections"),
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        "glassIOR": ("üîç –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è", "indexOfRefraction:", "1.52"),
        "iblEnabled": ("üåü IBL –æ—Å–≤–µ—â–µ–Ω–∏–µ", "lightProbe:", "probeExposure:"),
        "bloomThreshold": ("‚ú® –ü–æ—Ä–æ–≥ Bloom", "glowHDRMinimumValue:", "bloomThreshold"),
        "ssaoRadius": ("üåë –†–∞–¥–∏—É—Å SSAO", "aoDistance:", "ssaoRadius"),
        "shadowSoftness": ("üå´Ô∏è –ú—è–≥–∫–æ—Å—Ç—å —Ç–µ–Ω–µ–π", "shadowBias:", "shadowSoftness"),
        "tonemapActive": ("üé® –¢–æ–Ω–µ–º–∞–ø–ø–∏–Ω–≥", "tonemapMode:", "TonemapModeFilmic"),
        "vignetteEnabled": (
            "üñºÔ∏è –í–∏–Ω—å–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "vignetteEnabled:",
            "vignetteStrength:",
        ),
        "dofFocusDistance": (
            "üîç Depth of Field",
            "depthOfFieldEnabled:",
            "dofFocusDistance",
        ),
        # Update —Ñ—É–Ω–∫—Ü–∏–∏
        "applyBatchedUpdates": (
            "üì° Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            "applyGeometryUpdates",
            "applyEffectsUpdates",
        ),
    }

    found_optimizations = {}

    for key, (name, *indicators) in optimizations.items():
        found = all(indicator in qml_content for indicator in indicators)
        found_optimizations[key] = found

        status = "‚úÖ" if found else "‚ùå"
        print(f"{status} {name}")

        if found:
            # –ü–æ–¥—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
            usage_count = sum(qml_content.count(indicator) for indicator in indicators)
            print(f"    üî∏ –ù–∞–π–¥–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {usage_count}")
        else:
            missing = [ind for ind in indicators if ind not in qml_content]
            if missing:
                print(f"    ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {', '.join(missing[:2])}")

    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    total_optimizations = len(found_optimizations)
    successful_optimizations = sum(found_optimizations.values())
    optimization_percentage = (successful_optimizations / total_optimizations) * 100

    print()
    print("üìà –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    print(
        f"–í–Ω–µ–¥—Ä–µ–Ω–æ: {successful_optimizations}/{total_optimizations} ({optimization_percentage:.1f}%)"
    )

    # ==========================================
    # –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
    # ==========================================

    print()
    print("‚ö° –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
    print("=" * 50)

    # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    iterations = 10000

    # –ë–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
    start_time = time.perf_counter()

    for i in range(iterations):
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —É–≥–ª–æ–≤
        import math

        time_val = i * 0.016  # 60 FPS
        frequency = 1.0
        amplitude = 8.0

        # –ë–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è - –∫–∞–∂–¥—ã–π —É–≥–æ–ª –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
        for corner in range(4):  # 4 —É–≥–ª–∞ –ø–æ–¥–≤–µ—Å–∫–∏
            base_phase = time_val * frequency * 2 * math.pi
            phase_offset = corner * 90 * math.pi / 180
            angle_val = amplitude * math.sin(base_phase + phase_offset)

    uncached_time = time.perf_counter() - start_time

    # –° –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    start_time = time.perf_counter()

    # –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    pi_2 = 2 * math.pi
    pi_over_180 = math.pi / 180
    phase_offsets = [i * 90 * pi_over_180 for i in range(4)]

    for i in range(iterations):
        time_val = i * 0.016
        base_phase = time_val * 1.0 * pi_2  # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã

        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç - –æ–¥–Ω–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ base_phase, 4 sin()
        for phase_offset in phase_offsets:
            angle_val = 8.0 * math.sin(base_phase + phase_offset)

    cached_time = time.perf_counter() - start_time

    performance_gain = (uncached_time - cached_time) / uncached_time * 100
    fps_uncached = 1.0 / (uncached_time / iterations) if uncached_time > 0 else 0
    fps_cached = 1.0 / (cached_time / iterations) if cached_time > 0 else 0

    print(f"‚è±Ô∏è –ë–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:  {uncached_time * 1000:.2f}–º—Å ({fps_uncached:.0f} FPS)")
    print(f"‚è±Ô∏è –° –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º:   {cached_time * 1000:.2f}–º—Å ({fps_cached:.0f} FPS)")
    print(f"üöÄ –ü—Ä–∏—Ä–æ—Å—Ç:         {performance_gain:.1f}%")

    # ==========================================
    # –ê–ù–ê–õ–ò–ó –ü–ê–ú–Ø–¢–ò
    # ==========================================

    print()
    print("üíæ –ê–ù–ê–õ–ò–ó –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ü–ê–ú–Ø–¢–ò:")
    print("=" * 50)

    # –ü–æ–¥—Å—á–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ QML
    cache_objects = [
        "animationCache",
        "geometryCache",
        "_cachedGeometry",
        "cachedWorldPerPixel",
        "cachedFovRad",
        "cachedTanHalfFov",
    ]

    memory_optimizations = 0
    for cache_obj in cache_objects:
        if cache_obj in qml_content:
            memory_optimizations += 1
            print(f"‚úÖ {cache_obj} - –∞–∫—Ç–∏–≤–µ–Ω")
        else:
            print(f"‚ùå {cache_obj} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    memory_efficiency = (memory_optimizations / len(cache_objects)) * 100
    print(
        f"üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏: {memory_optimizations}/{len(cache_objects)} ({memory_efficiency:.1f}%)"
    )

    # ==========================================
    # –û–ë–©–ò–ô –ò–¢–û–ì
    # ==========================================

    print()
    print("üèÜ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
    print("=" * 50)

    final_score = (
        optimization_percentage + min(100, performance_gain) + memory_efficiency
    ) / 3

    print(f"üé® –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:  {optimization_percentage:.1f}%")
    print(f"‚ö° –ü—Ä–∏—Ä–æ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {performance_gain:.1f}%")
    print(f"üíæ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏:      {memory_efficiency:.1f}%")
    print(f"üéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê:              {final_score:.1f}%")

    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    if final_score >= 95:
        grade = "üèÜ –ü–†–ï–í–û–°–•–û–î–ù–û"
        color = "\033[92m"  # –ó–µ–ª–µ–Ω—ã–π
    elif final_score >= 85:
        grade = "ü•á –û–¢–õ–ò–ß–ù–û"
        color = "\033[94m"  # –°–∏–Ω–∏–π
    elif final_score >= 75:
        grade = "ü•à –•–û–†–û–®–û"
        color = "\033[93m"  # –ñ–µ–ª—Ç—ã–π
    elif final_score >= 65:
        grade = "ü•â –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û"
        color = "\033[95m"  # –ú–∞–≥–µ–Ω—Ç–∞
    else:
        grade = "‚ùå –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò"
        color = "\033[91m"  # –ö—Ä–∞—Å–Ω—ã–π

    reset_color = "\033[0m"

    print(f"\n{color}{grade}: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞ PneumoStabSim{reset_color}")

    # ==========================================
    # –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    # ==========================================

    print()
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 50)

    if final_score >= 90:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        print("‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–Ω–µ–¥—Ä–µ–Ω—ã")
        print("‚úÖ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        print("üéØ –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç —Å –ü—Ä–æ—Ñ–∞–π–ª–µ—Ä–æ–º")
    elif final_score >= 75:
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("‚ö†Ô∏è –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        if optimization_percentage < 90:
            print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    else:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        print("üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ–¥—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report_data = {
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
        "qml_file_size": len(qml_content),
        "qml_lines": len(qml_content.splitlines()),
        "optimizations": found_optimizations,
        "optimization_percentage": optimization_percentage,
        "performance_gain": performance_gain,
        "memory_efficiency": memory_efficiency,
        "final_score": final_score,
        "grade": grade,
        "fps_uncached": fps_uncached,
        "fps_cached": fps_cached,
    }

    report_file = project_root / "tests" / "graphics" / "final_graphics_report.json"
    with open(report_file, "w", encoding="utf-8") as f:
        json.dump(report_data, f, indent=2, ensure_ascii=False)

    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

    return final_score >= 75


if __name__ == "__main__":
    success = generate_final_report()
    print("\n" + "=" * 80)
    if success:
        print("üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("‚ö†Ô∏è –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    print("=" * 80)
    sys.exit(0 if success else 1)
