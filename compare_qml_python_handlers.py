# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–∂–¥—É QML –∏ panel_graphics.py
–ù–∞—Ö–æ–¥–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
"""

import re
from pathlib import Path


def extract_qml_properties(qml_file):
    """–ò–∑–≤–ª–µ—á—å —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ QML —Ñ–∞–π–ª–∞"""
    with open(qml_file, "r", encoding="utf-8") as f:
        content = f.read()

    # –ò—â–µ–º property –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    pattern = r"property\s+(\w+)\s+(\w+):\s*([^\n]+)"
    matches = re.findall(pattern, content)

    properties = {}
    for prop_type, prop_name, default_value in matches:
        properties[prop_name] = {"type": prop_type, "default": default_value.strip()}

    return properties


def extract_qml_functions(qml_file):
    """–ò–∑–≤–ª–µ—á—å —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ QML —Ñ–∞–π–ª–∞"""
    with open(qml_file, "r", encoding="utf-8") as f:
        content = f.read()

    # –ò—â–µ–º function –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    pattern = r"function\s+(\w+)\s*\([^)]*\)"
    matches = re.findall(pattern, content)

    return set(matches)


def extract_python_handlers(py_file):
    """–ò–∑–≤–ª–µ—á—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ Python —Ñ–∞–π–ª–∞"""
    with open(py_file, "r", encoding="utf-8") as f:
        content = f.read()

    # –ò—â–µ–º @Slot –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    pattern = r"def\s+(on_\w+_changed)\s*\("
    matches = re.findall(pattern, content)

    return set(matches)


def extract_python_signals(py_file):
    """–ò–∑–≤–ª–µ—á—å —Å–∏–≥–Ω–∞–ª—ã –∏–∑ Python —Ñ–∞–π–ª–∞"""
    with open(py_file, "r", encoding="utf-8") as f:
        content = f.read()

    # –ò—â–µ–º Signal –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    pattern = r"(\w+_changed)\s*=\s*Signal"
    matches = re.findall(pattern, content)

    return set(matches)


def extract_python_properties(py_file):
    """–ò–∑–≤–ª–µ—á—å —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ current_graphics —Å–ª–æ–≤–∞—Ä—è"""
    with open(py_file, "r", encoding="utf-8") as f:
        content = f.read()

    # –ò—â–µ–º self.current_graphics —Å–ª–æ–≤–∞—Ä—å
    pattern = r"'(\w+)':\s*([^,\n]+)"
    matches = re.findall(pattern, content)

    properties = {}
    for prop_name, default_value in matches:
        properties[prop_name] = default_value.strip()

    return properties


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    qml_file = Path("assets/qml/main_optimized.qml")
    py_file = Path("src/ui/panels/panel_graphics.py")

    if not qml_file.exists():
        print(f"‚ùå QML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {qml_file}")
        return

    if not py_file.exists():
        print(f"‚ùå Python —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {py_file}")
        return

    print("=" * 80)
    print("üîç –°–†–ê–í–ù–ï–ù–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í QML –ò PYTHON")
    print("=" * 80)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    qml_props = extract_qml_properties(qml_file)
    qml_funcs = extract_qml_functions(qml_file)
    py_handlers = extract_python_handlers(py_file)
    py_signals = extract_python_signals(py_file)
    py_props = extract_python_properties(py_file)

    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   QML —Å–≤–æ–π—Å—Ç–≤–∞: {len(qml_props)}")
    print(f"   QML —Ñ—É–Ω–∫—Ü–∏–∏: {len(qml_funcs)}")
    print(f"   Python –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {len(py_handlers)}")
    print(f"   Python —Å–∏–≥–Ω–∞–ª—ã: {len(py_signals)}")
    print(f"   Python —Å–≤–æ–π—Å—Ç–≤–∞: {len(py_props)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    print("\nüîç –ê–ù–ê–õ–ò–ó –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í:")
    print("-" * 80)

    # –°–≤–æ–π—Å—Ç–≤–∞ –≤ Python, –Ω–æ –Ω–µ –≤ QML
    missing_in_qml = set()
    for py_prop in py_props.keys():
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º snake_case –≤ camelCase –¥–ª—è –ø–æ–∏—Å–∫–∞
        camel_case_variants = [
            py_prop,
            "".join(
                word.capitalize() if i > 0 else word
                for i, word in enumerate(py_prop.split("_"))
            ),
        ]

        found = False
        for variant in camel_case_variants:
            if variant in qml_props:
                found = True
                break

        if not found:
            missing_in_qml.add(py_prop)

    if missing_in_qml:
        print(f"\n‚ùå –°–í–û–ô–°–¢–í–ê –í PYTHON, –ù–û –ù–ï –í QML ({len(missing_in_qml)}):")
        for prop in sorted(missing_in_qml):
            print(f"   - {prop} = {py_props[prop]}")
    else:
        print("\n‚úÖ –í—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ Python –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ QML")

    # –°–≤–æ–π—Å—Ç–≤–∞ –≤ QML, –Ω–æ –Ω–µ –≤ Python
    missing_in_python = set()
    for qml_prop in qml_props.keys():
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º camelCase –≤ snake_case –¥–ª—è –ø–æ–∏—Å–∫–∞
        snake_case = re.sub(r"([A-Z])", r"_\1", qml_prop).lower().lstrip("_")

        if snake_case not in py_props and qml_prop not in py_props:
            missing_in_python.add(qml_prop)

    if missing_in_python:
        print(f"\n‚ö†Ô∏è –°–í–û–ô–°–¢–í–ê –í QML, –ù–û –ù–ï –í PYTHON ({len(missing_in_python)}):")
        for prop in sorted(missing_in_python):
            prop_info = qml_props[prop]
            print(f"   - {prop}: {prop_info['type']} = {prop_info['default']}")
    else:
        print("\n‚úÖ –í—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ QML —É—á—Ç–µ–Ω—ã –≤ Python")

    # –§—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ QML
    update_functions = {
        f for f in qml_funcs if "update" in f.lower() or "apply" in f.lower()
    }

    print(f"\nüìù –§–£–ù–ö–¶–ò–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –í QML ({len(update_functions)}):")
    for func in sorted(update_functions):
        print(f"   - {func}()")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ Python
    print(f"\nüîß –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í PYTHON ({len(py_handlers)}):")
    handler_groups = {}
    for handler in sorted(py_handlers):
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
        prefix = handler.split("_")[1] if "_" in handler else "other"
        if prefix not in handler_groups:
            handler_groups[prefix] = []
        handler_groups[prefix].append(handler)

    for prefix, handlers in sorted(handler_groups.items()):
        print(f"\n   [{prefix.upper()}] ({len(handlers)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤):")
        for handler in handlers:
            print(f"      - {handler}()")

    # –°–∏–≥–Ω–∞–ª—ã –≤ Python
    print(f"\nüì° –°–ò–ì–ù–ê–õ–´ –í PYTHON ({len(py_signals)}):")
    for signal in sorted(py_signals):
        print(f"   - {signal}")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("-" * 80)

    if missing_in_qml:
        print("\n1. –î–æ–±–∞–≤–∏—Ç—å –≤ QML —Å–ª–µ–¥—É—é—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞:")
        for prop in sorted(missing_in_qml)[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            snake_to_camel = "".join(
                word.capitalize() if i > 0 else word
                for i, word in enumerate(prop.split("_"))
            )
            default_val = py_props[prop]

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
            if default_val in ["true", "false", "True", "False"]:
                prop_type = "bool"
            elif default_val.startswith("#"):
                prop_type = "string"
            elif "." in default_val:
                prop_type = "real"
            else:
                prop_type = "int"

            print(f"   property {prop_type} {snake_to_camel}: {default_val}")

    if missing_in_python:
        print("\n2. –î–æ–±–∞–≤–∏—Ç—å –≤ Python –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è:")
        for prop in sorted(missing_in_python)[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            snake_case = re.sub(r"([A-Z])", r"_\1", prop).lower().lstrip("_")
            print("   @Slot(...)")
            print(f"   def on_{snake_case}_changed(self, value):")
            print(f"       self.current_graphics['{snake_case}'] = value")
            print("       self.emit_..._update()")
            print()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    critical_functions = [
        "applyBatchedUpdates",
        "applyGeometryUpdates",
        "applyLightingUpdates",
        "applyMaterialUpdates",
        "applyEnvironmentUpdates",
        "applyQualityUpdates",
        "applyCameraUpdates",
        "applyEffectsUpdates",
    ]

    missing_critical = set(critical_functions) - qml_funcs

    if missing_critical:
        print("\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –í QML:")
        for func in missing_critical:
            print(f"   - {func}()")
    else:
        print("\n‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ QML")

    print("\n" + "=" * 80)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 80)


if __name__ == "__main__":
    main()
