#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è PneumoStabSim
Final readiness check for PneumoStabSim virtual environment
"""
import sys
import subprocess
from pathlib import Path
from datetime import datetime

def print_header():
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    print("üöÄ" * 25)
    print("üêç –í–ò–†–¢–£–ê–õ–¨–ù–û–ï –û–ö–†–£–ñ–ï–ù–ò–ï PNEUMOSTABSIM - –ì–û–¢–û–í–û!")
    print("üöÄ" * 25)
    print(f"üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()

def check_venv_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üìã –°–¢–ê–¢–£–° –í–ò–†–¢–£–ê–õ–¨–ù–û–ì–û –û–ö–†–£–ñ–ï–ù–ò–Ø:")
    print("=" * 50)
    
    venv_path = Path(".venv")
    if venv_path.exists():
        print("‚úÖ –ü–∞–ø–∫–∞ .venv —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
        if sys.platform.startswith('win'):
            python_exe = venv_path / "Scripts" / "python.exe"
            pip_exe = venv_path / "Scripts" / "pip.exe"
            activate_bat = venv_path / "Scripts" / "activate.bat"
        else:
            python_exe = venv_path / "bin" / "python"
            pip_exe = venv_path / "bin" / "pip"
            activate_bat = venv_path / "bin" / "activate"
        
        if python_exe.exists():
            print("‚úÖ Python –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå Python –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –ù–ï –Ω–∞–π–¥–µ–Ω")
            
        if pip_exe.exists():
            print("‚úÖ pip –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå pip –ù–ï –Ω–∞–π–¥–µ–Ω")
            
        if activate_bat.exists():
            print("‚úÖ –°–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå –°–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ù–ï –Ω–∞–π–¥–µ–Ω")
            
    else:
        print("‚ùå –ü–∞–ø–∫–∞ .venv –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print("   –°–æ–∑–¥–∞–π—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: python create_venv.py")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    current_python = Path(sys.executable)
    if ".venv" in str(current_python):
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ê–ö–¢–ò–í–ù–û")
        print(f"   –ü—É—Ç—å: {current_python}")
    else:
        print("‚ö†Ô∏è  –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ù–ï –∞–∫—Ç–∏–≤–Ω–æ")
        print("   –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ: start_venv.bat")
    
    return True

def check_packages():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
    print("\nüì¶ –ü–†–û–í–ï–†–ö–ê –ü–ê–ö–ï–¢–û–í:")
    print("=" * 50)
    
    required_packages = [
        ("PySide6", "PySide6 Core"),
        ("PySide6.QtWidgets", "PySide6 Widgets"),
        ("PySide6.QtQuick", "PySide6 Quick"),
        ("PySide6.QtQuick3D", "PySide6 Quick3D"),
        ("PySide6.QtQuickWidgets", "PySide6 QuickWidgets"),
        ("numpy", "NumPy"),
        ("scipy", "SciPy"),
        ("matplotlib", "Matplotlib"),
        ("OpenGL", "PyOpenGL"),
    ]
    
    success_count = 0
    total_count = len(required_packages)
    
    for module, name in required_packages:
        try:
            __import__(module)
            print(f"‚úÖ {name}")
            success_count += 1
        except ImportError as e:
            print(f"‚ùå {name}: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} –ø–∞–∫–µ—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    if success_count == total_count:
        print("üéâ –í–°–ï –ü–ê–ö–ï–¢–´ –ì–û–¢–û–í–´ –ö –†–ê–ë–û–¢–ï!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞–∫–µ—Ç—ã —Ç—Ä–µ–±—É—é—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("   –ö–æ–º–∞–Ω–¥–∞: pip install -r requirements.txt")
        return False

def check_project_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüìÇ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í –ü–†–û–ï–ö–¢–ê:")
    print("=" * 50)
    
    required_files = [
        ("app.py", "–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
        ("requirements.txt", "–°–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"),
        ("src/ui/main_window.py", "–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ"),
        ("src/ui/panels/panel_geometry.py", "–ü–∞–Ω–µ–ª—å –≥–µ–æ–º–µ—Ç—Ä–∏–∏"),
        ("assets/qml/main.qml", "QML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"),
        ("create_venv.py", "–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"),
        ("setup_venv.py", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"),
        ("start_venv.bat", "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è"),
        ("run_app.bat", "–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫"),
    ]
    
    success_count = 0
    total_count = len(required_files)
    
    for file_path, description in required_files:
        if Path(file_path).exists():
            print(f"‚úÖ {description}")
            success_count += 1
        else:
            print(f"‚ùå {description}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ")
    
    return success_count >= total_count * 0.8  # 80% —Ñ–∞–π–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å

def check_scripts():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞"""
    print("\nüîß –ü–†–û–í–ï–†–ö–ê –°–ö–†–ò–ü–¢–û–í –ó–ê–ü–£–°–ö–ê:")
    print("=" * 50)
    
    scripts = [
        ("start_venv.bat", "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è (CMD)"),
        ("start_venv.ps1", "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è (PowerShell)"),
        ("run_app.bat", "–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
        ("create_venv.py", "–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"),
    ]
    
    for script, description in scripts:
        if Path(script).exists():
            print(f"‚úÖ {description}")
        else:
            print(f"‚ùå {description}: –Ω–µ –Ω–∞–π–¥–µ–Ω")

def print_usage_info():
    """–ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"""
    print("\nüöÄ –°–ü–û–°–û–ë–´ –ó–ê–ü–£–°–ö–ê:")
    print("=" * 50)
    print("1Ô∏è‚É£  –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
    print("    run_app.bat")
    print()
    print("2Ô∏è‚É£  –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("    start_venv.bat        (Command Prompt)")
    print("    .\\start_venv.ps1       (PowerShell)")
    print("    .venv\\Scripts\\activate  (–†—É—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è)")
    print()
    print("3Ô∏è‚É£  –ó–∞–ø—É—Å–∫ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏:")
    print("    python app.py")
    print()
    print("üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´:")
    print("    python setup_venv.py                - –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
    print("    python check_geometry_connection.py - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print("    python test_slider_precision.py     - –¢–µ—Å—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏")
    print("    pip list                            - –°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤")

def print_features():
    """–ü–µ—á–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüéÆ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø:")
    print("=" * 50)
    print("‚úÖ –†—É—Å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ –≤—Å–µ—Ö –ø–∞–Ω–µ–ª—è—Ö")
    print("‚úÖ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å Qt Quick 3D + Direct3D 11")
    print("‚úÖ 12 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é 1–º–º")
    print("‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ 3D —Å—Ü–µ–Ω—ã")
    print("‚úÖ –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–≤–µ—Å–∫–∞ (4 —É–≥–ª–∞)")
    print("‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞–º–µ—Ä–∞ (–≤—Ä–∞—â–µ–Ω–∏–µ, –º–∞—Å—à—Ç–∞–±)")
    print("‚úÖ U-Frame —Å —Ü–∏–ª–∏–Ω–¥—Ä–∞–º–∏ –∏ —Ä—ã—á–∞–≥–∞–º–∏")
    print("‚úÖ –ü–æ—Ä—à–Ω–∏ –¥–≤–∏–∂—É—Ç—Å—è –≤ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö —Ü–∏–ª–∏–Ω–¥—Ä–∞—Ö")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print_header()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    venv_ok = check_venv_status()
    packages_ok = check_packages()
    files_ok = check_project_files()
    
    check_scripts()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    print("\n" + "üéØ" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:")
    print("üéØ" * 50)
    
    if venv_ok and packages_ok and files_ok:
        print("üéâ –í–ò–†–¢–£–ê–õ–¨–ù–û–ï –û–ö–†–£–ñ–ï–ù–ò–ï –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–û!")
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        print("üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        
        print_usage_info()
        print_features()
        
        print("\n" + "üéä" * 50)
        print("PNEUMOSTABSIM –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!")
        print("üéä" * 50)
        
        return True
    else:
        print("‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê")
        
        if not venv_ok:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º")
            print("   –†–µ—à–µ–Ω–∏–µ: python create_venv.py")
        
        if not packages_ok:
            print("‚ùå –ù–µ –≤—Å–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            print("   –†–µ—à–µ–Ω–∏–µ: pip install -r requirements.txt")
        
        if not files_ok:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞")
        
        print("\nüîß –ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        print("   python venv_ready.py")
        
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
