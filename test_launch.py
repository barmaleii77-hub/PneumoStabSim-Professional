#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –∑–∞–ø—É—Å–∫–∞ PneumoStabSim
"""
import subprocess
import sys
import time

def test_import():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    try:
        result = subprocess.run([
            sys.executable, "-c", 
            "from src.common import init_logging; print('‚úÖ –ò–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç')"
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤: {e}")
        return False

def test_help():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø—Ä–∞–≤–∫—É"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏...")
    try:
        result = subprocess.run([
            sys.executable, "app.py", "--help"
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0 and "PneumoStabSim" in result.stdout:
            print("‚úÖ –°–ø—Ä–∞–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø—Ä–∞–≤–∫–∏: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏: {e}")
        return False

def test_test_mode():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ test-mode...")
    try:
        start_time = time.time()
        result = subprocess.run([
            sys.executable, "app.py", "--test-mode"
        ], capture_output=True, text=True, timeout=15)
        
        elapsed = time.time() - start_time
        
        if result.returncode == 0 and elapsed < 10:
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç ({elapsed:.1f}s)")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞: {result.stderr}")
            return False
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–∏—Å (–ø—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç)")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è test-mode: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ñ–ò–ú–û–í –ó–ê–ü–£–°–ö–ê PNEUMOSTABSIM")
    print("=" * 60)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_import),
        ("–°–ø—Ä–∞–≤–∫–∞", test_help),
        ("–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º", test_test_mode),
    ]
    
    passed = 0
    total = len(tests)
    
    for name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                print(f"   ‚ö†Ô∏è {name} –Ω–µ –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç")
        except KeyboardInterrupt:
            print(f"\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"   ‚ùå {name}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - {e}")
    
    print("\n" + "=" * 60)
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("   –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: python launch.py --no-block")
    elif passed >= total // 2:
        print("‚ö†Ô∏è –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û")
        print("   –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: python app.py --test-mode")
    else:
        print("‚ùå –ú–ù–û–ì–û –¢–ï–°–¢–û–í –ù–ï –ü–†–û–ô–î–ï–ù–û")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        print("   –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ: pip install -r requirements.txt")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
