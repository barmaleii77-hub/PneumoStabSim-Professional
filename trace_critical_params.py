#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üî• –î–ï–¢–ï–ö–¢–ò–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–ê–†–ê–ú–ï–¢–†–û–í –î–û CANVAS
–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –ü–û–õ–ù–û–ì–û –ü–£–¢–ò: Python ‚Üí QML property ‚Üí ExtendedSceneEnvironment ‚Üí –†–µ–Ω–¥–µ—Ä–∏–Ω–≥
"""

import re
from pathlib import Path

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
CRITICAL_PARAMS = {
    # –≠—Ñ—Ñ–µ–∫—Ç—ã (–ö–†–ò–¢–ò–ß–ù–û –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞)
    "bloomThreshold": {
        "description": "–ü–æ—Ä–æ–≥ Bloom —ç—Ñ—Ñ–µ–∫—Ç–∞",
        "expect_in_qml_property": True,
        "expect_in_environment": True,
        "qml_binding": "bloomThreshold:",
        "env_property": "glowHDRMinimumValue",
    },
    "ssaoRadius": {
        "description": "–†–∞–¥–∏—É—Å SSAO –∑–∞—Ç–µ–Ω–µ–Ω–∏—è",
        "expect_in_qml_property": True,
        "expect_in_environment": True,
        "qml_binding": "ssaoRadius:",
        "env_property": "aoDistance",
    },
    "shadowSoftness": {
        "description": "–ú—è–≥–∫–æ—Å—Ç—å —Ç–µ–Ω–µ–π",
        "expect_in_qml_property": True,
        "expect_in_light": True,
        "qml_binding": "shadowSoftness:",
        "light_property": "shadowFilter",
    },
    # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã (–ö–†–ò–¢–ò–ß–ù–û –¥–ª—è —Ä–µ–∞–ª–∏–∑–º–∞)
    "glassIOR": {
        "description": "üî• –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è —Å—Ç–µ–∫–ª–∞",
        "expect_in_qml_property": True,
        "expect_in_material": True,
        "qml_binding": "glassIOR:",
        "material_property": "indexOfRefraction",
    },
    # –û–∫—Ä—É–∂–µ–Ω–∏–µ (–ö–†–ò–¢–ò–ß–ù–û –¥–ª—è –æ—Å–≤–µ—â–µ–Ω–∏—è)
    "iblEnabled": {
        "description": "üåü IBL –≤–∫–ª—é—á–µ–Ω–∏–µ",
        "expect_in_qml_property": True,
        "expect_in_environment": True,
        "qml_binding": "iblEnabled:",
        "env_property": "lightProbe",
    },
    "iblIntensity": {
        "description": "üåü IBL –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å",
        "expect_in_qml_property": True,
        "expect_in_environment": True,
        "qml_binding": "iblIntensity:",
        "env_property": "probeExposure",
    },
    # –¢–æ–Ω–µ–º–∞–ø–ø–∏–Ω–≥ (–ö–†–ò–¢–ò–ß–ù–û –¥–ª—è —Ü–≤–µ—Ç–∞)
    "tonemapModeIndex": {
        "description": "üé® –†–µ–∂–∏–º —Ç–æ–Ω–µ–º–∞–ø–ø–∏–Ω–≥–∞",
        "expect_in_qml_property": True,
        "expect_in_environment": True,
        "qml_binding": "tonemapMode:",
        "env_property": "tonemapMode",
    },
    # Depth of Field
    "dofFocusDistance": {
        "description": "üì∑ –î–∏—Å—Ç–∞–Ω—Ü–∏—è —Ñ–æ–∫—É—Å–∞",
        "expect_in_qml_property": True,
        "expect_in_environment": True,
        "qml_binding": "dofFocusDistance:",
        "env_property": "depthOfFieldFocusDistance",
    },
}


def check_python_panel():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ Python –ø–∞–Ω–µ–ª–∏"""
    panel_file = Path("src/ui/panels/panel_graphics.py")

    if not panel_file.exists():
        print("‚ùå panel_graphics.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return {}

    content = panel_file.read_text(encoding="utf-8")

    results = {}

    for param, info in CRITICAL_PARAMS.items():
        # –ü–æ–∏—Å–∫ –≤ current_graphics
        pattern = rf"['\"]({param})['\"]"
        found_in_dict = bool(re.search(pattern, content))

        # –ü–æ–∏—Å–∫ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        ui_pattern = rf"self\.{param}\s*="
        found_ui = bool(re.search(ui_pattern, content))

        # –ü–æ–∏—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        handler_pattern = rf"def on_{param}_changed"
        found_handler = bool(re.search(handler_pattern, content))

        # –ü–æ–∏—Å–∫ –≤ emit —Ñ—É–Ω–∫—Ü–∏—è—Ö
        emit_pattern = rf"['\"]({param})['\"].*:"
        found_emit = bool(re.search(emit_pattern, content))

        results[param] = {
            "in_dict": found_in_dict,
            "has_ui": found_ui,
            "has_handler": found_handler,
            "in_emit": found_emit,
            "python_ok": found_in_dict and found_emit,
        }

    return results


def check_qml_properties():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–∫ QML properties"""
    qml_file = Path("assets/qml/main.qml")

    if not qml_file.exists():
        print("‚ùå main.qml –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return {}

    content = qml_file.read_text(encoding="utf-8")

    results = {}

    for param, info in CRITICAL_PARAMS.items():
        # –ü–æ–∏—Å–∫ property –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        property_pattern = rf"property\s+(real|int|bool|string|color|url)\s+{param}"
        found_property = bool(re.search(property_pattern, content))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø
        match = re.search(property_pattern, content)
        property_type = match.group(1) if match else None

        results[param] = {"declared": found_property, "type": property_type}

    return results


def check_qml_bindings():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫ –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º"""
    qml_file = Path("assets/qml/main.qml")

    if not qml_file.exists():
        return {}

    content = qml_file.read_text(encoding="utf-8")

    results = {}

    for param, info in CRITICAL_PARAMS.items():
        bindings_found = []

        # –ü–æ–∏—Å–∫ –≤ ExtendedSceneEnvironment
        if info.get("expect_in_environment"):
            env_prop = info.get("env_property")
            if env_prop:
                # –ò—â–µ–º –ø—Ä–∏–≤—è–∑–∫—É –≤–∏–¥–∞: probeExposure: iblIntensity
                pattern = rf"{env_prop}\s*:\s*.*{param}"
                if re.search(pattern, content):
                    bindings_found.append(f"ExtendedSceneEnvironment.{env_prop}")

        # –ü–æ–∏—Å–∫ –≤ PrincipledMaterial
        if info.get("expect_in_material"):
            mat_prop = info.get("material_property")
            if mat_prop:
                pattern = rf"{mat_prop}\s*:\s*.*{param}"
                if re.search(pattern, content):
                    bindings_found.append(f"PrincipledMaterial.{mat_prop}")

        # –ü–æ–∏—Å–∫ –≤ DirectionalLight
        if info.get("expect_in_light"):
            light_prop = info.get("light_property")
            if light_prop:
                pattern = rf"{light_prop}\s*:\s*.*{param}"
                if re.search(pattern, content):
                    bindings_found.append(f"DirectionalLight.{light_prop}")

        results[param] = {
            "bound_to": bindings_found,
            "is_bound": len(bindings_found) > 0,
        }

    return results


def check_update_functions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ update —Ñ—É–Ω–∫—Ü–∏—è—Ö"""
    qml_file = Path("assets/qml/main.qml")

    if not qml_file.exists():
        return {}

    content = qml_file.read_text(encoding="utf-8")

    results = {}

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫ –∫–∞–∫–æ–π update —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    update_functions = {
        "applyEffectsUpdates": [
            "bloomThreshold",
            "ssaoRadius",
            "dofFocusDistance",
            "tonemapMode",
        ],
        "applyMaterialUpdates": ["glassIOR"],
        "applyEnvironmentUpdates": ["iblEnabled", "iblIntensity"],
        "applyQualityUpdates": ["shadowSoftness"],
    }

    for func_name, params in update_functions.items():
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
        func_start = content.find(f"function {func_name}")
        if func_start == -1:
            continue

        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏
        func_end = content.find("\n    }", func_start)
        if func_end == -1:
            func_end = content.find("\n    function ", func_start + 1)
        if func_end == -1:
            func_end = len(content)

        func_body = content[func_start:func_end]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        for param in params:
            if param in CRITICAL_PARAMS:
                # –ò—â–µ–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
                pattern = rf"{param}\s*="
                is_assigned = bool(re.search(pattern, func_body))

                if param not in results:
                    results[param] = {}

                results[param]["in_update_func"] = func_name if is_assigned else None
                results[param]["is_updated"] = is_assigned

    return results


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""

    print("üîç –î–ï–¢–ï–ö–¢–ò–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–ê–†–ê–ú–ï–¢–†–û–í")
    print("=" * 80)
    print()

    # –®–ê–ì 1: Python Panel
    print("üìã –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Python Panel (panel_graphics.py)")
    print("-" * 80)
    python_results = check_python_panel()

    for param, result in python_results.items():
        status = "‚úÖ" if result["python_ok"] else "‚ùå"
        print(
            f"{status} {param:20s} - –°–ª–æ–≤–∞—Ä—å:{result['in_dict']} | UI:{result['has_ui']} | Handler:{result['has_handler']} | Emit:{result['in_emit']}"
        )

    print()

    # –®–ê–ì 2: QML Properties
    print("üìã –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ QML Properties (main.qml)")
    print("-" * 80)
    qml_prop_results = check_qml_properties()

    for param, result in qml_prop_results.items():
        status = "‚úÖ" if result["declared"] else "‚ùå"
        prop_type = result["type"] or "NONE"
        print(
            f"{status} {param:20s} - –û–±—ä—è–≤–ª–µ–Ω: {result['declared']:5} | –¢–∏–ø: {prop_type}"
        )

    print()

    # –®–ê–ì 3: QML Bindings (–ö–†–ò–¢–ò–ß–ù–û!)
    print("üìã –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–æ–∫ –∫ Canvas (main.qml)")
    print("-" * 80)
    binding_results = check_qml_bindings()

    for param, result in binding_results.items():
        status = "‚úÖ" if result["is_bound"] else "‚ùå –°–õ–û–ú–ê–ù–û"
        bindings = (
            ", ".join(result["bound_to"])
            if result["bound_to"]
            else "–ù–ï –ü–†–ò–í–Ø–ó–ê–ù –ö –†–ï–ù–î–ï–†–ò–ù–ì–£!"
        )
        print(f"{status} {param:20s} - –ü—Ä–∏–≤—è–∑–∫–∏: {bindings}")

    print()

    # –®–ê–ì 4: Update Functions
    print("üìã –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ Update Functions (main.qml)")
    print("-" * 80)
    update_results = check_update_functions()

    for param, result in update_results.items():
        status = "‚úÖ" if result.get("is_updated") else "‚ùå"
        func = result.get("in_update_func") or "–ù–ï –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–¢–°–Ø"
        print(f"{status} {param:20s} - –§—É–Ω–∫—Ü–∏—è: {func}")

    print()
    print("=" * 80)

    # –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó
    broken_params = []

    for param, info in CRITICAL_PARAMS.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É
        python_ok = python_results.get(param, {}).get("python_ok", False)
        qml_declared = qml_prop_results.get(param, {}).get("declared", False)
        is_bound = binding_results.get(param, {}).get("is_bound", False)
        is_updated = update_results.get(param, {}).get("is_updated", False)

        if not (python_ok and qml_declared and is_bound and is_updated):
            broken_params.append(
                (
                    param,
                    info["description"],
                    {
                        "python": python_ok,
                        "qml_prop": qml_declared,
                        "binding": is_bound,
                        "update": is_updated,
                    },
                )
            )

    if broken_params:
        print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´!")
        print("=" * 80)
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(broken_params)} —Å–ª–æ–º–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:\n")

        for param, desc, status in broken_params:
            print(f"‚ùå {param} - {desc}")
            print(f"   Python –ø–∞–Ω–µ–ª—å: {'‚úÖ' if status['python'] else '‚ùå'}")
            print(f"   QML property:  {'‚úÖ' if status['qml_prop'] else '‚ùå'}")
            print(
                f"   –ü—Ä–∏–≤—è–∑–∫–∞:      {'‚úÖ' if status['binding'] else '‚ùå –ù–ï –ü–†–ò–í–Ø–ó–ê–ù –ö CANVAS!'}"
            )
            print(f"   Update func:   {'‚úÖ' if status['update'] else '‚ùå'}")
            print()

        print("üí° –†–ï–®–ï–ù–ò–ï:")
        print(
            "   –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫–∏ –≤ ExtendedSceneEnvironment/PrincipledMaterial/Light"
        )
        print("=" * 80)
    else:
        print("üéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("=" * 80)
        print("–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ Canvas —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É!")

    return len(broken_params)


if __name__ == "__main__":
    import sys

    sys.exit(main())
