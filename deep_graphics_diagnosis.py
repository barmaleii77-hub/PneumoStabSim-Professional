#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîç –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –ì–†–ê–§–ò–ö–ò
–ù–∞—Ö–æ–¥–∏–º –ø–æ—á–µ–º—É —Ç—É–º–∞–Ω –∏ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
"""

import sys
import time
from pathlib import Path
from PySide6.QtWidgets import QApplication
from PySide6.QtCore import QTimer

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.ui.main_window import MainWindow

def deep_graphics_diagnosis():
    """–ì–ª—É–±–æ–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –≥—Ä–∞—Ñ–∏–∫–æ–π"""
    print("üîç –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –ì–†–ê–§–ò–ö–ò")
    print("=" * 70)
    
    app = QApplication([])
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
        window = MainWindow(use_qml_3d=True)
        window.show()
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        QTimer.singleShot(2000, lambda: run_deep_diagnosis(window))
        QTimer.singleShot(30000, app.quit)  # –í—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        
        app.exec()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        app.quit()

def run_deep_diagnosis(window):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª—É–±–æ–∫—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"""
    
    if not window._qml_root_object:
        print("‚ùå QML –æ–±—ä–µ–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return
    
    if not hasattr(window, '_graphics_panel') or not window._graphics_panel:
        print("‚ùå GraphicsPanel –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        return
    
    qml = window._qml_root_object
    graphics_panel = window._graphics_panel
    
    print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –≥–ª—É–±–æ–∫—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...")
    
    # 1. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è QML –æ–±—ä–µ–∫—Ç–∞
    print("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 1: QML –û–ë–™–ï–ö–¢")
    print("-" * 50)
    diagnose_qml_object(qml)
    
    # 2. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ GraphicsPanel
    print("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 2: GRAPHICS PANEL")
    print("-" * 50)
    diagnose_graphics_panel(graphics_panel)
    
    # 3. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
    print("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 3: –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –°–ò–ì–ù–ê–õ–û–í")
    print("-" * 50)
    diagnose_signal_connections(window, graphics_panel)
    
    # 4. –¢–µ—Å—Ç –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤ QML —Ñ—É–Ω–∫—Ü–∏–π
    print("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 4: –ü–†–Ø–ú–´–ï –í–´–ó–û–í–´ QML")
    print("-" * 50)
    QTimer.singleShot(1000, lambda: test_direct_qml_calls(qml))
    
    # 5. –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ UI
    print("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 5: –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ß–ï–†–ï–ó UI")
    print("-" * 50)
    QTimer.singleShot(3000, lambda: test_ui_changes(graphics_panel))
    
    # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 6: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê")
    print("-" * 50)
    QTimer.singleShot(5000, lambda: final_check(qml, graphics_panel))

def diagnose_qml_object(qml):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç QML –æ–±—ä–µ–∫—Ç"""
    try:
        print("  üìã –î–û–°–¢–£–ü–ù–´–ï QML –°–í–û–ô–°–¢–í–ê:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        properties_to_check = [
            "fogEnabled", "fogColor", "fogDensity",
            "antialiasingMode", "antialiasingQuality",
            "shadowsEnabled", "shadowQuality"
        ]
        
        for prop in properties_to_check:
            try:
                value = qml.property(prop)
                print(f"     {prop} = {value}")
            except Exception as e:
                print(f"     {prop} = ERROR: {e}")
        
        print("  üìã –î–û–°–¢–£–ü–ù–´–ï QML –ú–ï–¢–û–î–´:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        methods_to_check = [
            "applyEnvironmentUpdates",
            "applyQualityUpdates",
            "updateEnvironment",
            "updateQuality"
        ]
        
        for method in methods_to_check:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ metaObject
                meta_obj = qml.metaObject()
                method_index = meta_obj.indexOfMethod(method)
                if method_index >= 0:
                    print(f"     {method} = –î–û–°–¢–£–ü–ï–ù (–∏–Ω–¥–µ–∫—Å {method_index})")
                else:
                    print(f"     {method} = –ù–ï –ù–ê–ô–î–ï–ù")
            except Exception as e:
                print(f"     {method} = ERROR: {e}")
                
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ QML –æ–±—ä–µ–∫—Ç–∞: {e}")

def diagnose_graphics_panel(graphics_panel):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç GraphicsPanel"""
    try:
        print("  üìã GRAPHICS PANEL –°–û–°–¢–û–Ø–ù–ò–ï:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current_graphics = graphics_panel.current_graphics
        print(f"     fog_enabled = {current_graphics.get('fog_enabled', 'N/A')}")
        print(f"     fog_color = {current_graphics.get('fog_color', 'N/A')}")
        print(f"     fog_density = {current_graphics.get('fog_density', 'N/A')}")
        print(f"     antialiasing = {current_graphics.get('antialiasing', 'N/A')}")
        print(f"     aa_quality = {current_graphics.get('aa_quality', 'N/A')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
        print("  üìã UI –≠–õ–ï–ú–ï–ù–¢–´:")
        
        if hasattr(graphics_panel, 'fog_enabled'):
            ui_fog = graphics_panel.fog_enabled.isChecked()
            print(f"     fog_enabled checkbox = {ui_fog}")
        else:
            print("     fog_enabled checkbox = –ù–ï –ù–ê–ô–î–ï–ù")
        
        if hasattr(graphics_panel, 'antialiasing'):
            ui_aa = graphics_panel.antialiasing.currentIndex()
            print(f"     antialiasing combobox = {ui_aa}")
        else:
            print("     antialiasing combobox = –ù–ï –ù–ê–ô–î–ï–ù")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
        print("  üìã –°–ò–ì–ù–ê–õ–´:")
        
        signals_to_check = [
            'environment_changed',
            'quality_changed',
            'lighting_changed',
            'material_changed'
        ]
        
        for signal_name in signals_to_check:
            if hasattr(graphics_panel, signal_name):
                signal_obj = getattr(graphics_panel, signal_name)
                print(f"     {signal_name} = –î–û–°–¢–£–ü–ï–ù")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
                try:
                    # –≠—Ç–æ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –≤—Å–µ—Ö –≤–µ—Ä—Å–∏—è—Ö Qt
                    receivers_count = signal_obj.receivers(signal_obj)
                    print(f"       –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {receivers_count}")
                except:
                    print(f"       –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            else:
                print(f"     {signal_name} = –ù–ï –ù–ê–ô–î–ï–ù")
                
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ GraphicsPanel: {e}")

def diagnose_signal_connections(window, graphics_panel):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        print("  üìã –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –°–ò–ì–ù–ê–õ–û–í:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ MainWindow
        handlers_to_check = [
            '_on_environment_changed',
            '_on_quality_changed',
            '_on_lighting_changed',
            '_on_material_changed'
        ]
        
        for handler_name in handlers_to_check:
            if hasattr(window, handler_name):
                print(f"     {handler_name} = –î–û–°–¢–£–ü–ï–ù –≤ MainWindow")
            else:
                print(f"     {handler_name} = –ù–ï –ù–ê–ô–î–ï–ù –≤ MainWindow")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        print("  üìã –¢–ï–°–¢ –°–ò–ì–ù–ê–õ–û–í:")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-—Å—á–µ—Ç—á–∏–∫–∏
        test_results = {
            'environment_received': 0,
            'quality_received': 0
        }
        
        def test_env_handler(params):
            test_results['environment_received'] += 1
            print(f"     üî• –¢–ï–°–¢ environment_changed –ø–æ–ª—É—á–µ–Ω #{test_results['environment_received']}")
        
        def test_quality_handler(params):
            test_results['quality_received'] += 1
            print(f"     üî• –¢–ï–°–¢ quality_changed –ø–æ–ª—É—á–µ–Ω #{test_results['quality_received']}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        if hasattr(graphics_panel, 'environment_changed'):
            graphics_panel.environment_changed.connect(test_env_handler)
            print("     ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ environment_changed –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        if hasattr(graphics_panel, 'quality_changed'):
            graphics_panel.quality_changed.connect(test_quality_handler)
            print("     ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ quality_changed –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ emit'—ã
        QTimer.singleShot(500, lambda: test_signal_emission(graphics_panel, test_results))
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

def test_signal_emission(graphics_panel, test_results):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–º–∏—Å—Å–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        print("  üìã –¢–ï–°–¢ –≠–ú–ò–°–°–ò–ò –°–ò–ì–ù–ê–õ–û–í:")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        original_fog = graphics_panel.current_graphics['fog_enabled']
        original_aa = graphics_panel.current_graphics['antialiasing']
        
        # –¢–µ—Å—Ç 1: emit environment_changed
        print("     üß™ –≠–º–∏—Ç–∏–º environment_changed...")
        graphics_panel.emit_environment_update()
        
        # –¢–µ—Å—Ç 2: emit quality_changed  
        print("     üß™ –≠–º–∏—Ç–∏–º quality_changed...")
        graphics_panel.emit_quality_update()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        QTimer.singleShot(1000, lambda: check_signal_test_results(test_results))
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–º–∏—Å—Å–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

def check_signal_test_results(test_results):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("  üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–ì–ù–ê–õ–û–í:")
    print(f"     environment_changed –ø–æ–ª—É—á–µ–Ω–æ: {test_results['environment_received']}")
    print(f"     quality_changed –ø–æ–ª—É—á–µ–Ω–æ: {test_results['quality_received']}")
    
    if test_results['environment_received'] > 0:
        print("     ‚úÖ environment_changed –†–ê–ë–û–¢–ê–ï–¢")
    else:
        print("     ‚ùå environment_changed –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
    
    if test_results['quality_received'] > 0:
        print("     ‚úÖ quality_changed –†–ê–ë–û–¢–ê–ï–¢")
    else:
        print("     ‚ùå quality_changed –ù–ï –†–ê–ë–û–¢–ê–ï–¢")

def test_direct_qml_calls(qml):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã QML —Ñ—É–Ω–∫—Ü–∏–π"""
    try:
        print("  üìã –¢–ï–°–¢ –ü–†–Ø–ú–´–• –í–´–ó–û–í–û–í QML –§–£–ù–ö–¶–ò–ô:")
        
        from PySide6.QtCore import QMetaObject, Q_ARG, Qt
        
        # –¢–µ—Å—Ç 1: applyEnvironmentUpdates
        test_env_params = {
            'fog_enabled': True,
            'fog_color': '#ff0000',
            'fog_density': 0.5
        }
        
        print("     üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º applyEnvironmentUpdates...")
        success1 = QMetaObject.invokeMethod(
            qml,
            "applyEnvironmentUpdates",
            Qt.ConnectionType.DirectConnection,
            Q_ARG("QVariant", test_env_params)
        )
        print(f"     –†–µ–∑—É–ª—å—Ç–∞—Ç: {success1}")
        
        # –¢–µ—Å—Ç 2: applyQualityUpdates
        test_quality_params = {
            'antialiasing': 0,
            'aa_quality': 1,
            'shadows_enabled': True
        }
        
        print("     üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º applyQualityUpdates...")
        success2 = QMetaObject.invokeMethod(
            qml,
            "applyQualityUpdates",
            Qt.ConnectionType.DirectConnection,
            Q_ARG("QVariant", test_quality_params)
        )
        print(f"     –†–µ–∑—É–ª—å—Ç–∞—Ç: {success2}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Å–≤–æ–π—Å—Ç–≤–∞
        QTimer.singleShot(500, lambda: check_qml_property_changes(qml))
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤ QML: {e}")
        import traceback
        traceback.print_exc()

def check_qml_property_changes(qml):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ QML —Å–≤–æ–π—Å—Ç–≤–∞"""
    try:
        print("  üìã –ü–†–û–í–ï–†–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–ô QML –°–í–û–ô–°–¢–í:")
        
        fog_enabled = qml.property("fogEnabled")
        fog_color = qml.property("fogColor")
        fog_density = qml.property("fogDensity")
        aa_mode = qml.property("antialiasingMode")
        
        print(f"     fogEnabled = {fog_enabled} (–æ–∂–∏–¥–∞–ª–æ—Å—å True)")
        print(f"     fogColor = {fog_color} (–æ–∂–∏–¥–∞–ª–æ—Å—å #ff0000)")
        print(f"     fogDensity = {fog_density} (–æ–∂–∏–¥–∞–ª–æ—Å—å 0.5)")
        print(f"     antialiasingMode = {aa_mode} (–æ–∂–∏–¥–∞–ª–æ—Å—å 0)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        changes_detected = 0
        if fog_enabled == True:
            print("     ‚úÖ fogEnabled –∏–∑–º–µ–Ω–∏–ª—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            changes_detected += 1
        else:
            print("     ‚ùå fogEnabled –ù–ï –∏–∑–º–µ–Ω–∏–ª—Å—è")
        
        if aa_mode == 0:
            print("     ‚úÖ antialiasingMode –∏–∑–º–µ–Ω–∏–ª—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            changes_detected += 1
        else:
            print("     ‚ùå antialiasingMode –ù–ï –∏–∑–º–µ–Ω–∏–ª—Å—è")
        
        print(f"     –ò—Ç–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {changes_detected}/2")
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π QML —Å–≤–æ–π—Å—Ç–≤: {e}")

def test_ui_changes(graphics_panel):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ UI"""
    try:
        print("  üìã –¢–ï–°–¢ –ò–ó–ú–ï–ù–ï–ù–ò–ô –ß–ï–†–ï–ó UI:")
        
        # –¢–µ—Å—Ç 1: –ò–∑–º–µ–Ω–µ–Ω–∏–µ checkbox —Ç—É–º–∞–Ω–∞
        if hasattr(graphics_panel, 'fog_enabled'):
            original_state = graphics_panel.fog_enabled.isChecked()
            print(f"     üß™ –ò–∑–º–µ–Ω—è–µ–º fog_enabled checkbox: {original_state} -> {not original_state}")
            graphics_panel.fog_enabled.setChecked(not original_state)
            
            QTimer.singleShot(500, lambda: check_ui_fog_change(graphics_panel, not original_state))
        else:
            print("     ‚ùå fog_enabled checkbox –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –¢–µ—Å—Ç 2: –ò–∑–º–µ–Ω–µ–Ω–∏–µ combobox —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
        if hasattr(graphics_panel, 'antialiasing'):
            original_index = graphics_panel.antialiasing.currentIndex()
            new_index = (original_index + 1) % graphics_panel.antialiasing.count()
            print(f"     üß™ –ò–∑–º–µ–Ω—è–µ–º antialiasing combobox: {original_index} -> {new_index}")
            graphics_panel.antialiasing.setCurrentIndex(new_index)
            
            QTimer.singleShot(1000, lambda: check_ui_aa_change(graphics_panel, new_index))
        else:
            print("     ‚ùå antialiasing combobox –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ UI: {e}")

def check_ui_fog_change(graphics_panel, expected_state):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—É–º–∞–Ω–∞ —á–µ—Ä–µ–∑ UI"""
    try:
        current_ui_state = graphics_panel.fog_enabled.isChecked()
        current_data_state = graphics_panel.current_graphics['fog_enabled']
        
        print(f"     –†–µ–∑—É–ª—å—Ç–∞—Ç fog UI change:")
        print(f"       UI state: {current_ui_state} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_state})")
        print(f"       Data state: {current_data_state} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_state})")
        
        if current_ui_state == expected_state and current_data_state == expected_state:
            print("     ‚úÖ UI –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—É–º–∞–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("     ‚ùå UI –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—É–º–∞–Ω–∞ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ UI –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—É–º–∞–Ω–∞: {e}")

def check_ui_aa_change(graphics_panel, expected_index):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ UI"""
    try:
        current_ui_index = graphics_panel.antialiasing.currentIndex()
        current_data_index = graphics_panel.current_graphics['antialiasing']
        
        print(f"     –†–µ–∑—É–ª—å—Ç–∞—Ç AA UI change:")
        print(f"       UI index: {current_ui_index} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_index})")
        print(f"       Data index: {current_data_index} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_index})")
        
        if current_ui_index == expected_index and current_data_index == expected_index:
            print("     ‚úÖ UI –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("     ‚ùå UI –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ UI –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è: {e}")

def final_check(qml, graphics_panel):
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    try:
        print("  üìã –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê:")
        
        # QML —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        fog_qml = qml.property("fogEnabled")
        aa_qml = qml.property("antialiasingMode")
        
        # Panel —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        fog_panel = graphics_panel.current_graphics['fog_enabled']
        aa_panel = graphics_panel.current_graphics['antialiasing']
        
        # UI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        fog_ui = graphics_panel.fog_enabled.isChecked() if hasattr(graphics_panel, 'fog_enabled') else None
        aa_ui = graphics_panel.antialiasing.currentIndex() if hasattr(graphics_panel, 'antialiasing') else None
        
        print(f"     –¢–£–ú–ê–ù:")
        print(f"       QML: {fog_qml}")
        print(f"       Panel: {fog_panel}")
        print(f"       UI: {fog_ui}")
        
        print(f"     –°–ì–õ–ê–ñ–ò–í–ê–ù–ò–ï:")
        print(f"       QML: {aa_qml}")
        print(f"       Panel: {aa_panel}")
        print(f"       UI: {aa_ui}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        fog_synced = fog_qml == fog_panel == fog_ui
        aa_synced = aa_qml == aa_panel == aa_ui
        
        if fog_synced:
            print("     ‚úÖ –¢–£–ú–ê–ù —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            print("     ‚ùå –¢–£–ú–ê–ù –ù–ï —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        if aa_synced:
            print("     ‚úÖ –°–ì–õ–ê–ñ–ò–í–ê–ù–ò–ï —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        else:
            print("     ‚ùå –°–ì–õ–ê–ñ–ò–í–ê–ù–ò–ï –ù–ï —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        if fog_synced and aa_synced:
            print("\nüéâ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–û!")
        else:
            print("\n‚ùå –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´:")
            if not fog_synced:
                print("   ‚Ä¢ –¢—É–º–∞–Ω –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
            if not aa_synced:
                print("   ‚Ä¢ –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –ì–õ–£–ë–û–ö–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ì–†–ê–§–ò–ö–ò")
    print()
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º:")
    print("  ‚Ä¢ QML –æ–±—ä–µ–∫—Ç –∏ –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞/–º–µ—Ç–æ–¥—ã")
    print("  ‚Ä¢ GraphicsPanel —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ UI —ç–ª–µ–º–µ–Ω—Ç—ã")
    print("  ‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
    print("  ‚Ä¢ –ü—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã QML —Ñ—É–Ω–∫—Ü–∏–π")
    print("  ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("  ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
    print()
    
    deep_graphics_diagnosis()
    
    print("\n‚úÖ –ì–ª—É–±–æ–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("   –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ —Ç–æ—á–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–±–ª–µ–º —Å —Ç—É–º–∞–Ω–æ–º –∏ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ–º")
