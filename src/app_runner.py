# -*- coding: utf-8 -*-
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è PneumoStabSim.

–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è,
–≤–∫–ª—é—á–∞—è –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É.
"""
import sys
import os
import signal
import logging
from pathlib import Path
from typing import Any, Optional
import argparse


class ApplicationRunner:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ Qt –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    def __init__(
        self,
        QApplication: Any,
        qInstallMessageHandler: Any,
        Qt: Any,
        QTimer: Any
    ) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è runner'–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        
        Args:
            QApplication: –ö–ª–∞—Å—Å QApplication –∏–∑ PySide6
            qInstallMessageHandler: –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ Qt –ª–æ–≥–æ–≤
            Qt: –ú–æ–¥—É–ª—å Qt –∏–∑ PySide6
            QTimer: –ö–ª–∞—Å—Å QTimer –∏–∑ PySide6
        """
        self.QApplication = QApplication
        self.qInstallMessageHandler = qInstallMessageHandler
        self.Qt = Qt
        self.QTimer = QTimer
        
        self.app_instance: Optional[Any] = None
        self.window_instance: Optional[Any] = None
        self.app_logger: Optional[logging.Logger] = None
        
        self.use_qml_3d_schema: bool = True
    
    def setup_signals(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ (Ctrl+C, SIGTERM)."""
        signal.signal(signal.SIGINT, self._signal_handler)
        if hasattr(signal, 'SIGTERM'):
            signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum: int, frame: Any) -> None:
        """Handle Ctrl+C gracefully."""
        if self.app_logger:
            self.app_logger.info("Received interrupt signal - shutting down gracefully")
        
        try:
            if self.window_instance:
                self.window_instance.close()
            if self.app_instance:
                self.app_instance.quit()
        except Exception as e:
            from src.diagnostics.warnings import log_warning
            log_warning(f"Shutdown error: {e}")
    
    def _qt_message_handler(self, mode: Any, context: Any, message: str) -> None:
        """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Qt –ª–æ–≥–æ–≤ –≤ logger."""
        if self.app_logger:
            self.app_logger.debug(f"Qt: {message}")
    
    def setup_logging(self, verbose_console: bool = False) -> Optional[logging.Logger]:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –í–°–ï–ì–î–ê –∞–∫—Ç–∏–≤–Ω–æ.
        
        Args:
            verbose_console: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
            
        Returns:
            –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π logger –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            from src.common.logging_setup import init_logging, rotate_old_logs
            
            logs_dir = Path("logs")
            rotate_old_logs(logs_dir, keep_count=0)
            
            logger = init_logging(
                "PneumoStabSim",
                logs_dir,
                max_bytes=10 * 1024 * 1024,
                backup_count=5,
                console_output=bool(verbose_console)
            )
            
            logger.info("=" * 60)
            logger.info("PneumoStabSim v4.9.5 - Application Started")
            logger.info("=" * 60)
            logger.info(f"Python: {sys.version_info.major}.{sys.version_info.minor}")
            
            from PySide6.QtCore import qVersion
            logger.info(f"Qt: {qVersion()}")
            logger.info(f"Platform: {sys.platform}")
            logger.info(f"Backend: {os.environ.get('QSG_RHI_BACKEND', 'auto')}")
            
            if verbose_console:
                logger.info("Console verbose mode is ENABLED")
            
            return logger
        except Exception as e:
            print(f"WARNING: Logging setup failed: {e}")
            return None
    
    def setup_high_dpi(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ High DPI scaling."""
        from src.diagnostics.warnings import log_warning
        
        try:
            self.QApplication.setHighDpiScaleFactorRoundingPolicy(
                self.Qt.HighDpiScaleFactorRoundingPolicy.PassThrough
            )
        except Exception as e:
            log_warning(f"High DPI setup: {e}")
            if self.app_logger:
                self.app_logger.warning(f"High DPI setup failed: {e}")
    
    def create_application(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ QApplication."""
        app = self.QApplication(sys.argv)
        self.app_instance = app
        
        self.qInstallMessageHandler(self._qt_message_handler)
        
        app.setApplicationName("PneumoStabSim")
        app.setApplicationVersion("4.9.5")
        app.setOrganizationName("PneumoStabSim")
        
        if self.app_logger:
            self.app_logger.info("QApplication created and configured")
    
    def create_main_window(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞."""
        from src.ui.main_window import MainWindow
        
        window = MainWindow(use_qml_3d=self.use_qml_3d_schema)
        self.window_instance = window
        
        window.show()
        window.raise_()
        window.activateWindow()
        
        if self.app_logger:
            self.app_logger.info("MainWindow created and shown")
    
    def setup_test_mode(self, enabled: bool) -> None:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥).
        
        Args:
            enabled: –í–∫–ª—é—á–∏—Ç—å –ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        """
        if not enabled or not self.window_instance:
            return
        
        print("üß™ Test mode: auto-closing in 5 seconds...")
        if self.app_logger:
            self.app_logger.info("Test mode: auto-closing in 5 seconds")
        
        # –£–¥–µ—Ä–∂–∏–≤–∞–µ–º QTimer –≤ –∂–∏–≤—ã—Ö —á–µ—Ä–µ–∑ –∞—Ç—Ä–∏–±—É—Ç window
        self.window_instance._auto_close_timer = self.QTimer(self.window_instance)
        self.window_instance._auto_close_timer.setSingleShot(True)
        self.window_instance._auto_close_timer.timeout.connect(lambda: self.window_instance.close())
        self.window_instance._auto_close_timer.start(5000)
    
    def run(self, args: argparse.Namespace) -> int:
        """
        –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º lifecycle.
        
        Args:
            args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            
        Returns:
            Exit code –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        from src.diagnostics.warnings import print_warnings_errors
        from src.diagnostics.logs import run_log_diagnostics
        
        try:
            # ‚úÖ –ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
            self._print_header()
            
            # ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            self.app_logger = self.setup_logging(verbose_console=args.verbose)
            
            if self.app_logger:
                self.app_logger.info("Logging initialized successfully")
                if args.verbose:
                    self.app_logger.info("Verbose mode enabled")
            
            self.setup_high_dpi()
            self.create_application()
            self.create_main_window()
            
            print("‚úÖ Ready!")
            print("=" * 60 + "\n")
            
            self.setup_signals()
            self.setup_test_mode(args.test_mode)
            
            # ‚úÖ –ó–∞–ø—É—Å–∫ event loop
            result = self.app_instance.exec()
            
            if self.app_logger:
                self.app_logger.info(f"Application closed with code: {result}")
                self.app_logger.info("=" * 60)
            
            # ‚úÖ –í—ã–≤–æ–¥ warnings/errors
            print_warnings_errors()
            
            print(f"\n‚úÖ Application closed (code: {result})\n")
            
            # ‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
            if args.diag or args.verbose or os.environ.get("PSS_DIAG") == "1":
                run_log_diagnostics()
            
            return int(result)
            
        except Exception as e:
            print(f"\n‚ùå FATAL ERROR: {e}")
            import traceback
            traceback.print_exc()
            
            if self.app_logger:
                self.app_logger.critical(f"FATAL ERROR: {e}")
                self.app_logger.critical(traceback.format_exc())
            
            print_warnings_errors()
            
            return 1
    
    def _print_header(self) -> None:
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å."""
        print("=" * 60)
        print("üöÄ PNEUMOSTABSIM v4.9.5")
        print("=" * 60)
        
        from PySide6.QtCore import qVersion
        qt_version = qVersion()
        
        print(f"üìä Python {sys.version_info.major}.{sys.version_info.minor} | Qt {qt_version}")
        print(f"üé® Graphics: Qt Quick 3D | Backend: {os.environ.get('QSG_RHI_BACKEND', 'auto')}")
        print("‚è≥ Initializing...")
