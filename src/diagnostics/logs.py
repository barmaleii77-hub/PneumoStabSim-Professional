# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º log_analyzer
–∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å –∏ Visual Studio Output.
"""
import sys
import os
import ctypes
from pathlib import Path


def run_log_diagnostics() -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –í–°–¢–†–û–ï–ù–ù–£–Æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    –í–∫–ª—é—á–∞–µ—Ç:
    - –ê–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Python‚ÜîQML
    - –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    - –°–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ª–æ–≥–æ–≤
    """
    # –î—É–±–ª–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –≤ –æ–∫–Ω–æ Output Visual Studio (—á–µ—Ä–µ–∑ OutputDebugString)
    class _VSOutputTee:
        def __init__(self, real):
            self._real = real
        
        def write(self, s: str) -> int:
            try:
                if sys.platform == 'win32' and s:
                    ctypes.windll.kernel32.OutputDebugStringW(str(s))
            except Exception:
                pass
            return self._real.write(s)
        
        def flush(self) -> None:
            try:
                self._real.flush()
            except Exception:
                pass

    _orig_stdout = sys.stdout
    _orig_stderr = sys.stderr
    
    try:
        # –í–∫–ª—é—á–∞–µ–º tee –≤ VS Output
        sys.stdout = _VSOutputTee(_orig_stdout)
        sys.stderr = _VSOutputTee(_orig_stderr)

        print("\n" + "="*60)
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –õ–û–ì–û–í –ò –°–û–ë–´–¢–ò–ô")
        print("="*60)

        # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        from src.common.log_analyzer import run_full_diagnostics, quick_diagnostics
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        diag_result = run_full_diagnostics(Path("logs"))
        diagnostics_ok = bool(diag_result) if not isinstance(diag_result, dict) else bool(diag_result.get("ok", True))
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        print("\n" + "="*60)
        
        if diagnostics_ok:
            print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        else:
            print("‚ö†Ô∏è  –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
            print("üí° –°–º. –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ")
        
        print("="*60)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–Ω–∞–ª–∏–∑–∞ (EVENTS vs GRAPHICS)
        _print_sync_discrepancies(quick_diagnostics)
        
    except ImportError as e:
        print(f"‚ö†Ô∏è  –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É—Å—Ç–∞—Ä–µ–≤—à—É—é –≤–µ—Ä—Å–∏—é analyze_logs.py")
        _fallback_diagnostics()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
        sys.stdout = _orig_stdout
        sys.stderr = _orig_stderr


def _print_sync_discrepancies(quick_diagnostics) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É EVENTS –∏ GRAPHICS –º–µ—Ç—Ä–∏–∫–∞–º–∏."""
    try:
        q = quick_diagnostics(Path("logs")) or {}
        metrics = q.get("metrics", {}) or {}
        events_sync = None
        graphics_sync = None
        
        for key, val in metrics.items():
            if key.endswith("event_sync_rate") and key.startswith("events_"):
                events_sync = float(val)
            if key.endswith("graphics_sync_rate") and key.startswith("graphics_"):
                graphics_sync = float(val)
        
        if events_sync is not None and graphics_sync is not None and abs(events_sync - graphics_sync) >= 5.0:
            print("\n‚Äî‚Äî –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–Ω–∞–ª–∏–∑–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")
            print(f"EVENTS sync_rate: {events_sync:.1f}% vs GRAPHICS sync_rate: {graphics_sync:.1f}%")
            
            reason_hint = "QML-—Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è (EVENTS=OK), –Ω–æ —á–∞—Å—Ç—å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è."
            if events_sync < graphics_sync:
                reason_hint = "–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≤—ã—à–µ —Å–æ–±—ã—Ç–∏–π–Ω—ã—Ö ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –≤—Å–µ SIGNAL_EMIT –ª–æ–≥–∏—Ä—É—é—Ç—Å—è."
            
            print(f"–ü—Ä–∏—á–∏–Ω–∞ (–≥–∏–ø–æ—Ç–µ–∑–∞): {reason_hint}")
            
            if os.environ.get("PSS_DIAG_DETAILS") == "1":
                _print_detailed_sync_analysis()
            
            print("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n")
    except Exception:
        pass  # –ù–µ –ª–æ–º–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏–∑-–∑–∞ —Ä–∞–∑–¥–µ–ª–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π


def _print_detailed_sync_analysis() -> None:
    """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."""
    try:
        from src.common.event_logger import get_event_logger
        evlog = get_event_logger()
        analysis = evlog.analyze_sync()
        pairs = analysis.get("pairs", [])
        missing = [p for p in pairs if p.get("status") != "synced"]
        
        if missing:
            print("\n–ù–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):")
            for p in missing[-10:]:
                py = p.get("python_event", {})
                ts = py.get("timestamp", "?")
                action = py.get("action", "?")
                print(f"  ‚Ä¢ {ts} ‚Äî {action} ‚Üí missing in QML")
        else:
            print("\nEVENTS: –≤—Å–µ –ø–∞—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (–Ω–µ—Ç missing)")
    except Exception:
        pass


def _fallback_diagnostics() -> None:
    """Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é analyze_logs.py."""
    try:
        from analyze_logs import (
            analyze_all_logs,
            analyze_graphics_sync,
            analyze_user_session
        )
        
        print("\nüìä –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ª–æ–≥–æ–≤...")
        logs_result = analyze_all_logs()
        
        print("\nüé® –ê–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∏...")
        graphics_result = analyze_graphics_sync()
        
        print("\nüë§ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏...")
        session_result = analyze_user_session()
        
        _analyze_event_logger()
        
        print("\n" + "="*60)
        
        all_ok = all([logs_result, graphics_result, session_result])
        
        if all_ok:
            print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        else:
            print("‚ö†Ô∏è  –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
        
        print("="*60)
        
    except ImportError:
        print("‚ö†Ô∏è  –ú–æ–¥—É–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ fallback –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc()


def _analyze_event_logger() -> None:
    """–ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π Python‚ÜîQML —á–µ—Ä–µ–∑ EventLogger."""
    print("\nüîó –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π Python‚ÜîQML...")
    try:
        from src.common.event_logger import get_event_logger
        
        event_logger = get_event_logger()
        events_file = event_logger.export_events()
        print(f"   üìÅ –°–æ–±—ã—Ç–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {events_file}")
        
        analysis = event_logger.analyze_sync()
        total = analysis.get('total_signals', 0)
        synced = analysis.get('synced', 0)
        missing = analysis.get('missing_qml', 0)
        
        if total > 0:
            sync_rate = (synced / total) * 100
            print(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total}")
            print(f"   –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {synced}")
            print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ QML: {missing}")
            print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {sync_rate:.1f}%")
            
            if missing > 0:
                print(f"   ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è!")
            else:
                print(f"   ‚úÖ –í—Å–µ —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            print(f"   ‚ÑπÔ∏è  –°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        event_types: dict[str, int] = {}
        for event in event_logger.events:
            event_type = event.get('event_type', 'UNKNOWN')
            event_types[event_type] = event_types.get(event_type, 0) + 1
        
        if event_types:
            print(f"\n   üìà –°–æ–±—ã—Ç–∏—è –ø–æ —Ç–∏–ø–∞–º:")
            for event_type, count in sorted(event_types.items(), key=lambda x: x[1], reverse=True):
                print(f"      {event_type}: {count}")
        
    except ImportError:
        print(f"   ‚ö†Ô∏è  EventLogger –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–±—ã—Ç–∏–π: {e}")
