# -*- coding: utf-8 -*-
"""
Range slider widget with editable min/max bounds
Combines QSlider with QDoubleSpinBox controls for precise range control
–û–ë–ù–û–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –º–µ–ª–∫–∏–µ –¥–µ–ª–µ–Ω–∏—è —à–∫–∞–ª—ã, —à–∏—Ä–∏–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±–µ–∑ —Å–∫–æ–±–æ–∫
"""

import math
from PySide6.QtWidgets import (QWidget, QHBoxLayout, QVBoxLayout, QLabel, 
                              QSlider, QDoubleSpinBox, QSizePolicy)
from PySide6.QtCore import Signal, Slot, QTimer, Qt
from PySide6.QtGui import QFont, QPalette, QColor


class RangeSlider(QWidget):
    """Slider with editable min/max range and precise value control
    
    –û–ë–ù–û–í–õ–ï–ù–û:
    - –ë–æ–ª–µ–µ –º–µ–ª–∫–∏–µ –¥–µ–ª–µ–Ω–∏—è —à–∫–∞–ª—ã –¥–ª—è –ª—É—á—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
    - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "—à–∏—Ä–∏–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞" –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ —Å–∫–æ–±–æ–∫
    - –ü–æ–ª—è –ú–ò–ù, –ó–ù–ê–ß–ï–ù–ò–ï, –ú–ê–ö–° –Ω–∞ –æ–¥–Ω–æ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ
    - –®–∫–∞–ª–∞ —Å–ª–∞–π–¥–µ—Ä–∞ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É –æ–∫–Ω–∞ (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
    - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏ –ø–æ–∑–∏—Ü–∏–∏
    - –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ tooltip'—ã
    """
    
    # –°–ò–ì–ù–ê–õ–´:
    # valueChanged - –ú–ì–ù–û–í–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–∞ (–¥–ª—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏)
    # valueEdited - –§–ò–ù–ê–õ–¨–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π debounce)
    valueEdited = Signal(float)    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ debounce
    valueChanged = Signal(float)   # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è
    rangeChanged = Signal(float, float)
    
    def __init__(self, minimum=0.0, maximum=100.0, value=50.0, step=1.0, decimals=2, units="", title="", parent=None):
        super().__init__(parent)
        self._step = step
        self._decimals = decimals
        self._units = units
        
        # –£–í–ï–õ–ò–ß–ï–ù–ù–û–ï —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ 0.001–º
        # –î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 4–º —Å —à–∞–≥–æ–º 0.001–º –Ω—É–∂–Ω–æ 4000 –ø–æ–∑–∏—Ü–∏–π
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º 100000 –¥–ª—è –∑–∞–ø–∞—Å–∞ –∏ –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        self._slider_resolution = 100000  # –ë—ã–ª–æ 10000, —Ç–µ–ø–µ—Ä—å 100000
        self._updating_internally = False
        
        self._debounce_timer = QTimer()
        self._debounce_timer.setSingleShot(True)
        self._debounce_timer.timeout.connect(self._emit_value_edited)
        self._debounce_delay = 200
        
        self._setup_ui(title)
        self.setRange(minimum, maximum)
        self.setValue(value)
        self._connect_signals()
        self.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
    
    def _setup_ui(self, title):
        layout = QVBoxLayout(self)
        layout.setSpacing(4)
        layout.setContentsMargins(4, 4, 4, 4)
        
        if title:
            self.title_label = QLabel(title)
            self.title_label.setAlignment(Qt.AlignmentFlag.AlignLeft)
            font = QFont()
            font.setPointSize(9)
            font.setBold(True)
            self.title_label.setFont(font)
            layout.addWidget(self.title_label)
        
        # ‚ú® –û–ë–ù–û–í–õ–ï–ù–û: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å —à–∏—Ä–∏–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±–µ–∑ —Å–∫–æ–±–æ–∫
        self.range_indicator_label = QLabel("–î–∏–∞–ø–∞–∑–æ–Ω: 0.0 ‚Äî 100.0 —à–∏—Ä–∏–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 100.0")
        self.range_indicator_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        font = QFont()
        font.setPointSize(7)
        font.setItalic(True)
        self.range_indicator_label.setFont(font)
        # –°–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        palette = self.range_indicator_label.palette()
        palette.setColor(QPalette.ColorRole.WindowText, QColor(128, 128, 128))
        self.range_indicator_label.setPalette(palette)
        layout.addWidget(self.range_indicator_label)
        
        # üéØ –û–ë–ù–û–í–õ–ï–ù–û: –®–ö–ê–õ–ê –°–õ–ê–ô–î–ï–†–ê —Å –±–æ–ª–µ–µ –º–µ–ª–∫–∏–º–∏ –¥–µ–ª–µ–Ω–∏—è–º–∏
        self.slider = QSlider(Qt.Orientation.Horizontal)
        self.slider.setMinimum(0)
        self.slider.setMaximum(self._slider_resolution)
        self.slider.setTickPosition(QSlider.TickPosition.TicksBelow)
        # –£–ú–ï–ù–¨–®–ï–ù–û: –ë–æ–ª–µ–µ –º–µ–ª–∫–∏–µ –¥–µ–ª–µ–Ω–∏—è - –±—ã–ª–æ //10, —Å—Ç–∞–ª–æ //20 (–≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –¥–µ–ª–µ–Ω–∏–π)
        self.slider.setTickInterval(self._slider_resolution // 20)
        # –ó–∞–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        self.slider.setMinimumWidth(300)
        layout.addWidget(self.slider)
        
        # ‚ú® –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏
        self.position_indicator_label = QLabel("–ü–æ–∑–∏—Ü–∏—è: 50.0% –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        self.position_indicator_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        font = QFont()
        font.setPointSize(7)
        self.position_indicator_label.setFont(font)
        layout.addWidget(self.position_indicator_label)
        
        # üéØ –ü–û–õ–Ø –í–í–û–î–ê - –≤—Å–µ –Ω–∞ –æ–¥–Ω–æ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ
        controls_layout = QHBoxLayout()
        controls_layout.setSpacing(8)
        
        # Min controls
        min_layout = QVBoxLayout()
        min_layout.setSpacing(1)
        min_label = QLabel("–ú–∏–Ω")
        min_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        font = QFont()
        font.setPointSize(7)
        min_label.setFont(font)
        min_layout.addWidget(min_label)
        
        self.min_spinbox = QDoubleSpinBox()
        self.min_spinbox.setDecimals(self._decimals)
        self.min_spinbox.setRange(-1e6, 1e6)
        self.min_spinbox.setMinimumWidth(80)
        self.min_spinbox.setMaximumWidth(100)
        self.min_spinbox.setAlignment(Qt.AlignmentFlag.AlignCenter)
        # ‚ú® Tooltip –¥–ª—è min
        self.min_spinbox.setToolTip("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        min_layout.addWidget(self.min_spinbox)
        controls_layout.addLayout(min_layout)
        
        # –†–∞—Å—Ç—è–≥–∏–≤–∞—é—â–µ–µ—Å—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ–∂–¥—É –º–∏–Ω –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º
        controls_layout.addStretch()
        
        # Value controls (–ü–û –¶–ï–ù–¢–†–£ –º–µ–∂–¥—É –º–∏–Ω –∏ –º–∞–∫—Å)
        value_layout = QVBoxLayout()
        value_layout.setSpacing(1)
        value_label = QLabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
        value_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        font = QFont()
        font.setPointSize(7)
        font.setBold(True)  # ‚ú® –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∂–∏—Ä–Ω—ã–º
        value_label.setFont(font)
        value_layout.addWidget(value_label)
        
        self.value_spinbox = QDoubleSpinBox()
        self.value_spinbox.setDecimals(self._decimals)
        self.value_spinbox.setMinimumWidth(100)
        self.value_spinbox.setMaximumWidth(120)
        self.value_spinbox.setAlignment(Qt.AlignmentFlag.AlignCenter)
        # ‚ú® –í—ã–¥–µ–ª—è–µ–º –ø–æ–ª–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self.value_spinbox.setStyleSheet("QDoubleSpinBox { font-weight: bold; }")
        value_layout.addWidget(self.value_spinbox)
        controls_layout.addLayout(value_layout)
        
        # Units label —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        if self._units:
            self.units_label = QLabel(self._units)
            font = QFont()
            font.setPointSize(9)
            font.setBold(True)
            self.units_label.setFont(font)
            self.units_label.setAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignVCenter)
            controls_layout.addWidget(self.units_label)
        
        # –†–∞—Å—Ç—è–≥–∏–≤–∞—é—â–µ–µ—Å—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ–∂–¥—É –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏ –º–∞–∫—Å
        controls_layout.addStretch()
        
        # Max controls
        max_layout = QVBoxLayout()
        max_layout.setSpacing(1)
        max_label = QLabel("–ú–∞–∫—Å")
        max_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        font = QFont()
        font.setPointSize(7)
        max_label.setFont(font)
        max_layout.addWidget(max_label)
        
        self.max_spinbox = QDoubleSpinBox()
        self.max_spinbox.setDecimals(self._decimals)
        self.max_spinbox.setRange(-1e6, 1e6)
        self.max_spinbox.setMinimumWidth(80)
        self.max_spinbox.setMaximumWidth(100)
        self.max_spinbox.setAlignment(Qt.AlignmentFlag.AlignCenter)
        # ‚ú® Tooltip –¥–ª—è max
        self.max_spinbox.setToolTip("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        max_layout.addWidget(self.max_spinbox)
        controls_layout.addLayout(max_layout)
        
        layout.addLayout(controls_layout)
    
    def _connect_signals(self):
        self.slider.valueChanged.connect(self._on_slider_changed)
        self.value_spinbox.valueChanged.connect(self._on_value_spinbox_changed)
        self.min_spinbox.valueChanged.connect(self._on_min_changed)
        self.max_spinbox.valueChanged.connect(self._on_max_changed)
    
    def setValue(self, value):
        value = max(self.minimum(), min(self.maximum(), value))
        slider_pos = self._value_to_slider(value)
        self._updating_internally = True
        self.slider.setValue(slider_pos)
        self.value_spinbox.setValue(value)
        self._updating_internally = False
        # ‚ú® –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        self._update_indicators()
    
    def value(self):
        return self.value_spinbox.value()
    
    def setRange(self, minimum, maximum):
        if maximum <= minimum:
            raise ValueError("Maximum must be greater than minimum")
        
        current_value = self.value_spinbox.value() if hasattr(self, 'value_spinbox') else minimum
        self._updating_internally = True
        
        if hasattr(self, 'min_spinbox'):
            self.min_spinbox.blockSignals(True)
            self.max_spinbox.blockSignals(True)
            self.min_spinbox.setValue(minimum)
            self.max_spinbox.setValue(maximum)
            self.min_spinbox.blockSignals(False)
            self.max_spinbox.blockSignals(False)
        
        self._update_spinbox_ranges()
        self._updating_internally = False
        
        if hasattr(self, 'value_spinbox'):
            self.setValue(current_value)
        
        # ‚ú® –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        self._update_indicators()
    
    def minimum(self):
        return self.min_spinbox.value() if hasattr(self, 'min_spinbox') else 0.0
    
    def maximum(self):
        return self.max_spinbox.value() if hasattr(self, 'max_spinbox') else 100.0
    
    def _value_to_slider(self, value):
        min_val = self.minimum()
        max_val = self.maximum()
        if max_val <= min_val:
            return 0
        value = max(min_val, min(max_val, value))
        ratio = (value - min_val) / (max_val - min_val)
        return int(ratio * self._slider_resolution)
    
    def _slider_to_value(self, slider_pos):
        min_val = self.minimum()
        max_val = self.maximum()
        ratio = slider_pos / self._slider_resolution
        value = min_val + ratio * (max_val - min_val)
        
        # –£–õ–£–ß–®–ï–ù–ù–û–ï –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–ª—è –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ—Å—Ç–∏ 0.001–º
        if self._step > 0:
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –æ—Ç –º–∏–Ω–∏–º—É–º–∞
            steps = round((value - min_val) / self._step)
            value = min_val + steps * self._step
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π float
            # –î–ª—è —à–∞–≥–∞ 0.001 –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            if self._step == 0.001:
                value = round(value, 3)
            elif self._step == 0.01:
                value = round(value, 2)
            elif self._step == 0.1:
                value = round(value, 1)
            else:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–≥–∞
                decimal_places = max(0, -int(round(math.log10(abs(self._step)))))
                value = round(value, decimal_places)
        
        return max(min_val, min(max_val, value))
    
    # ‚ú® –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å —à–∏—Ä–∏–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ë–ï–ó –°–ö–û–ë–û–ö
    def _update_indicators(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞, —à–∏—Ä–∏–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏ –ø–æ–∑–∏—Ü–∏–∏"""
        if not hasattr(self, 'range_indicator_label'):
            return
            
        min_val = self.minimum()
        max_val = self.maximum()
        current_val = self.value()
        
        # ‚ú® –û–ë–ù–û–í–õ–ï–ù–û: –í—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
        range_width = abs(max_val - min_val)
        
        # –û–ë–ù–û–í–õ–ï–ù–û: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å —à–∏—Ä–∏–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ë–ï–ó –°–ö–û–ë–û–ö
        range_text = f"–î–∏–∞–ø–∞–∑–æ–Ω: {min_val:.{self._decimals}f} ‚Äî {max_val:.{self._decimals}f} —à–∏—Ä–∏–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {range_width:.{self._decimals}f}"
        if self._units:
            range_text += f" {self._units}"
        self.range_indicator_label.setText(range_text)
        
        # –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ü–≤–µ—Ç
        if max_val > min_val:
            position_ratio = (current_val - min_val) / (max_val - min_val)
            position_percent = position_ratio * 100;
            
            position_text = f"–ü–æ–∑–∏—Ü–∏—è: {position_percent:.1f}% –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞"
            self.position_indicator_label.setText(position_text)
            
            # ‚ú® –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            color = self._get_position_color(position_ratio)
            palette = self.position_indicator_label.palette()
            palette.setColor(QPalette.ColorRole.WindowText, color)
            self.position_indicator_label.setPalette(palette)
            
            # ‚ú® –û–±–Ω–æ–≤–∏—Ç—å tooltip —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤–∫–ª—é—á–∞—è —à–∏—Ä–∏–Ω—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            tooltip = (f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_val:.{self._decimals}f} {self._units}\n"
                      f"–î–∏–∞–ø–∞–∑–æ–Ω: {min_val:.{self._decimals}f} –¥–æ {max_val:.{self._decimals}f}\n"
                      f"–®–∏—Ä–∏–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {range_width:.{self._decimals}f} {self._units}\n"
                      f"–ü–æ–∑–∏—Ü–∏—è: {position_percent:.1f}% –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞\n"
                      f"–®–∞–≥: {self._step:.{self._decimals}f}")
            self.value_spinbox.setToolTip(tooltip)
    
    def _get_position_color(self, ratio):
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
        if ratio < 0.1 or ratio > 0.9:
            # –ö—Ä–∞—Å–Ω—ã–π - –±–ª–∏–∑–∫–æ –∫ –∫—Ä–∞—è–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            return QColor(200, 50, 50)
        elif ratio < 0.2 or ratio > 0.8:
            # –û—Ä–∞–Ω–∂–µ–≤—ã–π - –¥–æ–≤–æ–ª—å–Ω–æ –±–ª–∏–∑–∫–æ –∫ –∫—Ä–∞—è–º
            return QColor(200, 120, 50)
        else:
            # –ó–µ–ª–µ–Ω—ã–π - –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            return QColor(50, 150, 50)
    
    @Slot(int)
    def _on_slider_changed(self, slider_value):
        if self._updating_internally:
            return
            
        real_value = self._slider_to_value(slider_value)
        
        self._updating_internally = True
        self.value_spinbox.setValue(real_value)
        self._updating_internally = False
        
        # ‚ú® –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        self._update_indicators()
        
        # –ú–ì–ù–û–í–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ valueChanged (–±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏)
        self.valueChanged.emit(real_value)
        
        # –ó–∞–¥–µ—Ä–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ valueEdited (–¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        self._debounce_timer.start(self._debounce_delay)
    
    @Slot(float)
    def _on_value_spinbox_changed(self, spinbox_value):
        if self._updating_internally:
            return
        spinbox_value = max(self.minimum(), min(self.maximum(), spinbox_value))
        slider_pos = self._value_to_slider(spinbox_value)
        self._updating_internally = True
        self.slider.setValue(slider_pos)
        self._updating_internally = False
        
        # ‚ú® –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        self._update_indicators()
        
        # –ú–ì–ù–û–í–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ valueChanged (–±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏)
        self.valueChanged.emit(spinbox_value)
        
        # –ó–∞–¥–µ—Ä–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ valueEdited (–¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        self._debounce_timer.start(self._debounce_delay)
    
    @Slot(float)
    def _on_min_changed(self, new_min):
        if self._updating_internally:
            return
        current_max = self.maximum()
        current_value = self.value()
        if new_min >= current_max:
            new_max = new_min + max(self._step, 0.01)
            self._updating_internally = True
            self.max_spinbox.setValue(new_max)
            self._updating_internally = False
            current_max = new_max
        self._update_spinbox_ranges()
        if current_value < new_min:
            self.setValue(new_min)
        else:
            self._update_slider_position()
        
        # ‚ú® –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        self._update_indicators()
        self.rangeChanged.emit(new_min, current_max)
    
    @Slot(float)
    def _on_max_changed(self, new_max):
        if self._updating_internally:
            return
        current_min = self.minimum()
        current_value = self.value()
        if new_max <= current_min:
            new_min = new_max - max(self._step, 0.01)
            self._updating_internally = True
            self.min_spinbox.setValue(new_min)
            self._updating_internally = False
            current_min = new_min
        self._update_spinbox_ranges()
        if current_value > new_max:
            self.setValue(new_max)
        else:
            self._update_slider_position()
        
        # ‚ú® –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        self._update_indicators()
        self.rangeChanged.emit(current_min, new_max)
    
    def _update_spinbox_ranges(self):
        if not hasattr(self, 'min_spinbox'):
            return
        min_val = self.min_spinbox.value()
        max_val = self.max_spinbox.value()
        self.min_spinbox.blockSignals(True)
        self.max_spinbox.blockSignals(True)
        self.min_spinbox.setRange(-1e6, 1e6)
        self.max_spinbox.setRange(-1e6, 1e6)
        self.value_spinbox.setMinimum(min_val)
        self.value_spinbox.setMaximum(max_val)
        self.value_spinbox.setSingleStep(self._step)
        self.min_spinbox.blockSignals(False)
        self.max_spinbox.blockSignals(False)
    
    def _update_slider_position(self):
        current_value = self.value_spinbox.value()
        slider_pos = self._value_to_slider(current_value)
        self._updating_internally = True
        self.slider.setValue(slider_pos)
        self._updating_internally = False
        # ‚ú® –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        self._update_indicators()
    
    @Slot()
    def _emit_value_edited(self):
        self.valueEdited.emit(self.value())
    
    def setDecimals(self, decimals):
        self._decimals = decimals
        if hasattr(self, 'min_spinbox'):
            self.min_spinbox.setDecimals(decimals)
            self.value_spinbox.setDecimals(decimals)
            self.max_spinbox.setDecimals(decimals)
            # ‚ú® –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å –Ω–æ–≤–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
            self._update_indicators()
    
    def setStep(self, step):
        self._step = step
        if hasattr(self, 'value_spinbox'):
            self.value_spinbox.setSingleStep(step)
            # ‚ú® –û–±–Ω–æ–≤–∏—Ç—å tooltip
            self._update_indicators()
    
    def setEnabled(self, enabled):
        super().setEnabled(enabled)
        if hasattr(self, 'slider'):
            self.slider.setEnabled(enabled)
            self.min_spinbox.setEnabled(enabled)
            self.value_spinbox.setEnabled(enabled)
            self.max_spinbox.setEnabled(enabled)
    
    def __del__(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –≤–∏–¥–∂–µ—Ç–∞"""
        try:
            if hasattr(self, '_debounce_timer') and self._debounce_timer is not None:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ C++
                if hasattr(self._debounce_timer, 'stop'):
                    self._debounce_timer.stop()
                self._debounce_timer = None
        except (RuntimeError, AttributeError):
            # –û–±—ä–µ–∫—Ç —É–∂–µ —É–¥–∞–ª–µ–Ω –≤ C++ –∏–ª–∏ –∞—Ç—Ä–∏–±—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            pass
    
    def cleanup(self):
        """–Ø–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if hasattr(self, '_debounce_timer') and self._debounce_timer is not None:
                self._debounce_timer.stop()
                self._debounce_timer.deleteLater()
                self._debounce_timer = None
        except (RuntimeError, AttributeError):
            # –û–±—ä–µ–∫—Ç —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            pass
