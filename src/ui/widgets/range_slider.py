# -*- coding: utf-8 -*-
"""Rich range slider widget used throughout the geometry panel.

The widget exposes both live updates (``valueChanged``) and debounced updates
(``valueEdited``) to mirror the behaviour of the historical implementation.

Key refinements introduced during the refactor:

* –ë–æ–ª–µ–µ –º–µ–ª–∫–∏–µ –¥–µ–ª–µ–Ω–∏—è —à–∫–∞–ª—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∏—Ä–∏–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è –±–µ–∑ —Å–∫–æ–±–æ–∫ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏.
* –ü–æ–ª—è ¬´–ú–∏–Ω¬ª, ¬´–ó–Ω–∞—á–µ–Ω–∏–µ¬ª, ¬´–ú–∞–∫—Å¬ª –≤—ã—Ä–æ–≤–Ω–µ–Ω—ã –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏.
* –®–∫–∞–ª–∞ —Å–ª–∞–π–¥–µ—Ä–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏.
* –î–æ–±–∞–≤–ª–µ–Ω—ã —Ü–≤–µ—Ç–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏.
"""

from __future__ import annotations

import math
from PySide6.QtWidgets import (
    QWidget,
    QHBoxLayout,
    QVBoxLayout,
    QLabel,
    QSlider,
    QDoubleSpinBox,
    QSizePolicy,
)
from PySide6.QtCore import Signal, Slot, QTimer, Qt
from PySide6.QtGui import QFont, QPalette, QColor


class RangeSlider(QWidget):
    """Slider with editable min/max range and precise value control

    –û–ë–ù–û–í–õ–ï–ù–û:
    - –ë–æ–ª–µ–µ –º–µ–ª–∫–∏–µ –¥–µ–ª–µ–Ω–∏—è —à–∫–∞–ª—ã –¥–ª—è –ª—É—á—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
    - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ "—à–∏—Ä–∏–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞" –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ —Å–∫–æ–±–æ–∫
    - –ü–æ–ª—è –ú–ò–ù, –ó–ù–ê–ß–ï–ù–ò–ï, –ú–ê–ö–° –Ω–∞ –æ–¥–Ω–æ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ
    - –®–∫–∞–ª–∞ —Å–ª–∞–π–¥–µ—Ä–∞ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É –æ–∫–Ω–∞ (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
    - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏ –ø–æ–∑–∏—Ü–∏–∏
    - –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ tooltip'—ã
    """

    # –°–ò–ì–ù–ê–õ–´:
    # valueChanged - –ú–ì–ù–û–í–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–∞ (–¥–ª—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏)
    # valueEdited - –§–ò–ù–ê–õ–¨–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π debounce)
    valueEdited = Signal(float)  # –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ debounce
    valueChanged = Signal(float)  # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è
    rangeChanged = Signal(float, float)

    def __init__(
        self,
        minimum=0.0,
        maximum=100.0,
        value=50.0,
        step=1.0,
        decimals=2,
        units="",
        title="",
        parent=None,
    ):
        super().__init__(parent)
        self._step = step
        self._decimals = decimals
        self._units = units

        # –£–í–ï–õ–ò–ß–ï–ù–ù–û–ï —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ 0.001–º
        # –î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 4–º —Å —à–∞–≥–æ–º 0.001–º –Ω—É–∂–Ω–æ 4000 –ø–æ–∑–∏—Ü–∏–π
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º 100000 –¥–ª—è –∑–∞–ø–∞—Å–∞ –∏ –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        self._slider_resolution = 100000  # –ë—ã–ª–æ 10000, —Ç–µ–ø–µ—Ä—å 100000
        self._updating_internally = False

        self._debounce_timer = QTimer()
        self._debounce_timer.setSingleShot(True)
        self._debounce_timer.timeout.connect(self._emit_value_edited)
        self._debounce_delay = 200

        self._setup_ui(title)
        self.setRange(minimum, maximum)
        self.setValue(value)
        self._connect_signals()
        self.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)

    def _setup_ui(self, title):
        layout = QVBoxLayout(self)
        layout.setSpacing(4)
        layout.setContentsMargins(4, 4, 4, 4)

        if title:
            self.title_label = QLabel(title)
            self.title_label.setAlignment(Qt.AlignmentFlag.AlignLeft)
            font = QFont()
            font.setPointSize(9)
            font.setBold(True)
            self.title_label.setFont(font)
            layout.addWidget(self.title_label)

        # ‚ú® –û–ë–ù–û–í–õ–ï–ù–û: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å —à–∏—Ä–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –±–µ–∑ —Å–∫–æ–±–æ–∫
        self.range_indicator_label = QLabel(
            "–î–∏–∞–ø–∞–∑–æ–Ω: 0.0 ‚Äî 100.0 —à–∏—Ä–∏–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 100.0"
        )
        self.range_indicator_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        font = QFont()
        font.setPointSize(7)
        font.setItalic(True)
        self.range_indicator_label.setFont(font)
        # –°–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        palette = self.range_indicator_label.palette()
        palette.setColor(QPalette.ColorRole.WindowText, QColor(128, 128, 128))
        self.range_indicator_label.setPalette(palette)
        layout.addWidget(self.range_indicator_label)

        # üéØ –û–ë–ù–û–í–õ–ï–ù–û: –®–ö–ê–õ–ê –°–õ–ê–ô–î–ï–†–ê —Å –±–æ–ª–µ–µ –º–µ–ª–∫–∏–º–∏ –¥–µ–ª–µ–Ω–∏—è–º–∏
        self.slider = QSlider(Qt.Orientation.Horizontal)
        self.slider.setMinimum(0)
        self.slider.setMaximum(self._slider_resolution)
        self.slider.setTickPosition(QSlider.TickPosition.TicksBelow)
        # –£–ú–ï–ù–¨–®–ï–ù–û: –ë–æ–ª–µ–µ –º–µ–ª–∫–∏–µ –¥–µ–ª–µ–Ω–∏—è - –±—ã–ª–æ //10, —Å—Ç–∞–ª–æ //20 (–≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –¥–µ–ª–µ–Ω–∏–π)
        self.slider.setTickInterval(self._slider_resolution // 20)
        # –ó–∞–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        self.slider.setMinimumWidth(300)
        layout.addWidget(self.slider)

        # ‚ú® –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏
        self.position_indicator_label = QLabel("–ü–æ–∑–∏—Ü–∏—è: 50.0% –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        self.position_indicator_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        font = QFont()
        font.setPointSize(7)
        self.position_indicator_label.setFont(font)
        layout.addWidget(self.position_indicator_label)

        # üéØ –ü–û–õ–Ø –í–í–û–î–ê - –≤—Å–µ –Ω–∞ –æ–¥–Ω–æ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ
        controls_layout = QHBoxLayout()
        controls_layout.setSpacing(8)

        # Min controls
        min_layout = QVBoxLayout()
        min_layout.setSpacing(1)
        min_label = QLabel("–ú–∏–Ω")
        min_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        font = QFont()
        font.setPointSize(7)
        min_label.setFont(font)
        min_layout.addWidget(min_label)

        self.min_spinbox = QDoubleSpinBox()
        self.min_spinbox.setDecimals(self._decimals)
        self.min_spinbox.setRange(-1e6, 1e6)
        self.min_spinbox.setMinimumWidth(80)
        self.min_spinbox.setMaximumWidth(100)
        self.min_spinbox.setAlignment(Qt.AlignmentFlag.AlignCenter)
        # ‚ú® Tooltip –¥–ª—è min
        self.min_spinbox.setToolTip("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        min_layout.addWidget(self.min_spinbox)
        controls_layout.addLayout(min_layout)

        # –†–∞—Å—Ç—è–≥–∏–≤–∞—é—â–µ–µ—Å—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ–∂–¥—É –º–∏–Ω –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º
        controls_layout.addStretch()

        # Value controls (–ü–û –¶–ï–ù–¢–†–£ –º–µ–∂–¥—É –º–∏–Ω –∏ –º–∞–∫—Å)
        value_layout = QVBoxLayout()
        value_layout.setSpacing(1)
        value_label = QLabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
        value_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        font = QFont()
        font.setPointSize(7)
        value_label.setFont(font)
        value_layout.addWidget(value_label)

        self.value_spinbox = QDoubleSpinBox()
        self.value_spinbox.setDecimals(self._decimals)
        self.value_spinbox.setRange(-1e6, 1e6)
        self.value_spinbox.setMinimumWidth(100)
        self.value_spinbox.setAlignment(Qt.AlignmentFlag.AlignCenter)
        # ‚ú® Tooltip –¥–ª—è value
        self.value_spinbox.setToolTip("–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞")
        value_layout.addWidget(self.value_spinbox)
        controls_layout.addLayout(value_layout)

        # –†–∞—Å—Ç—è–≥–∏–≤–∞—é—â–µ–µ—Å—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ–∂–¥—É –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏ –º–∞–∫—Å
        controls_layout.addStretch()

        # Max controls
        max_layout = QVBoxLayout()
        max_layout.setSpacing(1)
        max_label = QLabel("–ú–∞–∫—Å")
        max_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        font = QFont()
        font.setPointSize(7)
        max_label.setFont(font)
        max_layout.addWidget(max_label)

        self.max_spinbox = QDoubleSpinBox()
        self.max_spinbox.setDecimals(self._decimals)
        self.max_spinbox.setRange(-1e6, 1e6)
        self.max_spinbox.setMinimumWidth(80)
        self.max_spinbox.setMaximumWidth(100)
        self.max_spinbox.setAlignment(Qt.AlignmentFlag.AlignCenter)
        # ‚ú® Tooltip –¥–ª—è max
        self.max_spinbox.setToolTip("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        max_layout.addWidget(self.max_spinbox)
        controls_layout.addLayout(max_layout)

        layout.addLayout(controls_layout)

        # ‚ú® –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
        self.units_label = QLabel()
        self.units_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        font = QFont()
        font.setPointSize(7)
        font.setItalic(True)
        self.units_label.setFont(font)
        layout.addWidget(self.units_label)

    def _connect_signals(self):
        self.slider.valueChanged.connect(self._on_slider_value_changed)
        self.slider.sliderPressed.connect(self._on_slider_pressed)
        self.slider.sliderReleased.connect(self._on_slider_released)

        self.value_spinbox.valueChanged.connect(self._on_value_spinbox_changed)
        self.value_spinbox.editingFinished.connect(self._on_value_spinbox_finished)

        self.min_spinbox.valueChanged.connect(self._on_min_spinbox_changed)
        self.max_spinbox.valueChanged.connect(self._on_max_spinbox_changed)

    # =========================================================================
    # CONFIGURATION
    # =========================================================================
    def setDecimals(self, decimals):
        self._decimals = decimals
        self.value_spinbox.setDecimals(decimals)
        self.min_spinbox.setDecimals(decimals)
        self.max_spinbox.setDecimals(decimals)

    def setRange(self, minimum, maximum):
        if minimum >= maximum:
            maximum = minimum + abs(self._step) if self._step else minimum + 0.001

        self._minimum = minimum
        self._maximum = maximum
        self.min_spinbox.blockSignals(True)
        self.max_spinbox.blockSignals(True)
        try:
            self.min_spinbox.setValue(minimum)
            self.max_spinbox.setValue(maximum)
        finally:
            self.min_spinbox.blockSignals(False)
            self.max_spinbox.blockSignals(False)
        self._update_range_indicator()
        self.rangeChanged.emit(minimum, maximum)

    def setUnits(self, units: str):
        self._units = units
        if units:
            self.units_label.setText(f"–ï–¥–∏–Ω–∏—Ü—ã: {units}")
        else:
            self.units_label.clear()

    def setTitle(self, title: str):
        if hasattr(self, "title_label"):
            self.title_label.setText(title)
        else:
            self.title_label = QLabel(title)

    # =========================================================================
    # STATE MANAGEMENT
    # =========================================================================
    def setValue(self, value):
        value = float(value)
        value = max(self._minimum, min(self._maximum, value))
        if math.isclose(value, self.value_spinbox.value(), rel_tol=1e-9, abs_tol=1e-9):
            self._update_slider_position(value)
            return

        self.value_spinbox.blockSignals(True)
        try:
            self.value_spinbox.setValue(value)
        finally:
            self.value_spinbox.blockSignals(False)
        self._update_slider_position(value)

    def value(self):
        return self.value_spinbox.value()

    def minimum(self):
        return self._minimum

    def maximum(self):
        return self._maximum

    def setEnabled(self, enabled):  # noqa: D401 - Qt signature compatibility
        """Enable or disable the slider and its inputs."""

        super().setEnabled(enabled)
        for widget in (
            self.slider,
            self.min_spinbox,
            self.value_spinbox,
            self.max_spinbox,
        ):
            widget.setEnabled(enabled)

    # =========================================================================
    # INTERNAL UPDATES
    # =========================================================================
    def _update_slider_position(self, value):
        if self._maximum == self._minimum:
            position = 0
        else:
            position = int(
                (value - self._minimum)
                / (self._maximum - self._minimum)
                * self._slider_resolution
            )

        self._updating_internally = True
        try:
            self.slider.setValue(position)
        finally:
            self._updating_internally = False
        self._update_position_indicator(position)

    def _update_range_indicator(self):
        width = self._maximum - self._minimum
        self.range_indicator_label.setText(
            f"–î–∏–∞–ø–∞–∑–æ–Ω: {self._minimum:.{self._decimals}f} ‚Äî {self._maximum:.{self._decimals}f} "
            f"—à–∏—Ä–∏–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {width:.{self._decimals}f}"
            + (f" {self._units}" if self._units else "")
        )

    def _update_position_indicator(self, position):
        if self._slider_resolution == 0:
            percentage = 0
        else:
            percentage = position / self._slider_resolution * 100
        self.position_indicator_label.setText(
            f"–ü–æ–∑–∏—Ü–∏—è: {percentage:.1f}% –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞"
        )

    # =========================================================================
    # SIGNAL HANDLERS
    # =========================================================================
    @Slot()
    def _on_slider_pressed(self):
        self._debounce_timer.stop()

    @Slot()
    def _on_slider_released(self):
        self._debounce_timer.start(self._debounce_delay)

    @Slot(int)
    def _on_slider_value_changed(self, position):
        if self._updating_internally:
            return

        value = self._minimum + (
            (self._maximum - self._minimum) * position / self._slider_resolution
        )
        value = round(value / self._step) * self._step if self._step else value
        value = max(self._minimum, min(self._maximum, value))

        self.value_spinbox.blockSignals(True)
        try:
            self.value_spinbox.setValue(value)
        finally:
            self.value_spinbox.blockSignals(False)

        self.valueChanged.emit(value)
        self._debounce_timer.start(self._debounce_delay)
        self._update_position_indicator(position)

    @Slot(float)
    def _on_value_spinbox_changed(self, value):
        self._update_slider_position(value)
        self.valueChanged.emit(value)
        self._debounce_timer.start(self._debounce_delay)

    @Slot()
    def _on_value_spinbox_finished(self):
        self._debounce_timer.start(self._debounce_delay)

    @Slot(float)
    def _on_min_spinbox_changed(self, value):
        if value >= self._maximum:
            value = (
                self._maximum - abs(self._step) if self._step else self._maximum - 0.001
            )
            self.min_spinbox.blockSignals(True)
            try:
                self.min_spinbox.setValue(value)
            finally:
                self.min_spinbox.blockSignals(False)

        self._minimum = value
        self._update_range_indicator()
        self._update_slider_position(self.value_spinbox.value())
        self.rangeChanged.emit(self._minimum, self._maximum)

    @Slot(float)
    def _on_max_spinbox_changed(self, value):
        if value <= self._minimum:
            value = (
                self._minimum + abs(self._step) if self._step else self._minimum + 0.001
            )
            self.max_spinbox.blockSignals(True)
            try:
                self.max_spinbox.setValue(value)
            finally:
                self.max_spinbox.blockSignals(False)

        self._maximum = value
        self._update_range_indicator()
        self._update_slider_position(self.value_spinbox.value())
        self.rangeChanged.emit(self._minimum, self._maximum)

    def _emit_value_edited(self):
        value = self.value_spinbox.value()
        self.valueEdited.emit(value)


__all__ = ["RangeSlider"]
