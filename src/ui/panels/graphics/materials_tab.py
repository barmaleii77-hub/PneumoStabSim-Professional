# -*- coding: utf-8 -*-
"""
Materials Tab - –≤–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ PBR –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
–ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ PrincipledMaterial (Qt 6.10)
"""

from PySide6.QtWidgets import (
    QWidget,
    QVBoxLayout,
    QGroupBox,
    QLabel,
    QComboBox,
    QHBoxLayout,
    QGridLayout,
)
from PySide6.QtCore import Signal
from typing import Dict, Any, Optional

from .widgets import ColorButton, LabeledSlider


class MaterialsTab(QWidget):
    """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: 8 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –ø–æ–ª–Ω—ã–º PBR –Ω–∞–±–æ—Ä–æ–º

    Signals:
        material_changed: Dict[str, Any] - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    """

    material_changed = Signal(dict)

    def __init__(self, parent=None):
        super().__init__(parent)
        self._controls: Dict[str, Any] = {}
        self._updating_ui = False
        # –ö—ç—à —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ –∫–∞–∂–¥–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É
        self._materials_state: Dict[str, Dict[str, Any]] = {}
        self._current_key: Optional[str] = None
        self._material_labels = {
            "frame": "–†–∞–º–∞",
            "lever": "–†—ã—á–∞–≥",
            "tail_rod": "–•–≤–æ—Å—Ç–æ–≤–∏–∫",
            "cylinder": "–¶–∏–ª–∏–Ω–¥—Ä (—Å—Ç–µ–∫–ª–æ)",
            "piston_body": "–ö–æ—Ä–ø—É—Å –ø–æ—Ä—à–Ω—è",
            "piston_rod": "–®—Ç–æ–∫",
            "joint_tail": "–®–∞—Ä–Ω–∏—Ä —Ö–≤–æ—Å—Ç–æ–≤–∏–∫–∞",
            "joint_arm": "–®–∞—Ä–Ω–∏—Ä —Ä—ã—á–∞–≥–∞",
            "joint_rod": "–®–∞—Ä–Ω–∏—Ä —à—Ç–æ–∫–∞",
        }
        self._setup_ui()
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
        self._current_key = self.get_current_material_key()

    def _setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(12)

        selector_row = QHBoxLayout()
        selector_row.addWidget(QLabel("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", self))
        self._material_selector = QComboBox(self)
        for key, label in self._material_labels.items():
            self._material_selector.addItem(label, key)
        self._material_selector.currentIndexChanged.connect(
            self._on_material_selection_changed
        )
        selector_row.addWidget(self._material_selector, 1)
        selector_row.addStretch(1)
        layout.addLayout(selector_row)

        group = QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (Qt 6.10 PrincipledMaterial)", self)
        grid = QGridLayout(group)
        grid.setContentsMargins(8, 8, 8, 8)
        grid.setHorizontalSpacing(12)
        grid.setVerticalSpacing(8)
        r = 0

        # Base
        r = self._add_color_control(grid, r, "–ë–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç", "base_color")
        r = self._add_slider_control(
            grid, r, "–ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å", "opacity", 0.0, 1.0, 0.01
        )

        # Metal/Rough/Specular
        r = self._add_slider_control(
            grid, r, "–ú–µ—Ç–∞–ª–ª–∏—á–Ω–æ—Å—Ç—å", "metalness", 0.0, 1.0, 0.01
        )
        r = self._add_slider_control(
            grid, r, "–®–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç—å", "roughness", 0.0, 1.0, 0.01
        )
        r = self._add_slider_control(
            grid, r, "Specular Amount", "specular", 0.0, 1.0, 0.01
        )
        r = self._add_color_control(grid, r, "Specular Tint", "specular_tint")

        # Clearcoat
        r = self._add_slider_control(grid, r, "Clearcoat", "clearcoat", 0.0, 1.0, 0.01)
        r = self._add_slider_control(
            grid, r, "Clearcoat Roughness", "clearcoat_roughness", 0.0, 1.0, 0.01
        )

        # Transmission / IOR / Thickness
        r = self._add_slider_control(
            grid, r, "Transmission", "transmission", 0.0, 1.0, 0.01
        )
        r = self._add_slider_control(
            grid, r, "Index of Refraction (IOR)", "ior", 1.0, 3.0, 0.01
        )
        r = self._add_slider_control(
            grid, r, "–¢–æ–ª—â–∏–Ω–∞ (thickness)", "thickness", 0.0, 500.0, 1.0, decimals=0
        )

        # Attenuation
        r = self._add_slider_control(
            grid, r, "Attenuation Distance", "attenuation_distance", 0.0, 100000.0, 10.0
        )
        r = self._add_color_control(grid, r, "Attenuation Color", "attenuation_color")

        # Emissive
        r = self._add_color_control(grid, r, "–ò–∑–ª—É—á–∞—é—â–∏–π —Ü–≤–µ—Ç", "emissive_color")
        r = self._add_slider_control(
            grid, r, "–Ø—Ä–∫–æ—Å—Ç—å –∏–∑–ª—É—á–µ–Ω–∏—è", "emissive_intensity", 0.0, 50.0, 0.1
        )

        # Normal/Occlusion
        r = self._add_slider_control(
            grid, r, "Normal Strength", "normal_strength", 0.0, 2.0, 0.01
        )
        r = self._add_slider_control(
            grid, r, "Occlusion Amount", "occlusion_amount", 0.0, 1.0, 0.01
        )

        # Alpha Mode/Mask
        alpha_row = QHBoxLayout()
        alpha_row.addWidget(QLabel("Alpha Mode", self))
        alpha_combo = QComboBox(self)
        alpha_combo.addItem("Default", "default")
        alpha_combo.addItem("Mask", "mask")
        alpha_combo.addItem("Blend", "blend")
        alpha_combo.currentIndexChanged.connect(
            lambda _: self._on_control_changed("alpha_mode", alpha_combo.currentData())
        )
        self._controls["alpha_mode"] = alpha_combo
        alpha_row.addWidget(alpha_combo)
        alpha_row.addStretch(1)
        grid.addLayout(alpha_row, r, 0, 1, 2)
        r += 1
        r = self._add_slider_control(
            grid, r, "Alpha Cutoff (Mask)", "alpha_cutoff", 0.0, 1.0, 0.01
        )

        layout.addWidget(group)
        layout.addStretch(1)

    def _add_color_control(
        self, grid: QGridLayout, row: int, title: str, key: str
    ) -> int:
        container = QWidget(self)
        hbox = QHBoxLayout(container)
        hbox.setContentsMargins(0, 0, 0, 0)
        hbox.setSpacing(6)
        hbox.addWidget(QLabel(title, self))
        button = ColorButton()
        button.color_changed.connect(lambda c: self._on_control_changed(key, c))
        self._controls[key] = button
        hbox.addWidget(button)
        hbox.addStretch(1)
        grid.addWidget(container, row, 0, 1, 2)
        return row + 1

    def _add_slider_control(
        self,
        grid: QGridLayout,
        row: int,
        title: str,
        key: str,
        minimum: float,
        maximum: float,
        step: float,
        *,
        decimals: int = 2,
    ) -> int:
        slider = LabeledSlider(title, minimum, maximum, step, decimals=decimals)
        slider.valueChanged.connect(lambda v: self._on_control_changed(key, v))
        self._controls[key] = slider
        grid.addWidget(slider, row, 0, 1, 2)
        return row + 1

    # ========== HELPERS ==========
    def _coerce_color(self, value: Any, *, default: str = "#ffffff") -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫ hex —Ü–≤–µ—Ç—É
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç str (hex), tuple/list (r,g,b[,a]) –∏ —á–∏—Å–ª–æ [0..1] ‚Üí –æ—Ç—Ç–µ–Ω–æ–∫ —Å–µ—Ä–æ–≥–æ
        """
        try:
            if isinstance(value, str) and value:
                return value
            if isinstance(value, (tuple, list)) and len(value) >= 3:
                components = []
                is_normalized = True
                for channel in value[:3]:
                    if not isinstance(channel, (int, float)):
                        is_normalized = False
                        break
                    components.append(float(channel))
                    if channel < 0 or channel > 1:
                        is_normalized = False
                if components:
                    if is_normalized:
                        converted = [int(round(max(0.0, min(1.0, c)) * 255)) for c in components]
                    else:
                        converted = [int(round(c)) for c in components]
                    r, g, b = (max(0, min(255, comp)) for comp in converted)
                    return f"#{r:02x}{g:02x}{b:02x}"
            if isinstance(value, (int, float)):
                v = max(0.0, min(1.0, float(value)))
                c = int(round(v * 255))
                return f"#{c:02x}{c:02x}{c:02x}"
        except Exception:
            pass
        return default

    def _coerce_material_state(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–∏–ø—ã –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –ø—Ä–µ—Å–µ—Ç–∞–º–∏"""
        normalized = dict(state) if isinstance(state, dict) else {}
        # –¶–≤–µ—Ç–∞
        for ckey in (
            "base_color",
            "specular_tint",
            "attenuation_color",
            "emissive_color",
        ):
            if ckey in normalized:
                normalized[ckey] = self._coerce_color(
                    normalized.get(ckey),
                    default=("#000000" if ckey == "specular_tint" else "#ffffff"),
                )
        return normalized

    def _apply_controls_from_state(self, state: Dict[str, Any]) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–±–µ–∑ —ç–º–∏—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤)"""
        if not isinstance(state, dict):
            return
        st = self._coerce_material_state(state)
        print(f"    üîß _apply_controls_from_state: {len(st)} params to apply")
        self._updating_ui = True
        # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        for control in self._controls.values():
            try:
                control.blockSignals(True)
            except Exception:
                pass
        applied_count = 0
        try:

            def set_if(k: str):
                nonlocal applied_count
                if k in st and k in self._controls:
                    ctrl = self._controls[k]
                    v = st[k]
                    if isinstance(ctrl, ColorButton):
                        print(f"      üé® {k}: {ctrl.color().name()} ‚Üí {v}")
                        ctrl.set_color(v)
                        applied_count += 1
                    elif isinstance(ctrl, LabeledSlider):
                        old_val = ctrl.value()
                        print(f"      üéöÔ∏è {k}: {old_val} ‚Üí {v}")
                        ctrl.set_value(v)
                        applied_count += 1
                    elif hasattr(ctrl, "findData"):
                        old_idx = ctrl.currentIndex()
                        idx = ctrl.findData(v)
                        if idx >= 0:
                            print(f"      üìã {k}: index {old_idx} ‚Üí {idx} (value: {v})")
                            ctrl.setCurrentIndex(idx)
                            applied_count += 1

            for k in (
                "base_color",
                "metalness",
                "roughness",
                "specular",
                "specular_tint",
                "opacity",
                "clearcoat",
                "clearcoat_roughness",
                "transmission",
                "ior",
                "thickness",
                "attenuation_distance",
                "attenuation_color",
                "emissive_color",
                "emissive_intensity",
                "normal_strength",
                "occlusion_amount",
                "alpha_mode",
                "alpha_cutoff",
            ):
                set_if(k)
            print(f"    ‚úÖ Applied {applied_count}/{len(st)} controls")
        finally:
            for control in self._controls.values():
                try:
                    control.blockSignals(False)
                except Exception:
                    pass
            self._updating_ui = False

    def _save_current_into_cache(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ –≤ –∫—ç—à –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        key = self.get_current_material_key()
        if not key:
            return
        self._materials_state[key] = self.get_current_material_state()

    # ========== EVENTS ==========
    def _on_material_selection_changed(self, index: int) -> None:
        # –°–º–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π –∏–∑ –∫—ç—à–∞
        if self._updating_ui:
            return
        print(
            f"üîÑ MaterialsTab: Changing selection from '{self._current_key}' to material at index {index}"
        )

        # ‚ùå –£–î–ê–õ–ï–ù–û: –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏!
        # –ö–æ–Ω—Ç—Ä–æ–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¢–û–õ–¨–ö–û –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (_on_control_changed)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
        new_key = self.get_current_material_key()
        print(f"  üîë New material key: {new_key}")

        # –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–∑ –∫—ç—à–∞
        st = self._materials_state.get(new_key)
        if st:
            print(f"  ‚úÖ Loading saved state for '{new_key}' ({len(st)} params)")
            self._apply_controls_from_state(st)
        else:
            print(f"  ‚ö†Ô∏è No saved state for '{new_key}' - using control defaults")
            # –ù–ï –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –¥–µ—Ñ–æ–ª—Ç—ã
            # –ù–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            self._materials_state[new_key] = self.get_current_material_state()
            print(f"  üìù Initialized cache for '{new_key}' from controls")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á
        self._current_key = new_key

        # –≠–º–∏—Ç–∏–º payload —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞, —á—Ç–æ–±—ã —Å—Ü–µ–Ω–∞ —Å—Ä–∞–∑—É –æ—Ç—Ä–∞–∑–∏–ª–∞ –≤—ã–±–æ—Ä
        if new_key:
            self.material_changed.emit(self.get_state())
            print(f"  üì° Emitted material_changed for '{new_key}'")

    def _on_control_changed(self, key: str, value: Any) -> None:
        if self._updating_ui:
            return
        # –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ü–ï–†–ï–î —ç–º–∏—Ç–æ–º
        cur_key = self.get_current_material_key()
        if cur_key:
            # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∫—ç—à–µ
            if cur_key not in self._materials_state:
                self._materials_state[cur_key] = {}
            self._materials_state[cur_key][key] = value
            # –ü–æ—Ç–æ–º –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._materials_state[cur_key] = self.get_current_material_state()
        # –≠–º–∏—Ç–∏–º payload –¢–û–õ–¨–ö–û –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        self.material_changed.emit(
            {"current_material": cur_key, cur_key: self.get_current_material_state()}
        )

    # ========== STATE API ==========
    def get_current_material_key(self) -> str:
        return self._material_selector.currentData()

    def get_current_material_state(self) -> Dict[str, Any]:
        return {
            "base_color": self._controls["base_color"].color().name(),
            "metalness": self._controls["metalness"].value(),
            "roughness": self._controls["roughness"].value(),
            "specular": self._controls["specular"].value(),
            "specular_tint": self._controls["specular_tint"].color().name(),
            "opacity": self._controls["opacity"].value(),
            "clearcoat": self._controls.get("clearcoat").value(),
            "clearcoat_roughness": self._controls.get("clearcoat_roughness").value(),
            "transmission": self._controls.get("transmission").value(),
            "ior": self._controls.get("ior").value(),
            "thickness": self._controls.get("thickness").value(),
            "attenuation_distance": self._controls.get("attenuation_distance").value(),
            "attenuation_color": self._controls.get("attenuation_color").color().name(),
            "emissive_color": self._controls["emissive_color"].color().name(),
            "emissive_intensity": self._controls["emissive_intensity"].value(),
            "normal_strength": self._controls["normal_strength"].value(),
            "occlusion_amount": self._controls["occlusion_amount"].value(),
            "alpha_mode": self._controls["alpha_mode"].currentData(),
            "alpha_cutoff": self._controls["alpha_cutoff"].value(),
        }

    def get_state(self) -> Dict[str, Any]:
        """–í–µ—Ä–Ω—É—Ç—å payload —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤/UI)
        –§–æ—Ä–º–∞—Ç: {"current_material": key, key: {..params..}}
        """
        current_key = self.get_current_material_key()
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        if current_key:
            self._materials_state[current_key] = self.get_current_material_state()
        return {
            "current_material": current_key,
            current_key: self.get_current_material_state(),
        }

    def get_all_state(self) -> Dict[str, Dict[str, Any]]:
        """–í–µ—Ä–Ω—É—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –í–°–ï–• –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–ø—Ä–µ—Å–µ—Ç–æ–≤"""
        # –û–±–Ω–æ–≤–∏–º –∫—ç—à —Ç–µ–∫—É—â–µ–≥–æ
        cur_key = self.get_current_material_key()
        if cur_key:
            self._materials_state[cur_key] = self.get_current_material_state()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é —Ç–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
        result: Dict[str, Dict[str, Any]] = {}
        for key in self._material_labels.keys():
            if key in self._materials_state:
                result[key] = dict(self._materials_state[key])
        # DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        print(f"üîç MaterialsTab.get_all_state(): returning {len(result)} materials")
        return result

    def set_material_state(self, material_key: str, state: Dict[str, Any]):
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if not isinstance(state, dict):
            return
        self._materials_state[material_key] = self._coerce_material_state(state)
        # –ï—Å–ª–∏ —ç—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª —Ç–µ–∫—É—â–∏–π ‚Äî –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ –∫–æ–Ω—Ç—Ä–æ–ª–∞–º
        if material_key == self.get_current_material_key():
            self._apply_controls_from_state(self._materials_state[material_key])

    def set_state(self, state: Dict[str, Any]):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å—Ä–∞–∑—É (–∏–∑ SettingsManager)
        –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å { material_key: {..params..}, ... }
        """
        if not isinstance(state, dict):
            print(f"‚ö†Ô∏è MaterialsTab.set_state: state is not dict, got {type(state)}")
            return
        print(f"üîç MaterialsTab.set_state: loading {len(state)} materials")
        # –ö–†–ò–¢–ò–ß–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à
        self._materials_state.clear()
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫—ç—à –±–µ–∑ —Ç—Ä–æ–≥–∞–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
        alias_map = {"tail": "tail_rod"}

        for material_key, material_state in state.items():
            normalized_key = alias_map.get(material_key, material_key)
            if normalized_key in self._material_labels and isinstance(
                material_state, dict
            ):
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –ø–æ–ª—è –≤ –∫—ç—à (–¥–∞–∂–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –∫–æ–Ω—Ç—Ä–æ–ª–∞—Ö)
                coerced_state = self._coerce_material_state(material_state)
                self._materials_state[normalized_key] = coerced_state
                print(f"  ‚úÖ Loaded {normalized_key}: {len(material_state)} params")
            else:
                print(f"  ‚ö†Ô∏è Skipped {material_key}: not in labels or not dict")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
        cur_key = self.get_current_material_key()
        if cur_key and cur_key in self._materials_state:
            self._apply_controls_from_state(self._materials_state[cur_key])
            print(f"  ‚úÖ Applied controls for current material: {cur_key}")
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
            if cur_key and cur_key not in self._materials_state:
                self._materials_state[cur_key] = self.get_current_material_state()
                print(f"  ‚ö†Ô∏è Initialized {cur_key} from controls (was missing in state)")
        print(f"  üìä Total materials in cache: {len(self._materials_state)}")

    def get_controls(self) -> Dict[str, Any]:
        return self._controls

    def set_updating_ui(self, updating: bool) -> None:
        self._updating_ui = updating
