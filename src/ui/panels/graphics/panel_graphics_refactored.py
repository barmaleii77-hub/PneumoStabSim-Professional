"""Graphics Panel Coordinator - Refactored Version

–¢–æ–Ω–∫–∏–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è GraphicsPanel, –¥–µ–ª–µ–≥–∏—Ä—É—é—â–∏–π –≤—Å—é —Ä–∞–±–æ—Ç—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤–∫–ª–∞–¥–∫–∞–º.
–≠—Ç–æ—Ç —Ñ–∞–π–ª –∑–∞–º–µ–Ω–∏—Ç —Å—Ç–∞—Ä—ã–π –º–æ–Ω–æ–ª–∏—Ç–Ω—ã–π panel_graphics.py –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

Russian UI / English code.
"""
from __future__ import annotations

import copy
import logging
from typing import Any, Dict

from PySide6.QtCore import QSettings, Qt, QTimer, Signal, Slot
from PySide6.QtWidgets import (
    QHBoxLayout,
    QPushButton,
    QScrollArea,
    QTabWidget,
    QVBoxLayout,
    QWidget,
)

# Import –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏ –∏–∑ –º–æ–¥—É–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
from .tabs.lighting_tab import LightingTab
from .tabs.environment_tab import EnvironmentTab
from .tabs.quality_tab import QualityTab
from .tabs.camera_tab import CameraTab
from .tabs.materials_tab import MaterialsTab
from .tabs.effects_tab import EffectsTab

# Import –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
from .state_manager import GraphicsStateManager

# Import –ª–æ–≥–≥–µ—Ä—ã
from .graphics_logger import get_graphics_logger
from src.common.event_logger import get_event_logger


class GraphicsPanel(QWidget):
    """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏ —Å –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤–∫–ª–∞–¥–∫–∞–º.
    
    Responsibilities (–ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ï):
    1. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ (–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
    2. –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –≤–∫–ª–∞–¥–æ–∫
    3. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è state_manager
    4. –ü—É–±–ª–∏—á–Ω—ã–π API –¥–ª—è MainWindow
    
    Design Pattern: Coordinator + Delegation
    """
    
    # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–ø—Ä–æ–±—Ä–æ—à–µ–Ω—ã –æ—Ç –≤–∫–ª–∞–¥–æ–∫)
    lighting_changed = Signal(dict)
    environment_changed = Signal(dict)
    material_changed = Signal(dict)
    quality_changed = Signal(dict)
    camera_changed = Signal(dict)
    effects_changed = Signal(dict)
    preset_applied = Signal(str)
    
    def __init__(self, parent: QWidget | None = None) -> None:
        super().__init__(parent)
        
        self.logger = logging.getLogger(__name__)
        self.settings = QSettings("PneumoStabSim", "GraphicsPanel")
        
        # –õ–æ–≥–≥–µ—Ä—ã
        self.graphics_logger = get_graphics_logger()
        self.event_logger = get_event_logger()
        
        # State manager (—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º)
        self.state_manager = GraphicsStateManager(self.settings)
        
        # –í–∫–ª–∞–¥–∫–∏ (—Å–æ–∑–¥–∞—é—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
        self.lighting_tab: LightingTab | None = None
        self.environment_tab: EnvironmentTab | None = None
        self.quality_tab: QualityTab | None = None
        self.camera_tab: CameraTab | None = None
        self.materials_tab: MaterialsTab | None = None
        self.effects_tab: EffectsTab | None = None
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ UI
        self._create_ui()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self._load_and_apply_state()
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        QTimer.singleShot(0, self._emit_all_initial)
        
        self.logger.info("GraphicsPanel coordinator initialized (refactored version)")
    
    # ------------------------------------------------------------------
    # UI Construction (–ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø)
    # ------------------------------------------------------------------
    def _create_ui(self) -> None:
        """–°–æ–∑–¥–∞—Ç—å UI - —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –±–µ–∑ –ª–æ–≥–∏–∫–∏"""
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(8, 8, 8, 8)
        main_layout.setSpacing(8)
        
        # Scroll area –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        scroll = QScrollArea(self)
        scroll.setWidgetResizable(True)
        main_layout.addWidget(scroll, 1)
        
        container = QWidget()
        scroll.setWidget(container)
        container_layout = QVBoxLayout(container)
        container_layout.setContentsMargins(0, 0, 0, 0)
        container_layout.setSpacing(8)
        
        # Tab widget
        tabs = QTabWidget(container)
        container_layout.addWidget(tabs)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ (–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
        self._create_tabs(tabs)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_row = self._create_control_buttons()
        main_layout.addLayout(button_row)
    
    def _create_tabs(self, tabs: QTabWidget) -> None:
        """–°–æ–∑–¥–∞—Ç—å –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏ –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã"""
        # –°–æ–∑–¥–∞—ë–º –≤–∫–ª–∞–¥–∫–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π state_manager
        self.lighting_tab = LightingTab(
            state_manager=self.state_manager,
            parent=self
        )
        self.environment_tab = EnvironmentTab(
            state_manager=self.state_manager,
            parent=self
        )
        self.quality_tab = QualityTab(
            state_manager=self.state_manager,
            parent=self
        )
        self.camera_tab = CameraTab(
            state_manager=self.state_manager,
            parent=self
        )
        self.materials_tab = MaterialsTab(
            state_manager=self.state_manager,
            parent=self
        )
        self.effects_tab = EffectsTab(
            state_manager=self.state_manager,
            parent=self
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ TabWidget
        tabs.addTab(self.lighting_tab, "–û—Å–≤–µ—â–µ–Ω–∏–µ")
        tabs.addTab(self.environment_tab, "–û–∫—Ä—É–∂–µ–Ω–∏–µ")
        tabs.addTab(self.quality_tab, "–ö–∞—á–µ—Å—Ç–≤–æ")
        tabs.addTab(self.camera_tab, "–ö–∞–º–µ—Ä–∞")
        tabs.addTab(self.materials_tab, "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
        tabs.addTab(self.effects_tab, "–≠—Ñ—Ñ–µ–∫—Ç—ã")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ (–∞–≥—Ä–µ–≥–∞—Ü–∏—è)
        self._connect_tab_signals()
    
    def _connect_tab_signals(self) -> None:
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã –≤–∫–ª–∞–¥–æ–∫ –∫ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–∏–≥–Ω–∞–ª–∞–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        # Lighting
        self.lighting_tab.lighting_changed.connect(self.lighting_changed.emit)
        self.lighting_tab.preset_applied.connect(self.preset_applied.emit)
        
        # Environment
        self.environment_tab.environment_changed.connect(self.environment_changed.emit)
        
        # Quality
        self.quality_tab.quality_changed.connect(self.quality_changed.emit)
        self.quality_tab.preset_applied.connect(self.preset_applied.emit)
        
        # Camera
        self.camera_tab.camera_changed.connect(self.camera_changed.emit)
        
        # Materials
        self.materials_tab.material_changed.connect(self.material_changed.emit)
        
        # Effects
        self.effects_tab.effects_changed.connect(self.effects_changed.emit)
        
        self.logger.debug("Tab signals connected to coordinator")
    
    def _create_control_buttons(self) -> QHBoxLayout:
        """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (Reset, Export)"""
        button_row = QHBoxLayout()
        button_row.setContentsMargins(0, 0, 0, 0)
        button_row.setSpacing(8)
        button_row.addStretch(1)
        
        # Reset button
        reset_btn = QPushButton("‚Ü©Ô∏é –°–±—Ä–æ—Å", self)
        reset_btn.setToolTip("–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        reset_btn.clicked.connect(self.reset_to_defaults)
        button_row.addWidget(reset_btn)
        
        # Export analysis button (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        export_btn = QPushButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞", self)
        export_btn.setToolTip("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Python‚ÜîQML")
        export_btn.clicked.connect(self.export_sync_analysis)
        button_row.addWidget(export_btn)
        
        return button_row
    
    # ------------------------------------------------------------------
    # State Management (–î–ï–õ–ï–ì–ò–†–û–í–ê–ù–ò–ï)
    # ------------------------------------------------------------------
    def _load_and_apply_state(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –≤–∫–ª–∞–¥–∫–∞–º"""
        try:
            self.state_manager.load_settings()
            self.logger.info("Settings loaded from QSettings")
        except Exception as e:
            self.logger.error(f"Failed to load settings: {e}")
        
        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫ –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–µ
        self._apply_state_to_tabs()
    
    def _apply_state_to_tabs(self) -> None:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ –≤—Å–µ–º –≤–∫–ª–∞–¥–∫–∞–º"""
        try:
            self.lighting_tab.apply_state()
            self.environment_tab.apply_state()
            self.quality_tab.apply_state()
            self.camera_tab.apply_state()
            self.materials_tab.apply_state()
            self.effects_tab.apply_state()
            self.logger.debug("State applied to all tabs")
        except Exception as e:
            self.logger.error(f"Failed to apply state to tabs: {e}")
    
    def _emit_all_initial(self) -> None:
        """–ù–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - —ç–º–∏—Ç–∏–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã"""
        try:
            self.lighting_tab.emit_current_state()
            self.environment_tab.emit_current_state()
            self.quality_tab.emit_current_state()
            self.camera_tab.emit_current_state()
            self.materials_tab.emit_current_state()
            self.effects_tab.emit_current_state()
            self.logger.info("Initial state emitted to QML")
        except Exception as e:
            self.logger.error(f"Failed to emit initial state: {e}")
    
    # ------------------------------------------------------------------
    # Public API (–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å MainWindow)
    # ------------------------------------------------------------------
    @Slot()
    def save_settings(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ MainWindow)"""
        try:
            self.state_manager.save_settings()
            self.logger.info("Settings saved to QSettings")
        except Exception as e:
            self.logger.error(f"Failed to save settings: {e}")
    
    @Slot()
    def load_settings(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ MainWindow)"""
        try:
            self.state_manager.load_settings()
            self._apply_state_to_tabs()
            self.logger.info("Settings loaded and applied")
        except Exception as e:
            self.logger.error(f"Failed to load settings: {e}")
    
    @Slot()
    def reset_to_defaults(self) -> None:
        """–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –¥–µ—Ñ–æ–ª—Ç–∞–º"""
        self.logger.info("üîÑ Resetting all graphics settings to defaults")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å
        old_state = copy.deepcopy(self.state_manager.state)
        
        # –°–±—Ä–æ—Å —á–µ—Ä–µ–∑ state_manager
        self.state_manager.reset_to_defaults()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –≤–∫–ª–∞–¥–∫–∞–º
        self._apply_state_to_tabs()
        
        # –≠–º–∏—Ç–∏–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã
        self._emit_all_initial()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        try:
            self.state_manager.save_settings()
        except Exception:
            pass
        
        # –õ–æ–≥–∏—Ä—É–µ–º
        self.graphics_logger.log_change(
            parameter_name="RESET_ALL",
            old_value=old_state,
            new_value=copy.deepcopy(self.state_manager.state),
            category="system",
            panel_state=self.state_manager.state,
        )
        
        self.preset_applied.emit("–°–±—Ä–æ—Å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        self.logger.info("‚úÖ Reset to defaults completed")
    
    def export_sync_analysis(self) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Python‚ÜîQML"""
        try:
            report_path = self.graphics_logger.export_analysis_report()
            self.logger.info(f"üìÑ Sync analysis exported: {report_path}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑
            analysis = self.graphics_logger.analyze_qml_sync()
            
            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print("\n" + "="*60)
            print("üìä GRAPHICS SYNC ANALYSIS")
            print("="*60)
            print(f"Total changes: {analysis.get('total_events', 0)}")
            print(f"Successful QML updates: {analysis.get('successful_updates', 0)}")
            print(f"Failed QML updates: {analysis.get('failed_updates', 0)}")
            print(f"Sync rate: {analysis.get('sync_rate', 0):.1f}%")
            print("\nBy category:")
            for cat, stats in analysis.get('by_category', {}).items():
                print(f"  {cat}: {stats['total']} changes, {stats['successful']} synced")
            
            if analysis.get('errors_by_parameter'):
                print("\n‚ö†Ô∏è Parameters with errors:")
                for param, errors in analysis['errors_by_parameter'].items():
                    print(f"  {param}: {len(errors)} error(s)")
            
            print("="*60)
            print(f"Full report: {report_path}")
            print("="*60 + "\n")
            
        except Exception as e:
            self.logger.error(f"Failed to export sync analysis: {e}")
    
    # ------------------------------------------------------------------
    # Compatibility Properties (–¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)
    # ------------------------------------------------------------------
    @property
    def state(self) -> Dict[str, Any]:
        """–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return self.state_manager.state
    
    @property
    def _defaults(self) -> Dict[str, Any]:
        """–î–æ—Å—Ç—É–ø –∫ –¥–µ—Ñ–æ–ª—Ç–∞–º (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return self.state_manager._defaults
    
    # ------------------------------------------------------------------
    # Lifecycle
    # ------------------------------------------------------------------
    def closeEvent(self, event) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏"""
        self.logger.info("üõë GraphicsPanel closing, saving state...")
        try:
            self.save_settings()
        except Exception as e:
            self.logger.error(f"Failed to auto-save settings on close: {e}")
        
        try:
            report_path = self.graphics_logger.export_analysis_report()
            self.logger.info(f"   ‚úÖ Analysis report saved: {report_path}")
        except Exception as e:
            self.logger.error(f"   ‚ùå Failed to export analysis: {e}")
        
        super().closeEvent(event)
