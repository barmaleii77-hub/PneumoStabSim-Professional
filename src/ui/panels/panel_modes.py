# -*- coding: utf-8 -*-
"""
Simulation modes configuration panel - –†–£–°–°–ö–ò–ô –ò–ù–¢–ï–†–§–ï–ô–°
Controls for simulation type, physics options, and road excitation
–ü–∞–Ω–µ–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏
"""

from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QGroupBox, 
                              QRadioButton, QCheckBox, QPushButton, QLabel,
                              QButtonGroup, QSizePolicy, QComboBox, QSlider,
                              QDoubleSpinBox, QSpinBox)
from PySide6.QtCore import Signal, Slot, Qt
from PySide6.QtGui import QFont

# ‚úÖ –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SettingsManager
from src.common.settings_manager import SettingsManager


class StandardSlider(QWidget):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ª–∞–π–¥–µ—Ä Qt —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è ModesPanel"""
    
    valueEdited = Signal(float)
    
    def __init__(self, minimum=0.0, maximum=100.0, value=50.0, step=1.0, 
                 decimals=2, units="", title="", parent=None):
        super().__init__(parent)
        
        self._minimum = minimum
        self._maximum = maximum
        self._step = step
        self._decimals = decimals
        self._units = units
        self._updating = False
        
        self._setup_ui(title)
        self.setValue(value)
    
    def _setup_ui(self, title):
        """–°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π UI —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –≤–∏–¥–∂–µ—Ç–∞–º–∏"""
        layout = QVBoxLayout(self)
        layout.setSpacing(2)
        layout.setContentsMargins(2, 2, 2, 2)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if title:
            title_label = QLabel(title)
            font = QFont()
            font.setPointSize(8)
            font.setBold(True)
            title_label.setFont(font)
            layout.addWidget(title_label)
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: —Å–ª–∞–π–¥–µ—Ä + –ø–æ–ª–µ –≤–≤–æ–¥–∞
        controls_layout = QHBoxLayout()
        controls_layout.setSpacing(4)
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Qt —Å–ª–∞–π–¥–µ—Ä
        self.slider = QSlider(Qt.Orientation.Horizontal)
        self.slider.setMinimum(0)
        self.slider.setMaximum(1000)
        self.slider.setMinimumWidth(80)
        controls_layout.addWidget(self.slider, stretch=2)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è
        if self._decimals == 0:
            self.spinbox = QSpinBox()
            self.spinbox.setMinimum(int(self._minimum))
            self.spinbox.setMaximum(int(self._maximum))
            self.spinbox.setSingleStep(int(self._step))
        else:
            self.spinbox = QDoubleSpinBox()
            self.spinbox.setDecimals(self._decimals)
            self.spinbox.setMinimum(self._minimum)
            self.spinbox.setMaximum(self._maximum)
            self.spinbox.setSingleStep(self._step)
        
        self.spinbox.setMinimumWidth(50)
        self.spinbox.setMaximumWidth(70)
        controls_layout.addWidget(self.spinbox)
        
        # –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        if self._units:
            units_label = QLabel(self._units)
            font = QFont()
            font.setPointSize(8)
            units_label.setFont(font)
            controls_layout.addWidget(units_label)
        
        layout.addLayout(controls_layout)
        
        # –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã
        self.slider.valueChanged.connect(self._on_slider_changed)
        self.spinbox.valueChanged.connect(self._on_spinbox_changed)
    
    def setValue(self, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ"""
        value = max(self._minimum, min(self._maximum, value))
        
        self._updating = True
        
        # –û–±–Ω–æ–≤–∏—Ç—å spinbox
        self.spinbox.setValue(value)
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Å–ª–∞–π–¥–µ—Ä
        if self._maximum > self._minimum:
            ratio = (value - self._minimum) / (self._maximum - self._minimum)
            slider_pos = int(ratio * 1000)
            self.slider.setValue(slider_pos)
        
        self._updating = False
    
    def value(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
        return self.spinbox.value()
    
    @Slot(int)
    def _on_slider_changed(self, slider_value):
        """–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Å–ª–∞–π–¥–µ—Ä–∞"""
        if self._updating:
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å–ª–∞–π–¥–µ—Ä–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        ratio = slider_value / 1000.0
        value = self._minimum + ratio * (self._maximum - self._minimum)
        
        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —à–∞–≥
        if self._step > 0:
            steps = round((value - self._minimum) / self._step)
            value = self._minimum + steps * self._step
        
        # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
        value = max(self._minimum, min(self._maximum, value))
        
        self._updating = True
        self.spinbox.setValue(value)
        self._updating = False
        
        self.valueEdited.emit(value)
    
    @Slot()
    def _on_spinbox_changed(self, value):
        """–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –ø–æ–ª—è –≤–≤–æ–¥–∞"""
        if self._updating:
            return
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Å–ª–∞–π–¥–µ—Ä
        if self._maximum > self._minimum:
            ratio = (value - self._minimum) / (self._maximum - self._minimum)
            slider_pos = int(ratio * 1000)
            
            self._updating = True
            self.slider.setValue(slider_pos)
            self._updating = False
        
        self.valueEdited.emit(value)


class ModesPanel(QWidget):
    """–ü–∞–Ω–µ–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏"""
    
    # Signals
    simulation_control = Signal(str)
    mode_changed = Signal(str, str)
    parameter_changed = Signal(str, float)
    physics_options_changed = Signal(dict)
    animation_changed = Signal(dict)
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # ‚úÖ –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º SettingsManager
        self._settings_manager = SettingsManager()
        
        # Parameter storage
        self.parameters = {}
        self.physics_options = {}
        
        # Setup UI
        self._setup_ui()
        
        # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º defaults –∏–∑ SettingsManager
        self._load_defaults_from_settings()
        
        # Connect signals
        self._connect_signals()
        
        # Size policy
        self.setSizePolicy(QSizePolicy.Policy.Preferred, QSizePolicy.Policy.Expanding)
    
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Å–ª–∞–π–¥–µ—Ä–∞–º–∏"""
        layout = QVBoxLayout(self)
        layout.setSpacing(8)
        layout.setContentsMargins(8, 8, 8, 8)
        
        # Title
        title_label = QLabel("–†–µ–∂–∏–º—ã —Å–∏–º—É–ª—è—Ü–∏–∏")
        title_font = QFont()
        title_font.setPointSize(12)
        title_font.setBold(True)
        title_label.setFont(title_font)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title_label)
        
        # Mode preset selector
        preset_layout = QHBoxLayout()
        preset_label = QLabel("–ü—Ä–µ—Å–µ—Ç —Ä–µ–∂–∏–º–∞:")
        self.mode_preset_combo = QComboBox()
        self.mode_preset_combo.addItems([
            "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π",
            "–¢–æ–ª—å–∫–æ –∫–∏–Ω–µ–º–∞—Ç–∏–∫–∞",
            "–ü–æ–ª–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞",
            "–¢–µ—Å—Ç –ø–Ω–µ–≤–º–∞—Ç–∏–∫–∏",
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π"
        ])
        self.mode_preset_combo.setCurrentIndex(0)
        self.mode_preset_combo.currentIndexChanged.connect(self._on_mode_preset_changed)
        preset_layout.addWidget(preset_label)
        preset_layout.addWidget(self.mode_preset_combo, stretch=1)
        layout.addLayout(preset_layout)
        
        # Simulation control group
        control_group = self._create_control_group()
        layout.addWidget(control_group)
        
        # Simulation mode group
        mode_group = self._create_mode_group()
        layout.addWidget(mode_group)
        
        # Physics options group
        physics_group = self._create_physics_group()
        layout.addWidget(physics_group)
        
        # Road excitation group
        road_group = self._create_road_group()
        layout.addWidget(road_group)
        
        layout.addStretch()
    
    def _create_control_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–µ–π"""
        group = QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–µ–π")
        layout = QVBoxLayout(group)
        layout.setSpacing(4)
        
        # Main control buttons
        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(8)
        
        self.start_button = QPushButton("‚ñ∂ –°—Ç–∞—Ä—Ç")
        self.stop_button = QPushButton("‚èπ –°—Ç–æ–ø")
        self.pause_button = QPushButton("‚è∏ –ü–∞—É–∑–∞")
        self.reset_button = QPushButton("üîÑ –°–±—Ä–æ—Å")
        
        # Style the buttons
        self.start_button.setMinimumHeight(30)
        self.stop_button.setMinimumHeight(30)
        self.pause_button.setMinimumHeight(30)
        self.reset_button.setMinimumHeight(30)
        
        # Tooltips
        self.start_button.setToolTip("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é")
        self.stop_button.setToolTip("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é")
        self.pause_button.setToolTip("–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é")
        self.reset_button.setToolTip("–°–±—Ä–æ—Å–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é")
        
        buttons_layout.addWidget(self.start_button)
        buttons_layout.addWidget(self.stop_button)
        buttons_layout.addWidget(self.pause_button)
        buttons_layout.addWidget(self.reset_button)
        
        layout.addLayout(buttons_layout)
        
        return group
    
    def _create_mode_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        group = QGroupBox("–¢–∏–ø —Å–∏–º—É–ª—è—Ü–∏–∏")
        layout = QHBoxLayout(group)
        layout.setSpacing(16)
        
        # Kinematics vs Dynamics
        sim_type_widget = QWidget()
        sim_type_layout = QVBoxLayout(sim_type_widget)
        sim_type_layout.setSpacing(4)
        
        sim_type_label = QLabel("–†–µ–∂–∏–º —Ñ–∏–∑–∏–∫–∏")
        sim_type_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        font = QFont()
        font.setPointSize(9)
        font.setBold(True)
        sim_type_label.setFont(font)
        sim_type_layout.addWidget(sim_type_label)
        
        self.sim_type_group = QButtonGroup()
        self.kinematics_radio = QRadioButton("–ö–∏–Ω–µ–º–∞—Ç–∏–∫–∞")
        self.dynamics_radio = QRadioButton("–î–∏–Ω–∞–º–∏–∫–∞")
        
        self.kinematics_radio.setChecked(True)
        
        self.sim_type_group.addButton(self.kinematics_radio, 0)
        self.sim_type_group.addButton(self.dynamics_radio, 1)
        
        sim_type_layout.addWidget(self.kinematics_radio)
        sim_type_layout.addWidget(self.dynamics_radio)
        
        layout.addWidget(sim_type_widget)
        
        # Thermodynamic mode
        thermo_widget = QWidget()
        thermo_layout = QVBoxLayout(thermo_widget)
        thermo_layout.setSpacing(4)
        
        thermo_label = QLabel("–¢–µ—Ä–º–æ-—Ä–µ–∂–∏–º")
        thermo_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        font = QFont()
        font.setPointSize(9)
        font.setBold(True)
        thermo_label.setFont(font)
        thermo_layout.addWidget(thermo_label)
        
        self.thermo_group = QButtonGroup()
        self.isothermal_radio = QRadioButton("–ò–∑–æ—Ç–µ—Ä–º–∏—á–µ—Å–∫–∏–π")
        self.adiabatic_radio = QRadioButton("–ê–¥–∏–∞–±–∞—Ç–∏—á–µ—Å–∫–∏–π")
        
        self.isothermal_radio.setChecked(True)
        
        self.thermo_group.addButton(self.isothermal_radio, 0)
        self.thermo_group.addButton(self.adiabatic_radio, 1)
        
        thermo_layout.addWidget(self.isothermal_radio)
        thermo_layout.addWidget(self.adiabatic_radio)
        
        layout.addWidget(thermo_widget)
        
        return group
    
    def _create_physics_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –æ–ø—Ü–∏–π —Ñ–∏–∑–∏–∫–∏"""
        group = QGroupBox("–û–ø—Ü–∏–∏ —Ñ–∏–∑–∏–∫–∏")
        layout = QVBoxLayout(group)
        layout.setSpacing(4)
        
        # Component toggles
        self.include_springs_check = QCheckBox("–í–∫–ª—é—á–∏—Ç—å –ø—Ä—É–∂–∏–Ω—ã")
        self.include_dampers_check = QCheckBox("–í–∫–ª—é—á–∏—Ç—å –¥–µ–º–ø—Ñ–µ—Ä—ã")
        self.include_pneumatics_check = QCheckBox("–í–∫–ª—é—á–∏—Ç—å –ø–Ω–µ–≤–º–∞—Ç–∏–∫—É")
        
        # Set defaults
        self.include_springs_check.setChecked(True)
        self.include_dampers_check.setChecked(True)
        self.include_pneumatics_check.setChecked(True)
        
        # Tooltips
        self.include_springs_check.setToolTip("–£—á–∏—Ç—ã–≤–∞—Ç—å —É–ø—Ä—É–≥–æ—Å—Ç—å –ø—Ä—É–∂–∏–Ω")
        self.include_dampers_check.setToolTip("–£—á–∏—Ç—ã–≤–∞—Ç—å –¥–µ–º–ø—Ñ–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä–æ–≤")
        self.include_pneumatics_check.setToolTip("–£—á–∏—Ç—ã–≤–∞—Ç—å –ø–Ω–µ–≤–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É")
        
        layout.addWidget(self.include_springs_check)
        layout.addWidget(self.include_dampers_check)
        layout.addWidget(self.include_pneumatics_check)
        
        return group
    
    def _create_road_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Å–ª–∞–π–¥–µ—Ä–∞–º–∏"""
        group = QGroupBox("–î–æ—Ä–æ–∂–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ")
        layout = QVBoxLayout(group)
        layout.setSpacing(4)
        
        # Global excitation parameters
        self.amplitude_slider = StandardSlider(
            minimum=0.0, maximum=0.2, value=0.05, step=0.001,
            decimals=3, units="–º", title="–ì–ª–æ–±–∞–ª—å–Ω–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞"
        )
        layout.addWidget(self.amplitude_slider)
        
        self.frequency_slider = StandardSlider(
            minimum=0.1, maximum=10.0, value=1.0, step=0.1,
            decimals=1, units="–ì—Ü", title="–ì–ª–æ–±–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞"
        )
        layout.addWidget(self.frequency_slider)
        
        self.phase_slider = StandardSlider(
            minimum=0.0, maximum=360.0, value=0.0, step=15.0,
            decimals=0, units="¬∞", title="–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞"
        )
        layout.addWidget(self.phase_slider)
        
        # Per-wheel phase offsets
        per_wheel_label = QLabel("–§–∞–∑–æ–≤—ã–µ —Å–¥–≤–∏–≥–∏ –ø–æ –∫–æ–ª—ë—Å–∞–º")
        font = QFont()
        font.setPointSize(9)
        font.setBold(True)
        per_wheel_label.setFont(font)
        layout.addWidget(per_wheel_label)
        
        # Create compact sliders for each wheel
        wheel_layout = QHBoxLayout()
        wheel_layout.setSpacing(8)
        
        # Left Front
        lf_widget = QWidget()
        lf_layout = QVBoxLayout(lf_widget)
        lf_layout.setContentsMargins(2, 2, 2, 2)
        lf_layout.setSpacing(2)
        lf_label = QLabel("–õ–ü")
        lf_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        lf_layout.addWidget(lf_label)
        
        self.lf_phase_slider = StandardSlider(
            minimum=0.0, maximum=360.0, value=0.0, step=15.0,
            decimals=0, units="¬∞", title=""
        )
        lf_layout.addWidget(self.lf_phase_slider)
        wheel_layout.addWidget(lf_widget)
        
        # Right Front
        rf_widget = QWidget()
        rf_layout = QVBoxLayout(rf_widget)
        rf_layout.setContentsMargins(2, 2, 2, 2)
        rf_layout.setSpacing(2)
        rf_label = QLabel("–ü–ü")
        rf_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        rf_layout.addWidget(rf_label)
        
        self.rf_phase_slider = StandardSlider(
            minimum=0.0, maximum=360.0, value=0.0, step=15.0,
            decimals=0, units="¬∞", title=""
        )
        rf_layout.addWidget(self.rf_phase_slider)
        wheel_layout.addWidget(rf_widget)
        
        # Left Rear
        lr_widget = QWidget()
        lr_layout = QVBoxLayout(lr_widget)
        lr_layout.setContentsMargins(2, 2, 2, 2)
        lr_layout.setSpacing(2)
        lr_label = QLabel("–õ–ó")
        lr_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        lr_layout.addWidget(lr_label)
        
        self.lr_phase_slider = StandardSlider(
            minimum=0.0, maximum=360.0, value=0.0, step=15.0,
            decimals=0, units="¬∞", title=""
        )
        lr_layout.addWidget(self.lr_phase_slider)
        wheel_layout.addWidget(lr_widget)
        
        # Right Rear
        rr_widget = QWidget()
        rr_layout = QVBoxLayout(rr_widget)
        rr_layout.setContentsMargins(2, 2, 2, 2)
        rr_layout.setSpacing(2)
        rr_label = QLabel("–ü–ó")
        rr_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        rr_layout.addWidget(rr_label)
        
        self.rr_phase_slider = StandardSlider(
            minimum=0.0, maximum=360.0, value=0.0, step=15.0,
            decimals=0, units="¬∞", title=""
        )
        rr_layout.addWidget(self.rr_phase_slider)
        wheel_layout.addWidget(rr_widget)
        
        layout.addLayout(wheel_layout)
        
        return group
    
    def _load_defaults_from_settings(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å defaults –∏–∑ SettingsManager"""
        defaults = self._settings_manager.get("modes", {
            # Simulation modes
            'sim_type': 'KINEMATICS',
            'thermo_mode': 'ISOTHERMAL',
            'mode_preset': 'standard',
            
            # Road excitation
            'amplitude': 0.05,
            'frequency': 1.0,
            'phase': 0.0,
            'lf_phase': 0.0,
            'rf_phase': 0.0,
            'lr_phase': 0.0,
            'rr_phase': 0.0,
        })
        
        physics_defaults = self._settings_manager.get("modes.physics", {
            'include_springs': True,
            'include_dampers': True,
            'include_pneumatics': True
        })
        
        self.parameters.update(defaults)
        self.physics_options.update(physics_defaults)
    
    def _set_default_values(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        defaults = {
            # Simulation modes
            'sim_type': 'KINEMATICS',
            'thermo_mode': 'ISOTHERMAL',
            'mode_preset': 'standard',
            
            # Road excitation
            'amplitude': 0.05,       # m
            'frequency': 1.0,        # Hz
            'phase': 0.0,           # degrees
            'lf_phase': 0.0,        # degrees
            'rf_phase': 0.0,        # degrees
            'lr_phase': 0.0,        # degrees
            'rr_phase': 0.0,        # degrees
        }
        
        physics_defaults = {
            'include_springs': True,
            'include_dampers': True,
            'include_pneumatics': True
        }
        
        self.parameters.update(defaults)
        self.physics_options.update(physics_defaults)
    
    def _connect_signals(self):
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã –≤–∏–¥–∂–µ—Ç–æ–≤"""
        # Control buttons
        self.start_button.clicked.connect(lambda: self.simulation_control.emit("start"))
        self.stop_button.clicked.connect(lambda: self.simulation_control.emit("stop"))
        self.pause_button.clicked.connect(lambda: self.simulation_control.emit("pause"))
        self.reset_button.clicked.connect(lambda: self.simulation_control.emit("reset"))
        
        # Mode radio buttons
        self.sim_type_group.buttonToggled.connect(self._on_sim_type_changed)
        self.thermo_group.buttonToggled.connect(self._on_thermo_mode_changed)
        
        # Physics options checkboxes
        self.include_springs_check.toggled.connect(
            lambda checked: self._on_physics_option_changed('include_springs', checked))
        self.include_dampers_check.toggled.connect(
            lambda checked: self._on_physics_option_changed('include_dampers', checked))
        self.include_pneumatics_check.toggled.connect(
            lambda checked: self._on_physics_option_changed('include_pneumatics', checked))
        
        # Road excitation sliders
        self.amplitude_slider.valueEdited.connect(
            lambda v: self._on_parameter_changed('amplitude', v))
        self.frequency_slider.valueEdited.connect(
            lambda v: self._on_parameter_changed('frequency', v))
        self.phase_slider.valueEdited.connect(
            lambda v: self._on_parameter_changed('phase', v))
        
        # Per-wheel phase sliders
        self.lf_phase_slider.valueEdited.connect(
            lambda v: self._on_parameter_changed('lf_phase', v))
        self.rf_phase_slider.valueEdited.connect(
            lambda v: self._on_parameter_changed('rf_phase', v))
        self.lr_phase_slider.valueEdited.connect(
            lambda v: self._on_parameter_changed('lr_phase', v))
        self.rr_phase_slider.valueEdited.connect(
            lambda v: self._on_parameter_changed('rr_phase', v))
    
    @Slot(int)
    def _on_mode_preset_changed(self, index: int):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ —Ä–µ–∂–∏–º–∞"""
        presets = {
            0: {  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
                'sim_type': 'KINEMATICS',
                'thermo_mode': 'ISOTHERMAL',
                'include_springs': True,
                'include_dampers': True,
                'include_pneumatics': True
            },
            1: {  # –¢–æ–ª—å–∫–æ –∫–∏–Ω–µ–º–∞—Ç–∏–∫–∞
                'sim_type': 'KINEMATICS',
                'thermo_mode': 'ISOTHERMAL',
                'include_springs': False,
                'include_dampers': False,
                'include_pneumatics': False
            },
            2: {  # –ü–æ–ª–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞
                'sim_type': 'DYNAMICS',
                'thermo_mode': 'ADIABATIC',
                'include_springs': True,
                'include_dampers': True,
                'include_pneumatics': True
            },
            3: {  # –¢–µ—Å—Ç –ø–Ω–µ–≤–º–∞—Ç–∏–∫–∏
                'sim_type': 'DYNAMICS',
                'thermo_mode': 'ISOTHERMAL',
                'include_springs': False,
                'include_dampers': False,
                'include_pneumatics': True
            },
            4: {  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π (–Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
                'custom': True
            }
        }
        
        preset = presets.get(index, {})
        
        if 'custom' not in preset:
            # Apply preset
            if preset.get('sim_type') == 'KINEMATICS':
                self.kinematics_radio.setChecked(True)
            else:
                self.dynamics_radio.setChecked(True)
            
            if preset.get('thermo_mode') == 'ISOTHERMAL':
                self.isothermal_radio.setChecked(True)
            else:
                self.adiabatic_radio.setChecked(True)
            
            self.include_springs_check.setChecked(preset.get('include_springs', True))
            self.include_dampers_check.setChecked(preset.get('include_dampers', True))
            self.include_pneumatics_check.setChecked(preset.get('include_pneumatics', True))
            
            print(f"üìã ModesPanel: –ü—Ä–µ—Å–µ—Ç —Ä–µ–∂–∏–º–∞ '{self.mode_preset_combo.currentText()}' –ø—Ä–∏–º–µ–Ω—ë–Ω")
        
        self.parameters['mode_preset'] = self.mode_preset_combo.currentText()
    
    @Slot()
    def _on_sim_type_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        if self.kinematics_radio.isChecked():
            mode = 'KINEMATICS'
        else:
            mode = 'DYNAMICS'
        
        self.parameters['sim_type'] = mode
        self.mode_changed.emit('sim_type', mode)
        
        # Switch to custom preset if manual change
        if self.mode_preset_combo.currentIndex() != 4:
            self.mode_preset_combo.setCurrentIndex(4)
    
    @Slot()
    def _on_thermo_mode_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        if self.isothermal_radio.isChecked():
            mode = 'ISOTHERMAL'
        else:
            mode = 'ADIABATIC'
        
        self.parameters['thermo_mode'] = mode
        self.mode_changed.emit('thermo_mode', mode)
        
        # Switch to custom preset if manual change
        if self.mode_preset_combo.currentIndex() != 4:
            self.mode_preset_combo.setCurrentIndex(4)
    
    @Slot(str, bool)
    def _on_physics_option_changed(self, option_name: str, checked: bool):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–ø—Ü–∏–∏ —Ñ–∏–∑–∏–∫–∏"""
        self.physics_options[option_name] = checked
        self.physics_options_changed.emit(self.physics_options.copy())
        
        # Switch to custom preset if manual change
        if self.mode_preset_combo.currentIndex() != 4:
            self.mode_preset_combo.setCurrentIndex(4)
    
    @Slot(str, float)
    def _on_parameter_changed(self, param_name: str, value: float):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
        self.parameters[param_name] = value
        self.parameter_changed.emit(param_name, value)
        
        # Emit animation_changed for road excitation parameters
        if param_name in ['amplitude', 'frequency', 'phase', 'lf_phase', 'rf_phase', 'lr_phase', 'rr_phase']:
            animation_params = {
                'amplitude': self.parameters.get('amplitude', 0.05),
                'frequency': self.parameters.get('frequency', 1.0),
                'phase': self.parameters.get('phase', 0.0),
                'lf_phase': self.parameters.get('lf_phase', 0.0),
                'rf_phase': self.parameters.get('rf_phase', 0.0),
                'lr_phase': self.parameters.get('lr_phase', 0.0),
                'rr_phase': self.parameters.get('rr_phase', 0.0)
            }
            self.animation_changed.emit(animation_params)
            print(f"üîß ModesPanel: –ü–∞—Ä–∞–º–µ—Ç—Ä –∞–Ω–∏–º–∞—Ü–∏–∏ '{param_name}' –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {value}")
    
    def get_parameters(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        return self.parameters.copy()
    
    def get_physics_options(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –æ–ø—Ü–∏–∏ —Ñ–∏–∑–∏–∫–∏"""
        return self.physics_options.copy()
    
    def set_simulation_running(self, running: bool):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        self.start_button.setEnabled(not running)
        self.stop_button.setEnabled(running)
        self.pause_button.setEnabled(running)
        self.reset_button.setEnabled(not running)
        
        # Disable mode changes during simulation
        self.kinematics_radio.setEnabled(not running)
        self.dynamics_radio.setEnabled(not running)
        self.isothermal_radio.setEnabled(not running)
        self.adiabatic_radio.setEnabled(not running)
