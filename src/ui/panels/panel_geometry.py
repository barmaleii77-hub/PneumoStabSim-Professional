# -*- coding: utf-8 -*-
"""
Geometry configuration panel - –†–£–°–°–ö–ò–ô –ò–ù–¢–ï–†–§–ï–ô–°
–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SettingsManager –±–µ–∑ –¥–µ—Ñ–æ–ª—Ç–æ–≤ –≤ –∫–æ–¥–µ.
–ß—Ç–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, –∑–∞–ø–∏—Å—å –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ (—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ –≤ MainWindow).
"""
from __future__ import annotations

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QGroupBox, 
    QCheckBox, QPushButton, QLabel, QMessageBox,
    QSizePolicy, QComboBox
)
from PySide6.QtCore import Signal, Slot, Qt
from PySide6.QtGui import QFont

from ..widgets import RangeSlider
from src.common.settings_manager import get_settings_manager


class GeometryPanel(QWidget):
    parameter_changed = Signal(str, float)
    geometry_updated = Signal(dict)
    geometry_changed = Signal(dict)

    def __init__(self, parent=None):
        super().__init__(parent)

        self._settings_manager = get_settings_manager()
        self.parameters: dict[str, float | bool] = {}
        self._resolving_conflict = False

        from src.common import get_category_logger
        self.logger = get_category_logger("GeometryPanel")

        # 1) –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ JSON –°–ù–ê–ß–ê–õ–ê
        self._load_from_settings()

        # 2) –°—Ç—Ä–æ–∏–º UI –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–Ω–∏–∫–∞–∫–∏—Ö –¥–µ—Ñ–æ–ª—Ç–æ–≤ –≤ –∫–æ–¥–µ)
        self._setup_ui()

        # 3) –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self._connect_signals()

        self.setSizePolicy(QSizePolicy.Policy.Preferred, QSizePolicy.Policy.Expanding)

        # 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        from PySide6.QtCore import QTimer
        QTimer.singleShot(300, self._emit_initial)

    def _emit_initial(self):
        payload = self._get_fast_geometry_update("init", 0.0)
        self.geometry_changed.emit(payload)
        self.geometry_updated.emit(self.parameters.copy())

    # –ß—Ç–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑ JSON
    def _load_from_settings(self) -> None:
        data = self._settings_manager.get_category("geometry") or {}
        self.parameters.update(data)
        self.logger.info("‚úÖ Geometry loaded from app_settings.json (no code defaults)")

    # UI –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    def _setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setSpacing(8)
        layout.setContentsMargins(8, 8, 8, 8)

        title_label = QLabel("–ì–µ–æ–º–µ—Ç—Ä–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
        font = QFont()
        font.setPointSize(12)
        font.setBold(True)
        title_label.setFont(font)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title_label)

        preset_row = QHBoxLayout()
        preset_row.addWidget(QLabel("–ü—Ä–µ—Å–µ—Ç:"))
        self.preset_combo = QComboBox()
        self.preset_combo.addItems(["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥—Ä—É–∑–æ–≤–∏–∫", "–õ—ë–≥–∫–∏–π –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π", "–¢—è–∂—ë–ª—ã–π –≥—Ä—É–∑–æ–≤–∏–∫", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π"])
        self.preset_combo.currentIndexChanged.connect(self._on_preset_changed)
        preset_row.addWidget(self.preset_combo, 1)
        layout.addLayout(preset_row)

        layout.addWidget(self._create_frame_group())
        layout.addWidget(self._create_suspension_group())
        layout.addWidget(self._create_cylinder_group())
        layout.addWidget(self._create_options_group())

        btns = QHBoxLayout()
        reset_btn = QPushButton("‚Ü©Ô∏é –°–±—Ä–æ—Å–∏—Ç—å (defaults)")
        reset_btn.setToolTip("–°–±—Ä–æ—Å–∏—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –∏–∑ defaults_snapshot –≤ config/app_settings.json")
        reset_btn.clicked.connect(self._reset_to_defaults)
        btns.addWidget(reset_btn)

        save_defaults_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç")
        save_defaults_btn.setToolTip("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—é –∫–∞–∫ defaults_snapshot")
        save_defaults_btn.clicked.connect(self._save_current_as_defaults)
        btns.addWidget(save_defaults_btn)

        validate_btn = QPushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å")
        validate_btn.clicked.connect(self._validate_geometry)
        btns.addWidget(validate_btn)

        btns.addStretch()
        layout.addLayout(btns)
        layout.addStretch()

    def _create_frame_group(self) -> QGroupBox:
        group = QGroupBox("–†–∞–∑–º–µ—Ä—ã —Ä–∞–º—ã")
        v = QVBoxLayout(group)
        self.wheelbase_slider = RangeSlider(minimum=2.0, maximum=4.0, value=float(self.parameters.get('wheelbase', 0) or 0), step=0.001, decimals=3, units="–º", title="–ë–∞–∑–∞ (–∫–æ–ª—ë—Å–Ω–∞—è)")
        self.wheelbase_slider.setToolTip("–î–ª–∏–Ω–∞ —Ä–∞–º—ã –ø–æ –æ—Å–∏ Z. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–Ω–∏—Ö/–∑–∞–¥–Ω–∏—Ö —Ä–æ–≥–æ–≤.")
        v.addWidget(self.wheelbase_slider)
        self.track_slider = RangeSlider(minimum=1.0, maximum=2.5, value=float(self.parameters.get('track', 0) or 0), step=0.001, decimals=3, units="–º", title="–ö–æ–ª–µ—è")
        self.track_slider.setToolTip("–í–ª–∏—è–µ—Ç –¢–û–õ–¨–ö–û –Ω–∞ –ø–æ–∑–∏—Ü–∏—é –æ—Å–∏ —Ö–≤–æ—Å—Ç–æ–≤–∏–∫–∞ —Ü–∏–ª–∏–Ω–¥—Ä–∞: X = ¬±–∫–æ–ª–µ—è/2. –ù–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ‚Äò–†–∞–º–∞ ‚Üí –æ—Å—å —Ä—ã—á–∞–≥–∞‚Äô.")
        v.addWidget(self.track_slider)
        return group

    def _create_suspension_group(self) -> QGroupBox:
        group = QGroupBox("–ì–µ–æ–º–µ—Ç—Ä–∏—è –ø–æ–¥–≤–µ—Å–∫–∏")
        v = QVBoxLayout(group)
        self.frame_to_pivot_slider = RangeSlider(minimum=0.3, maximum=1.0, value=float(self.parameters.get('frame_to_pivot', 0) or 0), step=0.001, decimals=3, units="–º", title="–†–∞–º–∞ ‚Üí –æ—Å—å —Ä—ã—á–∞–≥–∞")
        self.frame_to_pivot_slider.setToolTip("–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –ø–æ–ø–µ—Ä–µ—á–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ —Ä–∞–º—ã –¥–æ –æ—Å–∏ —Ä—ã—á–∞–≥–∞. –ù–ï –∑–∞–≤–∏—Å–∏—Ç –æ—Ç ‚Äò–ö–æ–ª–µ—è‚Äô.")
        v.addWidget(self.frame_to_pivot_slider)
        self.lever_length_slider = RangeSlider(minimum=0.5, maximum=1.5, value=float(self.parameters.get('lever_length', 0) or 0), step=0.001, decimals=3, units="–º", title="–î–ª–∏–Ω–∞ —Ä—ã—á–∞–≥–∞")
        v.addWidget(self.lever_length_slider)
        self.rod_position_slider = RangeSlider(minimum=0.3, maximum=0.9, value=float(self.parameters.get('rod_position', 0) or 0), step=0.001, decimals=3, units="", title="–ü–æ–ª–æ–∂–µ–Ω–∏–µ –∫—Ä–µ–ø–ª–µ–Ω–∏—è —à—Ç–æ–∫–∞ (–¥–æ–ª—è)")
        v.addWidget(self.rod_position_slider)
        return group

    def _create_cylinder_group(self) -> QGroupBox:
        group = QGroupBox("–†–∞–∑–º–µ—Ä—ã —Ü–∏–ª–∏–Ω–¥—Ä–∞")
        v = QVBoxLayout(group)
        self.cylinder_length_slider = RangeSlider(minimum=0.3, maximum=0.8, value=float(self.parameters.get('cylinder_length', 0) or 0), step=0.001, decimals=3, units="–º", title="–î–ª–∏–Ω–∞ —Ü–∏–ª–∏–Ω–¥—Ä–∞")
        v.addWidget(self.cylinder_length_slider)
        self.cyl_diam_m_slider = RangeSlider(minimum=0.030, maximum=0.150, value=float(self.parameters.get('cyl_diam_m', 0) or 0), step=0.001, decimals=3, units="–º", title="–î–∏–∞–º–µ—Ç—Ä —Ü–∏–ª–∏–Ω–¥—Ä–∞")
        v.addWidget(self.cyl_diam_m_slider)
        self.stroke_m_slider = RangeSlider(minimum=0.100, maximum=0.500, value=float(self.parameters.get('stroke_m', 0) or 0), step=0.001, decimals=3, units="–º", title="–•–æ–¥ –ø–æ—Ä—à–Ω—è")
        v.addWidget(self.stroke_m_slider)
        self.dead_gap_m_slider = RangeSlider(minimum=0.000, maximum=0.020, value=float(self.parameters.get('dead_gap_m', 0) or 0), step=0.001, decimals=3, units="–º", title="–ú—ë—Ä—Ç–≤—ã–π –∑–∞–∑–æ—Ä")
        v.addWidget(self.dead_gap_m_slider)
        self.rod_diameter_m_slider = RangeSlider(minimum=0.020, maximum=0.060, value=float(self.parameters.get('rod_diameter_m', 0) or 0), step=0.001, decimals=3, units="–º", title="–î–∏–∞–º–µ—Ç—Ä —à—Ç–æ–∫–∞")
        v.addWidget(self.rod_diameter_m_slider)
        self.piston_rod_length_m_slider = RangeSlider(minimum=0.100, maximum=0.500, value=float(self.parameters.get('piston_rod_length_m', 0) or 0), step=0.001, decimals=3, units="–º", title="–î–ª–∏–Ω–∞ —à—Ç–æ–∫–∞ –ø–æ—Ä—à–Ω—è")
        v.addWidget(self.piston_rod_length_m_slider)
        self.piston_thickness_m_slider = RangeSlider(minimum=0.010, maximum=0.050, value=float(self.parameters.get('piston_thickness_m', 0) or 0), step=0.001, decimals=3, units="–º", title="–¢–æ–ª—â–∏–Ω–∞ –ø–æ—Ä—à–Ω—è")
        v.addWidget(self.piston_thickness_m_slider)
        return group

    def _create_options_group(self) -> QGroupBox:
        group = QGroupBox("–û–ø—Ü–∏–∏")
        v = QVBoxLayout(group)
        self.interference_check = QCheckBox("–ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏")
        self.interference_check.setChecked(bool(self.parameters.get('interference_check', False)))
        v.addWidget(self.interference_check)
        self.link_rod_diameters = QCheckBox("–°–≤—è–∑–∞—Ç—å –¥–∏–∞–º–µ—Ç—Ä—ã —à—Ç–æ–∫–æ–≤ –ø–µ—Ä–µ–¥–Ω–∏—Ö/–∑–∞–¥–Ω–∏—Ö –∫–æ–ª—ë—Å")
        self.link_rod_diameters.setChecked(bool(self.parameters.get('link_rod_diameters', False)))
        v.addWidget(self.link_rod_diameters)
        return group

    def _connect_signals(self):
        self.wheelbase_slider.valueEdited.connect(lambda v: self._on_parameter_changed('wheelbase', v))
        self.wheelbase_slider.valueChanged.connect(lambda v: self._on_parameter_live_change('wheelbase', v))
        self.track_slider.valueEdited.connect(lambda v: self._on_parameter_changed('track', v))
        self.track_slider.valueChanged.connect(lambda v: self._on_parameter_live_change('track', v))
        self.frame_to_pivot_slider.valueEdited.connect(lambda v: self._on_parameter_changed('frame_to_pivot', v))
        self.frame_to_pivot_slider.valueChanged.connect(lambda v: self._on_parameter_live_change('frame_to_pivot', v))
        self.lever_length_slider.valueEdited.connect(lambda v: self._on_parameter_changed('lever_length', v))
        self.lever_length_slider.valueChanged.connect(lambda v: self._on_parameter_live_change('lever_length', v))
        self.rod_position_slider.valueEdited.connect(lambda v: self._on_parameter_changed('rod_position', v))
        self.rod_position_slider.valueChanged.connect(lambda v: self._on_parameter_live_change('rod_position', v))
        self.cylinder_length_slider.valueEdited.connect(lambda v: self._on_parameter_changed('cylinder_length', v))
        self.cylinder_length_slider.valueChanged.connect(lambda v: self._on_parameter_live_change('cylinder_length', v))
        self.cyl_diam_m_slider.valueEdited.connect(lambda v: self._on_parameter_changed('cyl_diam_m', v))
        self.cyl_diam_m_slider.valueChanged.connect(lambda v: self._on_parameter_live_change('cyl_diam_m', v))
        self.stroke_m_slider.valueEdited.connect(lambda v: self._on_parameter_changed('stroke_m', v))
        self.stroke_m_slider.valueChanged.connect(lambda v: self._on_parameter_live_change('stroke_m', v))
        self.dead_gap_m_slider.valueEdited.connect(lambda v: self._on_parameter_changed('dead_gap_m', v))
        self.dead_gap_m_slider.valueChanged.connect(lambda v: self._on_parameter_live_change('dead_gap_m', v))
        self.rod_diameter_m_slider.valueEdited.connect(lambda v: self._on_parameter_changed('rod_diameter_m', v))
        self.rod_diameter_m_slider.valueChanged.connect(lambda v: self._on_parameter_live_change('rod_diameter_m', v))
        self.piston_rod_length_m_slider.valueEdited.connect(lambda v: self._on_parameter_changed('piston_rod_length_m', v))
        self.piston_rod_length_m_slider.valueChanged.connect(lambda v: self._on_parameter_live_change('piston_rod_length_m', v))
        self.piston_thickness_m_slider.valueEdited.connect(lambda v: self._on_parameter_changed('piston_thickness_m', v))
        self.piston_thickness_m_slider.valueChanged.connect(lambda v: self._on_parameter_live_change('piston_thickness_m', v))

        self.interference_check.toggled.connect(self._on_interference_check_toggled)
        self.link_rod_diameters.toggled.connect(self._on_link_rod_diameters_toggled)

    @Slot(bool)
    def _on_interference_check_toggled(self, checked: bool) -> None:
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏"""
        if self._resolving_conflict:
            return
        self.parameters['interference_check'] = bool(checked)
        self.geometry_updated.emit(self.parameters.copy())

    @Slot(bool)
    def _on_link_rod_diameters_toggled(self, checked: bool) -> None:
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ü–∏–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –¥–∏–∞–º–µ—Ç—Ä–æ–≤ —à—Ç–æ–∫–æ–≤"""
        if self._resolving_conflict:
            return
        self.parameters['link_rod_diameters'] = bool(checked)
        self.geometry_updated.emit(self.parameters.copy())

    @Slot(int)
    def _on_preset_changed(self, index: int):
        presets = {
            0: {'wheelbase': 3.2, 'track': 1.6, 'lever_length': 0.8, 'cyl_diam_m': 0.080, 'rod_diameter_m': 0.035},
            1: {'wheelbase': 2.8, 'track': 1.4, 'lever_length': 0.7, 'cyl_diam_m': 0.065, 'rod_diameter_m': 0.028},
            2: {'wheelbase': 3.8, 'track': 1.9, 'lever_length': 0.95, 'cyl_diam_m': 0.100, 'rod_diameter_m': 0.045},
            3: {}
        }
        if index in (0, 1, 2):
            params = presets[index]
            self.set_parameters(params)
            self.geometry_updated.emit(self.parameters.copy())

    def set_parameters(self, params: dict) -> None:
        self._resolving_conflict = True
        try:
            self.parameters.update(params)
            for k, v in params.items():
                self._set_parameter_value(k, v)
        finally:
            self._resolving_conflict = False

    @Slot()
    def _reset_to_defaults(self):
        try:
            self._settings_manager.reset_to_defaults(category="geometry")
            self.parameters = self._settings_manager.get_category("geometry") or {}
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –≤–∏–¥–∂–µ—Ç–∞–º
            for k, v in self.parameters.items():
                self._set_parameter_value(k, v)
            self.geometry_updated.emit(self.parameters.copy())
        except Exception as e:
            self.logger.error(f"Reset to geometry defaults failed: {e}")

    @Slot()
    def _save_current_as_defaults(self):
        try:
            current = self.collect_state()
            self._settings_manager.set_category("geometry", current, auto_save=False)
            self._settings_manager.save_current_as_defaults(category="geometry")
        except Exception as e:
            self.logger.error(f"Save geometry as defaults failed: {e}")

    def collect_state(self) -> dict:
        return self.parameters.copy()

    @Slot(str, float)
    def _on_parameter_live_change(self, param_name: str, value: float):
        if self._resolving_conflict:
            return
        self.parameters[param_name] = value
        geometry_3d = self._get_fast_geometry_update(param_name, value)
        self.geometry_changed.emit(geometry_3d)

    @Slot(str, float)
    def _on_parameter_changed(self, param_name: str, value: float):
        if self._resolving_conflict:
            return
        self.parameters[param_name] = value
        self.parameter_changed.emit(param_name, value)
        self.geometry_updated.emit(self.parameters.copy())
        if param_name in ['wheelbase', 'track', 'lever_length', 'cylinder_length', 'frame_to_pivot', 'rod_position',
                          'cyl_diam_m', 'stroke_m', 'dead_gap_m', 'rod_diameter_m', 'piston_rod_length_m', 'piston_thickness_m']:
            self.geometry_changed.emit(self._get_fast_geometry_update(param_name, value))

    def _get_fast_geometry_update(self, param_name: str, value: float) -> dict:
        # –ß–∏—Ç–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ SettingsManager.geometry (–≤ –º–º –≤ QML)
        geom_cfg = self._settings_manager.get_category("geometry") or {}
        payload: dict[str, float] = {
            'frameLength': (self.parameters.get('wheelbase', 0) or 0) * 1000.0,
            'leverLength': (self.parameters.get('lever_length', 0) or 0) * 1000.0,
            'cylinderBodyLength': (self.parameters.get('cylinder_length', 0) or 0) * 1000.0,
            'trackWidth': (self.parameters.get('track', 0) or 0) * 1000.0,
            'frameToPivot': (self.parameters.get('frame_to_pivot', 0) or 0) * 1000.0,
            'rodPosition': float(self.parameters.get('rod_position', 0) or 0),
            'boreHead': (self.parameters.get('cyl_diam_m', 0) or 0) * 1000.0,
            'rodDiameter': (self.parameters.get('rod_diameter_m', 0) or 0) * 1000.0,
            'pistonRodLength': (self.parameters.get('piston_rod_length_m', 0) or 0) * 1000.0,
            'pistonThickness': (self.parameters.get('piston_thickness_m', 0) or 0) * 1000.0,
        }
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ: –Ω–µ –∑–∞–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç—ã –≤ –∫–æ–¥–µ, –µ—Å–ª–∏ –Ω–µ—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if isinstance(geom_cfg.get('frame_height_mm'), (int, float)):
            payload['frameHeight'] = float(geom_cfg['frame_height_mm'])
        if isinstance(geom_cfg.get('frame_beam_size_mm'), (int, float)):
            payload['frameBeamSize'] = float(geom_cfg['frame_beam_size_mm'])
        if isinstance(geom_cfg.get('tail_rod_length_mm'), (int, float)):
            # –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º snake_case –∫–ª—é—á, –∫–∞–∫ –≤ QML –æ–∂–∏–¥–∞–µ—Ç—Å—è
            payload['tail_rod_length'] = float(geom_cfg['tail_rod_length_mm'])
        return payload

    def _set_parameter_value(self, param_name: str, value: float) -> None:
        mapping = {
            'wheelbase': self.wheelbase_slider,
            'track': self.track_slider,
            'frame_to_pivot': self.frame_to_pivot_slider,
            'lever_length': self.lever_length_slider,
            'rod_position': self.rod_position_slider,
            'cylinder_length': self.cylinder_length_slider,
            'cyl_diam_m': self.cyl_diam_m_slider,
            'stroke_m': self.stroke_m_slider,
            'dead_gap_m': self.dead_gap_m_slider,
            'rod_diameter_m': self.rod_diameter_m_slider,
            'piston_rod_length_m': self.piston_rod_length_m_slider,
            'piston_thickness_m': self.piston_thickness_m_slider,
        }
        slider = mapping.get(param_name)
        if slider is None:
            self.parameters[param_name] = value
            return
        try:
            slider.setValue(float(value))
            self.parameters[param_name] = float(value)
        except Exception as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {param_name}={value}: {e}")

    def _validate_geometry(self):
        errors = []
        warnings = []

        wheelbase = float(self.parameters.get('wheelbase', 0) or 0)
        lever_length = float(self.parameters.get('lever_length', 0) or 0)
        frame_to_pivot = float(self.parameters.get('frame_to_pivot', 0) or 0)

        max_lever_reach = wheelbase / 2.0 - 0.1
        if frame_to_pivot + lever_length > max_lever_reach:
            errors.append(f"–ì–µ–æ–º–µ—Ç—Ä–∏—è —Ä—ã—á–∞–≥–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: {frame_to_pivot + lever_length:.2f} > {max_lever_reach:.2f}–º")

        rod_diameter_m = float(self.parameters.get('rod_diameter_m', 0) or 0)
        cyl_diam_m = float(self.parameters.get('cyl_diam_m', 0) or 0)
        if cyl_diam_m > 0:
            if rod_diameter_m >= cyl_diam_m * 0.8:
                errors.append(f"–î–∏–∞–º–µ—Ç—Ä —à—Ç–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫: {rod_diameter_m*1000:.1f}–º–º >= 80% –æ—Ç {cyl_diam_m*1000:.1f}–º–º —Ü–∏–ª–∏–Ω–¥—Ä–∞")
            elif rod_diameter_m >= cyl_diam_m * 0.7:
                warnings.append(f"–î–∏–∞–º–µ—Ç—Ä —à—Ç–æ–∫–∞ –±–ª–∏–∑–æ–∫ –∫ –ø—Ä–µ–¥–µ–ª—É: {rod_diameter_m*1000:.1f}–º–º vs {cyl_diam_m*1000:.1f}–º–º —Ü–∏–ª–∏–Ω–¥—Ä–∞")

        if errors:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏', '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏:\n' + '\n'.join(errors))
        elif warnings:
            QMessageBox.warning(self, '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n' + '\n'.join(warnings))
        else:
            QMessageBox.information(self, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–æ–º–µ—Ç—Ä–∏–∏', '–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.')
