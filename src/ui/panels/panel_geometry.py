# -*- coding: utf-8 -*-
"""
Geometry configuration panel - –†–£–°–°–ö–ò–ô –ò–ù–¢–ï–†–§–ï–ô–°
Controls for vehicle geometry parameters with dependency management
–ü–∞–Ω–µ–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
"""

from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QGroupBox, 
                              QCheckBox, QPushButton, QLabel, QMessageBox,
                              QSizePolicy, QComboBox)  # NEW: QComboBox for presets
from PySide6.QtCore import Signal, Slot, Qt
from PySide6.QtGui import QFont

from ..widgets import RangeSlider


class GeometryPanel(QWidget):
    """–ü–∞–Ω–µ–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–æ–º–µ—Ç—Ä–∏–∏
    
    Panel for geometry parameter configuration (Russian UI)
    
    Provides controls for / –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
    - Wheelbase and track dimensions / –ë–∞–∑–∞ –∏ –∫–æ–ª–µ—è
    - Lever geometry / –ì–µ–æ–º–µ—Ç—Ä–∏—è —Ä—ã—á–∞–≥–æ–≤
    - Cylinder dimensions / –†–∞–∑–º–µ—Ä—ã —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤
    - Dead zones and clearances / –ú—ë—Ä—Ç–≤—ã–µ –∑–æ–Ω—ã –∏ –∑–∞–∑–æ—Ä—ã
    """
    
    # Signals for parameter changes
    parameter_changed = Signal(str, float)  # parameter_name, new_value
    geometry_updated = Signal(dict)         # Complete geometry dictionary
    geometry_changed = Signal(dict)         # 3D scene geometry update
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # Parameter storage
        self.parameters = {}
        
        # Dependency resolution state
        self._resolving_conflict = False
        
        # Setup UI
        self._setup_ui()
        
        # Set default values
        self._set_default_values()
        
        # Connect signals
        self._connect_signals()
        
        # Size policy
        self.setSizePolicy(QSizePolicy.Policy.Preferred, QSizePolicy.Policy.Expanding)
        
        # ‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –≤ QML!
        print("üîß GeometryPanel: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–æ–º–µ—Ç—Ä–∏–∏...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—é –¥–ª—è QML (–∫–∞–∫ –≤ _get_fast_geometry_update)
        initial_geometry = self._get_fast_geometry_update("init", 0.0)
        self.geometry_changed.emit(initial_geometry)
        self.geometry_updated.emit(self.parameters.copy())
        
        print("  ‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ QML")
        print(f"  üìê rodPosition = {self.parameters.get('rod_position', 0.6)} (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä!)")
    
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å / Setup user interface"""
        layout = QVBoxLayout(self)
        layout.setSpacing(8)
        layout.setContentsMargins(8, 8, 8, 8)
        
        # Title (Russian)
        title_label = QLabel("–ì–µ–æ–º–µ—Ç—Ä–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
        title_font = QFont()
        title_font.setPointSize(12)
        title_font.setBold(True)
        title_label.setFont(title_font)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title_label)
        
        # Preset selector (NEW!)
        preset_layout = QHBoxLayout()
        preset_label = QLabel("–ü—Ä–µ—Å–µ—Ç:")
        self.preset_combo = QComboBox()
        self.preset_combo.addItems([
            "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥—Ä—É–∑–æ–≤–∏–∫",
            "–õ—ë–≥–∫–∏–π –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π",
            "–¢—è–∂—ë–ª—ã–π –≥—Ä—É–∑–æ–≤–∏–∫",
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π"
        ])
        self.preset_combo.setCurrentIndex(0)
        self.preset_combo.currentIndexChanged.connect(self._on_preset_changed)
        preset_layout.addWidget(preset_label)
        preset_layout.addWidget(self.preset_combo, stretch=1)
        layout.addLayout(preset_layout)
        
        # Frame dimensions group
        frame_group = self._create_frame_group()
        layout.addWidget(frame_group)
        
        # Suspension geometry group
        suspension_group = self._create_suspension_group()
        layout.addWidget(suspension_group)
        
        # Cylinder geometry group
        cylinder_group = self._create_cylinder_group()
        layout.addWidget(cylinder_group)
        
        # Options group
        options_group = self._create_options_group()
        layout.addWidget(options_group)
        
        # Control buttons
        buttons_layout = self._create_buttons()
        layout.addLayout(buttons_layout)
        
        layout.addStretch()
    
    def _create_frame_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É —Ä–∞–∑–º–µ—Ä–æ–≤ —Ä–∞–º—ã / Create frame dimensions group"""
        group = QGroupBox("–†–∞–∑–º–µ—Ä—ã —Ä–∞–º—ã")
        layout = QVBoxLayout(group)
        layout.setSpacing(4)
        
        # Wheelbase (–ë–∞–∑–∞) - –î–ò–°–ö–†–ï–¢–ù–û–°–¢–¨ 0.001–º (1–º–º)
        self.wheelbase_slider = RangeSlider(
            minimum=2.0, maximum=4.0, value=3.2, step=0.001,
            decimals=3, units="–º", title="–ë–∞–∑–∞ (–∫–æ–ª—ë—Å–Ω–∞—è)"
        )
        layout.addWidget(self.wheelbase_slider)
        
        # Track width (–ö–æ–ª–µ—è) - –î–ò–°–ö–†–ï–¢–ù–û–°–¢–¨ 0.001–º (1–º–º)
        self.track_slider = RangeSlider(
            minimum=1.0, maximum=2.5, value=1.6, step=0.001,
            decimals=3, units="–º", title="–ö–æ–ª–µ—è"
        )
        layout.addWidget(self.track_slider)
        
        return group
    
    def _create_suspension_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –ø–æ–¥–≤–µ—Å–∫–∏ / Create suspension geometry group"""
        group = QGroupBox("–ì–µ–æ–º–µ—Ç—Ä–∏—è –ø–æ–¥–≤–µ—Å–∫–∏")
        layout = QVBoxLayout(group)
        layout.setSpacing(4)
        
        # Distance from frame to lever pivot - –î–ò–°–ö–†–ï–¢–ù–û–°–¢–¨ 0.001–º (1–º–º)
        self.frame_to_pivot_slider = RangeSlider(
            minimum=0.3, maximum=1.0, value=0.6, step=0.001,
            decimals=3, units="–º", title="–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–º–∞ ‚Üí –æ—Å—å —Ä—ã—á–∞–≥–∞"
        )
        layout.addWidget(self.frame_to_pivot_slider)
        
        # Lever length - –î–ò–°–ö–†–ï–¢–ù–û–°–¢–¨ 0.001–º (1–º–º)
        self.lever_length_slider = RangeSlider(
            minimum=0.5, maximum=1.5, value=0.8, step=0.001,
            decimals=3, units="–º", title="–î–ª–∏–Ω–∞ —Ä—ã—á–∞–≥–∞"
        )
        layout.addWidget(self.lever_length_slider)
        
        # Rod attachment position (–¥–æ–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Å –º–µ–Ω—å—à–∏–º —à–∞–≥–æ–º)
        self.rod_position_slider = RangeSlider(
            minimum=0.3, maximum=0.9, value=0.6, step=0.001,
            decimals=3, units="", title="–ü–æ–ª–æ–∂–µ–Ω–∏–µ –∫—Ä–µ–ø–ª–µ–Ω–∏—è —à—Ç–æ–∫–∞ (–¥–æ–ª—è)"
        )
        layout.addWidget(self.rod_position_slider)
        
        return group
    
    def _create_cylinder_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É —Ä–∞–∑–º–µ—Ä–æ–≤ —Ü–∏–ª–∏–Ω–¥—Ä–∞ / Create cylinder geometry group"""
        group = QGroupBox("–†–∞–∑–º–µ—Ä—ã —Ü–∏–ª–∏–Ω–¥—Ä–∞")
        layout = QVBoxLayout(group)
        layout.setSpacing(4)
        
        # Cylinder length - –î–ò–°–ö–†–ï–¢–ù–û–°–¢–¨ 0.001–º (1–º–º)
        self.cylinder_length_slider = RangeSlider(
            minimum=0.3, maximum=0.8, value=0.5, step=0.001,
            decimals=3, units="–º", title="–î–ª–∏–Ω–∞ —Ü–∏–ª–∏–Ω–¥—Ä–∞"
        )
        layout.addWidget(self.cylinder_length_slider)
        
        # –ú–®-1: –ï–¥–∏–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä —Ü–∏–ª–∏–Ω–¥—Ä–∞ - –£–ñ–ï 0.001–º
        self.cyl_diam_m_slider = RangeSlider(
            minimum=0.030, maximum=0.150, value=0.080, step=0.001,
            decimals=3, units="–º", title="–î–∏–∞–º–µ—Ç—Ä —Ü–∏–ª–∏–Ω–¥—Ä–∞"
        )
        layout.addWidget(self.cyl_diam_m_slider)
        
        # –ú–®-1: –•–æ–¥ –ø–æ—Ä—à–Ω—è - –£–ñ–ï 0.001–º
        self.stroke_m_slider = RangeSlider(
            minimum=0.100, maximum=0.500, value=0.300, step=0.001,
            decimals=3, units="–º", title="–•–æ–¥ –ø–æ—Ä—à–Ω—è"
        )
        layout.addWidget(self.stroke_m_slider)
        
        # –ú–®-1: –ú—ë—Ä—Ç–≤—ã–π –∑–∞–∑–æ—Ä - –£–ñ–ï 0.001–º
        self.dead_gap_m_slider = RangeSlider(
            minimum=0.000, maximum=0.020, value=0.005, step=0.001,
            decimals=3, units="–º", title="–ú—ë—Ä—Ç–≤—ã–π –∑–∞–∑–æ—Ä"
        )
        layout.addWidget(self.dead_gap_m_slider)
        
        # –ú–®-2: Rod diameter - –£–ñ–ï 0.001–º
        self.rod_diameter_m_slider = RangeSlider(
            minimum=0.020, maximum=0.060, value=0.035, step=0.001,
            decimals=3, units="–º", title="–î–∏–∞–º–µ—Ç—Ä —à—Ç–æ–∫–∞"
        )
        layout.addWidget(self.rod_diameter_m_slider)
        
        # –ú–®-2: Piston rod length - –£–ñ–ï 0.001–º
        self.piston_rod_length_m_slider = RangeSlider(
            minimum=0.100, maximum=0.500, value=0.200, step=0.001,
            decimals=3, units="–º", title="–î–ª–∏–Ω–∞ —à—Ç–æ–∫–∞ –ø–æ—Ä—à–Ω—è"
        )
        layout.addWidget(self.piston_rod_length_m_slider)
        
        # –ú–®-2: Piston thickness - –£–ñ–ï 0.001–º
        self.piston_thickness_m_slider = RangeSlider(
            minimum=0.010, maximum=0.050, value=0.025, step=0.001,
            decimals=3, units="–º", title="–¢–æ–ª—â–∏–Ω–∞ –ø–æ—Ä—à–Ω—è"
        )
        layout.addWidget(self.piston_thickness_m_slider)
        
        return group
    
    def _create_options_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –æ–ø—Ü–∏–π / Create options group"""
        group = QGroupBox("–û–ø—Ü–∏–∏")
        layout = QVBoxLayout(group)
        layout.setSpacing(4)
        
        # Interference checking (–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π)
        self.interference_check = QCheckBox("–ü—Ä–æ–≤–µ—Ä—è—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏")
        self.interference_check.setChecked(True)
        layout.addWidget(self.interference_check)
        
        # Link rod diameters (–°–≤—è–∑–∞—Ç—å –¥–∏–∞–º–µ—Ç—Ä—ã —à—Ç–æ–∫–æ–≤)
        self.link_rod_diameters = QCheckBox("–°–≤—è–∑–∞—Ç—å –¥–∏–∞–º–µ—Ç—Ä—ã —à—Ç–æ–∫–æ–≤ –ø–µ—Ä–µ–¥–Ω–∏—Ö/–∑–∞–¥–Ω–∏—Ö –∫–æ–ª—ë—Å")
        self.link_rod_diameters.setChecked(False)
        layout.addWidget(self.link_rod_diameters)
        
        return group
    
    def _create_buttons(self) -> QHBoxLayout:
        """–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è / Create control buttons"""
        layout = QHBoxLayout()
        layout.setSpacing(4)
        
        # Reset to defaults (–°–±—Ä–æ—Å–∏—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.reset_button = QPushButton("–°–±—Ä–æ—Å–∏—Ç—å")
        self.reset_button.setToolTip("–°–±—Ä–æ—Å–∏—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        self.reset_button.clicked.connect(self._reset_to_defaults)
        layout.addWidget(self.reset_button)
        
        # Validate geometry (–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é)
        self.validate_button = QPushButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å")
        self.validate_button.setToolTip("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏–∏")
        self.validate_button.clicked.connect(self._validate_geometry)
        layout.addWidget(self.validate_button)
        
        layout.addStretch()
        
        return layout
    
    @Slot(int)
    def _on_preset_changed(self, index: int):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞ / Handle preset selection"""
        presets = {
            0: {  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥—Ä—É–∑–æ–≤–∏–∫
                'wheelbase': 3.2, 'track': 1.6, 'lever_length': 0.8,
                'cyl_diam_m': 0.080, 'rod_diameter_m': 0.035  # –ú–®-2: –∏–∑–º–µ–Ω–µ–Ω–æ
            },
            1: {  # –õ—ë–≥–∫–∏–π –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π
                'wheelbase': 2.8, 'track': 1.4, 'lever_length': 0.7,
                'cyl_diam_m': 0.065, 'rod_diameter_m': 0.028  # –ú–®-2: –∏–∑–º–µ–Ω–µ–Ω–æ
            },
            2: {  # –¢—è–∂—ë–ª—ã–π –≥—Ä—É–∑–æ–≤–∏–∫
                'wheelbase': 3.8, 'track': 1.9, 'lever_length': 0.95,
                'cyl_diam_m': 0.100, 'rod_diameter_m': 0.045  # –ú–®-2: –∏–∑–º–µ–Ω–µ–Ω–æ
            },
            3: {}  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π (no changes)
        }
        
        if index < 3:  # Don't change for "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π"
            preset = presets.get(index, {})
            if preset:
                self.set_parameters(preset)
                self.geometry_updated.emit(self.parameters.copy())
    
    def _set_default_values(self):
        """Set default parameter values"""
        defaults = {
            'wheelbase': 3.2,
            'track': 1.6,
            'frame_to_pivot': 0.6,
            'lever_length': 0.8,
            'rod_position': 0.6,
            'cylinder_length': 0.5,
            'cyl_diam_m': 0.080,          # –ú–®-1: –ï–¥–∏–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä —Ü–∏–ª–∏–Ω–¥—Ä–∞ (–º)
            'stroke_m': 0.300,            # –ú–®-1: –•–æ–¥ –ø–æ—Ä—à–Ω—è (–º)
            'dead_gap_m': 0.005,          # –ú–®-1: –ú—ë—Ä—Ç–≤—ã–π –∑–∞–∑–æ—Ä (–º)
            'rod_diameter_m': 0.035,      # –ú–®-2: –î–∏–∞–º–µ—Ç—Ä —à—Ç–æ–∫–∞ (–º)
            'piston_rod_length_m': 0.200, # –ú–®-2: –î–ª–∏–Ω–∞ —à—Ç–æ–∫–∞ –ø–æ—Ä—à–Ω—è (–º)
            'piston_thickness_m': 0.025   # –ú–®-2: –¢–æ–ª—â–∏–Ω–∞ –ø–æ—Ä—à–Ω—è (–º)
        }
        
        self.parameters.update(defaults)
    
    def _connect_signals(self):
        """Connect widget signals"""
        # Frame dimensions - –ú–ì–ù–û–í–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –≤–æ –≤—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è
        self.wheelbase_slider.valueChanged.connect(
            lambda v: self._on_parameter_changed('wheelbase', v))
        self.track_slider.valueChanged.connect(
            lambda v: self._on_parameter_changed('track', v))
        
        # Suspension geometry - –ú–ì–ù–û–í–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –≤–æ –≤—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è
        self.frame_to_pivot_slider.valueChanged.connect(
            lambda v: self._on_parameter_changed('frame_to_pivot', v))
        self.lever_length_slider.valueChanged.connect(
            lambda v: self._on_parameter_changed('lever_length', v))
        self.rod_position_slider.valueChanged.connect(
            lambda v: self._on_parameter_changed('rod_position', v))
        
        # Cylinder dimensions - –ú–ì–ù–û–í–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –≤–æ –≤—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è
        self.cylinder_length_slider.valueChanged.connect(
            lambda v: self._on_parameter_changed('cylinder_length', v))
        # –ú–®-1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–∞–π–¥–µ—Ä–æ–≤ - –ú–ì–ù–û–í–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï
        self.cyl_diam_m_slider.valueChanged.connect(
            lambda v: self._on_parameter_changed('cyl_diam_m', v))
        self.stroke_m_slider.valueChanged.connect(
            lambda v: self._on_parameter_changed('stroke_m', v))
        self.dead_gap_m_slider.valueChanged.connect(
            lambda v: self._on_parameter_changed('dead_gap_m', v))
        # –ú–®-2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–æ–≤ –≤ –º–µ—Ç—Ä–∞—Ö - –ú–ì–ù–û–í–ï–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï
        self.rod_diameter_m_slider.valueChanged.connect(
            lambda v: self._on_parameter_changed('rod_diameter_m', v))
        self.piston_rod_length_m_slider.valueChanged.connect(
            lambda v: self._on_parameter_changed('piston_rod_length_m', v))
        self.piston_thickness_m_slider.valueChanged.connect(
            lambda v: self._on_parameter_changed('piston_thickness_m', v))
        
        # Options
        self.link_rod_diameters.toggled.connect(self._on_link_rod_diameters_toggled)
        
        print("üîß GeometryPanel: –°–∏–≥–Ω–∞–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ú–ì–ù–û–í–ï–ù–ù–û–ì–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (valueChanged)")
    
    @Slot(bool)
    def _on_link_rod_diameters_toggled(self, checked: bool):
        """Handle link rod diameters checkbox toggle
        
        Args:
            checked: True if checkbox is checked
        """
        print(f"üîó GeometryPanel: Link rod diameters {'enabled' if checked else 'disabled'}")
        # Store the setting
        self.parameters['link_rod_diameters'] = checked
        
        # If enabled, synchronize rod diameters
        if checked:
            # Use current rod_diameter as the common value
            common_diameter = self.parameters.get('rod_diameter', 35.0)
            print(f"   Synchronizing all rod diameters to {common_diameter}mm")
            
        # Emit update
        self.geometry_updated.emit(self.parameters.copy())
    
    def _set_parameter_value(self, param_name: str, value: float):
        """Set value for a specific parameter widget
        
        Args:
            param_name: Name of parameter
            value: New value to set
        """
        widget_map = {
            'wheelbase': self.wheelbase_slider,
            'track': self.track_slider,
            'frame_to_pivot': self.frame_to_pivot_slider,
            'lever_length': self.lever_length_slider,
            'rod_position': self.rod_position_slider,
            'cylinder_length': self.cylinder_length_slider,
            'cyl_diam_m': self.cyl_diam_m_slider,                # –ú–®-1
            'stroke_m': self.stroke_m_slider,                    # –ú–®-1
            'dead_gap_m': self.dead_gap_m_slider,                # –ú–®-1
            'rod_diameter_m': self.rod_diameter_m_slider,        # –ú–®-2
            'piston_rod_length_m': self.piston_rod_length_m_slider,  # –ú–®-2
            'piston_thickness_m': self.piston_thickness_m_slider     # –ú–®-2
        }
        
        widget = widget_map.get(param_name)
        if widget:
            widget.setValue(value)
    
    @Slot(str, float)
    def _on_parameter_changed(self, param_name: str, value: float):
        """Handle parameter change with dependency resolution
        
        Args:
            param_name: Name of changed parameter
            value: New value
        """
        print(f"üîß GeometryPanel._on_parameter_changed: {param_name} = {value}")
        
        if self._resolving_conflict:
            print(f"   ‚è∏Ô∏è –ü—Ä–æ–ø—É—Å–∫ - –∏–¥–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞")
            return
        
        # Store new value
        old_value = self.parameters.get(param_name, 0.0)
        self.parameters[param_name] = value
        print(f"   üíæ –ü–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {param_name} {old_value} ‚Üí {value}")
        
        # –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        critical_conflicts = self._check_critical_dependencies(param_name, value, old_value)
        
        if critical_conflicts:
            print(f"   ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç: {critical_conflicts.get('type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
            self._resolve_conflict(critical_conflicts)
        else:
            print(f"   ‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã...")
            # –ú–ì–ù–û–í–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
            self.parameter_changed.emit(param_name, value)
            print(f"   üì° parameter_changed –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
            self.geometry_updated.emit(self.parameters.copy())
            print(f"   üì° geometry_updated –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
            # –ë–´–°–¢–†–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ 3D —Å—Ü–µ–Ω—ã –¥–ª—è –≤–∏–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if param_name in ['wheelbase', 'track', 'lever_length', 'cylinder_length', 'frame_to_pivot', 'rod_position', 
                             'cyl_diam_m', 'stroke_m', 'dead_gap_m', 'rod_diameter_m', 'piston_rod_length_m', 'piston_thickness_m']:
                print(f"   üé¨ –ü–∞—Ä–∞–º–µ—Ç—Ä {param_name} —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è 3D —Å—Ü–µ–Ω—ã")
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
                geometry_3d = self._get_fast_geometry_update(param_name, value)
                self.geometry_changed.emit(geometry_3d)
                print(f"   üì° geometry_changed –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å rodPosition = {geometry_3d.get('rodPosition', '–ù–ï –ù–ê–ô–î–ï–ù')}")
            else:
                print(f"   ‚è≠Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä {param_name} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è 3D —Å—Ü–µ–Ω—ã")
    
    @Slot()
    def _reset_to_defaults(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é / Reset all parameters to defaults"""
        print("üîÑ GeometryPanel: –°–±—Ä–æ—Å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        self._set_default_values()
        
        # Update all widgets
        self.wheelbase_slider.setValue(self.parameters['wheelbase'])
        self.track_slider.setValue(self.parameters['track'])
        self.frame_to_pivot_slider.setValue(self.parameters['frame_to_pivot'])
        self.lever_length_slider.setValue(self.parameters['lever_length'])
        self.rod_position_slider.setValue(self.parameters['rod_position'])
        self.cylinder_length_slider.setValue(self.parameters['cylinder_length'])
        # –ú–®-1: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–∏–ª–∏–Ω–¥—Ä–∞
        self.cyl_diam_m_slider.setValue(self.parameters['cyl_diam_m'])
        self.stroke_m_slider.setValue(self.parameters['stroke_m'])
        self.dead_gap_m_slider.setValue(self.parameters['dead_gap_m'])
        # –ú–®-2: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à—Ç–æ–∫–∞ –∏ –ø–æ—Ä—à–Ω—è –≤ –º–µ—Ç—Ä–∞—Ö
        self.rod_diameter_m_slider.setValue(self.parameters['rod_diameter_m'])
        self.piston_rod_length_m_slider.setValue(self.parameters['piston_rod_length_m'])
        self.piston_thickness_m_slider.setValue(self.parameters['piston_thickness_m'])
        
        # Reset checkboxes
        self.interference_check.setChecked(True)
        self.link_rod_diameters.setChecked(False)
        
        # Reset preset combo to "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥—Ä—É–∑–æ–≤–∏–∫"
        self.preset_combo.setCurrentIndex(0)
        
        # Emit update
        self.geometry_updated.emit(self.parameters.copy())
        print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")
    
    @Slot()
    def _validate_geometry(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ / Validate current geometry settings"""
        errors = []
        warnings = []
        
        # Check geometric constraints
        wheelbase = self.parameters['wheelbase']
        lever_length = self.parameters['lever_length']
        frame_to_pivot = self.parameters['frame_to_pivot']
        
        max_lever_reach = wheelbase / 2.0 - 0.1
        if frame_to_pivot + lever_length > max_lever_reach:
            errors.append(f"–ì–µ–æ–º–µ—Ç—Ä–∏—è —Ä—ã—á–∞–≥–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: {frame_to_pivot + lever_length:.2f} > {max_lever_reach:.2f}–º")
        
        # –ú–®-2: –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (–æ–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –º–µ—Ç—Ä–∞—Ö)
        rod_diameter_m = self.parameters.get('rod_diameter_m', 0.035)  # –º
        cyl_diam_m = self.parameters.get('cyl_diam_m', 0.080)          # –º
        
        if rod_diameter_m >= cyl_diam_m * 0.8:
            errors.append(f"–î–∏–∞–º–µ—Ç—Ä —à—Ç–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫: {rod_diameter_m*1000:.1f}–º–º >= 80% –æ—Ç {cyl_diam_m*1000:.1f}–º–º —Ü–∏–ª–∏–Ω–¥—Ä–∞")
        elif rod_diameter_m >= cyl_diam_m * 0.7:
            warnings.append(f"–î–∏–∞–º–µ—Ç—Ä —à—Ç–æ–∫–∞ –±–ª–∏–∑–æ–∫ –∫ –ø—Ä–µ–¥–µ–ª—É: {rod_diameter_m*1000:.1f}–º–º vs {cyl_diam_m*1000:.1f}–º–º —Ü–∏–ª–∏–Ω–¥—Ä–∞")
        
        # Show results
        if errors:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏', 
                               '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏:\n' + '\n'.join(errors))
        elif warnings:
            QMessageBox.warning(self, '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏',
                              '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n' + '\n'.join(warnings))
        else:
            QMessageBox.information(self, '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–æ–º–µ—Ç—Ä–∏–∏', 
                                  '–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.')
    
    def get_parameters(self) -> dict:
        """Get current parameter values
        
        Returns:
            Dictionary of current parameters
        """
        return self.parameters.copy()
    
    def set_parameters(self, params: dict):
        """Set parameter values from dictionary
        
        Args:
            params: Dictionary of parameter values
        """
        self._resolving_conflict = True
        
        try:
            # Update internal storage
            self.parameters.update(params)
            
            # Update widgets
            for param_name, value in params.items():
                self._set_parameter_value(param_name, value)
        
        finally:
            self._resolving_conflict = False
    
    def _get_fast_geometry_update(self, param_name: str, value: float) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –±—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        
        Args:
            param_name: –ò–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            value: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–µ–π
        """
        # –ü–û–õ–ù–ê–Ø –≥–µ–æ–º–µ—Ç—Ä–∏—è —Å –í–°–ï–ú–ò –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è 3D —Å—Ü–µ–Ω—ã
        geometry_3d = {
            # –û–°–ù–û–í–ù–´–ï –†–ê–ó–ú–ï–†–´ –†–ê–ú–´ (–∏–∑ –º–µ—Ç—Ä–æ–≤ –≤ –º–º)
            'frameLength': self.parameters.get('wheelbase', 3.2) * 1000,  # –º -> –º–º
            'frameHeight': 650.0,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–∫–∞ (TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä)
            'frameBeamSize': 120.0,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–∫–∞ (TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä)
            'leverLength': self.parameters.get('lever_length', 0.8) * 1000,  # –º -> –º–º
            'cylinderBodyLength': self.parameters.get('cylinder_length', 0.5) * 1000,  # –º -> –º–º
            'tailRodLength': 100.0,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–∫–∞ (TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä)
            
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ì–ï–û–ú–ï–¢–†–ò–ò (–∏–∑ –º–µ—Ç—Ä–æ–≤ –≤ –º–º)
            'trackWidth': self.parameters.get('track', 1.6) * 1000,  # –º -> –º–º
            'frameToPivot': self.parameters.get('frame_to_pivot', 0.6) * 1000,  # –º -> –º–º
            'rodPosition': self.parameters.get('rod_position', 0.6),  # –¥–æ–ª—è 0-1 (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            
            # –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –°—Ç–∞—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–∏–ª–∏–Ω–¥—Ä–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–µ, –Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º)
            'boreHead': self.parameters.get('cyl_diam_m', 0.080) * 1000,  # NEW: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            'boreRod': self.parameters.get('cyl_diam_m', 0.080) * 1000,   # NEW: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            'rodDiameter': self.parameters.get('rod_diameter_m', 0.035) * 1000,  # NEW: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            'pistonThickness': self.parameters.get('piston_thickness_m', 0.025) * 1000,  # NEW: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            'pistonRodLength': self.parameters.get('piston_rod_length_m', 0.200) * 1000,  # NEW: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            
            # ‚ú® –ù–û–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ (–ú–®-1 –∏ –ú–®-2): –í—Å–µ –≤ –º–º –¥–ª—è QML
            'cylDiamM': self.parameters.get('cyl_diam_m', 0.080) * 1000,        # –º -> –º–º: –¥–∏–∞–º–µ—Ç—Ä —Ü–∏–ª–∏–Ω–¥—Ä–∞
            'strokeM': self.parameters.get('stroke_m', 0.300) * 1000,            # –º -> –º–º: —Ö–æ–¥ –ø–æ—Ä—à–Ω—è
            'deadGapM': self.parameters.get('dead_gap_m', 0.005) * 1000,         # –º -> –º–º: –º–µ—Ä—Ç–≤—ã–π –∑–∞–∑–æ—Ä
            'rodDiameterM': self.parameters.get('rod_diameter_m', 0.035) * 1000, # –º -> –º–º: –¥–∏–∞–º–µ—Ç—Ä —à—Ç–æ–∫–∞
            'pistonRodLengthM': self.parameters.get('piston_rod_length_m', 0.200) * 1000,  # –º -> –º–º: –¥–ª–∏–Ω–∞ —à—Ç–æ–∫–∞
            'pistonThicknessM': self.parameters.get('piston_thickness_m', 0.025) * 1000,   # –º -> –º–º: —Ç–æ–ª—â–∏–Ω–∞ –ø–æ—Ä—à–Ω—è
        }
        
        print(f"üîÑ GeometryPanel: –û—Ç–ø—Ä–∞–≤–∫–∞ –ü–û–õ–ù–û–ô –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –≤ QML (–∏–∑–º–µ–Ω—ë–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: {param_name} = {value})")
        print(f"   üìê –û—Å–Ω–æ–≤–Ω—ã–µ: frameLength={geometry_3d['frameLength']:.1f}–º–º, leverLength={geometry_3d['leverLength']:.1f}–º–º")
        print(f"   üìê –¶–∏–ª–∏–Ω–¥—Ä: cylDiam={geometry_3d['cylDiamM']:.1f}–º–º, stroke={geometry_3d['strokeM']:.1f}–º–º")
        print(f"   üìê –®—Ç–æ–∫: diameter={geometry_3d['rodDiameterM']:.1f}–º–º, length={geometry_3d['pistonRodLengthM']:.1f}–º–º")
        print(f"   üéØ rodPosition = {geometry_3d['rodPosition']} (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ø–∞—Ä–∞–º–µ—Ç—Ä)")
        
        return geometry_3d

    def _check_critical_dependencies(self, param_name: str, new_value: float, old_value: float) -> dict:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        
        Args:
            param_name: –ò–º—è –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            new_value: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            old_value: –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ –∏–ª–∏ None
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
        
        # –ú–®-2: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç - –¥–∏–∞–º–µ—Ç—Ä —à—Ç–æ–∫–∞ vs —Ü–∏–ª–∏–Ω–¥—Ä–∞
        if param_name in ['rod_diameter_m', 'cyl_diam_m']:
            rod_diameter_m = self.parameters.get('rod_diameter_m', 0.035)  # –º
            cyl_diam_m = self.parameters.get('cyl_diam_m', 0.080)          # –º
            
            if rod_diameter_m >= cyl_diam_m * 0.8:  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–µ–¥–µ–ª
                return {
                    'type': 'hydraulic_constraint',
                    'message': f'–î–∏–∞–º–µ—Ç—Ä —à—Ç–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–∏–ª–∏–Ω–¥—Ä–∞.\n'
                              f'–®—Ç–æ–∫: {rod_diameter_m*1000:.1f}–º–º\n'
                              f'–¶–∏–ª–∏–Ω–¥—Ä: {cyl_diam_m*1000:.1f}–º–º',
                    'options': [
                        ('–£–º–µ–Ω—å—à–∏—Ç—å –¥–∏–∞–º–µ—Ç—Ä —à—Ç–æ–∫–∞', 'rod_diameter_m', cyl_diam_m * 0.7),
                        ('–£–≤–µ–ª–∏—á–∏—Ç—å –¥–∏–∞–º–µ—Ç—Ä —Ü–∏–ª–∏–Ω–¥—Ä–∞', 'cyl_diam_m', rod_diameter_m / 0.7),
                    ],
                    'changed_param': param_name
                }
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        return None

    def _resolve_conflict(self, conflict_info: dict):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ / Show conflict resolution dialog
        
        Args:
            conflict_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ / Conflict information dictionary
        """
        self._resolving_conflict = True
        
        try:
            # Create message box with options
            msg_box = QMessageBox(self)
            msg_box.setWindowTitle('–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤')
            msg_box.setText(conflict_info['message'])
            msg_box.setInformativeText('–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç?')
            
            # Add buttons for each resolution option
            buttons = []
            for option_text, param_name, suggested_value in conflict_info['options']:
                button = msg_box.addButton(option_text, QMessageBox.ButtonRole.ActionRole)
                buttons.append((button, param_name, suggested_value))
            
            # Add cancel button
            cancel_button = msg_box.addButton('–û—Ç–º–µ–Ω–∞', QMessageBox.ButtonRole.RejectRole)
            
            # Show dialog
            msg_box.exec()
            clicked_button = msg_box.clickedButton()
            
            if clicked_button == cancel_button:
                # Revert to old value
                changed_param = conflict_info['changed_param']
                old_value = self._get_widget_for_parameter(changed_param)
                self._set_parameter_value(changed_param, old_value)
            else:
                # Apply selected resolution
                for button, param_name, suggested_value in buttons:
                    if clicked_button == button:
                        self._set_parameter_value(param_name, suggested_value)
                        self.parameters[param_name] = suggested_value
                        break
                
                # Emit update signals
                self.geometry_updated.emit(self.parameters.copy())
        
        finally:
            self._resolving_conflict = False
