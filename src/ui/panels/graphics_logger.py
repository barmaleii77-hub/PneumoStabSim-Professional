# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ –ø–∞–Ω–µ–ª–∏ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ QML
"""

import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, Optional
from dataclasses import dataclass, asdict
from collections import deque


@dataclass
class GraphicsChangeEvent:
    """–°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
    timestamp: str
    parameter_name: str
    old_value: Any
    new_value: Any
    category: str  # lighting, material, environment, quality, camera, effects
    panel_state: Dict[str, Any]
    qml_state: Optional[Dict[str, Any]] = None
    applied_to_qml: bool = False
    error: Optional[str] = None


class GraphicsLogger:
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    
    def __init__(self, log_dir: Path = Path("logs/graphics")):
        """
        Args:
            log_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
        """
        self.log_dir = log_dir
        self.log_dir.mkdir(parents=True, exist_ok=True)
        
        # –ë—É—Ñ–µ—Ä —Å–æ–±—ã—Ç–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        self.events_buffer: deque[GraphicsChangeEvent] = deque(maxlen=1000)
        
        # –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è
        self.session_id = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.session_log_file = self.log_dir / f"session_{self.session_id}.jsonl"
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats = {
            'total_changes': 0,
            'successful_qml_updates': 0,
            'failed_qml_updates': 0,
            'by_category': {}
        }
        
        self.logger = logging.getLogger(__name__)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ—Å—Å–∏–∏
        self._write_session_header()
    
    def _write_session_header(self):
        """–ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ—Å—Å–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        header = {
            'event_type': 'session_start',
            'session_id': self.session_id,
            'timestamp': datetime.now().isoformat(),
            'version': '1.0.0'
        }
        
        with open(self.session_log_file, 'a', encoding='utf-8') as f:
            f.write(json.dumps(header, ensure_ascii=False) + '\n')
    
    def log_change(
        self,
        parameter_name: str,
        old_value: Any,
        new_value: Any,
        category: str,
        panel_state: Dict[str, Any],
        qml_state: Optional[Dict[str, Any]] = None,
        applied_to_qml: bool = False,
        error: Optional[str] = None
    ) -> GraphicsChangeEvent:
        """
        –ó–∞–ø–∏—Å–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–∞ –ø–∞–Ω–µ–ª–∏
        
        Args:
            parameter_name: –ò–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            old_value: –°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            new_value: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è (lighting, material –∏ —Ç.–¥.)
            panel_state: –ü–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –≥—Ä–∞—Ñ–∏–∫–∏
            
        Returns:
            –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        """
        event = GraphicsChangeEvent(
            timestamp=datetime.now().isoformat(),
            parameter_name=parameter_name,
            old_value=old_value,
            new_value=new_value,
            category=category,
            panel_state=panel_state.copy()
        )
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ QML –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
        if qml_state is not None:
            event.qml_state = qml_state
        event.applied_to_qml = applied_to_qml
        event.error = error
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
        self.events_buffer.append(event)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats['total_changes'] += 1
        if applied_to_qml:
            self.stats['successful_qml_updates'] += 1
        if error:
            self.stats['failed_qml_updates'] += 1
        if category not in self.stats['by_category']:
            self.stats['by_category'][category] = 0
        self.stats['by_category'][category] += 1
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        # –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å QML –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äî –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ update
        self._write_event_to_file(event, update=bool(qml_state or applied_to_qml or error))
        
        # –†–∞–Ω—å—à–µ –∑–¥–µ—Å—å –±—ã–ª —à—É–º–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å: "üìä GRAPHICS CHANGE: ..."
        # –£–¥–∞–ª–µ–Ω–æ –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∏—à—É—Ç—Å—è –≤ —Ñ–∞–π–ª –ª–æ–≥–∞.
        # self.logger.debug(f"GRAPHICS CHANGE: {category}.{parameter_name}: {old_value} ‚Üí {new_value}")
        
        return event
    
    def log_qml_update(
        self,
        event: GraphicsChangeEvent,
        qml_state: Optional[Dict[str, Any]] = None,
        success: bool = True,
        error: Optional[str] = None
    ):
        """
        –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ QML
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            qml_state: –°–æ—Å—Ç–æ—è–Ω–∏–µ QML –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            success: –£—Å–ø–µ—à–Ω–æ –ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ
            error: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        event.qml_state = qml_state
        event.applied_to_qml = success
        event.error = error
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if success:
            self.stats['successful_qml_updates'] += 1
        else:
            self.stats['failed_qml_updates'] += 1
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        self._write_event_to_file(event, update=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        if success:
            print(f"   ‚úÖ QML updated: {event.parameter_name}")
        else:
            print(f"   ‚ùå QML update failed: {event.parameter_name} - {error}")
    
    def _write_event_to_file(self, event: GraphicsChangeEvent, update: bool = False):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–∞–π–ª –ª–æ–≥–∞"""
        event_dict = asdict(event)
        event_dict['event_type'] = 'parameter_update' if update else 'parameter_change'
        
        with open(self.session_log_file, 'a', encoding='utf-8') as f:
            f.write(json.dumps(event_dict, ensure_ascii=False, default=str) + '\n')
    
    def get_changes_by_category(self, category: str) -> list[GraphicsChangeEvent]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return [e for e in self.events_buffer if e.category == category]
    
    def get_recent_changes(self, count: int = 10) -> list[GraphicsChangeEvent]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        return list(self.events_buffer)[-count:]
    
    def analyze_qml_sync(self) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é Python-QML
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        """
        total = len(self.events_buffer)
        if total == 0:
            return {
                'status': 'no_data',
                'message': '–ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π'
            }
        
        # –°—á–∏—Ç–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å QML –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        with_qml = sum(1 for e in self.events_buffer if e.qml_state is not None)
        successful = sum(1 for e in self.events_buffer if e.applied_to_qml)
        failed = sum(1 for e in self.events_buffer if e.error is not None)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        errors_by_param = {}
        for event in self.events_buffer:
            if event.error:
                if event.parameter_name not in errors_by_param:
                    errors_by_param[event.parameter_name] = []
                errors_by_param[event.parameter_name].append(event.error)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        by_category = {}
        for event in self.events_buffer:
            cat = event.category
            if cat not in by_category:
                by_category[cat] = {
                    'total': 0,
                    'with_qml': 0,
                    'successful': 0,
                    'failed': 0
                }
            
            by_category[cat]['total'] += 1
            if event.qml_state is not None:
                by_category[cat]['with_qml'] += 1
            if event.applied_to_qml:
                by_category[cat]['successful'] += 1
            if event.error:
                by_category[cat]['failed'] += 1
        
        return {
            'status': 'ok',
            'total_events': total,
            'with_qml_update': with_qml,
            'successful_updates': successful,
            'failed_updates': failed,
            'sync_rate': (successful / total * 100) if total > 0 else 0,
            'by_category': by_category,
            'errors_by_parameter': errors_by_param,
            'stats': self.stats
        }
    
    def export_analysis_report(self, output_file: Optional[Path] = None) -> Path:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ JSON
        
        Args:
            output_file: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (None - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π)
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        if output_file is None:
            output_file = self.log_dir / f"analysis_{self.session_id}.json"
        
        analysis = self.analyze_qml_sync()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
        analysis['recent_changes'] = [
            {
                'timestamp': e.timestamp,
                'parameter': e.parameter_name,
                'category': e.category,
                'old': e.old_value,
                'new': e.new_value,
                'qml_applied': e.applied_to_qml,
                'error': e.error
            }
            for e in self.get_recent_changes(20)
        ]
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(analysis, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ –û—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        return output_file
    
    def compare_states(
        self,
        panel_state: Dict[str, Any],
        qml_state: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        –°—Ä–∞–≤–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –∏ QML
        
        Args:
            panel_state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –≥—Ä–∞—Ñ–∏–∫–∏
            qml_state: –°–æ—Å—Ç–æ—è–Ω–∏–µ QML —Å—Ü–µ–Ω—ã
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞–∑–ª–∏—á–∏—è–º–∏
        """
        differences = {
            'matching': [],
            'mismatched': [],
            'only_in_panel': [],
            'only_in_qml': []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–∞–Ω–µ–ª–∏
        for key, panel_value in panel_state.items():
            if key in qml_state:
                qml_value = qml_state[key]
                if panel_value == qml_value:
                    differences['matching'].append(key)
                else:
                    differences['mismatched'].append({
                        'parameter': key,
                        'panel_value': panel_value,
                        'qml_value': qml_value
                    })
            else:
                differences['only_in_panel'].append(key)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –≤ QML
        for key in qml_state:
            if key not in panel_state:
                differences['only_in_qml'].append(key)
        
        return differences
    
    def close_session(self):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        footer = {
            'event_type': 'session_end',
            'session_id': self.session_id,
            'timestamp': datetime.now().isoformat(),
            'stats': self.stats,
            'analysis': self.analyze_qml_sync()
        }
        
        with open(self.session_log_file, 'a', encoding='utf-8') as f:
            f.write(json.dumps(footer, ensure_ascii=False, indent=2) + '\n')
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.export_analysis_report()
        
        print(f"üìä –°–µ—Å—Å–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {self.session_log_file}")
        print(f"   –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {self.stats['total_changes']}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö QML –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {self.stats['successful_qml_updates']}")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö QML –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {self.stats['failed_qml_updates']}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
_graphics_logger: Optional[GraphicsLogger] = None


def get_graphics_logger() -> GraphicsLogger:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∏"""
    global _graphics_logger
    if _graphics_logger is None:
        _graphics_logger = GraphicsLogger()
    return _graphics_logger


def close_graphics_logger():
    """–ó–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global _graphics_logger
    if _graphics_logger is not None:
        _graphics_logger.close_session()
        _graphics_logger = None
