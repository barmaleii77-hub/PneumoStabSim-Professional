"""Graphics panel providing exhaustive Qt Quick 3D controls."""
from __future__ import annotations

import copy
import json
import logging
from typing import Any, Dict

from PySide6.QtCore import QSettings, Qt, QTimer, Signal, Slot
from PySide6.QtGui import QColor, QStandardItem
from PySide6 import QtWidgets  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –º–æ–¥—É–ª—å QtWidgets –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ QSlider
from PySide6.QtWidgets import (
    QCheckBox,
    QColorDialog,
    QComboBox,
    QDoubleSpinBox,
    QFileDialog,
    QGridLayout,
    QGroupBox,
    QHBoxLayout,
    QLabel,
    QPushButton,
    QScrollArea,
    QSlider,
    QTabWidget,
    QVBoxLayout,
    QWidget,
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
from .graphics_logger import get_graphics_logger

# ‚úÖ –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç EventLogger –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è UI —Å–æ–±—ã—Ç–∏–π
from src.common.event_logger import get_event_logger, EventType


class ColorButton(QPushButton):
    """Small color preview button that streams changes from QColorDialog."""

    color_changed = Signal(str)

    def __init__(self, initial_color: str = "#ffffff", parent: QWidget | None = None) -> None:
        super().__init__(parent)
        self.setFixedSize(42, 28)
        self._color = QColor(initial_color)
        self._dialog = None
        self._user_triggered = False  # ‚úÖ –ù–û–í–û–ï: —Ñ–ª–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        self._update_swatch()
        self.clicked.connect(self._open_dialog)

    def color(self) -> QColor:
        return self._color

    def set_color(self, color_str: str) -> None:
        """–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ (–±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        self._color = QColor(color_str)
        self._update_swatch()

    def _update_swatch(self) -> None:
        self.setStyleSheet(
            "QPushButton {"
            f"background-color: {self._color.name()};"
            "border: 2px solid #5c5c5c;"
            "border-radius: 4px;"
            "}"
            "QPushButton:hover { border: 2px solid #9a9a9a; }"
        )

    @Slot()
    def _open_dialog(self) -> None:
        # ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–∫–Ω—É–ª –Ω–∞ –∫–Ω–æ–ø–∫—É - —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        self._user_triggered = True
        
        if self._dialog:
            return

        dialog = QColorDialog(self._color, self)
        dialog.setOption(QColorDialog.DontUseNativeDialog, True)
        dialog.setOption(QColorDialog.ShowAlphaChannel, False)
        dialog.currentColorChanged.connect(self._on_color_changed)
        dialog.colorSelected.connect(self._on_color_changed)
        dialog.finished.connect(self._close_dialog)
        dialog.open()
        self._dialog = dialog

    @Slot(QColor)
    def _on_color_changed(self, color: QColor) -> None:
        if not color.isValid():
            return
        self._color = color
        self._update_swatch()
        
        # ‚úÖ –ò—Å–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        if self._user_triggered:
            self.color_changed.emit(color.name())

    @Slot()
    def _close_dialog(self) -> None:
        if self._dialog:
            self._dialog.deleteLater()
        self._dialog = None
        self._user_triggered = False  # ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥


class LabeledSlider(QWidget):
    """Slider + spin box pair with labelled feedback."""

    valueChanged = Signal(float)

    def __init__(
        self,
        title: str,
        minimum: float,
        maximum: float,
        step: float,
        *,
        decimals: int = 2,
        unit: str | None = None,
        parent: QWidget | None = None,
    ) -> None:
        super().__init__(parent)
        self._title = title
        self._min = minimum
        self._max = maximum
        self._step = step
        self._decimals = decimals
        self._unit = unit or ""
        self._updating = False
        self._user_triggered = False  # ‚úÖ –ù–û–í–û–ï: —Ñ–ª–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è

        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(4)

        self._label = QLabel(self)
        layout.addWidget(self._label)

        row = QHBoxLayout()
        row.setContentsMargins(0, 0, 0, 0)
        row.setSpacing(6)
        layout.addLayout(row)

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º QtWidgets.QSlider, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å NameError
        self._slider = QtWidgets.QSlider(Qt.Horizontal, self)
        steps = max(1, int(round((self._max - self._min) / self._step)))
        self._slider.setRange(0, steps)
        
        # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ù–ê–ß–ê–õ–û –∏ –ö–û–ù–ï–¶ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        self._slider.sliderPressed.connect(self._on_slider_pressed)
        self._slider.sliderReleased.connect(self._on_slider_released)
        self._slider.valueChanged.connect(self._handle_slider)
        row.addWidget(self._slider, 1)

        self._spin = QDoubleSpinBox(self)
        self._spin.setDecimals(self._decimals)
        self._spin.setRange(self._min, self._max)
        self._spin.setSingleStep(self._step)
        
        # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å SpinBox (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –≤—Ä—É—á–Ω—É—é)
        self._spin.installEventFilter(self)
        self._spin.valueChanged.connect(self._handle_spin)
        row.addWidget(self._spin)

        self.set_value(self._min)

    def eventFilter(self, obj, event) -> bool:
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å SpinBox –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        if obj == self._spin:
            if event.type() == event.Type.FocusIn:
                self._user_triggered = True
            elif event.type() == event.Type.FocusOut:
                self._user_triggered = False
        return super().eventFilter(obj, event)

    @Slot()
    def _on_slider_pressed(self) -> None:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å —Å–ª–∞–π–¥–µ—Ä"""
        self._user_triggered = True

    @Slot()
    def _on_slider_released(self) -> None:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—É—Å—Ç–∏–ª —Å–ª–∞–π–¥–µ—Ä"""
        self._user_triggered = False

    def set_enabled(self, enabled: bool) -> None:
        self.setEnabled(enabled)

    def value(self) -> float:
        return round(self._spin.value(), self._decimals)

    def set_value(self, value: float) -> None:
        """–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        value = max(self._min, min(self._max, value))
        slider_value = int(round((value - self._min) / self._step))
        self._updating = True
        self._slider.setValue(slider_value)
        self._spin.setValue(value)
        self._update_label(value)
        self._updating = False

    def _update_label(self, value: float) -> None:
        formatted = f"{value:.{self._decimals}f}"
        if self._unit:
            formatted = f"{formatted} {self._unit}"
        self._label.setText(f"{self._title}: {formatted}")

    @Slot(int)
    def _handle_slider(self, slider_value: int) -> None:
        if self._updating:
            return
        value = self._min + slider_value * self._step
        value = max(self._min, min(self._max, value))
        self._updating = True
        self._spin.setValue(value)
        self._update_label(value)
        self._updating = False
        
        # ‚úÖ –ò—Å–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–≤–∏–≥–∞–µ—Ç —Å–ª–∞–π–¥–µ—Ä
        if self._user_triggered:
            self.valueChanged.emit(round(value, self._decimals))

    @Slot(float)
    def _handle_spin(self, value: float) -> None:
        if self._updating:
            return
        slider_value = int(round((value - self._min) / self._step))
        self._updating = True
        self._slider.setValue(slider_value)
        self._update_label(value)
        self._updating = False
        
        # ‚úÖ –ò—Å–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç SpinBox
        if self._user_triggered:
            self.valueChanged.emit(round(value, self._decimals))


class GraphicsPanel(QWidget):
    """Comprehensive graphics configuration panel for PneumoStabSim."""

    lighting_changed = Signal(dict)
    environment_changed = Signal(dict)
    material_changed = Signal(dict)
    quality_changed = Signal(dict)
    camera_changed = Signal(dict)
    effects_changed = Signal(dict)
    preset_applied = Signal(str)

    def __init__(self, parent: QWidget | None = None) -> None:
        # ‚úÖ CRITICAL FIX: Always pass parent to super().__init__(), even if None
        # Qt requires parent argument (None is valid) to properly initialize QWidget
        super().__init__(parent)
            
        self.logger = logging.getLogger(__name__)
        self.settings = QSettings("PneumoStabSim", "GraphicsPanel")
        self._updating_ui = False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.graphics_logger = get_graphics_logger()
        self.logger.info("üìä Graphics logger initialized")
        
        # ‚úÖ –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º event logger –¥–ª—è UI —Å–æ–±—ã—Ç–∏–π
        self.event_logger = get_event_logger()
        self.logger.info("üîó Event logger initialized")

        self._defaults = self._build_defaults()
        self.state: Dict[str, Any] = copy.deepcopy(self._defaults)

        self._quality_presets = self._build_quality_presets()
        self._quality_preset_labels = {
            "ultra": "–£–ª—å—Ç—Ä–∞",
            "high": "–í—ã—Å–æ–∫–æ–µ",
            "medium": "–°—Ä–µ–¥–Ω–µ–µ",
            "low": "–ù–∏–∑–∫–æ–µ",
            "custom": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π",
        }
        self._quality_preset_order = ["ultra", "high", "medium", "low", "custom"]
        self._suspend_preset_sync = False

        for material_key in list(self.state["materials"].keys()):
            self._ensure_material_defaults(material_key)

        self._create_ui()
        self.load_settings()
        self._apply_quality_constraints()
        self._apply_state_to_ui()

        QTimer.singleShot(0, self._emit_all)

    # ------------------------------------------------------------------
    # Defaults
    # ------------------------------------------------------------------
    def _build_defaults(self) -> Dict[str, Any]:
        return {
            "lighting": {
                "key": {"brightness": 1.2, "color": "#ffffff", "angle_x": -35.0, "angle_y": -40.0},
                "fill": {"brightness": 0.7, "color": "#dfe7ff"},
                "rim": {"brightness": 1.0, "color": "#ffe2b0"},
                "point": {"brightness": 1000.0, "color": "#ffffff", "height": 2200.0, "range": 3200.0, "cast_shadow": false},
            },
            "environment": {
                "background_mode": "skybox",
                "background_color": "#1f242c",
                "ibl_enabled": True,
                "ibl_intensity": 1.3,
                "ibl_source": "../hdr/studio.hdr",
                "ibl_fallback": "../hdr/studio_small_09_2k.hdr",  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
                "skybox_blur": 0.08,
                "fog_enabled": True,
                "fog_color": "#b0c4d8",
                "fog_density": 0.12,
                "fog_near": 1200.0,
                "fog_far": 12000.0,
                "ao_enabled": True,
                "ao_strength": 1.0,
                "ao_radius": 8.0,
            },
            "quality": {
                "preset": "ultra",
                "shadows": {
                    "enabled": True,
                    "resolution": "4096",
                    "filter": 32,
                    "bias": 8.0,
                    "darkness": 80.0,
                },
                "antialiasing": {"primary": "ssaa", "quality": "high", "post": "taa"},
                "taa_enabled": True,
                "taa_strength": 0.4,
                "taa_motion_adaptive": True,
                "fxaa_enabled": False,
                "specular_aa": True,
                "dithering": True,
                "render_scale": 1.05,
                "render_policy": "always",
                "frame_rate_limit": 144.0,
                "oit": "weighted",
            },
            "camera": {
                "fov": 60.0,
                "near": 10.0,
                "far": 50000.0,
                "speed": 1.0,
                "auto_rotate": False,
                "auto_rotate_speed": 1.0,
            },
            "effects": {
                "bloom_enabled": True,
                "bloom_intensity": 0.5,
                "bloom_threshold": 1.0,
                "bloom_spread": 0.65,
                "ssao_enabled": True,
                "ssao_strength": 1.0,
                "ssao_radius": 8.0,
                "depth_of_field": False,
                "dof_focus_distance": 2200.0,
                "dof_blur": 4.0,
                "motion_blur": False,
                "motion_blur_amount": 0.2,
                "lens_flare": False,   # ‚úÖ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª
                "vignette": False,     # ‚úÖ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª
                "vignette_strength": 0.35,
                "tonemap_enabled": True,
                "tonemap_mode": "filmic",
            },
            "materials": {
                "frame": {
                    "base_color": "#c53030",
                    "metalness": 0.85,
                    "roughness": 0.35,
                    "specular": 1.0,
                    "specular_tint": 0.0,
                    "clearcoat": 0.22,
                    "clearcoat_roughness": 0.1,
                    "transmission": 0.0,
                    "opacity": 1.0,
                    "ior": 1.5,
                    "attenuation_distance": 10000.0,
                    "attenuation_color": "#ffffff",
                    "emissive_color": "#000000",
                    "emissive_intensity": 0.0,
                    "warning_color": "#ff5454",
                    "ok_color": "#00ff55",
                    "error_color": "#ff2a2a",
                },
                "lever": {
                    "base_color": "#9ea4ab",
                    "metalness": 1.0,
                    "roughness": 0.28,
                    "specular": 1.0,
                    "specular_tint": 0.0,
                    "clearcoat": 0.3,
                    "clearcoat_roughness": 0.08,
                    "transmission": 0.0,
                    "opacity": 1.0,
                    "ior": 1.5,
                    "attenuation_distance": 10000.0,
                    "attenuation_color": "#ffffff",
                    "emissive_color": "#000000",
                    "emissive_intensity": 0.0,
                    "warning_color": "#ff5454",
                    "ok_color": "#00ff55",
                    "error_color": "#ff2a2a",
                },
                "tail": {
                    "base_color": "#d5d9df",
                    "metalness": 1.0,
                    "roughness": 0.3,
                    "specular": 1.0,
                    "specular_tint": 0.0,
                    "clearcoat": 0.0,
                    "clearcoat_roughness": 0.0,
                    "transmission": 0.0,
                    "opacity": 1.0,
                    "ior": 1.5,
                    "attenuation_distance": 10000.0,
                    "attenuation_color": "#ffffff",
                    "emissive_color": "#000000",
                    "emissive_intensity": 0.0,
                    "warning_color": "#ffd24d",
                    "ok_color": "#00ff55",
                    "error_color": "#ff2a2a",
                },
                "cylinder": {
                    "base_color": "#e1f5ff",
                    "metalness": 0.0,
                    "roughness": 0.05,
                    "specular": 1.0,
                    "specular_tint": 0.0,
                    "clearcoat": 0.0,
                    "clearcoat_roughness": 0.0,
                    "transmission": 1.0,
                    "opacity": 1.0,
                    "ior": 1.52,
                    "attenuation_distance": 1800.0,
                    "attenuation_color": "#b7e7ff",
                    "emissive_color": "#000000",
                    "emissive_intensity": 0.0,
                    "warning_color": "#ff7070",
                    "ok_color": "#7dffd6",
                    "error_color": "#ff2a2a",
                },
                "piston_body": {
                    "base_color": "#ff3c6e",
                    "metalness": 1.0,
                    "roughness": 0.26,
                    "specular": 1.0,
                    "specular_tint": 0.0,
                    "clearcoat": 0.18,
                    "clearcoat_roughness": 0.06,
                    "transmission": 0.0,
                    "opacity": 1.0,
                    "ior": 1.5,
                    "attenuation_distance": 10000.0,
                    "attenuation_color": "#ffffff",
                    "emissive_color": "#000000",
                    "emissive_intensity": 0.0,
                    "warning_color": "#ff5454",
                    "ok_color": "#00ff55",
                    "error_color": "#ff2a2a",
                },
                "piston_rod": {
                    "base_color": "#ececec",
                    "metalness": 1.0,
                    "roughness": 0.18,
                    "specular": 1.0,
                    "specular_tint": 0.0,
                    "clearcoat": 0.12,
                    "clearcoat_roughness": 0.05,
                    "transmission": 0.0,
                    "opacity": 1.0,
                    "ior": 1.5,
                    "attenuation_distance": 10000.0,
                    "attenuation_color": "#ffffff",
                    "emissive_color": "#000000",
                    "emissive_intensity": 0.0,
                    "warning_color": "#ff5454",
                    "ok_color": "#00ff55",
                    "error_color": "#ff2a2a",
                },
                "joint_tail": {
                    "base_color": "#2a82ff",
                    "metalness": 0.9,
                    "roughness": 0.35,
                    "specular": 1.0,
                    "specular_tint": 0.0,
                    "clearcoat": 0.1,
                    "clearcoat_roughness": 0.08,
                    "transmission": 0.0,
                    "opacity": 1.0,
                    "ior": 1.5,
                    "attenuation_distance": 10000.0,
                    "attenuation_color": "#ffffff",
                    "emissive_color": "#000000",
                    "emissive_intensity": 0.0,
                    "warning_color": "#ffd24d",
                    "ok_color": "#00ff55",
                    "error_color": "#ff0000",
                },
                "joint_arm": {
                    "base_color": "#ff9c3a",
                    "metalness": 0.9,
                    "roughness": 0.32,
                    "specular": 1.0,
                    "specular_tint": 0.0,
                    "clearcoat": 0.12,
                    "clearcoat_roughness": 0.08,
                    "transmission": 0.0,
                    "opacity": 1.0,
                    "ior": 1.5,
                    "attenuation_distance": 10000.0,
                    "attenuation_color": "#ffffff",
                    "emissive_color": "#000000",
                    "emissive_intensity": 0.0,
                    "warning_color": "#ffd24d",
                    "ok_color": "#00ff55",
                    "error_color": "#ff2a2a",
                },
            },
        }

    def _build_quality_presets(self) -> Dict[str, Dict[str, Any]]:
        return {
            "ultra": {
                "shadows": {"enabled": True, "resolution": "4096", "filter": 32, "bias": 8.0, "darkness": 80.0},
                "antialiasing": {"primary": "ssaa", "quality": "high", "post": "taa"},
                "taa_enabled": True,
                "taa_strength": 0.4,
                "fxaa_enabled": False,
                "specular_aa": True,
                "dithering": True,
                "render_scale": 1.05,
                "render_policy": "always",
                "frame_rate_limit": 144.0,
                "oit": "weighted",
            },
            "high": {
                "shadows": {"enabled": True, "resolution": "2048", "filter": 16, "bias": 9.5, "darkness": 78.0},
                "antialiasing": {"primary": "msaa", "quality": "high", "post": "off"},
                "taa_enabled": False,
                "taa_strength": 0.3,
                "taa_motion_adaptive": True,
                "fxaa_enabled": False,
                "specular_aa": True,
                "dithering": True,
                "render_scale": 1.0,
                "render_policy": "always",
                "frame_rate_limit": 120.0,
                "oit": "weighted",
            },
            "medium": {
                "shadows": {"enabled": True, "resolution": "1024", "filter": 8, "bias": 10.0, "darkness": 75.0},
                "antialiasing": {"primary": "msaa", "quality": "medium", "post": "fxaa"},
                "taa_enabled": False,
                "taa_strength": 0.25,
                "taa_motion_adaptive": True,
                "fxaa_enabled": True,
                "specular_aa": True,
                "dithering": True,
                "render_scale": 0.9,
                "render_policy": "always",
                "frame_rate_limit": 90.0,
                "oit": "weighted",
            },
            "low": {
                "shadows": {"enabled": True, "resolution": "512", "filter": 4, "bias": 12.0, "darkness": 70.0},
                "antialiasing": {"primary": "off", "quality": "low", "post": "fxaa"},
                "taa_enabled": False,
                "taa_strength": 0.2,
                "taa_motion_adaptive": True,
                "fxaa_enabled": True,
                "specular_aa": False,
                "dithering": True,
                "render_scale": 0.8,
                "render_policy": "ondemand",
                "frame_rate_limit": 60.0,
                "oit": "none",
            },
        }
    # ------------------------------------------------------------------
    # UI creation
    # ------------------------------------------------------------------
    def _create_ui(self) -> None:
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(8, 8, 8, 8)
        main_layout.setSpacing(8)

        scroll = QScrollArea(self)
        scroll.setWidgetResizable(True)
        main_layout.addWidget(scroll, 1)

        container = QWidget()
        scroll.setWidget(container)
        container_layout = QVBoxLayout(container)
        container_layout.setContentsMargins(0, 0, 0, 0)
        container_layout.setSpacing(8)

        self._tabs = QTabWidget(container)
        container_layout.addWidget(self._tabs)

        self._lighting_controls: Dict[str, Any] = {}
        self._environment_controls: Dict[str, Any] = {}
        self._quality_controls: Dict[str, Any] = {}
        self._camera_controls: Dict[str, Any] = {}
        self._effects_controls: Dict[str, Any] = {}
        self._material_controls: Dict[str, Any] = {}
        self._material_rows: Dict[str, QWidget] = {}

        self._tabs.addTab(self._build_lighting_tab(), "–û—Å–≤–µ—â–µ–Ω–∏–µ")
        self._tabs.addTab(self._build_environment_tab(), "–û–∫—Ä—É–∂–µ–Ω–∏–µ")
        self._tabs.addTab(self._build_quality_tab(), "–ö–∞—á–µ—Å—Ç–≤–æ")
        self._tabs.addTab(self._build_camera_tab(), "–ö–∞–º–µ—Ä–∞")
        self._tabs.addTab(self._build_materials_tab(), "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
        self._tabs.addTab(self._build_effects_tab(), "–≠—Ñ—Ñ–µ–∫—Ç—ã")

        button_row = QHBoxLayout()
        button_row.setContentsMargins(0, 0, 0, 0)
        button_row.setSpacing(8)
        button_row.addStretch(1)

        save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", self)
        save_btn.clicked.connect(self.save_settings)
        button_row.addWidget(save_btn)

        reset_btn = QPushButton("‚Ü©Ô∏é –°–±—Ä–æ—Å", self)
        reset_btn.clicked.connect(self.reset_to_defaults)
        button_row.addWidget(reset_btn)

        main_layout.addLayout(button_row)

    # --- Lighting -----------------------------------------------------
    def _build_lighting_tab(self) -> QWidget:
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(12)

        layout.addWidget(self._build_key_light_group())
        layout.addWidget(self._build_fill_light_group())
        layout.addWidget(self._build_rim_light_group())
        layout.addWidget(self._build_point_light_group())
        layout.addWidget(self._build_lighting_preset_group())
        layout.addStretch(1)
        return tab

    def _build_key_light_group(self) -> QGroupBox:
        group = QGroupBox("–ö–ª—é—á–µ–≤–æ–π —Å–≤–µ—Ç", self)
        grid = QGridLayout(group)
        grid.setContentsMargins(8, 8, 8, 8)
        grid.setHorizontalSpacing(12)
        grid.setVerticalSpacing(8)

        brightness = LabeledSlider("–Ø—Ä–∫–æ—Å—Ç—å", 0.0, 10.0, 0.05, decimals=2)
        brightness.valueChanged.connect(lambda v: self._update_lighting("key", "brightness", v))
        self._lighting_controls["key.brightness"] = brightness
        grid.addWidget(brightness, 0, 0, 1, 2)

        color_row = QHBoxLayout()
        color_row.setContentsMargins(0, 0, 0, 0)
        color_row.setSpacing(6)
        color_row.addWidget(QLabel("–¶–≤–µ—Ç", self))
        color_button = ColorButton()
        color_button.color_changed.connect(lambda c: self._update_lighting("key", "color", c))
        self._lighting_controls["key.color"] = color_button
        color_row.addWidget(color_button)
        color_row.addStretch(1)
        grid.addLayout(color_row, 1, 0, 1, 2)

        angle_x = LabeledSlider("–ù–∞–∫–ª–æ–Ω X", -90.0, 90.0, 1.0, decimals=1, unit="¬∞")
        angle_x.valueChanged.connect(lambda v: self._update_lighting("key", "angle_x", v))
        self._lighting_controls["key.angle_x"] = angle_x
        grid.addWidget(angle_x, 2, 0, 1, 2)

        angle_y = LabeledSlider("–ü–æ–≤–æ—Ä–æ—Ç Y", -180.0, 180.0, 1.0, decimals=1, unit="¬∞")
        angle_y.valueChanged.connect(lambda v: self._update_lighting("key", "angle_y", v))
        self._lighting_controls["key.angle_y"] = angle_y
        grid.addWidget(angle_y, 3, 0, 1, 2)
        return group

    def _build_fill_light_group(self) -> QGroupBox:
        group = QGroupBox("–ó–∞–ø–æ–ª–Ω—è—é—â–∏–π —Å–≤–µ—Ç", self)
        grid = QGridLayout(group)
        grid.setContentsMargins(8, 8, 8, 8)
        grid.setHorizontalSpacing(12)
        grid.setVerticalSpacing(8)

        brightness = LabeledSlider("–Ø—Ä–∫–æ—Å—Ç—å", 0.0, 5.0, 0.05, decimals=2)
        brightness.valueChanged.connect(lambda v: self._update_lighting("fill", "brightness", v))
        self._lighting_controls["fill.brightness"] = brightness
        grid.addWidget(brightness, 0, 0, 1, 2)

        color_row = QHBoxLayout()
        color_row.addWidget(QLabel("–¶–≤–µ—Ç", self))
        color_button = ColorButton()
        color_button.color_changed.connect(lambda c: self._update_lighting("fill", "color", c))
        self._lighting_controls["fill.color"] = color_button
        color_row.addWidget(color_button)
        color_row.addStretch(1)
        grid.addLayout(color_row, 1, 0, 1, 2)
        return group

    def _build_rim_light_group(self) -> QGroupBox:
        group = QGroupBox("–ö–æ–Ω—Ç—Ä–æ–≤–æ–π —Å–≤–µ—Ç", self)
        grid = QGridLayout(group)
        grid.setContentsMargins(8, 8, 8, 8)
        grid.setHorizontalSpacing(12)
        grid.setVerticalSpacing(8)

        brightness = LabeledSlider("–Ø—Ä–∫–æ—Å—Ç—å", 0.0, 5.0, 0.05, decimals=2)
        brightness.valueChanged.connect(lambda v: self._update_lighting("rim", "brightness", v))
        self._lighting_controls["rim.brightness"] = brightness
        grid.addWidget(brightness, 0, 0, 1, 2)

        color_row = QHBoxLayout()
        color_row.addWidget(QLabel("–¶–≤–µ—Ç", self))
        color_button = ColorButton()
        color_button.color_changed.connect(lambda c: self._update_lighting("rim", "color", c))
        self._lighting_controls["rim.color"] = color_button
        color_row.addWidget(color_button)
        color_row.addStretch(1)
        grid.addLayout(color_row, 1, 0, 1, 2)
        return group

    def _build_point_light_group(self) -> QGroupBox:
        group = QGroupBox("–¢–æ—á–µ—á–Ω—ã–π —Å–≤–µ—Ç", self)
        grid = QGridLayout(group)
        grid.setContentsMargins(8, 8, 8, 8)
        grid.setHorizontalSpacing(12)
        grid.setVerticalSpacing(8)

        intensity = LabeledSlider("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å", 0.0, 100000.0, 50.0, decimals=1)
        intensity.valueChanged.connect(lambda v: self._update_lighting("point", "brightness", v))
        self._lighting_controls["point.brightness"] = intensity
        grid.addWidget(intensity, 0, 0, 1, 2)

        color_row = QHBoxLayout()
        color_row.addWidget(QLabel("–¶–≤–µ—Ç", self))
        color_button = ColorButton()
        color_button.color_changed.connect(lambda c: self._update_lighting("point", "color", c))
        self._lighting_controls["point.color"] = color_button
        color_row.addWidget(color_button)
        color_row.addStretch(1)
        grid.addLayout(color_row, 1, 0, 1, 2)

        height_slider = LabeledSlider("–í—ã—Å–æ—Ç–∞", 0.0, 5000.0, 10.0, decimals=1, unit="–º–º")
        height_slider.valueChanged.connect(lambda v: self._update_lighting("point", "height", v))
        self._lighting_controls["point.height"] = height_slider
        grid.addWidget(height_slider, 2, 0, 1, 2)

        range_slider = LabeledSlider("–†–∞–¥–∏—É—Å –¥–µ–π—Å—Ç–≤–∏—è", 200.0, 5000.0, 10.0, decimals=1, unit="–º–º")
        range_slider.valueChanged.connect(lambda v: self._update_lighting("point", "range", v))
        self._lighting_controls["point.range"] = range_slider
        grid.addWidget(range_slider, 3, 0, 1, 2)

        # ‚úÖ –ù–æ–≤—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å: —Ç–µ–Ω–∏ –æ—Ç —Ç–æ—á–µ—á–Ω–æ–≥–æ —Å–≤–µ—Ç–∞
        point_shadows = QCheckBox("–¢–µ–Ω–∏ –æ—Ç —Ç–æ—á–µ—á–Ω–æ–≥–æ —Å–≤–µ—Ç–∞", self)
        point_shadows.clicked.connect(lambda checked: self._update_lighting("point", "cast_shadow", checked))
        self._lighting_controls["point.cast_shadow"] = point_shadows
        grid.addWidget(point_shadows, 4, 0, 1, 2)
        return group

    def _build_lighting_preset_group(self) -> QGroupBox:
        group = QGroupBox("–ü—Ä–µ—Å–µ—Ç—ã –æ—Å–≤–µ—â–µ–Ω–∏—è", self)
        layout = QHBoxLayout(group)
        layout.setContentsMargins(8, 8, 8, 8)
        layout.setSpacing(12)

        presets = {
            "‚òÄÔ∏è –î–Ω–µ–≤–Ω–æ–π —Å–≤–µ—Ç": {
                "key": {"brightness": 1.6, "color": "#ffffff", "angle_x": -45.0, "angle_y": -30.0},
                "fill": {"brightness": 0.9, "color": "#f1f4ff"},
                "rim": {"brightness": 1.1, "color": "#ffe1bd"},
                "point": {"brightness": 1800.0, "color": "#fff7e0", "height": 2600.0, "range": 3600.0},
            },
            "üåô –ù–æ—á–Ω–æ–π": {
                "key": {"brightness": 0.6, "color": "#a8c8ff", "angle_x": -20.0, "angle_y": -60.0},
                "fill": {"brightness": 0.4, "color": "#4d6a8f"},
                "rim": {"brightness": 0.8, "color": "#93c4ff"},
                "point": {"brightness": 950.0, "color": "#b8d6ff", "height": 2100.0, "range": 2800.0},
            },
            "üè≠ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π": {
                "key": {"brightness": 1.1, "color": "#f2f4ff", "angle_x": -25.0, "angle_y": -110.0},
                "fill": {"brightness": 0.8, "color": "#f0f0ff"},
                "rim": {"brightness": 1.2, "color": "#ffecc6"},
                "point": {"brightness": 2200.0, "color": "#ffd7a8", "height": 2400.0, "range": 3400.0},
            },
        }

        for name, preset in presets.items():
            button = QPushButton(name, self)
            button.clicked.connect(lambda _, p=preset, n=name: self._apply_lighting_preset(p, n))
            layout.addWidget(button)

        layout.addStretch(1)
        return group

    # --- Environment --------------------------------------------------
    def _build_environment_tab(self) -> QWidget:
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(12)

        layout.addWidget(self._build_background_group())
        layout.addWidget(self._build_fog_group())
        layout.addWidget(self._build_ao_group())
        layout.addStretch(1)
        return tab

    def _build_background_group(self) -> QGroupBox:
        group = QGroupBox("–§–æ–Ω –∏ HDR", self)
        grid = QGridLayout(group)
        grid.setContentsMargins(8, 8, 8, 8)
        grid.setHorizontalSpacing(12)
        grid.setVerticalSpacing(8)

        mode_combo = QComboBox(self)
        mode_combo.addItem("–°–ø–ª–æ—à–Ω–æ–π —Ü–≤–µ—Ç", "color")
        mode_combo.addItem("Skybox / HDR", "skybox")
        mode_combo.currentIndexChanged.connect(lambda _: self._update_environment("background_mode", mode_combo.currentData()))
        self._environment_controls["background.mode"] = mode_combo
        grid.addWidget(QLabel("–†–µ–∂–∏–º —Ñ–æ–Ω–∞", self), 0, 0)
        grid.addWidget(mode_combo, 0, 1)

        bg_row = QHBoxLayout()
        bg_row.addWidget(QLabel("–¶–≤–µ—Ç", self))
        bg_button = ColorButton()
        bg_button.color_changed.connect(lambda c: self._update_environment("background_color", c))
        self._environment_controls["background.color"] = bg_button
        bg_row.addWidget(bg_button)
        bg_row.addStretch(1)
        grid.addLayout(bg_row, 1, 0, 1, 2)

        # ‚úÖ FIXED + LOGGING: IBL checkbox ‚Üí –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–ª–∏–∫–∞
        ibl_check = QCheckBox("–í–∫–ª—é—á–∏—Ç—å HDR IBL", self)
        ibl_check.clicked.connect(lambda checked: self._on_ibl_enabled_clicked(checked))
        self._environment_controls["ibl.enabled"] = ibl_check
        grid.addWidget(ibl_check, 2, 0, 1, 2)

        intensity = LabeledSlider("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å IBL", 0.0, 5.0, 0.05, decimals=2)
        intensity.valueChanged.connect(lambda v: self._update_environment("ibl_intensity", v))
        self._environment_controls["ibl.intensity"] = intensity
        grid.addWidget(intensity, 3, 0, 1, 2)

        blur = LabeledSlider("–†–∞–∑–º—ã—Ç–∏–µ skybox", 0.0, 1.0, 0.01, decimals=2)
        blur.valueChanged.connect(lambda v: self._update_environment("skybox_blur", v))
        self._environment_controls["skybox.blur"] = blur
        grid.addWidget(blur, 4, 0, 1, 2)

        choose_hdr = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å HDR‚Ä¶", self)
        choose_hdr.clicked.connect(self._choose_hdr_file)
        grid.addWidget(choose_hdr, 5, 0)

        path_label = QLabel("", self)
        path_label.setWordWrap(True)
        self._environment_controls["ibl.path_label"] = path_label
        grid.addWidget(path_label, 5, 1)
        return group

    def _build_fog_group(self) -> QGroupBox:
        group = QGroupBox("–¢—É–º–∞–Ω", self)
        grid = QGridLayout(group)
        grid.setContentsMargins(8, 8, 8, 8)
        grid.setHorizontalSpacing(12)
        grid.setVerticalSpacing(8)

        enabled = QCheckBox("–í–∫–ª—é—á–∏—Ç—å —Ç—É–º–∞–Ω", self)
        # ‚úÖ FIX: –õ–æ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫ + –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        enabled.clicked.connect(lambda checked: self._on_fog_enabled_clicked(checked))
        self._environment_controls["fog.enabled"] = enabled
        grid.addWidget(enabled, 0, 0, 1, 2)

        color_row = QHBoxLayout()
        color_row.addWidget(QLabel("–¶–≤–µ—Ç", self))
        fog_color = ColorButton()
        fog_color.color_changed.connect(lambda c: self._update_environment("fog_color", c))
        self._environment_controls["fog.color"] = fog_color
        color_row.addWidget(fog_color)
        color_row.addStretch(1)
        grid.addLayout(color_row, 1, 0, 1, 2)

        density = LabeledSlider("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å", 0.0, 1.0, 0.01, decimals=2)
        density.valueChanged.connect(lambda v: self._update_environment("fog_density", v))
        self._environment_controls["fog.density"] = density
        grid.addWidget(density, 2, 0, 1, 2)

        near_slider = LabeledSlider("–ù–∞—á–∞–ª–æ", 0.0, 20000.0, 50.0, decimals=0, unit="–º–º")
        near_slider.valueChanged.connect(lambda v: self._update_environment("fog_near", v))
        self._environment_controls["fog.near"] = near_slider
        grid.addWidget(near_slider, 3, 0, 1, 2)

        far_slider = LabeledSlider("–ö–æ–Ω–µ—Ü", 500.0, 60000.0, 100.0, decimals=0, unit="–º–º")
        far_slider.valueChanged.connect(lambda v: self._update_environment("fog_far", v))
        self._environment_controls["fog.far"] = far_slider
        grid.addWidget(far_slider, 4, 0, 1, 2)
        return group

    def _build_ao_group(self) -> QGroupBox:
        group = QGroupBox("Ambient Occlusion", self)
        grid = QGridLayout(group)
        grid.setContentsMargins(8, 8, 8, 8)
        grid.setHorizontalSpacing(12)
        grid.setVerticalSpacing(8)

        enabled = QCheckBox("–í–∫–ª—é—á–∏—Ç—å SSAO", self)
        enabled.clicked.connect(lambda checked: self._update_environment("ao_enabled", checked))
        self._environment_controls["ao.enabled"] = enabled
        grid.addWidget(enabled, 0, 0, 1, 2)

        strength = LabeledSlider("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å", 0.0, 2.0, 0.02, decimals=2)
        strength.valueChanged.connect(lambda v: self._update_environment("ao_strength", v))
        self._environment_controls["ao.strength"] = strength  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: snake_case
        grid.addWidget(strength, 1, 0, 1, 2)

        radius = LabeledSlider("–†–∞–¥–∏—É—Å", 0.5, 20.0, 0.1, decimals=2)
        radius.valueChanged.connect(lambda v: self._update_environment("ao_radius", v))
        self._environment_controls["ao.radius"] = radius
        grid.addWidget(radius, 2, 0, 1, 2)
        return group

    # --- Quality ------------------------------------------------------
    def _build_quality_tab(self) -> QWidget:
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(12)

        layout.addWidget(self._build_quality_preset_group())
        layout.addWidget(self._build_shadow_group())
        layout.addWidget(self._build_antialiasing_group())
        layout.addWidget(self._build_render_group())
        layout.addStretch(1)
        return tab

    def _build_quality_preset_group(self) -> QGroupBox:
        group = QGroupBox("–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞", self)
        layout = QHBoxLayout(group)
        layout.setContentsMargins(8, 8, 8, 8)
        layout.setSpacing(12)

        layout.addWidget(QLabel("–ü—Ä–æ—Ñ–∏–ª—å", self))
        combo = QComboBox(self)
        for key in self._quality_preset_order:
            combo.addItem(self._quality_preset_labels[key], key)
        combo.currentIndexChanged.connect(lambda _: self._on_quality_preset_changed(combo.currentData()))
        self._quality_controls["quality.preset"] = combo
        layout.addWidget(combo, 1)

        hint = QLabel('–ü—Ä–æ—Ñ–∏–ª—å "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π" –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ —Ä—É—á–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.', self)
        hint.setWordWrap(True)
        hint.setStyleSheet("color: #8a8a8a;")
        layout.addWidget(hint, 2)
        layout.addStretch(1)
        return group

    def _build_shadow_group(self) -> QGroupBox:
        group = QGroupBox("–¢–µ–Ω–∏", self)
        grid = QGridLayout(group)
        grid.setContentsMargins(8, 8, 8, 8)
        grid.setHorizontalSpacing(12)
        grid.setVerticalSpacing(8)

        enabled = QCheckBox("–í–∫–ª—é—á–∏—Ç—å —Ç–µ–Ω–∏", self)
        enabled.clicked.connect(lambda checked: self._update_quality("shadows.enabled", checked))
        self._quality_controls["shadows.enabled"] = enabled
        grid.addWidget(enabled, 0, 0, 1, 2)

        resolution = QComboBox(self)
        for label, value in [
            ("256 (–ù–∏–∑–∫–æ–µ)", "256"),
            ("512 (–°—Ä–µ–¥–Ω–µ–µ)", "512"),
            ("1024 (–í—ã—Å–æ–∫–æ–µ)", "1024"),
            ("2048 (–û—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ)", "2048"),
            ("4096 (–£–ª—å—Ç—Ä–∞)", "4096"),
        ]:
            resolution.addItem(label, value)
        resolution.currentIndexChanged.connect(lambda _: self._update_quality("shadows.resolution", resolution.currentData()))
        self._quality_controls["shadows.resolution"] = resolution
        grid.addWidget(QLabel("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ", self), 1, 0)
        grid.addWidget(resolution, 1, 1)

        shadow_filter = QComboBox(self)
        for label, value in [("–ñ—ë—Å—Ç–∫–∏–µ", 1), ("PCF 4", 4), ("PCF 8", 8), ("PCF 16", 16), ("PCF 32", 32)]:
            shadow_filter.addItem(label, value)
        shadow_filter.currentIndexChanged.connect(lambda _: self._update_quality("shadows.filter", shadow_filter.currentData()))
        self._quality_controls["shadows.filter"] = shadow_filter
        grid.addWidget(QLabel("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è", self), 2, 0)
        grid.addWidget(shadow_filter, 2, 1)

        bias = LabeledSlider("Shadow Bias", 0.0, 50.0, 0.1, decimals=2)
        bias.valueChanged.connect(lambda v: self._update_quality("shadows.bias", v))
        self._quality_controls["shadows.bias"] = bias
        grid.addWidget(bias, 3, 0, 1, 2)

        darkness = LabeledSlider("–¢–µ–º–Ω–æ—Ç–∞", 0.0, 100.0, 1.0, decimals=0, unit="%")
        darkness.valueChanged.connect(lambda v: self._update_quality("shadows.darkness", v))
        self._quality_controls["shadows.darkness"] = darkness
        grid.addWidget(darkness, 4, 0, 1, 2)
        return group

    def _build_antialiasing_group(self) -> QGroupBox:
        group = QGroupBox("–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ", self)
        grid = QGridLayout(group)
        grid.setContentsMargins(8, 8, 8, 8)
        grid.setHorizontalSpacing(12)
        grid.setVerticalSpacing(8)

        primary_combo = QComboBox(self)
        for label, value in [("–í—ã–∫–ª.", "off"), ("MSAA", "msaa"), ("SSAA", "ssaa")]:
            primary_combo.addItem(label, value)
        primary_combo.currentIndexChanged.connect(lambda _: self._on_primary_aa_changed(primary_combo.currentData()))
        self._quality_controls["aa.primary"] = primary_combo
        grid.addWidget(QLabel("–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ AA", self), 0, 0)
        grid.addWidget(primary_combo, 0, 1)

        quality_combo = QComboBox(self)
        for label, value in [("–ù–∏–∑–∫–æ–µ", "low"), ("–°—Ä–µ–¥–Ω–µ–µ", "medium"), ("–í—ã—Å–æ–∫–æ–µ", "high")]:
            quality_combo.addItem(label, value)
        quality_combo.currentIndexChanged.connect(lambda _: self._update_quality("antialiasing.quality", quality_combo.currentData()))
        self._quality_controls["aa.quality"] = quality_combo
        grid.addWidget(QLabel("–ö–∞—á–µ—Å—Ç–≤–æ", self), 1, 0)
        grid.addWidget(quality_combo, 1, 1)

        post_combo = QComboBox(self)
        for label, value in [("–í—ã–∫–ª.", "off"), ("FXAA", "fxaa"), ("TAA", "taa")]:
            post_combo.addItem(label, value)
        post_combo.currentIndexChanged.connect(lambda _: self._update_quality("antialiasing.post", post_combo.currentData()))
        self._quality_controls["aa.post"] = post_combo
        grid.addWidget(QLabel("–ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞", self), 2, 0)
        grid.addWidget(post_combo, 2, 1)

        taa_check = QCheckBox("–í–∫–ª—é—á–∏—Ç—å TAA", self)
        taa_check.clicked.connect(lambda checked: self._update_quality("taa.enabled", checked))
        self._quality_controls["taa.enabled"] = taa_check
        grid.addWidget(taa_check, 3, 0, 1, 2)

        taa_strength = LabeledSlider("–°–∏–ª–∞ TAA", 0.0, 1.0, 0.01, decimals=2)
        taa_strength.valueChanged.connect(lambda v: self._update_quality(" taa.strength", v))
        self._quality_controls["taa.strength"] = taa_strength
        grid.addWidget(taa_strength, 4, 0, 1, 2)

        taa_motion = QCheckBox("–û—Ç–∫–ª—é—á–∞—Ç—å TAA –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –∫–∞–º–µ—Ä—ã", self)
        taa_motion.clicked.connect(lambda checked: self._update_quality("taa_motion_adaptive", checked))
        self._qualitycontrols["taa_motion_adaptive"] = taa_motion
        grid.addWidget(taa_motion, 5, 0, 1, 2)

        fxaa_check = QCheckBox("–í–∫–ª—é—á–∏—Ç—å FXAA", self)
        fxaa_check.clicked.connect(lambda checked: self._update_quality("fxaa.enabled", checked))
        self._quality_controls["fxaa.enabled"] = fxaa_check
        grid.addWidget(fxaa_check, 6, 0, 1, 2)

        specular_check = QCheckBox("Specular AA", self)
        specular_check.clicked.connect(lambda checked: self._update_quality("specular_aa", checked))
        self._quality_controls["specular.enabled"] = specular_check
        grid.addWidget(specular_check, 7, 0, 1, 2)

        return group

    def _build_render_group(self) -> QGroupBox:
        group = QGroupBox("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", self)
        grid = QGridLayout(group)
        grid.setContentsMargins(8, 8, 8, 8)
        grid.setHorizontalSpacing(12)
        grid.setVerticalSpacing(8)

        scale_slider = LabeledSlider("–ú–∞—Å—à—Ç–∞–± —Ä–µ–Ω–¥–µ—Ä–∞", 0.5, 1.5, 0.01, decimals=2)
        scale_slider.valueChanged.connect(lambda v: self._update_quality("render_scale", v))
        self._quality_controls["render.scale"] = scale_slider
        grid.addWidget(scale_slider, 0, 0, 1, 2)

        policy_combo = QComboBox(self)
        policy_combo.addItem("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞", "always")
        policy_combo.addItem("–ü–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é", "ondemand")
        policy_combo.currentIndexChanged.connect(lambda _: self._update_quality("render_policy", policy_combo.currentData()))
        self._quality_controls["render.policy"] = policy_combo
        grid.addWidget(QLabel("–ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", self), 1, 0)
        grid.addWidget(policy_combo, 1, 1)

        frame_slider = LabeledSlider("–õ–∏–º–∏—Ç FPS", 24.0, 240.0, 1.0, decimals=0)
        frame_slider.valueChanged.connect(lambda v: self._update_quality("frame_rate_limit", v))
        self._quality_controls["frame_rate_limit"] = frame_slider
        grid.addWidget(frame_slider, 2, 0, 1, 2)

        oit_check = QCheckBox("Weighted OIT", self)
        oit_check.clicked.connect(lambda checked: self._update_quality("oit", "weighted" if checked else "none"))
        self._quality_controls["oit.enabled"] = oit_check
        grid.addWidget(oit_check, 3, 0, 1, 2)
        return group

    def _on_quality_preset_changed(self, preset_key: str | None) -> None:
        if self._updating_ui:
            return
        if not preset_key:
            return
        if preset_key == "custom":
            self.state["quality"]["preset"] = "custom"
            self._emit_quality()
            return
        self._apply_quality_preset(str(preset_key))

    def _apply_quality_preset(self, key: str) -> None:
        config = self._quality_presets.get(key)
        if not config:
            return
        self._suspend_preset_sync = True
        try:
            self.state["quality"]["preset"] = key
            self._deep_update(self.state["quality"], copy.deepcopy(config))
            self._apply_quality_constraints()
            previous = self._updating_ui
            self._updating_ui = True
            try:
                self._apply_quality_ui()
            finally:
                self._updating_ui = previous
        finally:
            self._suspend_preset_sync = False
        self._sync_quality_preset_ui()
        self._emit_quality()
        self.preset_applied.emit(f"–ü—Ä–æ—Ñ–∏–ª—å –∫–∞—á–µ—Å—Ç–≤–∞: {self._quality_preset_labels.get(key, key)}")

    def _sync_quality_preset_ui(self) -> None:
        combo = self._quality_controls.get("quality.preset")
        if not isinstance(combo, QComboBox):
            return
        previous = self._updating_ui
        self._updating_ui = True
        try:
            preset_key = self.state["quality"].get("preset", "custom")
            index = combo.findData(preset_key)
            if index >= 0:
                combo.setCurrentIndex(index)
        finally:
            self._updating_ui = previous

    def _set_quality_custom(self) -> None:
        if self._suspend_preset_sync:
            return
        if self.state["quality"].get("preset") != "custom":
            self.state["quality"]["preset"] = "custom"
            self._sync_quality_preset_ui()

    def _ensure_material_defaults(self, key: str) -> None:
        base = self._defaults["materials"].get(key, {})
        target = self.state["materials"].setdefault(key, {})
        for prop, value in base.items():
            target.setdefault(prop, value)

    # --- Camera -------------------------------------------------------
    def _build_camera_tab(self) -> QWidget:
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(12)

        group = QGroupBox("–ö–∞–º–µ—Ä–∞", self)
        grid = QGridLayout(group)
        grid.setContentsMargins(8, 8, 8, 8)
        grid.setHorizontalSpacing(12)
        grid.setVerticalSpacing(8)

        fov = LabeledSlider("–ü–æ–ª–µ –∑—Ä–µ–Ω–∏—è", 10.0, 120.0, 0.5, decimals=1, unit="¬∞")
        fov.valueChanged.connect(lambda v: self._update_camera("fov", v))
        self._camera_controls["fov"] = fov
        grid.addWidget(fov, 0, 0, 1, 2)

        near_clip = LabeledSlider("–ë–ª–∏–∂–Ω—è—è –ø–ª–æ—Å–∫–æ—Å—Ç—å", 1.0, 100.0, 1.0, decimals=1, unit="–º–º")
        near_clip.valueChanged.connect(lambda v: self._update_camera("near", v))
        self._camera_controls["near"] = near_clip
        grid.addWidget(near_clip, 1, 0, 1, 2)

        far_clip = LabeledSlider("–î–∞–ª—å–Ω—è—è –ø–ª–æ—Å–∫–æ—Å—Ç—å", 1000.0, 100000.0, 500.0, decimals=0, unit="–º–º")
        far_clip.valueChanged.connect(lambda v: self._update_camera("far", v))
        self._camera_controls["far"] = far_clip
        grid.addWidget(far_clip, 2, 0, 1, 2)

        speed = LabeledSlider("–°–∫–æ—Ä–æ—Å—Ç—å –∫–∞–º–µ—Ä—ã", 0.1, 5.0, 0.1, decimals=2)
        speed.valueChanged.connect(lambda v: self._update_camera("speed", v))
        self._camera_controls["speed"] = speed
        grid.addWidget(speed, 3, 0, 1, 2)

        auto_rotate = QCheckBox("–ê–≤—Ç–æ–ø–æ–≤–æ—Ä–æ—Ç", self)
        
        # ‚úÖ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∏–∫–∞
        def on_auto_rotate_clicked(checked: bool):
            # –õ–æ–≥–∏—Ä—É–µ–º –ö–õ–ò–ö (–ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º)
            self.event_logger.log_user_click(
                widget_name="auto_rotate",
                widget_type="QCheckBox",
                value=checked
            )
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            self._update_camera("auto_rotate", checked)
        
        auto_rotate.clicked.connect(on_auto_rotate_clicked)
        self._camera_controls["auto_rotate"] = auto_rotate
        grid.addWidget(auto_rotate, 4, 0, 1, 2)

        rotate_speed = LabeledSlider("–°–∫–æ—Ä–æ—Å—Ç—å –∞–≤—Ç–æ–ø–æ–≤–æ—Ä–æ—Ç–∞", 0.1, 3.0, 0.05, decimals=2)
        rotate_speed.valueChanged.connect(lambda v: self._update_camera("auto_rotate_speed", v))
        self._camera_controls["auto_rotate_speed"] = rotate_speed
        grid.addWidget(rotate_speed, 5, 0, 1, 2)

        layout.addWidget(group)
        layout.addStretch(1)
        return tab

    # --- Materials ----------------------------------------------------
    def _build_materials_tab(self) -> QWidget:
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(12)

        selector_row = QHBoxLayout()
        selector_row.addWidget(QLabel("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", self))
        self._material_labels = {
            "frame": "–†–∞–º–∞",
            "lever": "–†—ã—á–∞–≥",
            "tail": "–•–≤–æ—Å—Ç–æ–≤–∏–∫",
            "cylinder": "–¶–∏–ª–∏–Ω–¥—Ä (—Å—Ç–µ–∫–ª–æ)",
            "piston_body": "–ö–æ—Ä–ø—É—Å –ø–æ—Ä—à–Ω—è",
            "piston_rod": "–®—Ç–æ–∫",
            "joint_tail": "–®–∞—Ä–Ω–∏—Ä —Ö–≤–æ—Å—Ç–æ–≤–∏–∫–∞",
            "joint_arm": "–®–∞—Ä–Ω–∏—Ä —Ä—ã—á–∞–≥–∞",
        }
        self._material_selector = QComboBox(self)
        for key, label in self._material_labels.items():
            self._material_selector.addItem(label, key)
        self._material_selector.currentIndexChanged.connect(self._on_material_selection_changed)
        selector_row.addWidget(self._material_selector, 1)
        selector_row.addStretch(1)
        layout.addLayout(selector_row)

        group = QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∞", self)
        grid = QGridLayout(group)
        grid.setContentsMargins(8, 8, 8, 8)
        grid.setHorizontalSpacing(12)
        grid.setVerticalSpacing(8)

        row = 0
        row = self._add_material_color(grid, row, "–ë–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç", "base_color")
        row = self._add_material_slider(grid, row, "–ú–µ—Ç–∞–ª–ª–∏—á–Ω–æ—Å—Ç—å", "metalness", 0.0, 1.0, 0.01)
        row = self._add_material_slider(grid, row, "–®–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç—å", "roughness", 0.0, 1.0, 0.01)
        row = self._add_material_slider(grid, row, "Specular", "specular", 0.0, 1.0, 0.01)
        row = self._add_material_slider(grid, row, "Specular Tint", "specular_tint", 0.0, 1.0, 0.01)
        row = self._add_material_slider(grid, row, "Clearcoat", "clearcoat", 0.0, 1.0, 0.01)
        row = self._add_material_slider(grid, row, "–®–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç—å –ª–∞–∫–∞", "clearcoat_roughness", 0.0, 1.0, 0.01)
        row = self._add_material_slider(grid, row, "–ü—Ä–æ–ø—É—Å–∫–∞–Ω–∏–µ", "transmission", 0.0, 1.0, 0.01)
        row = self._add_material_slider(grid, row, "–ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å", "opacity", 0.0, 1.0, 0.01)
        row = self._add_material_slider(grid, row, "Index of Refraction", "ior", 1.0, 3.0, 0.01)
        row = self._add_material_slider(grid, row, "Attenuation distance", "attenuation_distance", 0.0, 10000.0, 10.0, decimals=1)
        row = self._add_material_color(grid, row, "Attenuation color", "attenuation_color")
        row = self._add_material_color(grid, row, "–ò–∑–ª—É—á–∞—é—â–∏–π —Ü–≤–µ—Ç", "emissive_color")
        row = self._add_material_slider(grid, row, "–Ø—Ä–∫–æ—Å—Ç—å –∏–∑–ª—É—á–µ–Ω–∏—è", "emissive_intensity", 0.0, 5.0, 0.05)
        row = self._add_material_color(grid, row, "–¶–≤–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", "warning_color")
        row = self._add_material_color(grid, row, "–¶–≤–µ—Ç OK", "ok_color")
        row = self._add_material_color(grid, row, "–¶–≤–µ—Ç –æ—à–∏–±–∫–∏", "error_color")

        layout.addWidget(group)
        layout.addStretch(1)

        self._on_material_selection_changed()
        return tab

    def _add_material_color(self, grid: QGridLayout, row: int, title: str, key: str) -> int:
        container = QWidget(self)
        hbox = QHBoxLayout(container)
        hbox.setContentsMargins(0, 0, 0, 0)
        hbox.setSpacing(6)
        hbox.addWidget(QLabel(title, self))
        button = ColorButton()
        button.color_changed.connect(lambda c, prop=key: self._on_material_color_changed(prop, c))
        self._material_controls[key] = button
        self._material_rows[key] = container
        hbox.addWidget(button)
        hbox.addStretch(1)
        grid.addWidget(container, row, 0, 1, 2)
        return row + 1

    def _add_material_slider(
        self,
        grid: QGridLayout,
        row: int,
        title: str,
        key: str,
        minimum: float,
        maximum: float,
        step: float,
        *,
        decimals: int = 2,
    ) -> int:
        slider = LabeledSlider(title, minimum, maximum, step, decimals=decimals)
        slider.valueChanged.connect(lambda v, prop=key: self._on_material_value_changed(prop, v))
        self._material_controls[key] = slider
        self._material_rows[key] = slider
        grid.addWidget(slider, row, 0, 1, 2)
        return row + 1

    def _on_material_selection_changed(self) -> None:
        if self._updating_ui:
            return
        self._updating_ui = True
        try:
            key = self._current_material_key()
            if not key:
                return
            self._ensure_material_defaults(key)
            data = self.state["materials"].get(key, {})
            defaults = self._defaults["materials"].get(key, {})
            for prop, widget in self._material_controls.items():
                value = data.get(prop, defaults.get(prop))
                if value is None:
                    continue
                if isinstance(widget, ColorButton):
                    widget.set_color(value)
                elif isinstance(widget, LabeledSlider):
                    widget.set_value(value)
        finally:
            self._updating_ui = False

    def _current_material_key(self) -> str:
        return self._material_selector.currentData()

    def _on_material_color_changed(self, prop: str, color: str) -> None:
        if self._updating_ui:
            return
        key = self._current_material_key()
        if not key or prop not in self.state["materials"].get(key, {}):
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        old_value = self.state["materials"][key].get(prop)
        
        self.state["materials"][key][prop] = color
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        self.graphics_logger.log_change(
            parameter_name=f"{key}.{prop}",
            old_value=old_value,
            new_value=color,
            category="material",
            panel_state=self.state
        )
        
        # ‚úÖ –ù–û–í–û–ï: –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É Python-—Å–∏–≥–Ω–∞–ª–∞
        try:
            self.event_logger.log_signal_emit("material_changed", self._prepare_materials_payload())
        except Exception:
            pass
        
        self._emit_material_update(key)

    def _on_material_value_changed(self, prop: str, value: float) -> None:
        if self._updating_ui:
            return
        key = self._current_material_key()
        if not key or prop not in self.state["materials"].get(key, {}):
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        old_value = self.state["materials"][key].get(prop)
        
        self.state["materials"][key][prop] = value
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        self.graphics_logger.log_change(
            parameter_name=f"{key}.{prop}",
            old_value=old_value,
            new_value=value,
            category="material",
            panel_state=self.state
        )
        
        # ‚úÖ –ù–û–í–û–ï: –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É Python-—Å–∏–≥–Ω–∞–ª–∞
        try:
            self.event_logger.log_signal_emit("material_changed", self._prepare_materials_payload())
        except Exception:
            pass
        
        self._emit_material_update(key)

    # --- Effects ------------------------------------------------------
    def _build_effects_tab(self) -> QWidget:
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(12)

        layout.addWidget(self._build_bloom_group())
        layout.addWidget(self._build_tonemap_group())
        layout.addWidget(self._build_dof_group())
        layout.addWidget(self._build_misc_effects_group())
        layout.addStretch(1)
        return tab

    def _build_bloom_group(self) -> QGroupBox:
        group = QGroupBox("Bloom", self)
        grid = QGridLayout(group)
        grid.setContentsMargins(8, 8, 8, 8)
        grid.setHorizontalSpacing(12)
        grid.setVerticalSpacing(8)

        enabled = QCheckBox("–í–∫–ª—é—á–∏—Ç—å Bloom", self)
        
        # ‚úÖ FIX: –õ–æ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫ + –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        enabled.clicked.connect(lambda checked: self._on_bloom_enabled_clicked(checked))
        self._effects_controls["bloom.enabled"] = enabled
        grid.addWidget(enabled, 0, 0, 1, 2)

        intensity = LabeledSlider("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å", 0.0, 2.0, 0.02, decimals=2)
        intensity.valueChanged.connect(lambda v: self._update_effects("bloom_intensity", v))
        self._effects_controls["bloom.intensity"] = intensity
        grid.addWidget(intensity, 1, 0, 1, 2)

        threshold = LabeledSlider("–ü–æ—Ä–æ–≥", 0.0, 4.0, 0.05, decimals=2)
        threshold.valueChanged.connect(lambda v: self._update_effects("bloom_threshold", v))
        self._effects_controls["bloom.threshold"] = threshold
        grid.addWidget(threshold, 2, 0, 1, 2)

        spread = LabeledSlider("–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ", 0.2, 1.0, 0.02, decimals=2)
        spread.valueChanged.connect(lambda v: self._update_effects("bloom_spread", v))
        self._effects_controls["bloom.spread"] = spread
        grid.addWidget(spread, 3, 0, 1, 2)
        return group

    def _build_tonemap_group(self) -> QGroupBox:
        group = QGroupBox("–¢–æ–Ω–µ–º–∞–ø–ø–∏–Ω–≥", self)
        grid = QGridLayout(group)
        grid.setContentsMargins(8, 8, 8, 8)
        grid.setHorizontalSpacing(12)
        grid.setVerticalSpacing(8)

        enabled = QCheckBox("–í–∫–ª—é—á–∏—Ç—å —Ç–æ–Ω–µ–º–∞–ø–ø–∏–Ω–≥", self)
        enabled.clicked.connect(lambda checked: self._update_effects("tonemap_enabled", checked))
        self._effects_controls["tonemap.enabled"] = enabled
        grid.addWidget(enabled, 0, 0, 1, 2)

        combo = QComboBox(self)
        for label, value in [
            ("Filmic", "filmic"),
            ("ACES", "aces"),
            ("Reinhard", "reinhard"),
            ("Gamma", "gamma"),
            ("Linear", "linear"),
        ]:
            combo.addItem(label, value)
        combo.currentIndexChanged.connect(lambda _: self._update_effects("tonemap_mode", combo.currentData()))
        self._effects_controls["tonemap.mode"] = combo
        grid.addWidget(QLabel("–†–µ–∂–∏–º", self), 1, 0)
        grid.addWidget(combo, 1, 1)

        return group

    def _build_dof_group(self) -> QGroupBox:
        group = QGroupBox("–ì–ª—É–±–∏–Ω–∞ —Ä–µ–∑–∫–æ—Å—Ç–∏", self)
        grid = QGridLayout(group)
        grid.setContentsMargins(8, 8, 8, 8)
        grid.setHorizontalSpacing(12)
        grid.setVerticalSpacing(8)

        enabled = QCheckBox("–í–∫–ª—é—á–∏—Ç—å DoF", self)
        enabled.clicked.connect(lambda checked: self._update_effects("depth_of_field", checked))
        self._effects_controls["dof.enabled"] = enabled
        grid.addWidget(enabled, 0, 0, 1, 2)

        focus = LabeledSlider("–§–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ", 200.0, 20000.0, 50.0, decimals=0, unit="–º–º")
        focus.valueChanged.connect(lambda v: self._update_effects("dof_focus_distance", v))
        self._effects_controls["dof.focus"] = focus
        grid.addWidget(focus, 1, 0, 1, 2)

        blur = LabeledSlider("–†–∞–∑–º—ã—Ç–∏–µ", 0.0, 10.0, 0.1, decimals=2)
        blur.valueChanged.connect(lambda v: self._update_effects("dof_blur", v))
        self._effects_controls["dof.blur"] = blur
        grid.addWidget(blur, 2, 0, 1, 2)
        return group

    def _build_misc_effects_group(self) -> QGroupBox:
        group = QGroupBox("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã", self)
        grid = QGridLayout(group)
        grid.setContentsMargins(8, 8, 8, 8)
        grid.setHorizontalSpacing(12)
        grid.setVerticalSpacing(8)

        motion = QCheckBox("–†–∞–∑–º—ã—Ç–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è", self)
        motion.clicked.connect(lambda checked: self._update_effects("motion_blur", checked))
        self._effects_controls["motion.enabled"] = motion
        grid.addWidget(motion, 0, 0, 1, 2)

        motion_strength = LabeledSlider("–°–∏–ª–∞ —Ä–∞–∑–º—ã—Ç–∏—è", 0.0, 1.0, 0.02, decimals=2)
        motion_strength.valueChanged.connect(lambda v: self._update_effects("motion_blur_amount", v))
        self._effects_controls["motion.amount"] = motion_strength
        grid.addWidget(motion_strength, 1, 0, 1, 2)

        lens_flare = QCheckBox("–õ–∏–Ω–∑–æ–≤—ã–µ –±–ª–∏–∫–∏", self)
        lens_flare.clicked.connect(lambda checked: self._update_effects("lens_flare", checked))
        self._effects_controls["lens_flare.enabled"] = lens_flare
        grid.addWidget(lens_flare, 2, 0, 1, 2)

        vignette = QCheckBox("–í–∏–Ω—å–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", self)
        vignette.clicked.connect(lambda checked: self._update_effects("vignette", checked))
        self._effects_controls["vignette.enabled"] = vignette
        grid.addWidget(vignette, 3, 0, 1, 2)

        vignette_strength = LabeledSlider("–°–∏–ª–∞ –≤–∏–Ω—å–µ—Ç–∫–∏", 0.0, 1.0, 0.02, decimals=2)
        vignette_strength.valueChanged.connect(lambda v: self._update_effects("vignette_strength", v))
        self._effects_controls["vignette.strength"] = vignette_strength
        grid.addWidget(vignette_strength, 4, 0, 1, 2)
        return group

    def _apply_quality_constraints(self) -> None:
        """Apply constraints between quality settings"""
        self._normalise_quality_state()
        self._sync_taa_controls()

    def _apply_lighting_preset(self, preset: Dict[str, Any], name: str) -> None:
        """Apply lighting preset"""
        self._updating_ui = True
        try:
            self.state["lighting"] = copy.deepcopy(preset)
            self._apply_lighting_ui()
        finally:
            self._updating_ui = False
        self._emit_lighting()
        self.preset_applied.emit(f"–û—Å–≤–µ—â–µ–Ω–∏–µ: {name}")

    def _on_primary_aa_changed(self, value: str) -> None:
        """Handle primary AA mode change"""
        if self._updating_ui:
            return
        self.state["quality"]["antialiasing"]["primary"] = value
        self._set_quality_custom()
        self._sync_taa_controls()
        self._emit_quality()

    # ------------------------------------------------------------------
    # Update methods for state changes
    # ------------------------------------------------------------------
    def _update_lighting(self, group: str, key: str, value: Any) -> None:
        """Update lighting parameter"""
        if self._updating_ui:
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        old_value = self.state["lighting"].get(group, {}).get(key)
        
        if group not in self.state["lighting"]:
            self.state["lighting"][group] = {}
        self.state["lighting"][group][key] = value
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        self.graphics_logger.log_change(
            parameter_name=f"{group}.{key}",
            old_value=old_value,
            new_value=value,
            category="lighting",
            panel_state=self.state
        )
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API EventLogger
        if group == "key" and key in {"brightness", "color", "angle_x", "angle_y"}:
            self.event_logger.log_event(
                event_type=EventType.STATE_CHANGE,
                component=f"lighting.{group}",
                action=key,
                old_value=old_value,
                new_value=value
            )
        
        self._emit_lighting()

    def _update_environment(self, key: str, value: Any) -> None:
        """Update environment parameter"""
        if self._updating_ui:
            return 
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        old_value = self.state["environment"].get(key)
        
        self.state["environment"][key] = value
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        self.graphics_logger.log_change(
            parameter_name=key,
            old_value=old_value,
            new_value=value,
            category="environment",
            panel_state=self.state
        )
        
        self._emit_environment()

    def _update_quality(self, key: str, value: Any) -> None:
        """Update quality parameter"""
        if self._updating_ui:
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        old_value = None

        # ‚úÖ –ê–ª–∏–∞—Å—ã –¥–ª—è –ø–ª–æ—Å–∫–∏—Ö –∫–ª—é—á–µ–π –∫–∞—á–µ—Å—Ç–≤–∞ (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä)
        if key == "fxaa.enabled":
            old_value = self.state["quality"].get("fxaa_enabled")
            self.state["quality"]["fxaa_enabled"] = value
        elif key == "taa.enabled":
            old_value = self.state["quality"].get("taa_enabled")
            self.state["quality"]["taa_enabled"] = value
        else:
            # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ shadows.*, antialiasing.*)
            if "." in key:
                parts = key.split(".")
                target = self.state["quality"]
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                tmp = target
                for part in parts[:-1]:
                    if part in tmp and isinstance(tmp[part], dict):
                        tmp = tmp[part]
                    else:
                        tmp = None
                        break
                if isinstance(tmp, dict):
                    old_value = tmp.get(parts[-1])
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                for part in parts[:-1]:
                    if part not in target or not isinstance(target[part], dict):
                        target[part] = {}
                    target = target[part]
                target[parts[-1]] = value
            else:
                old_value = self.state["quality"].get(key)
                self.state["quality"][key] = value
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        self.graphics_logger.log_change(
            parameter_name=key,
            old_value=old_value,
            new_value=value,
            category="quality",
            panel_state=self.state
        )
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API EventLogger
        self.event_logger.log_event(
            event_type=EventType.STATE_CHANGE,
            component="quality",
            action=key,
            old_value=old_value,
            new_value=value
        )
        
        self._set_quality_custom()
        self._emit_quality()

    def _update_camera(self, key: str, value: Any) -> None:
        if self._updating_ui:
            self.logger.debug(f"üîí _update_camera blocked (updating_ui=True): {key}={value}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        old_value = self.state["camera"].get(key)
        
        # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¥–ª—è –∞–≤—Ç–æ–≤—Ä–∞—â–µ–Ω–∏—è
        if key == "auto_rotate":
            self.logger.info(f"üîÑ AUTO_ROTATE CHANGE DETECTED: {value}")
            self.logger.info(f"   Previous state: {self.state['camera'].get('auto_rotate', 'UNKNOWN')}")
        
        self.state["camera"][key] = value
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        self.graphics_logger.log_change(
            parameter_name=key,
            old_value=old_value,
            new_value=value,
            category="camera",
            panel_state=self.state
        )
        
        self._emit_camera()
        
        if key == "auto_rotate":
            self.logger.info(f"   New state saved: {self.state['camera']['auto_rotate']}")
            self.logger.info(f"   About to emit camera_changed signal...")
        
        self._emit_camera()
        
        if key == "auto_rotate":
            self.logger.info(f"   ‚úÖ camera_changed signal emitted!")

    def _update_effects(self, key: str, value: Any) -> None:
        """Update effects parameter"""
        if self._updating_ui:
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        old_value = self.state["effects"].get(key)
        
        self.state["effects"][key] = value
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        self.graphics_logger.log_change(
            parameter_name=key,
            old_value=old_value,
            new_value=value,
            category="effects",
            panel_state=self.state
        )
        
        self._emit_effects()

    # ‚úÖ –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ IBL Enabled —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    def _on_ibl_enabled_clicked(self, checked: bool) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ IBL Enabled —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º USER_CLICK"""
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫ –ü–ï–†–ï–î –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        self.event_logger.log_user_click(
            widget_name="ibl_enabled",
            widget_type="QCheckBox",
            value=checked
        )
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–∏—à–µ–º –≤ –æ–±—ã—á–Ω—ã–π –ª–æ–≥
        self.logger.info(f"IBL checkbox clicked: {checked}")
        
        # –í—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self._update_environment("ibl_enabled", checked)

    # ‚úÖ –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ Auto Rotate —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    def _on_auto_rotate_clicked(self, checked: bool) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ Auto Rotate —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º USER_CLICK"""
        # –õ–æ–≥–∏—Ä—É–µ–º –ö–õ–ò–ö (–ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º)
        self.event_logger.log_user_click(
            widget_name="auto_rotate",
            widget_type="QCheckBox",
            value=checked
        )
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self._update_camera("auto_rotate", checked)

    # ‚úÖ –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ Fog Enabled —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    def _on_fog_enabled_clicked(self, checked: bool) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ Fog Enabled —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º USER_CLICK"""
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫ –ü–ï–†–ï–î –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        self.event_logger.log_user_click(
            widget_name="fog_enabled",
            widget_type="QCheckBox",
            value=checked
        )
        self._update_environment("fog_enabled", checked)

    # ‚úÖ –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ Bloom Enabled —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    def _on_bloom_enabled_clicked(self, checked: bool) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ Bloom Enabled —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º USER_CLICK"""
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫ –ü–ï–†–ï–î –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        self.event_logger.log_user_click(
            widget_name="bloom_enabled",
            widget_type="QCheckBox",
            value=checked
        )
        self._update_effects("bloom_enabled", checked)

    # ------------------------------------------------------------------
    # HDR file selection
    # ------------------------------------------------------------------
    @Slot()
    def _choose_hdr_file(self) -> None:
        """Open file dialog to choose HDR file"""
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "–í—ã–±—Ä–∞—Ç—å HDR —Ñ–∞–π–ª",
            "",
            "HDR Files (*.hdr *.exr);;All Files (*)"
        )
        
        if file_path:
            self.state["environment"]["ibl_source"] = file_path
            
            # Update label
            path_label = self._environment_controls.get("ibl.path_label")
            if isinstance(path_label, QLabel):
                from pathlib import Path
                path_label.setText(Path(file_path).name)
            
            self.logger.info(f"HDR —Ñ–∞–π–ª –≤—ã–±—Ä–∞–Ω: {file_path}")
            self._emit_environment()

    # ------------------------------------------------------------------
    # Signal emission methods
    # ------------------------------------------------------------------
    def _emit_lighting(self) -> None:
        payload = self._prepare_lighting_payload()
        # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ Python-—Å–∏–≥–Ω–∞–ª–∞
        try:
            self.event_logger.log_signal_emit("lighting_changed", payload)
        except Exception:
            pass
        self.lighting_changed.emit(payload)

    def _emit_environment(self) -> None:
        payload = self._prepare_environment_payload()
        # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ Python-—Å–∏–≥–Ω–∞–ª–∞
        try:
            self.event_logger.log_signal_emit("environment_changed", payload)
        except Exception:
            pass
        self.environment_changed.emit(payload)

    def _emit_material_update(self, key: str) -> None:
        payload = self._prepare_materials_payload()
        # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ Python-—Å–∏–≥–Ω–∞–ª–∞
        try:
            self.event_logger.log_signal_emit("material_changed", payload)
        except Exception:
            pass
        self.material_changed.emit(payload)

    def _emit_quality(self) -> None:
        payload = self._prepare_quality_payload()
        # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ Python-—Å–∏–≥–Ω–∞–ª–∞
        try:
            self.event_logger.log_signal_emit("quality_changed", payload)
        except Exception:
            pass
        self.quality_changed.emit(payload)

    def _emit_camera(self) -> None:
        payload = self._prepare_camera_payload()
        # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ Python-—Å–∏–≥–Ω–∞–ª–∞
        try:
            self.event_logger.log_signal_emit("camera_changed", payload)
        except Exception:
            pass
        self.camera_changed.emit(payload)

    def _emit_effects(self) -> None:
        payload = self._prepare_effects_payload()
        # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ Python-—Å–∏–≥–Ω–∞–ª–∞
        try:
            self.event_logger.log_signal_emit("effects_changed", payload)
        except Exception:
            pass
        self.effects_changed.emit(payload)

    def _emit_all(self) -> None:
        """Emit all signals with current state"""
        self._emit_lighting()
        self._emit_environment()
        self._emit_quality()
        self._emit_camera()
        self._emit_effects()
        for key in self.state["materials"]:
            self._emit_material_update(key)

    # ------------------------------------------------------------------
    # Payload preparation
    # ------------------------------------------------------------------
    def _prepare_lighting_payload(self) -> Dict[str, Any]:
        """Prepare lighting payload mapped to QML expected keys.

        QML expects keys like `key_light`, `fill_light`, `rim_light`, `point_light`.
        Internal state uses `key`, `fill`, `rim`, `point` ‚Äî map and rename fields
        (e.g. `height` -> `position_y`) to ensure QML applyLightingUpdates applies updates.
        """
        src = copy.deepcopy(self.state.get("lighting", {}))
        payload: Dict[str, Any] = {}

        # ‚úÖ Map: key ‚Üí key_light
        key = src.get("key") or {}
        if key:
            kl = {}
            if "brightness" in key:
                kl["brightness"] = key.get("brightness")
            if "color" in key:
                kl["color"] = key.get("color")
            if "angle_x" in key:
                kl["angle_x"] = key.get("angle_x")
            if "angle_y" in key:
                kl["angle_y"] = key.get("angle_y")
            payload["key_light"] = kl

        # ‚úÖ Map: fill ‚Üí fill_light
        fill = src.get("fill") or {}
        if fill:
            fl = {}
            if "brightness" in fill:
                fl["brightness"] = fill.get("brightness")
            if "color" in fill:
                fl["color"] = fill.get("color")
            payload["fill_light"] = fl

        # ‚úÖ Map: rim ‚Üí rim_light
        rim = src.get("rim") or {}
        if rim:
            rl = {}
            if "brightness" in rim:
                rl["brightness"] = rim.get("brightness")
            if "color" in rim:
                rl["color"] = rim.get("color")
            payload["rim_light"] = rl

        # ‚úÖ Map: point ‚Üí point_light + height ‚Üí position_y
        point = src.get("point") or {}
        if point:
            pl = {}
            if "brightness" in point:
                pl["brightness"] = point.get("brightness")
            if "color" in point:
                pl["color"] = point.get("color")
            # ‚úÖ CRITICAL: height ‚Üí position_y (—Ç–æ–ª—å–∫–æ —Ç–∞–∫–æ–µ –∏–º—è —á–∏—Ç–∞–µ—Ç QML)
            if "height" in point:
                pl["position_y"] = point.get("height")
            if "range" in point:
                pl["range"] = point.get("range")
            # ‚úÖ –ù–æ–≤—ã–π –∫–ª—é—á –¥–ª—è QML: casts_shadow
            if "cast_shadow" in point:
                pl["casts_shadow"] = bool(point.get("cast_shadow"))
            payload["point_light"] = pl

        return payload

    def _prepare_environment_payload(self) -> Dict[str, Any]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–π payload –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º QML applyEnvironmentUpdates()."""
        env = self.state.get("environment", {})
        payload: Dict[str, Any] = {}

        # background (–ù–ï –∑–∞–≤–∏—Å–∏—Ç –æ—Ç ibl_enabled)
        bg: Dict[str, Any] = {}
        if "background_mode" in env:
            bg["mode"] = env.get("background_mode")
        if "background_color" in env:
            bg["color"] = env.get("background_color")
        if "ibl_enabled" in env:
            # –ù–µ —Å–≤—è–∑—ã–≤–∞–µ–º —Ñ–æ–Ω —Å IBL ‚Äî —Ç–æ–ª—å–∫–æ skybox_enabled –ø–æ –∂–µ–ª–∞–Ω–∏—é
            pass
        if bg:
            payload["background"] = bg

        # IBL (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç background)
        ibl: Dict[str, Any] = {}
        if "ibl_enabled" in env:
            ibl["enabled"] = bool(env.get("ibl_enabled"))
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–µ—Ä–∫–∞–ª–∏–º –≤ lighting_enabled, –∞ background_enabled –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
            ibl["lighting_enabled"] = ibl["enabled"]
        if "ibl_intensity" in env:
            ibl["intensity"] = env.get("ibl_intensity")
        if "ibl_source" in env:
            ibl["source"] = env.get("ibl_source")
        if "ibl_fallback" in env:
            ibl["fallback"] = env.get("ibl_fallback")
        if ibl:
            payload["ibl"] = ibl

        # fog
        fog: Dict[str, Any] = {}
        if "fog_enabled" in env:
            fog["enabled"] = bool(env.get("fog_enabled"))
        if "fog_color" in env:
            fog["color"] = env.get("fog_color")
        if "fog_density" in env:
            fog["density"] = env.get("fog_density")
        if "fog_near" in env:
            fog["near"] = env.get("fog_near")
        if "fog_far" in env:
            fog["far"] = env.get("fog_far")
        if fog:
            payload["fog"] = fog

        # ambient occlusion
        ao: Dict[str, Any] = {}
        if "ao_enabled" in env:
            ao["enabled"] = bool(env.get("ao_enabled"))
        if "ao_strength" in env:
            ao["strength"] = env.get("ao_strength")
        if "ao_radius" in env:
            ao["radius"] = env.get("ao_radius")
        if ao:
            payload["ambient_occlusion"] = ao

        return payload

    def _prepare_materials_payload(self) -> Dict[str, Any]:
        return copy.deepcopy(self.state["materials"])

    def _prepare_quality_payload(self) -> Dict[str, Any]:
        """–ì–æ—Ç–æ–≤–∏—Ç payload –∫–∞—á–µ—Å—Ç–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º QML applyQualityUpdates()."""
        q = copy.deepcopy(self.state.get("quality", {}))
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–ª–∏–∞—Å—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ–∑–¥–∞–ª–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if isinstance(q.get("fxaa"), dict) and "enabled" in q["fxaa"]:
            q["fxaa_enabled"] = q["fxaa"]["enabled"]
        if isinstance(q.get("taa"), dict) and "enabled" in q["taa"]:
            q["taa_enabled"] = q["taa"]["enabled"]
        return q

    def _prepare_camera_payload(self) -> Dict[str, Any]:
        """–ì–æ—Ç–æ–≤–∏—Ç payload –∫–∞–º–µ—Ä—ã, –ø—Ä–∏–º–µ–Ω–∏–º—ã–π –≤ QML applyCameraUpdates()."""
        return copy.deepcopy(self.state.get("camera", {}))

    def _prepare_effects_payload(self) -> Dict[str, Any]:
        """–ì–æ—Ç–æ–≤–∏—Ç payload —ç—Ñ—Ñ–µ–∫—Ç–æ–≤, –ø—Ä–∏–º–µ–Ω–∏–º—ã–π –≤ QML applyEffectsUpdates()."""
        return copy.deepcopy(self.state.get("effects", {}))

    # ------------------------------------------------------------------
    # Settings persistence
    # ------------------------------------------------------------------
    @Slot()
    def save_settings(self) -> None:
        """Save current settings to QSettings"""
        try:
            for category, data in self.state.items():
                self.settings.setValue(f"state/{category}", json.dumps(data))
            self.settings.sync()
            self.logger.info("Graphics settings saved")
        except Exception as e:
            self.logger.error(f"Failed to save settings: {e}")

    @Slot()
    def load_settings(self) -> None:
        """Load settings from QSettings"""
        try:
            for category in self.state.keys():
                value = self.settings.value(f"state/{category}")
                if value:
                    try:
                        loaded = json.loads(value)
                        self._deep_update(self.state[category], loaded)
                    except json.JSONDecodeError as e:
                        self.logger.warning(f"Failed to parse {category} settings: {e}")
            self.logger.info("Graphics settings loaded")
        except Exception as e:
            self.logger.error(f"Failed to load settings: {e}")

    @Slot()
    def reset_to_defaults(self) -> None:
        """Reset all settings to defaults"""
        self.logger.info("üîÑ Resetting all graphics settings to defaults")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–±—Ä–æ—Å
        self.graphics_logger.log_change(
            parameter_name="RESET_ALL",
            old_value=copy.deepcopy(self.state),
            new_value=copy.deepcopy(self._defaults),
            category="system",
            panel_state=self._defaults
        )
        
        self.state = copy.deepcopy(self._defaults)
        self._apply_state_to_ui()
        self._emit_all()
        self.preset_applied.emit("–°–±—Ä–æ—Å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    # ------------------------------------------------------------------
    # UI state synchronization
    # ------------------------------------------------------------------
    def _apply_state_to_ui(self) -> None:
        """Apply current state to all UI controls"""
        # ‚úÖ CRITICAL FIX: –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –≤–æ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._updating_ui = True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ Qt
        self.blockSignals(True)
        
        try:
            self._apply_lighting_ui()
            self._apply_environment_ui()
            self._apply_quality_ui()
            self._apply_camera_ui()
            self._apply_effects_ui()
            self._on_material_selection_changed()
        finally:
            # ‚úÖ CRITICAL: –í—Å–µ–≥–¥–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            self.blockSignals(False)
            self._updating_ui = False

    def _apply_lighting_ui(self) -> None:
        for group, values in self.state["lighting"].items():
            for key, value in values.items():
                control = self._lighting_controls.get(f"{group}.{key}")
                if isinstance(control, ColorButton):
                    control.set_color(value)
                elif isinstance(control, LabeledSlider):
                    control.set_value(value)
                elif isinstance(control, QCheckBox):
                    control.setChecked(bool(value))

    def _apply_environment_ui(self) -> None:
        mode_combo = self._environment_controls.get("background.mode")
        if isinstance(mode_combo, QComboBox):
            index = mode_combo.findData(self.state["environment"]["background_mode"])
            if index >= 0:
                mode_combo.setCurrentIndex(index)

        bg_button = self._environment_controls.get("background.color")
        if isinstance(bg_button, ColorButton):
            bg_button.set_color(self.state["environment"]["background_color"])

        ibl_check = self._environment_controls.get("ibl.enabled")
        if isinstance(ibl_check, QCheckBox):
            ibl_check.setChecked(self.state["environment"]["ibl_enabled"])

        ibl_intensity = self._environment_controls.get("ibl.intensity")
        if isinstance(ibl_intensity, LabeledSlider):
            ibl_intensity.set_value(self.state["environment"]["ibl_intensity"])

        skybox_blur = self._environment_controls.get("skybox.blur")
        if isinstance(skybox_blur, LabeledSlider):
            skybox_blur.set_value(self.state["environment"]["skybox_blur"])

        fog_enabled = self._environment_controls.get("fog.enabled")
        if isinstance(fog_enabled, QCheckBox):
            fog_enabled.setChecked(self.state["environment"]["fog_enabled"])

        fog_color = self._environment_controls.get("fog.color")
        if isinstance(fog_color, ColorButton):
            fog_color.set_color(self.state["environment"]["fog_color"])

        fog_density = self._environment_controls.get("fog.density")
        if isinstance(fog_density, LabeledSlider):
            fog_density.set_value(self.state["environment"]["fog_density"])

        fog_near = self._environment_controls.get("fog.near")
        if isinstance(fog_near, LabeledSlider):
            fog_near.set_value(self.state["environment"]["fog_near"])

        fog_far = self._environment_controls.get("fog.far")
        if isinstance(fog_far, LabeledSlider):
            fog_far.set_value(self.state["environment"]["fog_far"])

        # ‚úÖ FIXED: –ó–∞–º–µ–Ω–µ–Ω–æ 'this' –Ω–∞ 'self'
        ao_enabled = self._environment_controls.get("ao.enabled")
        if isinstance(ao_enabled, QCheckBox):
            ao_enabled.setChecked(self.state["environment"]["ao_enabled"])

        ao_strength = self._environment_controls.get("ao.strength")
        if isinstance(ao_strength, LabeledSlider):
            ao_strength.set_value(self.state["environment"]["ao_strength"])

        ao_radius = self._environment_controls.get("ao.radius")
        if isinstance(ao_radius, LabeledSlider):
            ao_radius.set_value(self.state["environment"]["ao_radius"])

    def _apply_quality_ui(self) -> None:
        self._sync_quality_preset_ui()
        
        shadows_enabled = self._quality_controls.get("shadows.enabled")
        if isinstance(shadows_enabled, QCheckBox):
            shadows_enabled.setChecked(self.state["quality"]["shadows"]["enabled"])

        shadows_res = self._quality_controls.get("shadows.resolution")
        if isinstance(shadows_res, QComboBox):
            index = shadows_res.findData(self.state["quality"]["shadows"]["resolution"])
            if index >= 0:
                shadows_res.setCurrentIndex(index)

        shadows_filter = self._quality_controls.get("shadows.filter")
        if isinstance(shadows_filter, QComboBox):
            index = shadows_filter.findData(self.state["quality"]["shadows"]["filter"])
            if index >= 0:
                shadows_filter.setCurrentIndex(index)

        shadows_bias = self._quality_controls.get("shadows.bias")
        if isinstance(shadows_bias, LabeledSlider):
            shadows_bias.set_value(self.state["quality"]["shadows"]["bias"])

        shadows_darkness = self._quality_controls.get("shadows.darkness")
        if isinstance(shadows_darkness, LabeledSlider):
            shadows_darkness.set_value(self.state["quality"]["shadows"]["darkness"])

        aa_primary = self._quality_controls.get("aa.primary")
        if isinstance(aa_primary, QComboBox):
            index = aa_primary.findData(self.state["quality"]["antialiasing"]["primary"])
            if index >= 0:
                aa_primary.setCurrentIndex(index)

        aa_quality = self._quality_controls.get("aa.quality")
        if isinstance(aa_quality, QComboBox):
            index = aa_quality.findData(self.state["quality"]["antialiasing"]["quality"])
            if index >= 0:
                aa_quality.setCurrentIndex(index)

        aa_post = self._quality_controls.get("aa.post")
        if isinstance(aa_post, QComboBox):
            index = aa_post.findData(self.state["quality"]["antialiasing"]["post"])
            if index >= 0:
                aa_post.setCurrentIndex(index)

        taa_check = self._quality_controls.get("taa.enabled")
        if isinstance(taa_check, QCheckBox):
            taa_check.setChecked(self.state["quality"]["taa_enabled"])

        taa_strength = self._quality_controls.get("taa.strength")
        if isinstance(taa_strength, LabeledSlider):
            taa_strength.set_value(self.state["quality"]["taa_strength"])

        taa_motion = self._quality_controls.get("taa_motion_adaptive")
        if isinstance(taa_motion, QCheckBox):
            taa_motion.setChecked(self.state["quality"]["taa_motion_adaptive"])

        fxaa_check = self._quality_controls.get("fxaa.enabled")
        if isinstance(fxaa_check, QCheckBox):
            fxaa_check.setChecked(self.state["quality"]["fxaa_enabled"])

        specular_check = self._quality_controls.get("specular.enabled")
        if isinstance(specular_check, QCheckBox):
            specular_check.setChecked(self.state["quality"]["specular_aa"])

        dithering_check = self._quality_controls.get("dithering.enabled")
        if isinstance(dithering_check, QCheckBox):
            dithering_check.setChecked(self.state["quality"]["dithering"])

        render_scale = self._quality_controls.get("render.scale")
        if isinstance(render_scale, LabeledSlider):
            render_scale.set_value(self.state["quality"]["render_scale"])

        render_policy = self._quality_controls.get("render.policy")
        if isinstance(render_policy, QComboBox):
            index = render_policy.findData(self.state["quality"]["render_policy"])
            if index >= 0:
                render_policy.setCurrentIndex(index)

        frame_limit = self._quality_controls.get("frame_rate_limit")
        if isinstance(frame_limit, LabeledSlider):
            frame_limit.set_value(self.state["quality"]["frame_rate_limit"])

        oit_check = self._quality_controls.get("oit.enabled")
        if isinstance(oit_check, QCheckBox):
            oit_check.setChecked(self.state["quality"]["oit"] == "weighted")

    def _apply_camera_ui(self) -> None:
        fov = self._camera_controls.get("fov")
        if isinstance(fov, LabeledSlider):
            fov.set_value(self.state["camera"]["fov"])

        near = self._camera_controls.get("near")
        if isinstance(near, LabeledSlider):
            near.set_value(self.state["camera"]["near"])

        far = self._camera_controls.get("far")
        if isinstance(far, LabeledSlider):
            far.set_value(self.state["camera"]["far"])

        speed = self._camera_controls.get("speed")
        if isinstance(speed, LabeledSlider):
            speed.set_value(self.state["camera"]["speed"])

        auto_rotate = self._camera_controls.get("auto_rotate")
        if isinstance(auto_rotate, QCheckBox):
            auto_rotate.setChecked(self.state["camera"]["auto_rotate"])

        rotate_speed = self._camera_controls.get("auto_rotate_speed")
        if isinstance(rotate_speed, LabeledSlider):
            rotate_speed.set_value(self.state["camera"]["auto_rotate_speed"])

    def _apply_effects_ui(self) -> None:
        bloom_enabled = self._effects_controls.get("bloom.enabled")
        if isinstance(bloom_enabled, QCheckBox):
            bloom_enabled.setChecked(self.state["effects"]["bloom_enabled"])

        bloom_intensity = self._effects_controls.get("bloom.intensity")
        if isinstance(bloom_intensity, LabeledSlider):
            bloom_intensity.set_value(self.state["effects"]["bloom_intensity"])

        bloom_threshold = self._effects_controls.get("bloom.threshold")
        if isinstance(bloom_threshold, LabeledSlider):
            bloom_threshold.set_value(self.state["effects"]["bloom_threshold"])

        bloom_spread = self._effects_controls.get("bloom.spread")
        if isinstance(bloom_spread, LabeledSlider):
            bloom_spread.set_value(self.state["effects"]["bloom_spread"])

        tonemap_enabled = self._effects_controls.get("tonemap.enabled")
        if isinstance(tonemap_enabled, QCheckBox):
            tonemap_enabled.setChecked(self.state["effects"]["tonemap_enabled"])

        tonemap_mode = self._effects_controls.get("tonemap.mode")
        if isinstance(tonemap_mode, QComboBox):
            index = tonemap_mode.findData(self.state["effects"]["tonemap_mode"])
            if index >= 0:
                tonemap_mode.setCurrentIndex(index)

        dof_enabled = self._effects_controls.get("dof.enabled")
        if isinstance(dof_enabled, QCheckBox):
            dof_enabled.setChecked(self.state["effects"]["depth_of_field"])

        dof_focus = self._effects_controls.get("dof.focus")
        if isinstance(dof_focus, LabeledSlider):
            dof_focus.set_value(self.state["effects"]["dof_focus_distance"])

        dof_blur = self._effects_controls.get("dof.blur")
        if isinstance(dof_blur, LabeledSlider):
            dof_blur.set_value(self.state["effects"]["dof_blur"])

        motion_enabled = self._effects_controls.get("motion.enabled")
        if isinstance(motion_enabled, QCheckBox):
            motion_enabled.setChecked(self.state["effects"]["motion_blur"])

        motion_amount = self._effects_controls.get("motion.amount")
        if isinstance(motion_amount, LabeledSlider):
            motion_amount.set_value(self.state["effects"]["motion_blur_amount"])

        lens_flare = self._effects_controls.get("lens_flare.enabled")
        if isinstance(lens_flare, QCheckBox):
            lens_flare.setChecked(self.state["effects"]["lens_flare"])

        vignette = self._effects_controls.get("vignette.enabled")
        if isinstance(vignette, QCheckBox):
            vignette.setChecked(self.state["effects"]["vignette"])

        vignette_strength = self._effects_controls.get("vignette.strength")
        if isinstance(vignette_strength, LabeledSlider):
            vignette_strength.set_value(self.state["effects"]["vignette_strength"])

    # ------------------------------------------------------------------
    # Utility methods
    # ------------------------------------------------------------------
    def _sync_taa_controls(self) -> None:
        primary = self.state["quality"]["antialiasing"]["primary"]
        allow_taa = primary != "msaa"
        
        taa_check = self._quality_controls.get("taa.enabled")
        if isinstance(taa_check, QCheckBox):
            taa_check.setEnabled(allow_taa)
            
        taa_strength = self._quality_controls.get("taa.strength")
        if isinstance(taa_strength, LabeledSlider):
            taa_strength.set_enabled(allow_taa)
            
        taa_motion = self._quality_controls.get("taa_motion_adaptive")
        if isinstance(taa_motion, QCheckBox):
            taa_motion.setEnabled(allow_taa)

    def _normalise_quality_state(self) -> None:
        """Ensure quality state has all required keys"""
        if "shadows" not in self.state["quality"]:
            self.state["quality"]["shadows"] = {}
        if "antialiasing" not in self.state["quality"]:
            self.state["quality"]["antialiasing"] = {}

    @staticmethod
    def _deep_update(target: Dict[str, Any], source: Dict[str, Any]) -> None:
        """Deep update dictionary recursively"""
        for key, value in source.items():
            if isinstance(value, dict) and key in target and isinstance(target[key], dict):
                GraphicsPanel._deep_update(target[key], value)
            else:
                target[key] = value

    def closeEvent(self, event) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏"""
        self.logger.info("üõë GraphicsPanel closing, exporting analysis...")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        try:
            report_path = self.graphics_logger.export_analysis_report()
            self.logger.info(f"   ‚úÖ Analysis report saved: {report_path}")
        except Exception as e:
            self.logger.error(f"   ‚ùå Failed to export analysis: {e}")
        
        super().closeEvent(event)
    
    def export_sync_analysis(self) -> None:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Python-QML"""
        try:
            report_path = self.graphics_logger.export_analysis_report()
            self.logger.info(f"üìÑ Sync analysis exported: {report_path}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑
            analysis = self.graphics_logger.analyze_qml_sync()
            
            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print("\n" + "="*60)
            print("üìä GRAPHICS SYNC ANALYSIS")
            print("="*60)
            print(f"Total changes: {analysis.get('total_events', 0)}")
            print(f"Successful QML updates: {analysis.get('successful_updates', 0)}")
            print(f"Failed QML updates: {analysis.get('failed_updates', 0)}")
            print(f"Sync rate: {analysis.get('sync_rate', 0):.1f}%")
            print("\nBy category:")
            for cat, stats in analysis.get('by_category', {}).items():
                print(f"  {cat}: {stats['total']} changes, {stats['successful']} synced")
            
            if analysis.get('errors_by_parameter'):
                print("\n‚ö†Ô∏è Parameters with errors:")
                for param, errors in analysis['errors_by_parameter'].items():
                    print(f"  {param}: {len(errors)} error(s)")
            
            print("="*60)
            print(f"Full report: {report_path}")
            print("="*60 + "\n")
            
        except Exception as e:
            self.logger.error(f"Failed to export sync analysis: {e}")
