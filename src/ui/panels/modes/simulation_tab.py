# -*- coding: utf-8 -*-
"""
Simulation tab for ModesPanel
–í–∫–ª–∞–¥–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –∏ –ø—Ä–µ—Å–µ—Ç–æ–≤
"""
from PySide6.QtWidgets import (
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QGroupBox,
    QRadioButton,
    QButtonGroup,
    QLabel,
    QComboBox,
)
from PySide6.QtCore import Signal, Qt
from PySide6.QtGui import QFont

from .state_manager import ModesStateManager
from .defaults import MODE_PRESETS, PRESET_NAMES


class SimulationTab(QWidget):
    """–í–∫–ª–∞–¥–∫–∞ —Ä–µ–∂–∏–º–∞ —Å–∏–º—É–ª—è—Ü–∏–∏"""

    # Signals
    mode_changed = Signal(str, str)  # mode_type, new_mode
    preset_changed = Signal(int)  # preset_index

    def __init__(self, state_manager: ModesStateManager, parent=None):
        super().__init__(parent)
        self.state_manager = state_manager
        self._setup_ui()
        self._apply_current_state()

    def _setup_ui(self):
        """–°–æ–∑–¥–∞—Ç—å UI"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(8, 8, 8, 8)
        layout.setSpacing(12)

        # Title
        title_label = QLabel("–†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏")
        title_font = QFont()
        title_font.setPointSize(11)
        title_font.setBold(True)
        title_label.setFont(title_font)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(title_label)

        # Preset selector
        preset_group = self._create_preset_group()
        layout.addWidget(preset_group)

        # Simulation type (Kinematics/Dynamics)
        sim_type_group = self._create_sim_type_group()
        layout.addWidget(sim_type_group)

        # Thermodynamic mode
        thermo_group = self._create_thermo_group()
        layout.addWidget(thermo_group)

        layout.addStretch()

    def _create_preset_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –≤—ã–±–æ—Ä–∞ –ø—Ä–µ—Å–µ—Ç–∞"""
        group = QGroupBox("–ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–µ—Å–µ—Ç—ã")
        layout = QVBoxLayout(group)
        layout.setSpacing(6)

        # Preset selector
        preset_layout = QHBoxLayout()
        preset_label = QLabel("–ü—Ä–µ—Å–µ—Ç:")
        self.preset_combo = QComboBox()
        self.preset_combo.addItems(PRESET_NAMES)
        self.preset_combo.setCurrentIndex(0)
        self.preset_combo.currentIndexChanged.connect(self._on_preset_changed)

        preset_layout.addWidget(preset_label)
        preset_layout.addWidget(self.preset_combo, stretch=1)
        layout.addLayout(preset_layout)

        # Preset description
        self.preset_desc_label = QLabel()
        self.preset_desc_label.setWordWrap(True)
        self.preset_desc_label.setStyleSheet("color: #888888;")
        desc_font = QFont()
        desc_font.setPointSize(8)
        self.preset_desc_label.setFont(desc_font)
        layout.addWidget(self.preset_desc_label)

        # Update description
        self._update_preset_description(0)

        return group

    def _create_sim_type_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        group = QGroupBox("–¢–∏–ø —Ä–∞—Å—á—ë—Ç–∞")
        layout = QVBoxLayout(group)
        layout.setSpacing(8)

        # Info label
        info_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ —Ä–∞—Å—á—ë—Ç–∞ —Ñ–∏–∑–∏–∫–∏:")
        info_label.setWordWrap(True)
        info_font = QFont()
        info_font.setPointSize(8)
        info_label.setFont(info_font)
        layout.addWidget(info_label)

        # Radio buttons
        self.sim_type_group = QButtonGroup()

        self.kinematics_radio = QRadioButton("–ö–∏–Ω–µ–º–∞—Ç–∏–∫–∞")
        self.kinematics_radio.setToolTip(
            "–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Ç–æ–ª—å–∫–æ –≥–µ–æ–º–µ—Ç—Ä–∏–∏.\n"
            "–ë—ã—Å—Ç—Ä–æ, –Ω–æ –±–µ–∑ —É—á—ë—Ç–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Å–∏–ª."
        )

        self.dynamics_radio = QRadioButton("–î–∏–Ω–∞–º–∏–∫–∞")
        self.dynamics_radio.setToolTip(
            "–ü–æ–ª–Ω—ã–π —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç —Å —Å–∏–ª–∞–º–∏.\n" "–¢–æ—á–Ω–æ, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤."
        )

        self.kinematics_radio.setChecked(True)

        self.sim_type_group.addButton(self.kinematics_radio, 0)
        self.sim_type_group.addButton(self.dynamics_radio, 1)

        # Connect signal
        self.sim_type_group.buttonToggled.connect(self._on_sim_type_changed)

        layout.addWidget(self.kinematics_radio)
        layout.addWidget(self.dynamics_radio)

        return group

    def _create_thermo_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É —Ç–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        group = QGroupBox("–¢–µ—Ä–º–æ–¥–∏–Ω–∞–º–∏–∫–∞ –ø–Ω–µ–≤–º–∞—Ç–∏–∫–∏")
        layout = QVBoxLayout(group)
        layout.setSpacing(8)

        # Info label
        info_label = QLabel("–ú–æ–¥–µ–ª—å –≥–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞:")
        info_label.setWordWrap(True)
        info_font = QFont()
        info_font.setPointSize(8)
        info_label.setFont(info_font)
        layout.addWidget(info_label)

        # Radio buttons
        self.thermo_group = QButtonGroup()

        self.isothermal_radio = QRadioButton("–ò–∑–æ—Ç–µ—Ä–º–∏—á–µ—Å–∫–∏–π")
        self.isothermal_radio.setToolTip(
            "–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (T = const).\n" "–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–æ–º."
        )

        self.adiabatic_radio = QRadioButton("–ê–¥–∏–∞–±–∞—Ç–∏—á–µ—Å–∫–∏–π")
        self.adiabatic_radio.setToolTip(
            "–ë–µ–∑ —Ç–µ–ø–ª–æ–æ–±–º–µ–Ω–∞ (Q = 0).\n" "–ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã."
        )

        self.isothermal_radio.setChecked(True)

        self.thermo_group.addButton(self.isothermal_radio, 0)
        self.thermo_group.addButton(self.adiabatic_radio, 1)

        # Connect signal
        self.thermo_group.buttonToggled.connect(self._on_thermo_changed)

        layout.addWidget(self.isothermal_radio)
        layout.addWidget(self.adiabatic_radio)

        return group

    def _on_preset_changed(self, index: int):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞"""
        print(f"üìã SimulationTab: –ü—Ä–µ—Å–µ—Ç –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{PRESET_NAMES[index]}'")

        # Update description
        self._update_preset_description(index)

        # Apply preset to state
        updates = self.state_manager.apply_preset(index)

        # Update UI from state (don't emit signals during update)
        if updates and not updates.get("custom"):
            self._apply_current_state()

        # Emit signal
        self.preset_changed.emit(index)

    def _update_preset_description(self, preset_index: int):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞"""
        if preset_index in MODE_PRESETS:
            desc = MODE_PRESETS[preset_index].get("description", "")
            self.preset_desc_label.setText(desc)

    def _on_sim_type_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        if self.kinematics_radio.isChecked():
            mode = "KINEMATICS"
        else:
            mode = "DYNAMICS"

        print(f"üîß SimulationTab: –¢–∏–ø —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{mode}'")

        # Update state
        self.state_manager.update_parameter("sim_type", mode)

        # Switch to custom preset if manual change
        if self.preset_combo.currentIndex() != 4:
            self.preset_combo.setCurrentIndex(4)

        # Emit signal
        self.mode_changed.emit("sim_type", mode)

    def _on_thermo_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–æ-—Ä–µ–∂–∏–º–∞"""
        if self.isothermal_radio.isChecked():
            mode = "ISOTHERMAL"
        else:
            mode = "ADIABATIC"

        print(f"üå°Ô∏è SimulationTab: –¢–µ—Ä–º–æ-—Ä–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{mode}'")

        # Update state
        self.state_manager.update_parameter("thermo_mode", mode)

        # Switch to custom preset if manual change
        if self.preset_combo.currentIndex() != 4:
            self.preset_combo.setCurrentIndex(4)

        # Emit signal
        self.mode_changed.emit("thermo_mode", mode)

    def _apply_current_state(self):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫ UI"""
        params = self.state_manager.get_parameters()

        # Block signals during update
        self.sim_type_group.blockSignals(True)
        self.thermo_group.blockSignals(True)

        # Update sim type
        sim_type = params.get("sim_type", "KINEMATICS")
        if sim_type == "KINEMATICS":
            self.kinematics_radio.setChecked(True)
        else:
            self.dynamics_radio.setChecked(True)

        # Update thermo mode
        thermo_mode = params.get("thermo_mode", "ISOTHERMAL")
        if thermo_mode == "ISOTHERMAL":
            self.isothermal_radio.setChecked(True)
        else:
            self.adiabatic_radio.setChecked(True)

        # Unblock signals
        self.sim_type_group.blockSignals(False)
        self.thermo_group.blockSignals(False)

    def set_enabled_for_running(self, running: bool):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏ –∑–∞–ø—É—â–µ–Ω–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏"""
        enabled = not running
        self.preset_combo.setEnabled(enabled)
        self.kinematics_radio.setEnabled(enabled)
        self.dynamics_radio.setEnabled(enabled)
        self.isothermal_radio.setEnabled(enabled)
        self.adiabatic_radio.setEnabled(enabled)
