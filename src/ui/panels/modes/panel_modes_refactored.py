# -*- coding: utf-8 -*-
"""
ModesPanel refactored - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≤–∫–ª–∞–¥–æ–∫
–¢–æ–Ω–∫–∏–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞–º–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
"""

from PySide6.QtWidgets import QWidget, QVBoxLayout, QTabWidget, QSizePolicy
from PySide6.QtCore import Signal

from .state_manager import ModesStateManager
from .control_tab import ControlTab
from .simulation_tab import SimulationTab
from .physics_tab import PhysicsTab
from .road_excitation_tab import RoadExcitationTab


class ModesPanel(QWidget):
    """–ü–∞–Ω–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏ - REFACTORED VERSION

    –¢–æ–Ω–∫–∏–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏.
    """

    # ===============================================================
    # SIGNALS (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º)
    # ===============================================================

    simulation_control = Signal(str)  # "start", "stop", "reset", "pause"
    mode_changed = Signal(str, str)  # mode_type, new_mode
    parameter_changed = Signal(str, float)  # parameter_name, new_value
    physics_options_changed = Signal(dict)  # Physics option toggles
    animation_changed = Signal(dict)  # Animation parameters changed

    def __init__(self, parent=None):
        super().__init__(parent)

        # State manager
        self.state_manager = ModesStateManager()

        # Create UI
        self._setup_ui()

        # Connect tab signals
        self._connect_tab_signals()

        # Size policy
        self.setSizePolicy(QSizePolicy.Policy.Preferred, QSizePolicy.Policy.Expanding)

        print("‚úÖ ModesPanel (refactored): –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    def _setup_ui(self):
        """–°–æ–∑–¥–∞—Ç—å UI —Å –≤–∫–ª–∞–¥–∫–∞–º–∏"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(4, 4, 4, 4)
        layout.setSpacing(4)

        # Tab widget
        self.tabs = QTabWidget()
        self.tabs.setTabPosition(QTabWidget.TabPosition.North)

        # Create tabs
        self.control_tab = ControlTab(self.state_manager)
        self.simulation_tab = SimulationTab(self.state_manager)
        self.physics_tab = PhysicsTab(self.state_manager)
        self.road_tab = RoadExcitationTab(self.state_manager)

        # Add tabs
        self.tabs.addTab(self.control_tab, "üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        self.tabs.addTab(self.simulation_tab, "‚öôÔ∏è –†–µ–∂–∏–º")
        self.tabs.addTab(self.physics_tab, "üîß –§–∏–∑–∏–∫–∞")
        self.tabs.addTab(self.road_tab, "üõ£Ô∏è –î–æ—Ä–æ–≥–∞")

        layout.addWidget(self.tabs)

    def _connect_tab_signals(self):
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã –≤–∫–ª–∞–¥–æ–∫ –∫ —Å–∏–≥–Ω–∞–ª–∞–º –ø–∞–Ω–µ–ª–∏"""
        # Control tab
        self.control_tab.simulation_control.connect(self._on_simulation_control)

        # Simulation tab
        self.simulation_tab.mode_changed.connect(self._on_mode_changed)
        self.simulation_tab.preset_changed.connect(self._on_preset_changed)

        # Physics tab
        self.physics_tab.physics_options_changed.connect(
            self._on_physics_options_changed
        )

        # Road tab
        self.road_tab.parameter_changed.connect(self._on_parameter_changed)
        self.road_tab.animation_changed.connect(self._on_animation_changed)

    # ===============================================================
    # SIGNAL HANDLERS (—Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –≤–∫–ª–∞–¥–æ–∫)
    # ===============================================================

    def _on_simulation_control(self, command: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–µ–π"""
        print(f"üéÆ ModesPanel: –ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è '{command}'")

        # Update UI state based on command
        if command == "start":
            self._set_running_state(True)
        elif command in ["stop", "pause", "reset"]:
            self._set_running_state(False)

        # Emit signal
        self.simulation_control.emit(command)

    def _on_mode_changed(self, mode_type: str, new_mode: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞"""
        print(f"‚öôÔ∏è ModesPanel: –†–µ–∂–∏–º '{mode_type}' –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_mode}'")
        self.mode_changed.emit(mode_type, new_mode)

    def _on_preset_changed(self, preset_index: int):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞"""
        print(f"üìã ModesPanel: –ü—Ä–∏–º–µ–Ω—ë–Ω –ø—Ä–µ—Å–µ—Ç #{preset_index}")

        # Update physics tab from state
        self.physics_tab._apply_current_state()

    def _on_physics_options_changed(self, options: dict):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ü–∏–π —Ñ–∏–∑–∏–∫–∏"""
        print(f"üîß ModesPanel: –û–ø—Ü–∏–∏ —Ñ–∏–∑–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {options}")
        self.physics_options_changed.emit(options)

    def _on_parameter_changed(self, param_name: str, value: float):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
        # print(f"üîß ModesPanel: –ü–∞—Ä–∞–º–µ—Ç—Ä '{param_name}' = {value}")
        self.parameter_changed.emit(param_name, value)

    def _on_animation_changed(self, params: dict):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏"""
        print("üé¨ ModesPanel: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        self.animation_changed.emit(params)

    def _set_running_state(self, running: bool):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        self.control_tab.set_simulation_running(running)
        self.simulation_tab.set_enabled_for_running(running)
        self.physics_tab.set_enabled_for_running(running)

    # ===============================================================
    # PUBLIC API (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º ModesPanel)
    # ===============================================================

    def get_parameters(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
        return self.state_manager.get_parameters()

    def get_physics_options(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –æ–ø—Ü–∏–∏ —Ñ–∏–∑–∏–∫–∏"""
        return self.state_manager.get_physics_options()

    def set_simulation_running(self, running: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–∑–≤–Ω–µ"""
        self._set_running_state(running)

    def validate_state(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        errors = self.state_manager.validate_state()
        if errors:
            print("‚ö†Ô∏è ModesPanel: –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
            for error in errors:
                print(f"   ‚Ä¢ {error}")
        return errors
