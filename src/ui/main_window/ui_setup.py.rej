diff a/src/ui/main_window/ui_setup.py b/src/ui/main_window/ui_setup.py	(rejected hunks)
@@ -74,111 +74,120 @@ class UISetup:
         window.chart_widget = ChartWidget(window)
         window.chart_widget.setMinimumHeight(200)
         window.main_splitter.addWidget(window.chart_widget)
 
         # Set stretch factors (3D gets more space)
         window.main_splitter.setStretchFactor(0, 3)  # 60% for 3D
         window.main_splitter.setStretchFactor(1, 2)  # 40% for charts
 
         # Add to horizontal splitter
         window.main_horizontal_splitter.addWidget(window.main_splitter)
 
         # Set as central widget
         window.setCentralWidget(window.main_horizontal_splitter)
 
         UISetup.logger.debug("✅ Система сплиттеров создана")
 
     @staticmethod
     def _setup_qml_3d_view(window: MainWindow) -> None:
         """Setup Qt Quick 3D scene with QQuickWidget
 
         Loads unified main.qml file with full suspension visualization.
 
         Args:
             window: MainWindow instance
         """
-        UISetup.logger.info("    [QML] Загрузка main.qml...")
+        supported_files = [
+            Path("assets/qml/main_v2_realism.qml"),
+            Path("assets/qml/main.qml"),
+        ]
+
+        qml_file = next((candidate for candidate in supported_files if candidate.exists()), None)
+
+        if qml_file is None:
+            supported_names = ", ".join(candidate.name for candidate in supported_files)
+            raise FileNotFoundError(
+                "Не найден ни один поддерживаемый QML-файл: "
+                f"ожидались [{supported_names}]"
+            )
+
+        UISetup.logger.info("    [QML] Загрузка %s...", qml_file.name)
 
         try:
             window._qquick_widget = QQuickWidget(window)
             window._qquick_widget.setResizeMode(
                 QQuickWidget.ResizeMode.SizeRootObjectToView
             )
 
             # Get QML engine
             engine = window._qquick_widget.engine()
 
             # ✅ КРИТИЧЕСКОЕ: Устанавливаем контекст ДО загрузки QML
             context = engine.rootContext()
             context.setContextProperty("window", window)
             UISetup.logger.info("    ✅ Window context registered")
 
             # Import paths
             from PySide6.QtCore import QLibraryInfo
 
             qml_import_path = QLibraryInfo.path(
                 QLibraryInfo.LibraryPath.Qml2ImportsPath
             )
             engine.addImportPath(str(qml_import_path))
 
             local_qml_path = Path("assets/qml")
             if local_qml_path.exists():
                 engine.addImportPath(str(local_qml_path.absolute()))
 
-            # Load QML file
-            qml_file = Path("assets/qml/main.qml")
-            if not qml_file.exists():
-                raise FileNotFoundError(f"QML file not found: {qml_file}")
-
             qml_url = QUrl.fromLocalFile(str(qml_file.absolute()))
             window._qquick_widget.setSource(qml_url)
 
             # Check status
             status = window._qquick_widget.status()
             if status == QQuickWidget.Status.Error:
                 errors = window._qquick_widget.errors()
                 error_msg = "\n".join(str(e) for e in errors)
                 raise RuntimeError(f"QML load errors:\n{error_msg}")
 
             # Get root object
             window._qml_root_object = window._qquick_widget.rootObject()
             if not window._qml_root_object:
                 raise RuntimeError("Failed to get QML root object")
 
             # Store base directory
             window._qml_base_dir = qml_file.parent.resolve()
 
-            UISetup.logger.info("    ✅ main.qml loaded successfully")
+            UISetup.logger.info("    ✅ %s loaded successfully", qml_file.name)
 
         except Exception as e:
             UISetup.logger.exception(f"    ❌ QML load failed: {e}")
 
             # Fallback: error label
             fallback = QLabel(
                 f"КРИТИЧЕСКАЯ ОШИБКА ЗАГРУЗКИ 3D СЦЕНЫ\n\n"
                 f"Ошибка: {e}\n\n"
-                f"Проверьте файл assets/qml/main.qml"
+                "Проверьте наличие файлов assets/qml/main_v2_realism.qml или assets/qml/main.qml"
             )
             fallback.setAlignment(Qt.AlignmentFlag.AlignCenter)
             fallback.setStyleSheet(
                 "background: #1a1a2e; color: #ff6b6b; "
                 "font-size: 12px; padding: 20px;"
             )
             window._qquick_widget = fallback
 
     @staticmethod
     def _setup_legacy_opengl_view(window: MainWindow) -> None:
         """Setup legacy OpenGL widget (stub)"""
         UISetup.logger.debug("_setup_legacy_opengl_view: Fallback to QML")
         UISetup._setup_qml_3d_view(window)
 
     # ------------------------------------------------------------------
     # Tabs Setup
     # ------------------------------------------------------------------
     @staticmethod
     def setup_tabs(window: MainWindow) -> None:
         """Создать вкладки с панелями параметров
 
         Tabs:
           - Геометрия (Geometry)
           - Пневмосистема (Pneumatics)
           - Режимы стабилизатора (Modes)
