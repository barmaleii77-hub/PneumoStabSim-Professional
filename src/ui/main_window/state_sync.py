"""State Sync Module - State synchronization and persistence

–ú–æ–¥—É–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫–Ω–∞.
–£–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ QSettings, –≥–µ–æ–º–µ—Ç—Ä–∏–µ–π –æ–∫–Ω–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä–æ–≤.

Russian comments / English code.
"""
from __future__ import annotations

import logging
from typing import TYPE_CHECKING, Any, Dict

from PySide6.QtCore import QByteArray, QSettings

if TYPE_CHECKING:
    from .main_window import MainWindow


class StateSync:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞

    –£–ø—Ä–∞–≤–ª—è–µ—Ç:
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏–∏
    - –°–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä–æ–≤
    - –í—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–æ–π
    - –ù–∞—á–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π Python‚ÜíQML

    Static methods –¥–ª—è –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ MainWindow.
    """

    logger = logging.getLogger(__name__)

    # ------------------------------------------------------------------
    # Settings Persistence
    # ------------------------------------------------------------------
    @staticmethod
    def restore_settings(window: MainWindow) -> None:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞ –∏–∑ QSettings

        Restores:
        - Window geometry
        - Window state
        - Splitter sizes
        - Last selected tab

        Args:
            window: MainWindow instance
        """
        settings = QSettings(window.SETTINGS_ORG, window.SETTINGS_APP)

        # Restore geometry
        geom = settings.value(window.SETTINGS_GEOMETRY)
        if isinstance(geom, QByteArray):
            window.restoreGeometry(geom)
        elif isinstance(geom, (bytes, bytearray)):
            window.restoreGeometry(QByteArray(geom))

        # Restore state
        state = settings.value(window.SETTINGS_STATE)
        if isinstance(state, QByteArray):
            window.restoreState(state)
        elif isinstance(state, (bytes, bytearray)):
            window.restoreState(QByteArray(state))

        # Restore vertical splitter
        split = settings.value(window.SETTINGS_SPLITTER)
        if window.main_splitter and isinstance(split, QByteArray):
            window.main_splitter.restoreState(split)
        elif window.main_splitter and isinstance(split, (bytes, bytearray)):
            window.main_splitter.restoreState(QByteArray(split))

        # Restore horizontal splitter
        hsplit = settings.value(window.SETTINGS_HORIZONTAL_SPLITTER)
        if window.main_horizontal_splitter and isinstance(hsplit, QByteArray):
            window.main_horizontal_splitter.restoreState(hsplit)
        elif window.main_horizontal_splitter and isinstance(hsplit, (bytes, bytearray)):
            window.main_horizontal_splitter.restoreState(QByteArray(hsplit))

        StateSync.logger.debug("‚úÖ Settings restored")

    @staticmethod
    def save_settings(window: MainWindow) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞ –≤ QSettings

        Saves:
        - Window geometry
        - Window state
        - Splitter sizes

        Args:
            window: MainWindow instance
        """
        # 1) –°–æ—Ö—Ä–∞–Ω—è–µ–º UI-—Å–æ—Å—Ç–æ—è–Ω–∏–µ (QSettings)
        settings = QSettings(window.SETTINGS_ORG, window.SETTINGS_APP)
        settings.setValue(window.SETTINGS_GEOMETRY, window.saveGeometry())
        settings.setValue(window.SETTINGS_STATE, window.saveState())
        if window.main_splitter:
            settings.setValue(
                window.SETTINGS_SPLITTER, window.main_splitter.saveState()
            )
        if window.main_horizontal_splitter:
            settings.setValue(
                window.SETTINGS_HORIZONTAL_SPLITTER,
                window.main_horizontal_splitter.saveState(),
            )

        # 2) –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON-–∫–æ–Ω—Ñ–∏–≥ —á–µ—Ä–µ–∑ SettingsManager (–±–µ–∑ –∑–∞–≥–ª—É—à–µ–∫)
        try:
            from src.common.settings_manager import get_settings_manager

            sm = get_settings_manager()

            # –°–æ–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ API
            if getattr(window, "graphics_panel", None) and hasattr(
                window.graphics_panel, "collect_state"
            ):
                g = window.graphics_panel.collect_state()
                sm.set_category("graphics", g, auto_save=False)
            if getattr(window, "geometry_panel", None) and hasattr(
                window.geometry_panel, "collect_state"
            ):
                geo = window.geometry_panel.collect_state()
                sm.set_category("geometry", geo, auto_save=False)
            if getattr(window, "pneumo_panel", None) and hasattr(
                window.pneumo_panel, "collect_state"
            ):
                pneu = window.pneumo_panel.collect_state()
                sm.set_category("pneumatic", pneu, auto_save=False)
            if getattr(window, "modes_panel", None) and hasattr(
                window.modes_panel, "collect_state"
            ):
                modes = window.modes_panel.collect_state()
                sm.set_category("modes", modes, auto_save=False)

            # –ü–∏—à–µ–º –æ–¥–∏–Ω —Ä–∞–∑
            sm.save()
            StateSync.logger.info("‚úÖ app_settings.json saved on exit")
        except Exception as e:
            # –ù–µ —Å–∫—Ä—ã–≤–∞–µ–º –æ—à–∏–±–∫—É ‚Äî –ø–æ–¥–Ω–∏–º–∞–µ–º –¥–∞–ª—å—à–µ
            StateSync.logger.critical(f"‚ùå Failed to save app_settings.json: {e}")
            raise

    # ------------------------------------------------------------------
    # Initial Synchronization
    # ------------------------------------------------------------------
    @staticmethod
    def initial_full_sync(window: MainWindow) -> None:
        """–ü–æ–ª–Ω–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Python‚ÜíQML

        Sends all graphics settings to QML to override any defaults.
        Prevents hidden QML defaults from affecting visualization.

        Args:
            window: MainWindow instance
        """
        from .qml_bridge import QMLBridge

        # –ú—è–≥–∫–∏–π —Å–±—Ä–æ—Å –≤–∏–¥–∞ (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ QML)
        try:
            QMLBridge.invoke_qml_function(window, "fullResetView")
        except Exception:
            pass

        if not getattr(window, "graphics_panel", None):
            return

        try:
            # ‚úÖ –ë–µ—Ä—ë–º –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ API –ø–∞–Ω–µ–ª–∏ (–±–µ–∑ –∞–≤—Ç–æ–¥–µ—Ñ–æ–ª—Ç–æ–≤)
            full_state: Dict[str, Any] = {}
            try:
                if hasattr(window.graphics_panel, "collect_state"):
                    full_state = window.graphics_panel.collect_state() or {}
                elif hasattr(window.graphics_panel, "get_state"):
                    full_state = window.graphics_panel.get_state() or {}
            except Exception as ex:
                StateSync.logger.warning(f"GraphicsPanel state read failed: {ex}")
                full_state = {}

            if not isinstance(full_state, dict) or not full_state:
                StateSync.logger.info("No graphics state to sync on startup")
                return

            # ‚úÖ –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
            if QMLBridge._push_batched_updates(window, full_state):
                window._last_batched_updates = full_state
                StateSync.logger.info("Initial full sync pushed as batch")
                return

            # üîÅ Fallback: –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            for cat, payload in full_state.items():
                if not isinstance(payload, dict):
                    continue
                methods = QMLBridge.QML_UPDATE_METHODS.get(str(cat), ())
                sent = False
                for m in methods:
                    if QMLBridge.invoke_qml_function(window, m, payload):
                        sent = True
                        break
                # –õ–æ–≥ –≤ GraphicsLogger (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
                QMLBridge._log_graphics_change(window, str(cat), payload, applied=sent)

            StateSync.logger.info("‚úÖ Initial full sync completed")
        except Exception as e:
            StateSync.logger.error(f"Initial full sync failed: {e}")

    # ------------------------------------------------------------------
    # UI Layout Reset
    # ------------------------------------------------------------------
    @staticmethod
    def reset_ui_layout(window: MainWindow) -> None:
        """–°–±—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ UI –∫ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º

        Resets:
        - Vertical splitter (3D:Charts = 3:2)
        - Horizontal splitter (Scene:Panels = 3:1)

        Args:
            window: MainWindow instance
        """
        if window.main_splitter:
            window.main_splitter.setSizes([3, 2])

        if window.main_horizontal_splitter:
            window.main_horizontal_splitter.setSizes([3, 1])

        if hasattr(window, "status_bar") and window.status_bar:
            window.status_bar.showMessage("–ú–∞–∫–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–±—Ä–æ—à–µ–Ω", 2000)

        StateSync.logger.info("UI layout reset to defaults")
