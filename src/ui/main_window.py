"""
Main window for PneumoStabSim application
Qt Quick 3D rendering with QQuickWidget (no createWindowContainer)
–†–£–°–°–ö–ò–ô –ò–ù–¢–ï–†–§–ï–ô–° (Russian UI)
"""
from PySide6.QtWidgets import (
    QMainWindow, QStatusBar, QDockWidget, QWidget, QMenuBar, QToolBar, QLabel,
    QVBoxLayout, QHBoxLayout, QFileDialog, QMessageBox, QApplication, QSplitter,
    QTabWidget, QScrollArea
)
from PySide6.QtCore import (
    Qt,
    QTimer,
    Slot,
    QSettings,
    QUrl,
    QFileInfo,
    QMetaObject,
    Q_ARG,
    QByteArray,
)
from PySide6.QtGui import QAction, QKeySequence
from PySide6.QtQuickWidgets import QQuickWidget
import logging
import json
import numpy as np
import time
from pathlib import Path
from typing import Optional, Dict, Any

from src.ui.charts import ChartWidget
from src.ui.panels import GeometryPanel, PneumoPanel, ModesPanel, RoadPanel, GraphicsPanel
from ..runtime import SimulationManager, StateSnapshot


class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Qt Quick 3D (RHI/Direct3D)
    
    Main application window with Qt Quick 3D rendering (RHI/Direct3D)
    RUSSIAN UI - –†—É—Å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    """
    SETTINGS_ORG = "PneumoStabSim"
    SETTINGS_APP = "PneumoStabSimApp"
    SETTINGS_GEOMETRY = "MainWindow/Geometry"
    SETTINGS_STATE = "MainWindow/State"
    SETTINGS_SPLITTER = "MainWindow/Splitter"
    SETTINGS_HORIZONTAL_SPLITTER = "MainWindow/HorizontalSplitter"
    SETTINGS_LAST_TAB = "MainWindow/LastTab"
    SETTINGS_LAST_PRESET = "Presets/LastPath"

    QML_UPDATE_METHODS: Dict[str, tuple[str, ...]] = {
        "geometry": ("applyGeometryUpdates", "updateGeometry"),
        "animation": ("applyAnimationUpdates", "updateAnimation"),
        "lighting": ("applyLightingUpdates", "updateLighting"),
        "materials": ("applyMaterialUpdates", "updateMaterials"),
        "environment": ("applyEnvironmentUpdates", "updateEnvironment"),
        "quality": ("applyQualityUpdates", "updateQuality"),
        "camera": ("applyCameraUpdates", "updateCamera"),
        "effects": ("applyEffectsUpdates", "updateEffects"),
    }

    WHEEL_KEY_MAP = {
        "LP": "fl",
        "PP": "fr",
        "LZ": "rl",
        "PZ": "rr",
    }

    def __init__(self, use_qml_3d: bool = True, force_optimized: bool = False):
        super().__init__()
        
        # Store visualization backend choice
        self.use_qml_3d = use_qml_3d
        self.force_optimized = force_optimized
        
        backend_name = "Qt Quick 3D (–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è v4.1+)" if use_qml_3d else "Legacy OpenGL"
        if force_optimized:
            backend_name += " –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô"
        else:
            backend_name += " –û–°–ù–û–í–ù–ê–Ø"
        self.setWindowTitle(f"PneumoStabSim - {backend_name}")
        
        self.resize(1400, 900)
        self.setMinimumSize(1200, 800)
        self.setWindowState(Qt.WindowState.WindowNoState)

        # Logging
        self.logger = logging.getLogger(self.__class__.__name__)
        
        print("MainWindow: –°–æ–∑–¥–∞–Ω–∏–µ SimulationManager...")
        
        # Simulation manager
        try:
            self.simulation_manager = SimulationManager(self)
            print("‚úÖ SimulationManager —Å–æ–∑–¥–∞–Ω (–Ω–µ –∑–∞–ø—É—â–µ–Ω)")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SimulationManager: {e}")
            import traceback
            traceback.print_exc()
            raise

        # QML update system
        self._qml_update_queue: Dict[str, Dict[str, Any]] = {}
        self._qml_flush_timer = QTimer()
        self._qml_flush_timer.setSingleShot(True)
        self._qml_flush_timer.timeout.connect(self._flush_qml_updates)
        
        # State tracking
        self.current_snapshot: Optional[StateSnapshot] = None
        self.is_simulation_running = False
        self._sim_started = False

        # Geometry converter for Python‚ÜîQML integration
        from src.ui.geometry_bridge import create_geometry_converter
        self.geometry_converter = create_geometry_converter()
        print("‚úÖ GeometryBridge —Å–æ–∑–¥–∞–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Python‚ÜîQML")

        # Panels references
        self.geometry_panel: Optional[GeometryPanel] = None
        self.pneumo_panel: Optional[PneumoPanel] = None
        self.modes_panel: Optional[ModesPanel] = None
        self.road_panel: Optional[RoadPanel] = None
        self.graphics_panel: Optional[GraphicsPanel] = None
        self.chart_widget: Optional[ChartWidget] = None
        
        # Tab widget and splitters
        self.tab_widget: Optional[QTabWidget] = None
        self.main_splitter: Optional[QSplitter] = None
        self.main_horizontal_splitter: Optional[QSplitter] = None

        # Qt Quick 3D view reference
        self._qquick_widget: Optional[QQuickWidget] = None
        self._qml_root_object = None

        print("MainWindow: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ UI...")
        
        # Build UI
        self._setup_central()
        print("  ‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥ Qt Quick 3D –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        self._setup_tabs()
        print("  ‚úÖ –í–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        self._setup_menus()
        print("  ‚úÖ –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        
        self._setup_toolbar()
        print("  ‚úÖ –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        
        self._setup_status_bar()
        print("  ‚úÖ –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        
        self._connect_simulation_signals()
        print("  ‚úÖ –°–∏–≥–Ω–∞–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

        # Render timer (UI thread ~60 FPS)
        self.render_timer = QTimer(self)
        self.render_timer.timeout.connect(self._update_render)
        self.render_timer.start(16)
        print("  ‚úÖ –¢–∞–π–º–µ—Ä —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω")

        print("  ‚è∏Ô∏è  SimulationManager –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø–æ—Å–ª–µ window.show()")

        # Restore settings
        self._restore_settings()
        print("  ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

        self.logger.info("–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ (Qt Quick 3D) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        print("‚úÖ MainWindow.__init__() –∑–∞–≤–µ—Ä—à—ë–Ω")

    # ------------------------------------------------------------------
    # UI Construction - –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–†–ê–ê!
    # ------------------------------------------------------------------
    def _setup_central(self):
        """–°–æ–∑–¥–∞—Ç—å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥ —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º —Å–ø–ª–∏—Ç—Ç–µ—Ä–∞–º–∏
        
        Create central view with horizontal and vertical splitters:
        Layout: [3D Scene (top) + Charts (bottom)] | [Control Panels (right)]
        """
        print("    _setup_central: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–ø–ª–∏—Ç—Ç–µ—Ä–æ–≤...")
        
        # Create main horizontal splitter (left: scene+charts, right: panels)
        self.main_horizontal_splitter = QSplitter(Qt.Orientation.Horizontal)
        self.main_horizontal_splitter.setObjectName("MainHorizontalSplitter")
        
        # Create vertical splitter for left side (scene + charts)
        self.main_splitter = QSplitter(Qt.Orientation.Vertical)
        self.main_splitter.setObjectName("SceneChartsSplitter")
        
        # Top section of vertical splitter: 3D scene
        if self.use_qml_3d:
            self._setup_qml_3d_view()
        else:
            self._setup_legacy_opengl_view()
        
        if self._qquick_widget:
            self.main_splitter.addWidget(self._qquick_widget)
        
        # Bottom section of vertical splitter: Charts
        self.chart_widget = ChartWidget(self)
        self.chart_widget.setMinimumHeight(200)  # Minimum chart height
        self.main_splitter.addWidget(self.chart_widget)
        
        # Set stretch factors for vertical splitter (3D scene gets more space)
        self.main_splitter.setStretchFactor(0, 3)  # 60% for 3D
        self.main_splitter.setStretchFactor(1, 2)  # 40% for charts
        
        # Add vertical splitter to left side of horizontal splitter
        self.main_horizontal_splitter.addWidget(self.main_splitter)
        
        # Right side will be added in _setup_tabs() method
        
        # Set as central widget
        self.setCentralWidget(self.main_horizontal_splitter)
        
        print("    ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–ø–ª–∏—Ç—Ç–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–∞ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π + –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π)")

    def _setup_qml_3d_view(self):
        """Setup Qt Quick 3D full suspension scene"""
        print("    [QML] –ó–∞–≥—Ä—É–∑–∫–∞ QML —Ñ–∞–π–ª–∞...")
        
        try:
            self._qquick_widget = QQuickWidget(self)
            self._qquick_widget.setResizeMode(QQuickWidget.ResizeMode.SizeRootObjectToView)
            
            # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: main_optimized.qml —Ç–µ–ø–µ—Ä—å –û–°–ù–û–í–ù–û–ô —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if self.force_optimized:
                print(f"    üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ main_optimized.qml")
                qml_path = Path("assets/qml/main_optimized.qml")
                allow_fallback = False  # –í –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ fallback –∑–∞–ø—Ä–µ—â–µ–Ω
            else:
                print(f"    üåü –û–°–ù–û–í–ù–û–ô –†–ï–ñ–ò–ú: –ó–∞–≥—Ä—É–∑–∫–∞ main_optimized.qml –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è)")
                qml_path = Path("assets/qml/main_optimized.qml")  # –¢–ï–ü–ï–†–¨ –û–°–ù–û–í–ù–ù–û–ô –§–ê–ô–õ!
                allow_fallback = True   # –†–∞–∑—Ä–µ—à–µ–Ω fallback –∫ main.qml —Ç–æ–ª—å–∫–æ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            
            print(f"    üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–ì–†–£–ó–ö–ò QML:")
            print(f"       –¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª: {qml_path}")
            print(f"       –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {qml_path.exists()}")
            print(f"       Fallback —Ä–∞–∑—Ä–µ—à–µ–Ω: {allow_fallback}")
            
            if qml_path.exists():
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    file_size = qml_path.stat().st_size
                    print(f"       –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:,} –±–∞–π—Ç")
                    
                    if qml_path.name == "main_optimized.qml":
                        if file_size > 50000:  # main_optimized.qml –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ~57KB+
                            print(f"    ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–£–Æ –≤–µ—Ä—Å–∏—é (–æ—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è)!")
                            qml_url = QUrl.fromLocalFile(str(qml_path.absolute()))
                        else:
                            raise ValueError(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª ({file_size} –±–∞–π—Ç), –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
                    else:  # main.qml (—Ç–µ–ø–µ—Ä—å fallback)
                        if file_size > 30000:  # main.qml –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–º —Å IBL
                            print(f"    ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –†–ê–°–®–ò–†–ï–ù–ù–£–Æ –≤–µ—Ä—Å–∏—é (fallback)!")
                            qml_url = QUrl.fromLocalFile(str(qml_path.absolute()))
                        else:
                            raise ValueError(f"–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª ({file_size} –±–∞–π—Ç), –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
                    
                    print(f"    üìÇ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {qml_url.toString()}")
                    print(f"    üöÄ –§–∞–π–ª: {qml_path.name}")
                        
                except Exception as file_error:
                    print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ {qml_path.name}: {file_error}")
                    if not allow_fallback:
                        print(f"    ‚ùå –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: Fallback –∑–∞–ø—Ä–µ—â–µ–Ω!")
                        raise file_error
                    else:
                        raise file_error  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è fallback
                        
            else:
                error_msg = f"–§–∞–π–ª {qml_path.name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                if not allow_fallback:
                    print(f"    ‚ùå –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: {error_msg}")
                    raise FileNotFoundError(error_msg)
                else:
                    raise FileNotFoundError(error_msg)  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è fallback
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            print(f"    üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º source: {qml_url.toString()}")
            self._qquick_widget.setSource(qml_url)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
            status = self._qquick_widget.status()
            print(f"    üìä QML —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏: {status}")
            
            if status == QQuickWidget.Status.Error:
                errors = self._qquick_widget.errors()
                error_messages = [str(e) for e in errors]
                error_msg = "\n".join(error_messages)
                print(f"    ‚ùå –û–®–ò–ë–ö–ò QML –ó–ê–ì–†–£–ó–ö–ò:")
                for i, error in enumerate(error_messages, 1):
                    print(f"       {i}. {error}")
                
                if not allow_fallback:
                    print(f"    ‚ùå –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ QML")
                    raise RuntimeError(f"–û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ QML (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º):\n{error_msg}")
                else:
                    raise RuntimeError(f"–û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ QML:\n{error_msg}")
                    
            elif status == QQuickWidget.Status.Loading:
                print(f"    ‚è≥ QML —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
            elif status == QQuickWidget.Status.Ready:
                print(f"    ‚úÖ QML —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç
            self._qml_root_object = self._qquick_widget.rootObject()
            if not self._qml_root_object:
                error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç QML"
                if not allow_fallback:
                    print(f"    ‚ùå –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: {error_msg}")
                    raise RuntimeError(error_msg)
                else:
                    raise RuntimeError(error_msg)
            
            print(f"    [OK] ‚úÖ QML —Ñ–∞–π–ª '{qml_path.name}' –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")

            if self._qml_update_queue:
                self._flush_qml_updates
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            critical_properties = ['glassIOR', 'userFrameLength', 'bloomEnabled', 'metalRoughness', 'iblEnabled', 'fogEnabled', 'iblTextureReady']
            print(f"    üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤:")
            optimized_props = 0
            extended_props = 0
            for prop in critical_properties:
                try:
                    if hasattr(self._qml_root_object, 'property'):
                        value = self._qml_root_object.property(prop)
                        print(f"    ‚úÖ {prop}: {value}")
                        if prop in ['iblEnabled', 'fogEnabled']:
                            optimized_props += 1  # –≠—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –µ—Å—Ç—å –≤ –æ–±–µ–∏—Ö –≤–µ—Ä—Å–∏—è—Ö
                        if prop in ['iblTextureReady'] and value is not None:
                            extended_props += 1  # –≠—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
                    else:
                        print(f"    ‚ùå {prop}: property() –º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                except Exception as e:
                    print(f"    ‚ùå {prop}: –æ—à–∏–±–∫–∞ - {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤–µ—Ä—Å–∏–π)
            update_functions = [
                'updateGeometry', 'updateMaterials', 'updateLighting', 'updateEffects', 
                'updateEnvironment', 'updateQuality', 'updateCamera',
                'applyBatchedUpdates', 'applyGeometryUpdates', 'applyMaterialUpdates',
                'resolvedTonemapMode'  # –§—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            ]
            print(f"    üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê —Ñ—É–Ω–∫—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
            available_functions = []
            extended_functions = []
            for func_name in update_functions:
                try:
                    if hasattr(self._qml_root_object, func_name):
                        print(f"    ‚úÖ –§—É–Ω–∫—Ü–∏—è {func_name}() –¥–æ—Å—Ç—É–ø–Ω–∞")
                        available_functions.append(func_name)
                        if func_name in ['resolvedTonemapMode']:
                            extended_functions.append(func_name)
                    else:
                        print(f"    ‚ùå –§—É–Ω–∫—Ü–∏—è {func_name}() –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                except Exception as e:
                    print(f"    ‚ùå –§—É–Ω–∫—Ü–∏—è {func_name}(): –æ—à–∏–±–∫–∞ - {e}")
            
            print(f"    üìä –ò–¢–û–ì–û –¥–æ—Å—Ç—É–ø–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(available_functions)}/{len(update_functions)}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ —Å–≤–æ–π—Å—Ç–≤
            if len(available_functions) >= 10 and optimized_props >= 1:
                print(f"    üöÄ –ü–û–î–¢–í–ï–†–î–ñ–î–ï–ù–û: –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è (v4.1+) - –û–°–ù–û–í–ù–ê–Ø –í–ï–†–°–ò–Ø!")
                print(f"    ‚ú® –î–æ—Å—Ç—É–ø–Ω—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: IBL, —Ç—É–º–∞–Ω, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, –ø–æ–ª–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
                print(f"    üé® –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –í—Å–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ GraphicsPanel, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è")
            elif extended_props >= 1 or len(extended_functions) >= 1:
                print(f"    üåü –ü–û–î–¢–í–ï–†–î–ñ–î–ï–ù–û: –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å IBL —Å–∏—Å—Ç–µ–º–æ–π (fallback)!")
                print(f"    ‚ú® –î–æ—Å—Ç—É–ø–Ω—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: IBL —Å–∏—Å—Ç–µ–º–∞, —É–ª—É—á—à–µ–Ω–Ω—ã–µ pointer handlers, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
                print(f"    üé® –ü–æ–¥–¥–µ—Ä–∂–∫–∞: ExtendedSceneEnvironment, HDR –∑–∞–≥—Ä—É–∑–∫–∞, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã")
            elif len(available_functions) >= 5:
                print(f"    ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ë–ê–ó–û–í–ê–Ø –≤–µ—Ä—Å–∏—è (v2.1)")
                print(f"    üìù –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            else:
                print(f"    ‚ùå –ö–†–ò–¢–ò–ß–ù–û: –≤–µ—Ä—Å–∏—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞")
            
        except Exception as e:
            if not allow_fallback:
                print(f"    [CRITICAL] –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞")
                print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
                import traceback
                traceback.print_exc()
                raise e  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            
            print(f"    [ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ main_optimized.qml: {e}")
            print(f"    üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback: main.qml")
            
            # Fallback –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω)
            try:
                fallback_path = Path("assets/qml/main.qml")
                
                if not fallback_path.exists():
                    raise FileNotFoundError(f"Fallback —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {fallback_path}")
                
                qml_url = QUrl.fromLocalFile(str(fallback_path.absolute()))
                print(f"    üìÇ Fallback –ø—É—Ç—å: {qml_url.toString()}")
                
                self._qquick_widget.setSource(qml_url)
                
                if self._qquick_widget.status() == QQuickWidget.Status.Error:
                    errors = self._qquick_widget.errors()
                    error_msg = "\n".join(str(e) for e in errors)
                    raise RuntimeError(f"–û—à–∏–±–∫–∏ fallback QML:\n{error_msg}")
                
                self._qml_root_object = self._qquick_widget.rootObject()
                if not self._qml_root_object:
                    raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç fallback QML")
                
                print(f"    [FALLBACK] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω main.qml –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
                print(f"    üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å IBL")
                
            except Exception as fallback_error:
                print(f"    [CRITICAL] –û—à–∏–±–∫–∞ fallback –∑–∞–≥—Ä—É–∑–∫–∏: {fallback_error}")
                import traceback
                traceback.print_exc()
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –≤–º–µ—Å—Ç–æ –ø–∞–¥–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                fallback = QLabel(
                    "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò 3D –°–¶–ï–ù–´\n\n"
                    f"–û—Å–Ω–æ–≤–Ω–∞—è: {e}\n"
                    f"Fallback: {fallback_error}\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã assets/qml/main*.qml\n"
                    f"–†–µ–∂–∏–º: {'–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô' if not allow_fallback else '–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô'}"
                )
                fallback.setAlignment(Qt.AlignmentFlag.AlignCenter)
                fallback.setStyleSheet("background: #1a1a2e; color: #ff6b6b; font-size: 12px; padding: 20px;")
                self._qquick_widget = fallback
                print(f"    [WARNING] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∑–∞–≥–ª—É—à–∫–∞-–≤–∏–¥–∂–µ—Ç")
                return

    def _setup_legacy_opengl_view(self):
        """Setup legacy OpenGL widget"""
        print("    _setup_legacy_opengl_view: –ó–∞–≥—Ä—É–∑–∫–∞ legacy QML...")
        # Use same loader but prefer optimized QML
        self._setup_qml_3d_view()

    def _setup_tabs(self):
        """–°–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫–∏ —Å –ø–∞–Ω–µ–ª—è–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Å–ø—Ä–∞–≤–∞ –æ—Ç —Å—Ü–µ–Ω—ã —á–µ—Ä–µ–∑ —Å–ø–ª–∏—Ç—Ç–µ—Ä)
        
        Create tabbed panels on the right side with resizable splitter:
          - –ì–µ–æ–º–µ—Ç—Ä–∏—è (Geometry)
          - –ü–Ω–µ–≤–º–æ—Å–∏—Å—Ç–µ–º–∞ (Pneumatics)
          - –†–µ–∂–∏–º—ã —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä–∞ (Modes)
          - –ì—Ä–∞—Ñ–∏–∫–∞ (Graphics settings)
          - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (Visualization - stub)
          - –î–∏–Ω–∞–º–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è (Road/Dynamics - stub)
        """
        print("    _setup_tabs: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ —Å —Ä–µ—Å–∞–π–∑–±–∞—Ä–æ–º...")
        
        # Create tab widget
        self.tab_widget = QTabWidget(self)
        self.tab_widget.setObjectName("ParameterTabs")
        self.tab_widget.setMinimumWidth(300)  # Reduced minimum width
        self.tab_widget.setMaximumWidth(600)  # Increased maximum width for resizing
        
        # Tab 1: –ì–µ–û–ú–ï–¢–†–ò–Ø (Geometry)
        self.geometry_panel = GeometryPanel(self)
        scroll_geometry = QScrollArea()
        scroll_geometry.setWidgetResizable(True)
        scroll_geometry.setWidget(self.geometry_panel)
        scroll_geometry.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.tab_widget.addTab(scroll_geometry, "–ì–µ–æ–º–µ—Ç—Ä–∏—è")
        print("      ‚úÖ –í–∫–ª–∞–¥–∫–∞ '–ì–µ–æ–º–µ—Ç—Ä–∏—è' —Å–æ–∑–¥–∞–Ω–∞")
        
        # Tab 2: –ü–ù–ï–í–ú–û–°–ò–°–¢–ï–ú–ê (Pneumatics)
        self.pneumo_panel = PneumoPanel(self)
        scroll_pneumo = QScrollArea()
        scroll_pneumo.setWidgetResizable(True)
        scroll_pneumo.setWidget(self.pneumo_panel)
        scroll_pneumo.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.tab_widget.addTab(scroll_pneumo, "–ü–Ω–µ–≤–º–æ—Å–∏—Å—Ç–µ–º–∞")
        print("      ‚úÖ –í–∫–ª–∞–¥–∫–∞ '–ü–Ω–µ–≤–º–æ—Å–∏—Å—Ç–µ–º–∞' —Å–æ–∑–¥–∞–Ω–∞")
        
        # Tab 3: –†–ï–ñ–ò–ú–´ –°–¢–ê–ë–ò–õ–ò–ó–ê–¢–û–†–ê (Modes)
        self.modes_panel = ModesPanel(self)
        scroll_modes = QScrollArea()
        scroll_modes.setWidgetResizable(True)
        scroll_modes.setWidget(self.modes_panel)
        scroll_modes.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.tab_widget.addTab(scroll_modes, "–†–µ–∂–∏–º—ã —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä–∞")
        print("      ‚úÖ –í–∫–ª–∞–¥–∫–∞ '–†–µ–∂–∏–º—ã —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä–∞' —Å–æ–∑–¥–∞–Ω–∞")
        
        # Tab 4: –ì–†–ê–§–ò–ö–ê –ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å)
        self.graphics_panel = GraphicsPanel(self)
        # –ù–µ –ø–æ–º–µ—â–∞–µ–º –≤ scroll area, —Ç–∞–∫ –∫–∞–∫ –ø–∞–Ω–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.tab_widget.addTab(self.graphics_panel, "üé® –ì—Ä–∞—Ñ–∏–∫–∞")
        print("      ‚úÖ –í–∫–ª–∞–¥–∫–∞ '–ì—Ä–∞—Ñ–∏–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è' —Å–æ–∑–¥–∞–Ω–∞")
        
        # Tab 5: –î–ò–ù–ê–ú–ò–ö–ê –î–í–ò–ñ–ï–ù–ò–Ø (Road/Dynamics - stub, NO CSV loading!)
        dynamics_stub = QWidget()
        dynamics_layout = QVBoxLayout(dynamics_stub)
        dynamics_label = QLabel(
            "–î–∏–Ω–∞–º–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è\n\n"
            "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–æ—Ä–æ–≥–∏\n"
            "(–ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø—Ä–æ–º—Ç–æ–º)"
        )
        dynamics_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        dynamics_label.setStyleSheet("color: #888; font-size: 12px; padding: 20px;")
        dynamics_layout.addWidget(dynamics_label)
        dynamics_layout.addStretch()
        self.tab_widget.addTab(dynamics_stub, "–î–∏–Ω–∞–º–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è")
        print("      ‚úÖ –í–∫–ª–∞–¥–∫–∞ '–î–∏–Ω–∞–º–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è' —Å–æ–∑–¥–∞–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)")
        
        # Add tab widget to right side of horizontal splitter
        self.main_horizontal_splitter.addWidget(self.tab_widget)
        
        # Set stretch factors for horizontal splitter
        self.main_horizontal_splitter.setStretchFactor(0, 3)  # 75% for scene+charts
        self.main_horizontal_splitter.setStretchFactor(1, 1)  # 25% for panels
        
        # Connect panel signals
        self._wire_panel_signals()
        
        # Restore last selected tab
        settings = QSettings(self.SETTINGS_ORG, self.SETTINGS_APP)
        last_tab = settings.value(self.SETTINGS_LAST_TAB, 0, type=int)
        if 0 <= last_tab < self.tab_widget.count():
            self.tab_widget.setCurrentIndex(last_tab)
        
        # Save selected tab on change
        self.tab_widget.currentChanged.connect(self._on_tab_changed)
        
        print("    ‚úÖ –í–∫–ª–∞–¥–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –≥–æ—Ä–∏–∑–æ–Ω–∞–ª—å–Ω–æ–º—É —Å–ø–ª–∏—Ç—Ç–µ—Ä—É")

    @Slot(int)
    def _on_tab_changed(self, index: int):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É / Save selected tab"""
        settings = QSettings(self.SETTINGS_ORG, self.SETTINGS_APP)
        settings.setValue(self.SETTINGS_LAST_TAB, index)
        
        tab_names = [
            "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–ü–Ω–µ–≤–º–æ—Å–∏—Å—Ç–µ–º–∞", "–†–µ–∂–∏–º—ã —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä–∞",
            "–ì—Ä–∞—Ñ–∏–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "–î–∏–Ω–∞–º–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è"
        ]
        if 0 <= index < len(tab_names):
            self.logger.debug(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: {tab_names[index]}")

    def _wire_panel_signals(self):
        """Connect panel signals to simulation/state bus"""
        bus = self.simulation_manager.state_bus

        # Geometry updates
        if self.geometry_panel:
            self.geometry_panel.parameter_changed.connect(
                lambda name, val: [
                    self.logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä –≥–µ–æ–º–µ—Ç—Ä–∏–∏ {name}={val}"),
                    print(f"üîß GeometryPanel: {name}={val}")
                ])
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–∫–ª—é—á–∞–µ–º geometry_changed —Å–∏–≥–Ω–∞–ª –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É QML
            self.geometry_panel.geometry_changed.connect(self._on_geometry_changed_qml)
            print("‚úÖ –°–∏–≥–Ω–∞–ª—ã GeometryPanel –ø–æ–¥–∫–ª—é—á–µ–Ω—ã (geometry_changed ‚Üí QML)")

        # Pneumatic panel
        if self.pneumo_panel:
            # –í–†–ï–ú–ï–ù–ù–ê–Ø –ó–ê–ì–õ–£–®–ö–ê - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            self.pneumo_panel.mode_changed.connect(lambda mode_type, new_mode: print(f"üîß Mode changed: {mode_type} -> {new_mode}"))
            self.pneumo_panel.parameter_changed.connect(lambda name, value: print(f"üîß Pneumo param: {name} = {value}"))
            print("‚úÖ –°–∏–≥–Ω–∞–ª—ã PneumoPanel –ø–æ–¥–∫–ª—é—á–µ–Ω—ã (–ó–ê–ì–õ–£–®–ö–ê)")

        # Modes panel
        if self.modes_panel:
            # Simulation control
            self.modes_panel.simulation_control.connect(self._on_sim_control)
            print("‚úÖ –°–∏–≥–Ω–∞–ª simulation_control –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Mode changes (–∑–∞–≥–ª—É—à–∫–∞)
            self.modes_panel.mode_changed.connect(lambda mode_type, new_mode: print(f"üîß Mode changed: {mode_type} -> {new_mode}"))
            
            # Parameter changes (–∑–∞–≥–ª—É—à–∫–∞)
            self.modes_panel.parameter_changed.connect(lambda n, v: print(f"üîß Param: {n} = {v}"))
            
            # ‚ú® –ù–û–í–û–ï: –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
            self.modes_panel.animation_changed.connect(self._on_animation_changed)
            print("‚úÖ –°–∏–≥–Ω–∞–ª animation_changed –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ _on_animation_changed")
            
            print("‚úÖ –°–∏–≥–Ω–∞–ª—ã ModesPanel –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

        # Graphics panel  
        if self.graphics_panel:
            # Lighting changes
            self.graphics_panel.lighting_changed.connect(self._on_lighting_changed)
            print("‚úÖ –°–∏–≥–Ω–∞–ª lighting_changed –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Material changes
            self.graphics_panel.material_changed.connect(self._on_material_changed)
            print("‚úÖ –°–∏–≥–Ω–∞–ª material_changed –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Environment changes
            self.graphics_panel.environment_changed.connect(self._on_environment_changed)  
            print("‚úÖ –°–∏–≥–Ω–∞–ª environment_changed –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Quality changes
            self.graphics_panel.quality_changed.connect(self._on_quality_changed)
            print("‚úÖ –°–∏–≥–Ω–∞–ª quality_changed –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Camera changes
            self.graphics_panel.camera_changed.connect(self._on_camera_changed)
            print("‚úÖ –°–∏–≥–Ω–∞–ª camera_changed –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Effects changes
            self.graphics_panel.effects_changed.connect(self._on_effects_changed)
            print("‚úÖ –°–∏–≥–Ω–∞–ª effects_changed –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Preset applied
            self.graphics_panel.preset_applied.connect(self._on_preset_applied)
            print("‚úÖ –°–∏–≥–Ω–∞–ª preset_applied –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            print("‚úÖ –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã GraphicsPanel –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

    @Slot(dict)
    def _on_geometry_changed_qml(self, geometry_params: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ QML
        
        Args:
            geometry_params: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∏–∑ GeometryPanel
        """
        print(f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        print(f"üî∫ MainWindow: –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª geometry_changed –æ—Ç –ø–∞–Ω–µ–ª–∏")
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ({len(geometry_params)}): {list(geometry_params.keys())}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        key_params = ['frameLength', 'leverLength', 'trackWidth', 'rodPosition']
        print(f"   –ö–ª—é—á–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
        for key in key_params:
            if key in geometry_params:
                print(f"      {key} = {geometry_params[key]}")
        print(f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        
        self.logger.info(f"–ì–µ–æ–º–µ—Ç—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞: {len(geometry_params)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º QML —Å—Ü–µ–Ω—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
        if self._qml_root_object:
            try:
                print(f"   üîß –í—ã–∑—ã–≤–∞–µ–º updateGeometry() –≤ QML...")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º QMetaObject.invokeMethod() –¥–ª—è –≤—ã–∑–æ–≤–∞ QML —Ñ—É–Ω–∫—Ü–∏–∏
                from PySide6.QtCore import QMetaObject, Q_ARG, Qt
                
                success = QMetaObject.invokeMethod(
                    self._qml_root_object,
                    "updateGeometry",
                    Qt.ConnectionType.DirectConnection,
                    Q_ARG("QVariant", geometry_params)
                )
                
                if success:
                    print(f"   ‚úÖ QML updateGeometry() –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º QML widget –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if self._qquick_widget:
                        self._qquick_widget.update()
                        print(f"   üîÑ QML widget –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                    
                    self.status_bar.showMessage("–ì–µ–æ–º–µ—Ç—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ 3D —Å—Ü–µ–Ω–µ")
                    print(f"üìä –°—Ç–∞—Ç—É—Å: –ì–µ–æ–º–µ—Ç—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                else:
                    print(f"   ‚ùå QML updateGeometry() –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∑–≤–∞—Ç—å")
                    # Fallback –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
                    self._set_geometry_properties_fallback(geometry_params)
                    
            except Exception as e:
                print(f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –≤ QML!")
                print(f"   –û—à–∏–±–∫–∞: {e}")
                print(f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –≤ QML: {e}")
                self.status_bar.showMessage(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏: {e}")
                import traceback
                traceback.print_exc()
                
                # Fallback –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
                self._set_geometry_properties_fallback(geometry_params)
        else:
            print(f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            print(f"‚ùå MainWindow: QML –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            print(f"   –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é")
            print(f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            self.status_bar.showMessage("QML –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏")
    
    def _set_geometry_properties_fallback(self, geometry_params: dict):
        """Fallback: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö QML —Å–≤–æ–π—Å—Ç–≤ –Ω–∞–ø—Ä—è–º—É—é
        
        Args:
            geometry_params: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏
        """
        print(f"üîß Fallback: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö QML —Å–≤–æ–π—Å—Ç–≤...")
        
        prop_count = 0
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        if 'frameLength' in geometry_params:
            self._qml_root_object.setProperty("userFrameLength", geometry_params['frameLength'])
            print(f"   ‚úÖ Set userFrameLength = {geometry_params['frameLength']}")
            prop_count += 1
        
        if 'frameHeight' in geometry_params:
            self._qml_root_object.setProperty("userFrameHeight", geometry_params['frameHeight'])
            print(f"   ‚úÖ Set userFrameHeight = {geometry_params['frameHeight']}")
            prop_count += 1
        
        if 'frameBeamSize' in geometry_params:
            self._qml_root_object.setProperty("userBeamSize", geometry_params['frameBeamSize'])
            print(f"   ‚úÖ Set userBeamSize = {geometry_params['frameBeamSize']}")
            prop_count += 1
        
        if 'leverLength' in geometry_params:
            self._qml_root_object.setProperty("userLeverLength", geometry_params['leverLength'])
            print(f"   ‚úÖ Set userLeverLength = {geometry_params['leverLength']}")
            prop_count += 1
        
        if 'cylinderBodyLength' in geometry_params:
            self._qml_root_object.setProperty("userCylinderLength", geometry_params['cylinderBodyLength'])
            print(f"   ‚úÖ Set userCylinderLength = {geometry_params['cylinderBodyLength']}")
            prop_count += 1
        
        if 'trackWidth' in geometry_params:
            self._qml_root_object.setProperty("userTrackWidth", geometry_params['trackWidth'])
            print(f"   ‚úÖ Set userTrackWidth = {geometry_params['trackWidth']}")
            prop_count += 1
        
        if 'frameToPivot' in geometry_params:
            self._qml_root_object.setProperty("userFrameToPivot", geometry_params['frameToPivot'])
            print(f"   ‚úÖ Set userFrameToPivot = {geometry_params['frameToPivot']}")
            prop_count += 1
        
        if 'rodPosition' in geometry_params:
            self._qml_root_object.setProperty("userRodPosition", geometry_params['rodPosition'])
            print(f"   ‚úÖ Set userRodPosition = {geometry_params['rodPosition']}")
            prop_count += 1
        
        if 'boreHead' in geometry_params:
            self._qml_root_object.setProperty("userBoreHead", geometry_params['boreHead'])
            print(f"   ‚úÖ Set userBoreHead = {geometry_params['boreHead']}")
            prop_count += 1
        
        if 'boreRod' in geometry_params:
            self._qml_root_object.setProperty("userBoreRod", geometry_params['boreRod'])
            print(f"   ‚úÖ Set userBoreRod = {geometry_params['boreRod']}")
            prop_count += 1
        
        if 'rodDiameter' in geometry_params:
            self._qml_root_object.setProperty("userRodDiameter", geometry_params['rodDiameter'])
            print(f"   ‚úÖ Set userRodDiameter = {geometry_params['rodDiameter']}")
            prop_count += 1
        
        if 'pistonThickness' in geometry_params:
            self._qml_root_object.setProperty("userPistonThickness", geometry_params['pistonThickness'])
            print(f"   ‚úÖ Set userPistonThickness = {geometry_params['pistonThickness']}")
            prop_count += 1
        
        if 'pistonRodLength' in geometry_params:
            self._qml_root_object.setProperty("userPistonRodLength", geometry_params['pistonRodLength'])
            print(f"   ‚úÖ Set userPistonRodLength = {geometry_params['pistonRodLength']}")
            prop_count += 1
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç
        if self._qquick_widget:
            self._qquick_widget.update()
        
        self.status_bar.showMessage(f"–ì–µ–æ–º–µ—Ç—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ —Å–≤–æ–π—Å—Ç–≤–∞ ({prop_count} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)")
        print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {prop_count} QML —Å–≤–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ fallback")
        print(f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")

    @Slot(dict)
    def _on_lighting_changed(self, lighting_params: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Å–≤–µ—â–µ–Ω–∏—è"""
        print(f"üí° MainWindow: Lighting changed: {lighting_params}")
        
        if self._qml_root_object:
            try:
                from PySide6.QtCore import QMetaObject, Q_ARG, Qt
                
                success = QMetaObject.invokeMethod(
                    self._qml_root_object,
                    "updateLighting",
                    Qt.ConnectionType.DirectConnection,
                    Q_ARG("QVariant", lighting_params)
                )
                
                if success:
                    self.status_bar.showMessage("–û—Å–≤–µ—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                else:
                    print("‚ùå Failed to call updateLighting()")
                    
            except Exception as e:
                self.logger.error(f"Lighting update failed: {e}")
    
    @Slot(dict)
    def _on_material_changed(self, material_params: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        print(f"üé® MainWindow: Material changed: {material_params}")
        
        if self._qml_root_object:
            try:
                from PySide6.QtCore import QMetaObject, Q_ARG, Qt
                
                success = QMetaObject.invokeMethod(
                    self._qml_root_object,
                    "updateMaterials",
                    Qt.ConnectionType.DirectConnection,
                    Q_ARG("QVariant", material_params)
                )
                
                if success:
                    self.status_bar.showMessage("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                else:
                    print("‚ùå Failed to call updateMaterials()")
                    
            except Exception as e:
                self.logger.error(f"Material update failed: {e}")
    
    @Slot(dict) 
    def _on_environment_changed(self, environment_params: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print(f"üåç MainWindow: Environment changed: {environment_params}")
        
        if self._qml_root_object:
            try:
                from PySide6.QtCore import QMetaObject, Q_ARG, Qt
                
                success = QMetaObject.invokeMethod(
                    self._qml_root_object,
                    "updateEnvironment",
                    Qt.ConnectionType.DirectConnection,
                    Q_ARG("QVariant", environment_params)
                )
                
                if success:
                    self.status_bar.showMessage("–û–∫—Ä—É–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                else:
                    print("‚ùå Failed to call updateEnvironment()")
                    
            except Exception as e:
                self.logger.error(f"Environment update failed: {e}")
    
    @Slot(dict)
    def _on_quality_changed(self, quality_params: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞"""
        print(f"‚öôÔ∏è MainWindow: Quality changed: {quality_params}")
        
        if self._qml_root_object:
            try:
                from PySide6.QtCore import QMetaObject, Q_ARG, Qt
                
                success = QMetaObject.invokeMethod(
                    self._qml_root_object,
                    "updateQuality",
                    Qt.ConnectionType.DirectConnection,
                    Q_ARG("QVariant", quality_params)
                )
                
                if success:
                    self.status_bar.showMessage("–ö–∞—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                else:
                    print("‚ùå Failed to call updateQuality()")
                    
            except Exception as e:
                self.logger.error(f"Quality update failed: {e}")
    
    @Slot(dict)
    def _on_camera_changed(self, camera_params: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä—ã"""
        print(f"üì∑ MainWindow: Camera changed: {camera_params}")
        
        if self._qml_root_object:
            try:
                from PySide6.QtCore import QMetaObject, Q_ARG, Qt
                
                success = QMetaObject.invokeMethod(
                    self._qml_root_object,
                    "updateCamera",
                    Qt.ConnectionType.DirectConnection,
                    Q_ARG("QVariant", camera_params)
                )
                
                if success:
                    self.status_bar.showMessage("–ö–∞–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                else:
                    print("‚ùå Failed to call updateCamera()")
                    
            except Exception as e:
                self.logger.error(f"Camera update failed: {e}")
    
    @Slot(dict)
    def _on_effects_changed(self, effects_params: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        print(f"‚ú® MainWindow: Effects changed: {effects_params}")
        
        if self._qml_root_object:
            try:
                from PySide6.QtCore import QMetaObject, Q_ARG, Qt
                
                success = QMetaObject.invokeMethod(
                    self._qml_root_object,
                    "updateEffects",
                    Qt.ConnectionType.DirectConnection,
                    Q_ARG("QVariant", effects_params)
                )
                
                if success:
                    self.status_bar.showMessage("–≠—Ñ—Ñ–µ–∫—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                else:
                    print("‚ùå Failed to call updateEffects()")
                    
            except Exception as e:
                self.logger.error(f"Effects update failed: {e}")
    
    @Slot(str)
    def _on_preset_applied(self, preset_name: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–∏"""
        print(f"üéØ MainWindow: Graphics preset applied: {preset_name}")
        self.status_bar.showMessage(f"–ü—Ä–µ—Å–µ—Ç '{preset_name}' –ø—Ä–∏–º–µ–Ω–µ–Ω")
    
    @Slot(dict)
    def _on_animation_changed(self, animation_params: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç ModesPanel
        
        Args:
            animation_params: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
        """
        print(f"üé¨ MainWindow: Animation parameters changed: {animation_params}")
        self.logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω—ã: {animation_params}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º QML —Å–≤–æ–π—Å—Ç–≤–∞ –∞–Ω–∏–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if self._qml_root_object:
            try:
                print(f"üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ QML: {animation_params}")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é (QML –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ property bindings)
                if 'amplitude' in animation_params:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞–º–ø–ª–∏—Ç—É–¥—É –∏–∑ –º–µ—Ç—Ä–æ–≤ –≤ –≥—Ä–∞–¥—É—Å—ã –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
                    amplitude_deg = animation_params['amplitude'] * 1000 / 10  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
                    self._qml_root_object.setProperty("userAmplitude", amplitude_deg)
                    print(f"   ‚úÖ Set userAmplitude = {amplitude_deg} deg")
                
                if 'frequency' in animation_params:
                    self._qml_root_object.setProperty("userFrequency", animation_params['frequency'])
                    print(f"   ‚úÖ Set userFrequency = {animation_params['frequency']} Hz")
                
                if 'phase' in animation_params:
                    self._qml_root_object.setProperty("userPhaseGlobal", animation_params['phase'])
                    print(f"   ‚úÖ Set userPhaseGlobal = {animation_params['phase']} deg")
                
                if 'lf_phase' in animation_params:
                    self._qml_root_object.setProperty("userPhaseFL", animation_params['lf_phase'])
                    print(f"   ‚úÖ Set userPhaseFL = {animation_params['lf_phase']} deg")
                
                if 'rf_phase' in animation_params:
                    self._qml_root_object.setProperty("userPhaseFR", animation_params['rf_phase'])
                    print(f"   ‚úÖ Set userPhaseFR = {animation_params['rf_phase']} deg")
                
                if 'lr_phase' in animation_params:
                    self._qml_root_object.setProperty("userPhaseRL", animation_params['lr_phase'])
                    print(f"   ‚úÖ Set userPhaseRL = {animation_params['lr_phase']} deg")
                
                if 'rr_phase' in animation_params:
                    self._qml_root_object.setProperty("userPhaseRR", animation_params['rr_phase'])
                    print(f"   ‚úÖ Set userPhaseRR = {animation_params['rr_phase']} deg")
                
                self.status_bar.showMessage("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                print(f"‚úÖ QML —Å–≤–æ–π—Å—Ç–≤–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                    
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ QML: {e}")
                self.status_bar.showMessage(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")
                import traceback
                traceback.print_exc()
    
    @Slot(str)
    def _on_sim_control(self, command: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–µ–π"""
        bus = self.simulation_manager.state_bus

        if command == "start":
            bus.start_simulation.emit()
            self.is_simulation_running = True
            if self._qml_root_object:
                self._qml_root_object.setProperty("isRunning", True)
                print("‚úÖ QML –∞–Ω–∏–º–∞—Ü–∏—è –ó–ê–ü–£–©–ï–ù–ê")
        elif command == "stop":
            bus.stop_simulation.emit()
            self.is_simulation_running = False
            if self._qml_root_object:
                self._qml_root_object.setProperty("isRunning", False)
                print("‚úÖ QML –∞–Ω–∏–º–∞—Ü–∏—è –û–°–¢–ê–ù–û–í–õ–ï–ù–ê")
        elif command == "reset":
            bus.reset_simulation.emit()
            if self._qml_root_object:
                self._qml_root_object.setProperty("animationTime", 0.0)
                print("‚úÖ QML –∞–Ω–∏–º–∞—Ü–∏—è –°–ë–†–û–®–ï–ù–ê")
        elif command == "pause":
            bus.pause_simulation.emit()
            if self._qml_root_object:
                self._qml_root_object.setProperty("isRunning", False)
                print("‚úÖ QML –∞–Ω–∏–º–∞—Ü–∏—è –ü–†–ò–û–°–¢–ê–ù–û–í–õ–ï–ù–ê")
        
        self.status_bar.showMessage(f"–°–∏–º—É–ª—è—Ü–∏—è: {command}")
        if self.modes_panel:
            self.modes_panel.set_simulation_running(self.is_simulation_running)

    # ------------------------------------------------------------------
    # –ú–µ–Ω—é, —Ç—É–ª–±–∞—Ä –∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    # ------------------------------------------------------------------
    def _setup_menus(self):
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        menubar = self.menuBar()
        menubar.clear()

        file_menu = menubar.addMenu("–§–∞–π–ª")
        exit_action = QAction("–í—ã—Ö–æ–¥", self)
        exit_action.setShortcut(QKeySequence.StandardKey.Quit)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)

        view_menu = menubar.addMenu("–í–∏–¥")
        reset_layout_action = QAction("–°–±—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ", self)
        reset_layout_action.triggered.connect(self._reset_ui_layout)
        view_menu.addAction(reset_layout_action)

    def _setup_toolbar(self):
        """–°–æ–∑–¥–∞—Ç—å –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–µ–π"""
        toolbar = self.addToolBar("–û—Å–Ω–æ–≤–Ω–∞—è")
        toolbar.setObjectName("MainToolbar")
        toolbar.setMovable(True)

        actions = [
            ("‚ñ∂ –°—Ç–∞—Ä—Ç", "start"),
            ("‚è∏ –ü–∞—É–∑–∞", "pause"),
            ("‚èπ –°—Ç–æ–ø", "stop"),
            ("‚Ü∫ –°–±—Ä–æ—Å", "reset"),
        ]

        for title, command in actions:
            act = QAction(title, self)
            act.triggered.connect(lambda _=False, cmd=command: self._on_sim_control(cmd))
            toolbar.addAction(act)

    def _setup_status_bar(self):
        """–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        status_bar = QStatusBar(self)
        self.setStatusBar(status_bar)

        self.sim_time_label = QLabel("Sim Time: 0.000s")
        self.step_count_label = QLabel("Steps: 0")
        self.fps_label = QLabel("Physics FPS: 0.0")
        self.queue_label = QLabel("Queue: 0/0")

        for widget in (self.sim_time_label, self.step_count_label, self.fps_label, self.queue_label):
            widget.setStyleSheet("padding: 0 6px")
            status_bar.addPermanentWidget(widget)

        self.status_bar = status_bar

    # ------------------------------------------------------------------
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫–Ω–∞
    # ------------------------------------------------------------------
    def _restore_settings(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é –æ–∫–Ω–∞ –∏ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–ø–ª–∏—Ç—Ç–µ—Ä–æ–≤"""
        settings = QSettings(self.SETTINGS_ORG, self.SETTINGS_APP)

        geometry = settings.value(self.SETTINGS_GEOMETRY)
        if isinstance(geometry, QByteArray):
            self.restoreGeometry(geometry)
        elif isinstance(geometry, (bytes, bytearray)):
            self.restoreGeometry(QByteArray(geometry))

        state = settings.value(self.SETTINGS_STATE)
        if isinstance(state, QByteArray):
            self.restoreState(state)
        elif isinstance(state, (bytes, bytearray)):
            self.restoreState(QByteArray(state))

        splitter_state = settings.value(self.SETTINGS_SPLITTER)
        if isinstance(splitter_state, QByteArray) and self.main_splitter:
            self.main_splitter.restoreState(splitter_state)
        elif isinstance(splitter_state, (bytes, bytearray)) and self.main_splitter:
            self.main_splitter.restoreState(QByteArray(splitter_state))

        hsplit_state = settings.value(self.SETTINGS_HORIZONTAL_SPLITTER)
        if isinstance(hsplit_state, QByteArray) and self.main_horizontal_splitter:
            self.main_horizontal_splitter.restoreState(hsplit_state)
        elif isinstance(hsplit_state, (bytes, bytearray)) and self.main_horizontal_splitter:
            self.main_horizontal_splitter.restoreState(QByteArray(hsplit_state))

    def _save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        settings = QSettings(self.SETTINGS_ORG, self.SETTINGS_APP)
        settings.setValue(self.SETTINGS_GEOMETRY, self.saveGeometry())
        settings.setValue(self.SETTINGS_STATE, self.saveState())

        if self.main_splitter:
            settings.setValue(self.SETTINGS_SPLITTER, self.main_splitter.saveState())
        if self.main_horizontal_splitter:
            settings.setValue(
                self.SETTINGS_HORIZONTAL_SPLITTER,
                self.main_horizontal_splitter.saveState(),
            )

    def _reset_ui_layout(self):
        """–°–±—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã —Å–ø–ª–∏—Ç—Ç–µ—Ä–æ–≤ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        if self.main_splitter:
            self.main_splitter.setSizes([3, 2])
        if self.main_horizontal_splitter:
            self.main_horizontal_splitter.setSizes([3, 1])
        if hasattr(self, "status_bar"):
            self.status_bar.showMessage("–ú–∞–∫–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–±—Ä–æ—à–µ–Ω", 2000)

    # ------------------------------------------------------------------
    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SimulationManager
    # ------------------------------------------------------------------
    def _connect_simulation_signals(self):
        bus = self.simulation_manager.state_bus
        bus.state_ready.connect(self._on_state_update, Qt.QueuedConnection)
        bus.physics_error.connect(self._on_physics_error, Qt.QueuedConnection)

    @Slot(object)
    def _on_state_update(self, snapshot: StateSnapshot):
        self.current_snapshot = snapshot

        if snapshot:
            self.sim_time_label.setText(f"Sim Time: {snapshot.simulation_time:.3f}s")
            self.step_count_label.setText(f"Steps: {snapshot.step_number}")

            if snapshot.aggregates.physics_step_time > 0:
                fps = 1.0 / snapshot.aggregates.physics_step_time
                self.fps_label.setText(f"Physics FPS: {fps:.1f}")

            self._update_3d_from_snapshot(snapshot)

        if self.chart_widget:
            self.chart_widget.update_from_snapshot(snapshot)

    @Slot(str)
    def _on_physics_error(self, message: str):
        self.logger.error(f"Physics engine error: {message}")
        if hasattr(self, "status_bar"):
            self.status_bar.showMessage(f"Physics error: {message}", 5000)

    def _update_render(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∏ –ø–ª–∞–≤–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∞–Ω–∏–º–∞—Ü–∏–∏"""
        if not self._qml_root_object:
            return

        now = time.perf_counter()
        last_tick = getattr(self, "_last_animation_tick", None)
        self._last_animation_tick = now

        if bool(self._qml_root_object.property("isRunning")) and last_tick is not None:
            elapsed = now - last_tick
            current = self._qml_root_object.property("animationTime") or 0.0
            self._qml_root_object.setProperty("animationTime", float(current) + float(elapsed))

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è state_queue –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º get_stats()
        if hasattr(self.simulation_manager, 'state_queue') and self.simulation_manager.state_queue is not None:
            stats = self.simulation_manager.get_queue_stats()
            self.queue_label.setText(f"Queue: {stats.get('get_count', 0)}/{stats.get('put_count', 0)}")
        else:
            self.queue_label.setText("Queue: -/-")

    # ------------------------------------------------------------------
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ QML —Å—Ü–µ–Ω—ã
    # ------------------------------------------------------------------
    def _queue_qml_update(self, key: str, params: Dict[str, Any]):
        if not params:
            return

        if key not in self._qml_update_queue:
            self._qml_update_queue[key] = {}

        self._deep_merge_dicts(self._qml_update_queue[key], params)

        if not self._qml_flush_timer.isActive():
            self._qml_flush_timer.start(0)

    def _flush_qml_updates(self):
        if not self._qml_update_queue:
            return

        if not self._qml_root_object:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞, –∫–æ–≥–¥–∞ QML –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
            self._qml_flush_timer.start(100)
            return

        pending = self._qml_update_queue
        self._qml_update_queue = {}

        for key, payload in pending.items():
            methods = self.QML_UPDATE_METHODS.get(key, ())
            success = False
            for method_name in methods:
                if self._invoke_qml_function(method_name, payload):
                    success = True
                    break

            if not success and key == "geometry":
                self._set_geometry_properties_fallback(payload)

    def _invoke_qml_function(self, method_name: str, payload: Optional[Dict[str, Any]] = None) -> bool:
        if not self._qml_root_object:
            return False

        connection = Qt.ConnectionType.DirectConnection
        try:
            if payload is None:
                return QMetaObject.invokeMethod(self._qml_root_object, method_name, connection)
            return QMetaObject.invokeMethod(
                self._qml_root_object,
                method_name,
                connection,
                Q_ARG("QVariant", payload),
            )
        except Exception as exc:
            self.logger.debug(f"Failed to call {method_name} in QML: {exc}")
            return False

    @staticmethod
    def _deep_merge_dicts(target: Dict[str, Any], source: Dict[str, Any]):
        for key, value in source.items():
            if (
                isinstance(value, dict)
                and key in target
                and isinstance(target[key], dict)
            ):
                MainWindow._deep_merge_dicts(target[key], value)
            else:
                target[key] = value

    def _set_geometry_properties_fallback(self, geometry_params: Dict[str, Any]):
        if not self._qml_root_object:
            return

        mapping = {
            "frameLength": "userFrameLength",
            "frameHeight": "userFrameHeight",
            "frameBeamSize": "userBeamSize",
            "leverLength": "userLeverLength",
            "cylinderBodyLength": "userCylinderLength",
            "trackWidth": "userTrackWidth",
            "frameToPivot": "userFrameToPivot",
            "rodPosition": "userRodPosition",
            "boreHead": "userBoreHead",
            "boreRod": "userBoreRod",
            "rodDiameter": "userRodDiameter",
            "pistonThickness": "userPistonThickness",
            "pistonRodLength": "userPistonRodLength",
        }

        for key, prop in mapping.items():
            if key in geometry_params:
                self._qml_root_object.setProperty(prop, float(geometry_params[key]))

    # ------------------------------------------------------------------
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–∞–Ω–µ–ª–µ–π
    # ------------------------------------------------------------------
    @Slot(dict)
    def _on_geometry_changed_qml(self, geometry: Dict[str, Any]):
        self.logger.info(f"Geometry update received: {list(geometry.keys())}")
        self._queue_qml_update("geometry", geometry)

    @Slot(dict)
    def _on_lighting_changed(self, params: Dict[str, Any]):
        self.logger.debug(f"Lighting update: {params}")
        self._queue_qml_update("lighting", params)

    @Slot(dict)
    def _on_material_changed(self, params: Dict[str, Any]):
        self.logger.debug(f"Material update: {params}")
        self._queue_qml_update("materials", params)

    @Slot(dict)
    def _on_environment_changed(self, params: Dict[str, Any]):
        self.logger.debug(f"Environment update: {params}")
        self._queue_qml_update("environment", params)

    @Slot(dict)
    def _on_quality_changed(self, params: Dict[str, Any]):
        self.logger.debug(f"Quality update: {params}")
        self._queue_qml_update("quality", params)

    @Slot(dict)
    def _on_camera_changed(self, params: Dict[str, Any]):
        self.logger.debug(f"Camera update: {params}")
        self._queue_qml_update("camera", params)

    @Slot(dict)
    def _on_effects_changed(self, params: Dict[str, Any]):
        self.logger.debug(f"Effects update: {params}")
        self._queue_qml_update("effects", params)

    @Slot(str)
    def _on_preset_applied(self, preset_name: str):
        if hasattr(self, "status_bar"):
            self.status_bar.showMessage(f"–ü—Ä–µ—Å–µ—Ç '{preset_name}' –ø—Ä–∏–º–µ–Ω—ë–Ω", 2000)

    @Slot(dict)
    def _on_animation_changed(self, params: Dict[str, Any]):
        self.logger.debug(f"Animation update: {params}")
        self._queue_qml_update("animation", params)

    def _on_sim_control(self, command: str):
        bus = self.simulation_manager.state_bus

        if command == "start":
            bus.start_simulation.emit()
            self.is_simulation_running = True
            if self._qml_root_object:
                self._qml_root_object.setProperty("isRunning", True)
        elif command == "stop":
            bus.stop_simulation.emit()
            self.is_simulation_running = False
            if self._qml_root_object:
                self._qml_root_object.setProperty("isRunning", False)
        elif command == "pause":
            bus.pause_simulation.emit()
            self.is_simulation_running = False
            if self._qml_root_object:
                self._qml_root_object.setProperty("isRunning", False)
        elif command == "reset":
            bus.reset_simulation.emit()
            if self._qml_root_object:
                self._qml_root_object.setProperty("animationTime", 0.0)

    def _update_3d_from_snapshot(self, snapshot: StateSnapshot):
        if not self._qml_root_object or not snapshot:
            return

        piston_positions: Dict[str, float] = {}
        for wheel_enum, wheel_state in snapshot.wheels.items():
            corner_key = self.WHEEL_KEY_MAP.get(wheel_enum.value)
            if not corner_key:
                continue
            piston_positions[corner_key] = float(wheel_state.piston_position * 1000.0)

        if piston_positions:
            self._invoke_qml_function("updatePistonPositions", piston_positions)

        self._qml_root_object.setProperty("animationTime", float(snapshot.simulation_time))

    # ------------------------------------------------------------------
    # –°–æ–±—ã—Ç–∏—è –æ–∫–Ω–∞
    # ------------------------------------------------------------------
    def showEvent(self, event):
        super().showEvent(event)
        if not getattr(self, "_sim_started", False):
            try:
                self.simulation_manager.start()
                self._sim_started = True
            except Exception as exc:
                self.logger.error(f"Failed to start SimulationManager: {exc}")

    def closeEvent(self, event):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"""
        self._save_settings()
        try:
            self.simulation_manager.cleanup()
        finally:
            super().closeEvent(event)
