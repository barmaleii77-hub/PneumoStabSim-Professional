"""
Main window for PneumoStabSim application
Qt Quick 3D rendering with QQuickWidget (no createWindowContainer)
–†–£–°–°–ö–ò–ô –ò–ù–¢–ï–†–§–ï–ô–° (Russian UI)
"""
from PySide6.QtWidgets import (
    QMainWindow, QStatusBar, QDockWidget, QWidget, QMenuBar, QToolBar, QLabel,
    QVBoxLayout, QHBoxLayout, QFileDialog, QMessageBox, QApplication, QSplitter,
    QTabWidget, QScrollArea  # NEW: For tabs and scrolling
)
from PySide6.QtCore import Qt, QTimer, Slot, QSettings, QUrl, QFileInfo
from PySide6.QtGui import QAction, QKeySequence
from PySide6.QtQuickWidgets import QQuickWidget
import logging
import json
import numpy as np
from pathlib import Path
from typing import Optional, Dict

from src.ui.charts import ChartWidget
from src.ui.panels import GeometryPanel, PneumoPanel, ModesPanel, RoadPanel, GraphicsPanel
from ..runtime import SimulationManager, StateSnapshot


class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Qt Quick 3D (RHI/Direct3D)
    
    Main application window with Qt Quick 3D rendering (RHI/Direct3D)
    RUSSIAN UI - –†—É—Å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    """
    SETTINGS_ORG = "PneumoStabSim"
    SETTINGS_APP = "PneumoStabSimApp"
    SETTINGS_GEOMETRY = "MainWindow/Geometry"
    SETTINGS_STATE = "MainWindow/State"
    SETTINGS_SPLITTER = "MainWindow/Splitter"  # NEW: Save splitter position
    SETTINGS_HORIZONTAL_SPLITTER = "MainWindow/HorizontalSplitter"  # NEW: Save horizontal splitter position
    SETTINGS_LAST_TAB = "MainWindow/LastTab"    # NEW: Save selected tab
    SETTINGS_LAST_PRESET = "Presets/LastPath"

    def __init__(self, use_qml_3d: bool = True, force_optimized: bool = False):
        super().__init__()
        
        # Store visualization backend choice
        self.use_qml_3d = use_qml_3d
        self.force_optimized = force_optimized  # NEW: Force main_optimized.qml
        
        backend_name = "Qt Quick 3D (U-–†–∞–º–∞ PBR)" if use_qml_3d else "Legacy OpenGL"
        if force_optimized:
            backend_name += " OPTIMIZED"
        self.setWindowTitle(f"PneumoStabSim - {backend_name}")  # –†—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        
        # Set reasonable initial size
        self.resize(1400, 900)  # Increased for better layout
        
        # Set minimum window size
        self.setMinimumSize(1200, 800)
        
        # Ensure window is in normal state
        self.setWindowState(Qt.WindowState.WindowNoState)

        # Logging
        self.logger = logging.getLogger(__name__)
        
        print("MainWindow: –°–æ–∑–¥–∞–Ω–∏–µ SimulationManager...")
        
        # Simulation manager
        try:
            self.simulation_manager = SimulationManager(self)
            self._sim_started = False
            print("‚úÖ SimulationManager —Å–æ–∑–¥–∞–Ω (–Ω–µ –∑–∞–ø—É—â–µ–Ω)");
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SimulationManager: {e}")
            import traceback
            traceback.print_exc();
            raise;

        # Current snapshot
        self.current_snapshot: Optional[StateSnapshot] = None
        self.is_simulation_running = False

        # Geometry converter for Python‚ÜîQML integration
        from src.ui.geometry_bridge import create_geometry_converter
        self.geometry_converter = create_geometry_converter()
        print("‚úÖ GeometryBridge —Å–æ–∑–¥–∞–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Python‚ÜîQML")

        # Panels references
        self.geometry_panel: Optional[GeometryPanel] = None
        self.pneumo_panel: Optional[PneumoPanel] = None
        self.modes_panel: Optional[ModesPanel] = None
        self.road_panel: Optional[RoadPanel] = None
        self.graphics_panel: Optional[GraphicsPanel] = None  # NEW: Graphics panel
        self.chart_widget: Optional[ChartWidget] = None
        
        # NEW: Tab widget and splitters
        self.tab_widget: Optional[QTabWidget] = None
        self.main_splitter: Optional[QSplitter] = None  # Vertical splitter (scene + charts)
        self.main_horizontal_splitter: Optional[QSplitter] = None  # Horizontal splitter (main layout)

        # Qt Quick 3D view reference
        self._qquick_widget: Optional[QQuickWidget] = None
        self._qml_root_object = None

        print("MainWindow: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ UI...")
        
        # Build UI (NEW ORDER!)
        self._setup_central()
        print("  ‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥ Qt Quick 3D –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        self._setup_tabs()  # NEW: Setup tabs instead of docks!
        print("  ‚úÖ –í–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        self._setup_menus()
        print("  ‚úÖ –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        
        self._setup_toolbar()
        print("  ‚úÖ –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        
        self._setup_status_bar()
        print("  ‚úÖ –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        
        self._connect_simulation_signals()
        print("  ‚úÖ –°–∏–≥–Ω–∞–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

        # Render timer (UI thread ~60 FPS)
        self.render_timer = QTimer(self)
        self.render_timer.timeout.connect(self._update_render)
        self.render_timer.start(16)
        print("  ‚úÖ –¢–∞–π–º–µ—Ä —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω")

        # Batch updates: queue updates to minimize cross-language calls to QML
        self._qml_update_queue: Dict[str, dict] = {}
        self._qml_flush_timer = QTimer(self)
        self._qml_flush_timer.setSingleShot(True)
        self._qml_flush_timer.timeout.connect(self._flush_qml_updates)
        print("  ‚úÖ Batch update queue initialized")

        print("  ‚è∏Ô∏è  SimulationManager –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø–æ—Å–ª–µ window.show()")

        # Restore settings
        self._restore_settings()
        print("  ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

        self.logger.info("–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ (Qt Quick 3D) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        print("‚úÖ MainWindow.__init__() –∑–∞–≤–µ—Ä—à—ë–Ω")

    # ------------------------------------------------------------------
    # UI Construction - –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–†–ê–ê!
    # ------------------------------------------------------------------
    def _setup_central(self):
        """–°–æ–∑–¥–∞—Ç—å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥ —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º —Å–ø–ª–∏—Ç—Ç–µ—Ä–∞–º–∏
        
        Create central view with horizontal and vertical splitters:
        Layout: [3D Scene (top) + Charts (bottom)] | [Control Panels (right)]
        """
        print("    _setup_central: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–ø–ª–∏—Ç—Ç–µ—Ä–æ–≤...")
        
        # Create main horizontal splitter (left: scene+charts, right: panels)
        self.main_horizontal_splitter = QSplitter(Qt.Orientation.Horizontal)
        self.main_horizontal_splitter.setObjectName("MainHorizontalSplitter")
        
        # Create vertical splitter for left side (scene + charts)
        self.main_splitter = QSplitter(Qt.Orientation.Vertical)
        self.main_splitter.setObjectName("SceneChartsSplitter")
        
        # Top section of vertical splitter: 3D scene
        if self.use_qml_3d:
            self._setup_qml_3d_view()
        else:
            self._setup_legacy_opengl_view()
        
        if self._qquick_widget:
            self.main_splitter.addWidget(self._qquick_widget)
        
        # Bottom section of vertical splitter: Charts
        self.chart_widget = ChartWidget(self)
        self.chart_widget.setMinimumHeight(200)  # Minimum chart height
        self.main_splitter.addWidget(self.chart_widget)
        
        # Set stretch factors for vertical splitter (3D scene gets more space)
        self.main_splitter.setStretchFactor(0, 3)  # 60% for 3D
        self.main_splitter.setStretchFactor(1, 2)  # 40% for charts
        
        # Add vertical splitter to left side of horizontal splitter
        self.main_horizontal_splitter.addWidget(self.main_splitter)
        
        # Right side will be added in _setup_tabs() method
        
        # Set as central widget
        self.setCentralWidget(self.main_horizontal_splitter)
        
        print("    ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–ø–ª–∏—Ç—Ç–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–∞ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π + –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π)")

    def _setup_qml_3d_view(self):
        """Setup Qt Quick 3D full suspension scene"""
        print("    [QML] –ó–∞–≥—Ä—É–∑–∫–∞ QML —Ñ–∞–π–ª–∞...")
        
        try:
            self._qquick_widget = QQuickWidget(self)
            self._qquick_widget.setResizeMode(QQuickWidget.ResizeMode.SizeRootObjectToView)
            
            # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –í—ã–±–æ—Ä QML —Ñ–∞–π–ª–∞ - —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if self.force_optimized:
                print(f"    üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ main_optimized.qml")
                qml_path = Path("assets/qml/main_optimized.qml")
                allow_fallback = False  # –í –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ fallback –∑–∞–ø—Ä–µ—â–µ–Ω
            else:
                print(f"    üåü –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ñ–ò–ú: –ó–∞–≥—Ä—É–∑–∫–∞ –†–ê–°–®–ò–†–ï–ù–ù–û–ô –≤–µ—Ä—Å–∏–∏ —Å IBL —Å–∏—Å—Ç–µ–º–æ–π")
                qml_path = Path("assets/qml/main.qml")  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç–µ–ø–µ—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                allow_fallback = True   # –†–∞–∑—Ä–µ—à–µ–Ω fallback –∫ main_optimized.qml
            
            print(f"    üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–ì–†–£–ó–ö–ò QML:")
            print(f"       –¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª: {qml_path}")
            print(f"       –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {qml_path.exists()}")
            print(f"       Fallback —Ä–∞–∑—Ä–µ—à–µ–Ω: {allow_fallback}")
            
            if qml_path.exists():
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    file_size = qml_path.stat().st_size
                    print(f"       –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:,} –±–∞–π—Ç")
                    
                    if qml_path.name == "main.qml":
                        if file_size > 30000:  # main.qml –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–º —Å IBL
                            print(f"    ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –†–ê–°–®–ò–†–ù–ù–£–Æ –≤–µ—Ä—Å–∏—é —Å IBL —Å–∏—Å—Ç–µ–º–æ–π!")
                            qml_url = QUrl.fromLocalFile(str(qml_path.absolute()))
                        else:
                            raise ValueError(f"–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª ({file_size} –±–∞–π—Ç), –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
                    else:  # main_optimized.qml
                        if file_size > 50000:  # main_optimized.qml –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ~57KB
                            print(f"    ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–£–Æ –≤–µ—Ä—Å–∏—é (v4.1)!")
                            qml_url = QUrl.fromLocalFile(str(qml_path.absolute()))
                        else:
                            raise ValueError(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª ({file_size} –±–∞–π—Ç), –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
                    
                    print(f"    üìÇ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {qml_url.toString()}")
                    print(f"    üöÄ –§–∞–π–ª: {qml_path.name}")
                        
                except Exception as file_error:
                    print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ {qml_path.name}: {file_error}")
                    if not allow_fallback:
                        print(f"    ‚ùå –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: Fallback –∑–∞–ø—Ä–µ—â–µ–Ω!")
                        raise file_error
                    else:
                        raise file_error  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è fallback
                        
            else:
                error_msg = f"–§–∞–π–ª {qml_path.name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                if not allow_fallback:
                    print(f"    ‚ùå –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: {error_msg}")
                    raise FileNotFoundError(error_msg)
                else:
                    raise FileNotFoundError(error_msg)  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è fallback
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            print(f"    üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º source: {qml_url.toString()}")
            self._qquick_widget.setSource(qml_url)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
            status = self._qquick_widget.status()
            print(f"    üìä QML —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏: {status}")
            
            if status == QQuickWidget.Status.Error:
                errors = self._qquick_widget.errors()
                error_messages = [str(e) for e in errors]
                error_msg = "\n".join(error_messages)
                print(f"    ‚ùå –û–®–ò–ë–ö–ò QML –ó–ê–ì–†–£–ó–ö–ò:")
                for i, error in enumerate(error_messages, 1):
                    print(f"       {i}. {error}")
                
                if not allow_fallback:
                    print(f"    ‚ùå –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ QML")
                    raise RuntimeError(f"–û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ QML (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º):\n{error_msg}")
                else:
                    raise RuntimeError(f"–û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ QML:\n{error_msg}")
                    
            elif status == QQuickWidget.Status.Loading:
                print(f"    ‚è≥ QML —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
            elif status == QQuickWidget.Status.Ready:
                print(f"    ‚úÖ QML —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç
            self._qml_root_object = self._qquick_widget.rootObject()
            if not self._qml_root_object:
                error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç QML"
                if not allow_fallback:
                    print(f"    ‚ùå –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: {error_msg}")
                    raise RuntimeError(error_msg)
                else:
                    raise RuntimeError(error_msg)
            
            print(f"    [OK] ‚úÖ QML —Ñ–∞–π–ª '{qml_path.name}' –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            critical_properties = ['glassIOR', 'userFrameLength', 'bloomEnabled', 'metalRoughness', 'iblEnabled', 'fogEnabled', 'iblTextureReady']
            print(f"    üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤:")
            optimized_props = 0
            extended_props = 0
            for prop in critical_properties:
                try:
                    if hasattr(self._qml_root_object, 'property'):
                        value = self._qml_root_object.property(prop)
                        print(f"    ‚úÖ {prop}: {value}")
                        if prop in ['iblEnabled', 'fogEnabled']:
                            optimized_props += 1  # –≠—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –µ—Å—Ç—å –≤ –æ–±–µ–∏—Ö –≤–µ—Ä—Å–∏—è—Ö
                        if prop in ['iblTextureReady'] and value is not None:
                            extended_props += 1  # –≠—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
                    else:
                        print(f"    ‚ùå {prop}: property() –º–µ—Ç–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                except Exception as e:
                    print(f"    ‚ùå {prop}: –æ—à–∏–±–∫–∞ - {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤–µ—Ä—Å–∏–π)
            update_functions = [
                'updateGeometry', 'updateMaterials', 'updateLighting', 'updateEffects', 
                'updateEnvironment', 'updateQuality', 'updateCamera',
                'applyBatchedUpdates', 'applyGeometryUpdates', 'applyMaterialUpdates',
                'resolvedTonemapMode'  # –§—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            ]
            print(f"    üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê —Ñ—É–Ω–∫—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
            available_functions = []
            extended_functions = []
            for func_name in update_functions:
                try:
                    if hasattr(self._qml_root_object, func_name):
                        print(f"    ‚úÖ –§—É–Ω–∫—Ü–∏—è {func_name}() –¥–æ—Å—Ç—É–ø–Ω–∞")
                        available_functions.append(func_name)
                        if func_name in ['resolvedTonemapMode']:
                            extended_functions.append(func_name)
                    else:
                        print(f"    ‚ùå –§—É–Ω–∫—Ü–∏—è {func_name}() –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                except Exception as e:
                    print(f"    ‚ùå –§—É–Ω–∫—Ü–∏—è {func_name}(): –æ—à–∏–±–∫–∞ - {e}")
            
            print(f"    üìä –ò–¢–û–ì–û –¥–æ—Å—Ç—É–ø–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(available_functions)}/{len(update_functions)}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ —Å–≤–æ–π—Å—Ç–≤
            if extended_props >= 1 or len(extended_functions) >= 1:
                print(f"    üåü –ü–û–î–¢–í–ï–†–î–ñ–î–ï–ù–û: –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å IBL —Å–∏—Å—Ç–µ–º–æ–π!")
                print(f"    ‚ú® –î–æ—Å—Ç—É–ø–Ω—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: IBL —Å–∏—Å—Ç–µ–º–∞, —É–ª—É—á—à–µ–Ω–Ω—ã–µ pointer handlers, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
                print(f"    üé® –ü–æ–¥–¥–µ—Ä–∂–∫–∞: ExtendedSceneEnvironment, HDR –∑–∞–≥—Ä—É–∑–∫–∞, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã")
            elif len(available_functions) >= 8 and optimized_props >= 1:
                print(f"    üöÄ –ü–û–î–¢–í–ï–†–î–ñ–î–ï–ù–û: –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è (v4.1)")
                print(f"    ‚ú® –î–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: IBL, —Ç—É–º–∞–Ω, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã")
            elif len(available_functions) >= 5:
                print(f"    ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ë–ê–ó–û–í–ê–Ø –≤–µ—Ä—Å–∏—è (v2.1)")
                print(f"    üìù –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            else:
                print(f"    ‚ùå –ö–†–ò–¢–ò–ß–ù–û: –≤–µ—Ä—Å–∏—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞")
            
        except Exception as e:
            if not allow_fallback:
                print(f"    [CRITICAL] –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ñ–ò–ú: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞")
                print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
                import traceback
                traceback.print_exc()
                raise e  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            
            print(f"    [ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            print(f"    üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback: main_optimized.qml")
            
            # Fallback –∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω)
            try:
                fallback_path = Path("assets/qml/main_optimized.qml")
                
                if not fallback_path.exists():
                    raise FileNotFoundError(f"Fallback —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {fallback_path}")
                
                qml_url = QUrl.fromLocalFile(str(fallback_path.absolute()))
                print(f"    üìÇ Fallback –ø—É—Ç—å: {qml_url.toString()}")
                
                self._qquick_widget.setSource(qml_url)
                
                if self._qquick_widget.status() == QQuickWidget.Status.Error:
                    errors = self._qquick_widget.errors()
                    error_msg = "\n".join(str(e) for e in errors)
                    raise RuntimeError(f"–û—à–∏–±–∫–∏ fallback QML:\n{error_msg}")
                
                self._qml_root_object = self._qquick_widget.rootObject()
                if not self._qml_root_object:
                    raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç fallback QML")
                
                print(f"    [FALLBACK] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω main_optimized.qml –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
                print(f"    üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
                
            except Exception as fallback_error:
                print(f"    [CRITICAL] –û—à–∏–±–∫–∞ fallback –∑–∞–≥—Ä—É–∑–∫–∏: {fallback_error}")
                import traceback
                traceback.print_exc()
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –≤–º–µ—Å—Ç–æ –ø–∞–¥–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                fallback = QLabel(
                    "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò 3D –°–¶–ï–ù–´\n\n"
                    f"–û—Å–Ω–æ–≤–Ω–∞—è: {e}\n"
                    f"Fallback: {fallback_error}\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã assets/qml/main*.qml\n"
                    f"–†–µ–∂–∏–º: {'–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô' if not allow_fallback else '–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô'}"
                )
                fallback.setAlignment(Qt.AlignmentFlag.AlignCenter)
                fallback.setStyleSheet("background: #1a1a2e; color: #ff6b6b; font-size: 12px; padding: 20px;")
                self._qquick_widget = fallback
                print(f"    [WARNING] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∑–∞–≥–ª—É—à–∫–∞-–≤–∏–¥–∂–µ—Ç")
                return

    def _setup_legacy_opengl_view(self):
        """Setup legacy OpenGL widget"""
        print("    _setup_legacy_opengl_view: –ó–∞–≥—Ä—É–∑–∫–∞ legacy QML...")
        # Use same loader but prefer optimized QML
        self._setup_qml_3d_view()

    def _setup_tabs(self):
        """–°–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫–∏ —Å –ø–∞–Ω–µ–ª—è–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Å–ø—Ä–∞–≤–∞ –æ—Ç —Å—Ü–µ–Ω—ã —á–µ—Ä–µ–∑ —Å–ø–ª–∏—Ç—Ç–µ—Ä)
        
        Create tabbed panels on the right side with resizable splitter:
          - –ì–µ–æ–º–µ—Ç—Ä–∏—è (Geometry)
          - –ü–Ω–µ–≤–º–æ—Å–∏—Å—Ç–µ–º–∞ (Pneumatics)
          - –†–µ–∂–∏–º—ã —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä–∞ (Modes)
          - –ì—Ä–∞—Ñ–∏–∫–∞ (Graphics settings)
          - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (Visualization - stub)
          - –î–∏–Ω–∞–º–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è (Road/Dynamics - stub)
        """
        print("    _setup_tabs: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ —Å —Ä–µ—Å–∞–π–∑–±–∞—Ä–æ–º...")
        
        # Create tab widget
        self.tab_widget = QTabWidget(self)
        self.tab_widget.setObjectName("ParameterTabs")
        self.tab_widget.setMinimumWidth(300)  # Reduced minimum width
        self.tab_widget.setMaximumWidth(600)  # Increased maximum width for resizing
        
        # Tab 1: –ì–µOMET–†–ò–Ø (Geometry)
        self.geometry_panel = GeometryPanel(self)
        scroll_geometry = QScrollArea()
        scroll_geometry.setWidgetResizable(True)
        scroll_geometry.setWidget(self.geometry_panel)
        scroll_geometry.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.tab_widget.addTab(scroll_geometry, "–ì–µ–æ–º–µ—Ç—Ä–∏—è")
        print("      ‚úÖ –í–∫–ª–∞–¥–∫–∞ '–ì–µ–æ–º–µ—Ç—Ä–∏—è' —Å–æ–∑–¥–∞–Ω–∞")
        
        # Tab 2: –ü–ù–ï–í–ú–û–°–ò–°–¢–ï–ú–ê (Pneumatics)
        self.pneumo_panel = PneumoPanel(self)
        scroll_pneumo = QScrollArea()
        scroll_pneumo.setWidgetResizable(True)
        scroll_pneumo.setWidget(self.pneumo_panel)
        scroll_pneumo.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.tab_widget.addTab(scroll_pneumo, "–ü–Ω–µ–≤–º–æ—Å–∏—Å—Ç–µ–º–∞")
        print("      ‚úÖ –í–∫–ª–∞–¥–∫–∞ '–ü–Ω–µ–≤–º–æ—Å–∏—Å—Ç–µ–º–∞' —Å–æ–∑–¥–∞–Ω–∞")
        
        # Tab 3: –†–ï–ñ–ò–ú–´ –°–¢–ê–ë–ò–õ–ò–ó–ê–¢–û–†–ê (Modes)
        self.modes_panel = ModesPanel(self)
        scroll_modes = QScrollArea()
        scroll_modes.setWidgetResizable(True)
        scroll_modes.setWidget(self.modes_panel)
        scroll_modes.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.tab_widget.addTab(scroll_modes, "–†–µ–∂–∏–º—ã —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä–∞")
        print("      ‚úÖ –í–∫–ª–∞–¥–∫–∞ '–†–µ–∂–∏–º—ã —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä–∞' —Å–æ–∑–¥–∞–Ω–∞")
        
        # Tab 4: –ì–†–ê–§–ò–ö–ê –ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å)
        self.graphics_panel = GraphicsPanel(self)
        # –ù–µ –ø–æ–º–µ—â–∞–µ–º –≤ scroll area, —Ç–∞–∫ –∫–∞–∫ –ø–∞–Ω–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.tab_widget.addTab(self.graphics_panel, "üé® –ì—Ä–∞—Ñ–∏–∫–∞")
        print("      ‚úÖ –í–∫–ª–∞–¥–∫–∞ '–ì—Ä–∞—Ñ–∏–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è' —Å–æ–∑–¥–∞–Ω–∞")
        
        # Tab 5: –î–ò–ù–ê–ú–ò–ö–ê –î–í–ò–ñ–ï–ù–ò–Ø (Road/Dynamics - stub, NO CSV loading!)
        dynamics_stub = QWidget()
        dynamics_layout = QVBoxLayout(dynamics_stub)
        dynamics_label = QLabel(
            "–î–∏–Ω–∞–º–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è\n\n"
            "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–æ—Ä–æ–≥–∏\n"
            "(–ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø—Ä–æ–º—Ç–æ–º)"
        )
        dynamics_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        dynamics_label.setStyleSheet("color: #888; font-size: 12px; padding: 20px;")
        dynamics_layout.addWidget(dynamics_label)
        dynamics_layout.addStretch()
        self.tab_widget.addTab(dynamics_stub, "–î–∏–Ω–∞–º–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è")
        print("      ‚úÖ –í–∫–ª–∞–¥–∫–∞ '–î–∏–Ω–∞–º–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è' —Å–æ–∑–¥–∞–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)")
        
        # Add tab widget to right side of horizontal splitter
        self.main_horizontal_splitter.addWidget(self.tab_widget)
        
        # Set stretch factors for horizontal splitter
        self.main_horizontal_splitter.setStretchFactor(0, 3)  # 75% for scene+charts
        self.main_horizontal_splitter.setStretchFactor(1, 1)  # 25% for panels
        
        # Connect panel signals
        self._wire_panel_signals()
        
        # Restore last selected tab
        settings = QSettings(self.SETTINGS_ORG, self.SETTINGS_APP)
        last_tab = settings.value(self.SETTINGS_LAST_TAB, 0, type=int)
        if 0 <= last_tab < self.tab_widget.count():
            self.tab_widget.setCurrentIndex(last_tab)
        
        # Save selected tab on change
        self.tab_widget.currentChanged.connect(self._on_tab_changed)
        
        print("    ‚úÖ –í–∫–ª–∞–¥–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –≥–æ—Ä–∏–∑–æ–Ω–∞–ª—å–Ω–æ–º—É —Å–ø–ª–∏—Ç—Ç–µ—Ä—É")

    @Slot(int)
    def _on_tab_changed(self, index: int):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É / Save selected tab"""
        settings = QSettings(self.SETTINGS_ORG, self.SETTINGS_APP)
        settings.setValue(self.SETTINGS_LAST_TAB, index)
        
        tab_names = [
            "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–ü–Ω–µ–≤–º–æ—Å–∏—Å—Ç–µ–º–∞", "–†–µ–∂–∏–º—ã —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä–∞",
            "–ì—Ä–∞—Ñ–∏–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "–î–∏–Ω–∞–º–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è"
        ]
        if 0 <= index < len(tab_names):
            self.logger.debug(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: {tab_names[index]}")

    def _wire_panel_signals(self):
        """Connect panel signals to simulation/state bus"""
        bus = self.simulation_manager.state_bus

        # Geometry updates
        if self.geometry_panel:
            self.geometry_panel.parameter_changed.connect(
                lambda name, val: [
                    self.logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä –≥–µ–æ–º–µ—Ç—Ä–∏–∏ {name}={val}"),
                    print(f"üîß GeometryPanel: {name}={val}")
                ])
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–∫–ª—é—á–∞–µ–º geometry_changed —Å–∏–≥–Ω–∞–ª –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É QML
            self.geometry_panel.geometry_changed.connect(self._on_geometry_changed_qml)
            print("‚úÖ –°–∏–≥–Ω–∞–ª—ã GeometryPanel –ø–æ–¥–∫–ª—é—á–µ–Ω—ã (geometry_changed ‚Üí QML)")

        # Pneumatic panel
        if self.pneumo_panel:
            # –í–†–ï–ú–ï–ù–ù–ê–Ø –ó–ê–ì–õ–£–®–ö–ê - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            self.pneumo_panel.mode_changed.connect(lambda mode_type, new_mode: print(f"üîß Mode changed: {mode_type} -> {new_mode}"))
            self.pneumo_panel.parameter_changed.connect(lambda name, value: print(f"üîß Pneumo param: {name} = {value}"))
            print("‚úÖ –°–∏–≥–Ω–∞–ª—ã PneumoPanel –ø–æ–¥–∫–ª—é—á–µ–Ω—ã (–ó–ê–ì–õ–£–®–ö–ê)")

        # Modes panel
        if self.modes_panel:
            # Simulation control
            self.modes_panel.simulation_control.connect(self._on_sim_control)
            print("‚úÖ –°–∏–≥–Ω–∞–ª simulation_control –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Mode changes (–∑–∞–≥–ª—É—à–∫–∞)
            self.modes_panel.mode_changed.connect(lambda mode_type, new_mode: print(f"üîß Mode changed: {mode_type} -> {new_mode}"))
            
            # Parameter changes (–∑–∞–≥–ª—É—à–∫–∞)
            self.modes_panel.parameter_changed.connect(lambda n, v: print(f"üîß Param: {n} = {v}"))
            
            # ‚ú® –ù–û–í–û–ï: –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
            self.modes_panel.animation_changed.connect(self._on_animation_changed)
            print("‚úÖ –°–∏–≥–Ω–∞–ª animation_changed –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ _on_animation_changed")
            
            print("‚úÖ –°–∏–≥–Ω–∞–ª—ã ModesPanel –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

        # Graphics panel  
        if self.graphics_panel:
            # Lighting changes
            self.graphics_panel.lighting_changed.connect(self._on_lighting_changed)
            print("‚úÖ –°–∏–≥–Ω–∞–ª lighting_changed –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Material changes
            self.graphics_panel.material_changed.connect(self._on_material_changed)
            print("‚úÖ –°–∏–≥–Ω–∞–ª material_changed –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Environment changes
            self.graphics_panel.environment_changed.connect(self._on_environment_changed)  
            print("‚úÖ –°–∏–≥–Ω–∞–ª environment_changed –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Quality changes
            self.graphics_panel.quality_changed.connect(self._on_quality_changed)
            print("‚úÖ –°–∏–≥–Ω–∞–ª quality_changed –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Camera changes
            self.graphics_panel.camera_changed.connect(self._on_camera_changed)
            print("‚úÖ –°–∏–≥–Ω–∞–ª camera_changed –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Effects changes
            self.graphics_panel.effects_changed.connect(self._on_effects_changed)
            print("‚úÖ –°–∏–≥–Ω–∞–ª effects_changed –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Preset applied
            self.graphics_panel.preset_applied.connect(self._on_preset_applied)
            print("‚úÖ –°–∏–≥–Ω–∞–ª preset_applied –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            print("‚úÖ –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã GraphicsPanel –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç –∑–¥–µ—Å—å...
