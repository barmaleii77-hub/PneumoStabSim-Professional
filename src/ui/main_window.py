"""
Main window for PneumoStabSim application
Qt Quick 3D rendering with QQuickWidget (no createWindowContainer)
–†–£–°–°–ö–ò–ô –ò–ù–¢–ï–†–§–ï–ô–° (Russian UI)
"""
from PySide6.QtWidgets import (
    QMainWindow, QStatusBar, QDockWidget, QWidget, QMenuBar, QToolBar, QLabel,
    QVBoxLayout, QHBoxLayout, QFileDialog, QMessageBox, QApplication, QSplitter,
    QTabWidget, QScrollArea  # NEW: For tabs and scrolling
)
from PySide6.QtCore import Qt, QTimer, Slot, QSettings, QUrl, QFileInfo
from PySide6.QtGui import QAction, QKeySequence
from PySide6.QtQuickWidgets import QQuickWidget
import logging
import json
import numpy as np
from pathlib import Path
from typing import Optional, Dict

from src.ui.charts import ChartWidget
from src.ui.panels import GeometryPanel, PneumoPanel, ModesPanel, RoadPanel, GraphicsPanel
from ..runtime import SimulationManager, StateSnapshot


class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Qt Quick 3D (RHI/Direct3D)
    
    Main application window with Qt Quick 3D rendering (RHI/Direct3D)
    RUSSIAN UI - –†—É—Å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    """
    SETTINGS_ORG = "PneumoStabSim"
    SETTINGS_APP = "PneumoStabSimApp"
    SETTINGS_GEOMETRY = "MainWindow/Geometry"
    SETTINGS_STATE = "MainWindow/State"
    SETTINGS_SPLITTER = "MainWindow/Splitter"  # NEW: Save splitter position
    SETTINGS_HORIZONTAL_SPLITTER = "MainWindow/HorizontalSplitter"  # NEW: Save horizontal splitter position
    SETTINGS_LAST_TAB = "MainWindow/LastTab"    # NEW: Save selected tab
    SETTINGS_LAST_PRESET = "Presets/LastPath"

    def __init__(self, use_qml_3d: bool = True):
        super().__init__()
        
        # Store visualization backend choice
        self.use_qml_3d = use_qml_3d
        
        backend_name = "Qt Quick 3D (Optimized v4.2)" if use_qml_3d else "Legacy OpenGL"
        self.setWindowTitle(f"PneumoStabSim - {backend_name}")  # –†—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        
        # Set reasonable initial size
        self.resize(1400, 900)  # Increased for better layout
        
        # Set minimum window size
        self.setMinimumSize(1200, 800)
        
        # Ensure window is in normal state
        self.setWindowState(Qt.WindowState.WindowNoState)

        # Logging
        self.logger = logging.getLogger(__name__)
        
        print("MainWindow: –°–æ–∑–¥–∞–Ω–∏–µ SimulationManager...")
        
        # Simulation manager
        try:
            self.simulation_manager = SimulationManager(self)
            self._sim_started = False
            print("‚úÖ SimulationManager —Å–æ–∑–¥–∞–Ω (–Ω–µ –∑–∞–ø—É—â–µ–Ω)");
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SimulationManager: {e}")
            import traceback
            traceback.print_exc();
            raise;

        # Current snapshot
        self.current_snapshot: Optional[StateSnapshot] = None
        self.is_simulation_running = False

        # Geometry converter for Python‚ÜîQML integration
        from src.ui.geometry_bridge import create_geometry_converter
        self.geometry_converter = create_geometry_converter()
        print("‚úÖ GeometryBridge —Å–æ–∑–¥–∞–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Python‚ÜîQML")

        # Panels references
        self.geometry_panel: Optional[GeometryPanel] = None
        self.pneumo_panel: Optional[PneumoPanel] = None
        self.modes_panel: Optional[ModesPanel] = None
        self.road_panel: Optional[RoadPanel] = None
        self.graphics_panel: Optional[GraphicsPanel] = None  # NEW: Graphics panel
        self.chart_widget: Optional[ChartWidget] = None
        
        # NEW: Tab widget and splitters
        self.tab_widget: Optional[QTabWidget] = None
        self.main_splitter: Optional[QSplitter] = None  # Vertical splitter (scene + charts)
        self.main_horizontal_splitter: Optional[QSplitter] = None  # Horizontal splitter (main layout)

        # Qt Quick 3D view reference
        self._qquick_widget: Optional[QQuickWidget] = None
        self._qml_root_object = None

        print("MainWindow: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ UI...")
        
        # Build UI (NEW ORDER!)
        self._setup_central()
        print("  ‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥ Qt Quick 3D –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        self._setup_tabs()  # NEW: Setup tabs instead of docks!
        print("  ‚úÖ –í–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        self._setup_menus()
        print("  ‚úÖ –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        
        self._setup_toolbar()
        print("  ‚úÖ –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        
        self._setup_status_bar()
        print("  ‚úÖ –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        
        self._connect_simulation_signals()
        print("  ‚úÖ –°–∏–≥–Ω–∞–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

        # Render timer (UI thread ~60 FPS)
        self.render_timer = QTimer(self)
        self.render_timer.timeout.connect(self._update_render)
        self.render_timer.start(16)
        print("  ‚úÖ –¢–∞–π–º–µ—Ä —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω")

        # Batch updates: queue updates to minimize cross-language calls to QML
        self._qml_update_queue: Dict[str, dict] = {}
        self._qml_flush_timer = QTimer(self)
        self._qml_flush_timer.setSingleShot(True)
        self._qml_flush_timer.timeout.connect(self._flush_qml_updates)
        print("  ‚úÖ Batch update queue initialized")

        print("  ‚è∏Ô∏è  SimulationManager –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø–æ—Å–ª–µ window.show()")

        # Restore settings
        self._restore_settings()
        print("  ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

        self.logger.info("–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ (Qt Quick 3D) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        print("‚úÖ MainWindow.__init__() –∑–∞–≤–µ—Ä—à—ë–Ω")

    # ------------------------------------------------------------------
    # UI Construction - –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–†–ê–ê!
    # ------------------------------------------------------------------
    def _setup_central(self):
        """–°–æ–∑–¥–∞—Ç—å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥ —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º —Å–ø–ª–∏—Ç—Ç–µ—Ä–∞–º–∏
        
        Create central view with horizontal and vertical splitters:
        Layout: [3D Scene (top) + Charts (bottom)] | [Control Panels (right)]
        """
        print("    _setup_central: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–ø–ª–∏—Ç—Ç–µ—Ä–æ–≤...")
        
        # Create main horizontal splitter (left: scene+charts, right: panels)
        self.main_horizontal_splitter = QSplitter(Qt.Orientation.Horizontal)
        self.main_horizontal_splitter.setObjectName("MainHorizontalSplitter")
        
        # Create vertical splitter for left side (scene + charts)
        self.main_splitter = QSplitter(Qt.Orientation.Vertical)
        self.main_splitter.setObjectName("SceneChartsSplitter")
        
        # Top section of vertical splitter: 3D scene
        if self.use_qml_3d:
            self._setup_qml_3d_view()
        else:
            self._setup_legacy_opengl_view()
        
        if self._qquick_widget:
            self.main_splitter.addWidget(self._qquick_widget)
        
        # Bottom section of vertical splitter: Charts
        self.chart_widget = ChartWidget(self)
        self.chart_widget.setMinimumHeight(200)  # Minimum chart height
        self.main_splitter.addWidget(self.chart_widget)
        
        # Set stretch factors for vertical splitter (3D scene gets more space)
        self.main_splitter.setStretchFactor(0, 3)  # 60% for 3D
        self.main_splitter.setStretchFactor(1, 2)  # 40% for charts
        
        # Add vertical splitter to left side of horizontal splitter
        self.main_horizontal_splitter.addWidget(self.main_splitter)
        
        # Right side will be added in _setup_tabs() method
        
        # Set as central widget
        self.setCentralWidget(self.main_horizontal_splitter)
        
        print("    ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–ø–ª–∏—Ç—Ç–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–∞ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π + –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π)")

    def _setup_qml_3d_view(self):
        """Setup Qt Quick 3D full suspension scene - –¢–û–õ–¨–ö–û main_optimized.qml"""
        print("    [QML] –ó–∞–≥—Ä—É–∑–∫–∞ –¢–û–õ–¨–ö–û main_optimized.qml...")
        
        try:
            self._qquick_widget = QQuickWidget(self)
            self._qquick_widget.setResizeMode(QQuickWidget.ResizeMode.SizeRootObjectToView)
            
            # ‚úÖ –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –§–ê–ô–õ: main_optimized.qml
            qml_path = Path("assets/qml/main_optimized.qml")
            
            print(f"    üîç –ó–ê–ì–†–£–ó–ö–ê main_optimized.qml:")
            print(f"       –§–∞–π–ª: {qml_path}")
            print(f"       –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {qml_path.exists()}")
            
            if not qml_path.exists():
                raise FileNotFoundError(f"–ö–†–ò–¢–ò–ß–ù–û: main_optimized.qml –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = qml_path.stat().st_size
            print(f"       –†–∞–∑–º–µ—Ä: {file_size:,} –±–∞–π—Ç")
            
            if file_size < 30000:  # main_optimized.qml –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–∏–º
                raise ValueError(f"–ö–†–ò–¢–ò–ß–ù–û: –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª ({file_size} –±–∞–π—Ç)")
                
            print(f"    ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º main_optimized.qml v4.2 (–ë–ï–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø)")
            qml_url = QUrl.fromLocalFile(str(qml_path.absolute()))
            
            print(f"    üìÇ –ü—É—Ç—å: {qml_url.toString()}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            self._qquick_widget.setSource(qml_url)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = self._qquick_widget.status()
            print(f"    üìä –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏: {status}")
            
            if status == QQuickWidget.Status.Error:
                errors = self._qquick_widget.errors()
                error_messages = [str(e) for e in errors]
                print(f"    ‚ùå –û–®–ò–ë–ö–ò QML:")
                for i, error in enumerate(error_messages, 1):
                    print(f"       {i}. {error}")
                raise RuntimeError(f"–û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ main_optimized.qml:\n{'\n'.join(error_messages)}")
                    
            elif status == QQuickWidget.Status.Loading:
                print(f"    ‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
            elif status == QQuickWidget.Status.Ready:
                print(f"    ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç
            self._qml_root_object = self._qquick_widget.rootObject()
            if not self._qml_root_object:
                raise RuntimeError("–ö–†–ò–¢–ò–ß–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å QML root object")
            
            print(f"    ‚úÖ main_optimized.qml –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            key_properties = ['glassIOR', 'iblEnabled', 'fogEnabled', 'bloomThreshold', 'ssaoRadius']
            print(f"    üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤:")
            for prop in key_properties:
                try:
                    value = self._qml_root_object.property(prop)
                    print(f"    ‚úÖ {prop}: {value}")
                except Exception as e:
                    print(f"    ‚ùå {prop}: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            key_functions = ['updateGeometry', 'updateMaterials', 'updateLighting', 'applyBatchedUpdates']
            print(f"    üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π:")
            available = 0
            for func in key_functions:
                if hasattr(self._qml_root_object, func):
                    print(f"    ‚úÖ {func}() –¥–æ—Å—Ç—É–ø–Ω–∞")
                    available += 1
                else:
                    print(f"    ‚ùå {func}() –ù–ï –ù–ê–ô–î–ï–ù–ê")
            
            print(f"    üìä –î–æ—Å—Ç—É–ø–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {available}/{len(key_functions)}")
            print(f"    üöÄ main_optimized.qml v4.2 –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï")
            
        except Exception as e:
            print(f"    ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ main_optimized.qml: {e}")
            import traceback
            traceback.print_exc()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            fallback = QLabel(
                f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò main_optimized.qml\n\n"
                f"–û—à–∏–±–∫–∞: {e}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª: assets/qml/main_optimized.qml\n"
                f"main.qml –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø!"
            )
            fallback.setAlignment(Qt.AlignmentFlag.AlignCenter)
            fallback.setStyleSheet("background: #1a1a2e; color: #ff6b6b; font-size: 12px; padding: 20px;")
            self._qquick_widget = fallback
            print(f"    ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞")
            return

    def _setup_legacy_opengl_view(self):
        """Setup legacy OpenGL widget - –¢–ê–ö–ñ–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç main_optimized.qml"""
        print("    _setup_legacy_opengl_view: –¢–ê–ö–ñ–ï –∑–∞–≥—Ä—É–∂–∞–µ–º main_optimized.qml...")
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–∞–∂–µ –¥–ª—è legacy –∏—Å–ø–æ–ª—å–∑—É–µ–º main_optimized.qml
        self._setup_qml_3d_view()

    def _setup_tabs(self):
        """–°–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫–∏ —Å –ø–∞–Ω–µ–ª—è–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Å–ø—Ä–∞–≤–∞ –æ—Ç —Å—Ü–µ–Ω—ã —á–µ—Ä–µ–∑ —Å–ø–ª–∏—Ç—Ç–µ—Ä)
        
        Create tabbed panels on the right side with resizable splitter:
          - –ì–µ–æ–º–µ—Ç—Ä–∏—è (Geometry)
          - –ü–Ω–µ–≤–º–æ—Å–∏—Å—Ç–µ–º–∞ (Pneumatics)
          - –†–µ–∂–∏–º—ã —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä–∞ (Modes)
          - –ì—Ä–∞—Ñ–∏–∫–∞ (Graphics settings)
          - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (Visualization - stub)
          - –î–∏–Ω–∞–º–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è (Road/Dynamics - stub)
        """
        print("    _setup_tabs: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ —Å —Ä–µ—Å–∞–π–∑–±–∞—Ä–æ–º...")
        
        # Create tab widget
        self.tab_widget = QTabWidget(self)
        self.tab_widget.setObjectName("ParameterTabs")
        self.tab_widget.setMinimumWidth(300)  # Reduced minimum width
        self.tab_widget.setMaximumWidth(600)  # Increased maximum width for resizing
        
        # Tab 1: –ì–µOMET–†–ò–Ø (Geometry)
        self.geometry_panel = GeometryPanel(self)
        scroll_geometry = QScrollArea()
        scroll_geometry.setWidgetResizable(True)
        scroll_geometry.setWidget(self.geometry_panel)
        scroll_geometry.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.tab_widget.addTab(scroll_geometry, "–ì–µ–æ–º–µ—Ç—Ä–∏—è")
        print("      ‚úÖ –í–∫–ª–∞–¥–∫–∞ '–ì–µ–æ–º–µ—Ç—Ä–∏—è' —Å–æ–∑–¥–∞–Ω–∞")
        
        # Tab 2: –ü–ù–ï–í–ú–û–°–ò–°–¢–ï–ú–ê (Pneumatics)
        self.pneumo_panel = PneumoPanel(self)
        scroll_pneumo = QScrollArea()
        scroll_pneumo.setWidgetResizable(True)
        scroll_pneumo.setWidget(self.pneumo_panel)
        scroll_pneumo.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.tab_widget.addTab(scroll_pneumo, "–ü–Ω–µ–≤–º–æ—Å–∏—Å—Ç–µ–º–∞")
        print("      ‚úÖ –í–∫–ª–∞–¥–∫–∞ '–ü–Ω–µ–≤–º–æ—Å–∏—Å—Ç–µ–º–∞' —Å–æ–∑–¥–∞–Ω–∞")
        
        # Tab 3: –†–ï–ñ–ò–ú–´ –°–¢–ê–ë–ò–õ–ò–ó–ê–¢–û–†–ê (Modes)
        self.modes_panel = ModesPanel(self)
        scroll_modes = QScrollArea()
        scroll_modes.setWidgetResizable(True)
        scroll_modes.setWidget(self.modes_panel)
        scroll_modes.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.tab_widget.addTab(scroll_modes, "–†–µ–∂–∏–º—ã —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä–∞")
        print("      ‚úÖ –í–∫–ª–∞–¥–∫–∞ '–†–µ–∂–∏–º—ã —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä–∞' —Å–æ–∑–¥–∞–Ω–∞")
        
        # Tab 4: –ì–†–ê–§–ò–ö–ê –ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å)
        self.graphics_panel = GraphicsPanel(self)
        # –ù–µ –ø–æ–º–µ—â–∞–µ–º –≤ scroll area, —Ç–∞–∫ –∫–∞–∫ –ø–∞–Ω–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.tab_widget.addTab(self.graphics_panel, "üé® –ì—Ä–∞—Ñ–∏–∫–∞")
        print("      ‚úÖ –í–∫–ª–∞–¥–∫–∞ '–ì—Ä–∞—Ñ–∏–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è' —Å–æ–∑–¥–∞–Ω–∞")
        
        # Tab 5: –î–ò–ù–ê–ú–ò–ö–ê –î–í–ò–ñ–ï–ù–ò–Ø (Road/Dynamics - stub, NO CSV loading!)
        dynamics_stub = QWidget()
        dynamics_layout = QVBoxLayout(dynamics_stub)
        dynamics_label = QLabel(
            "–î–∏–Ω–∞–º–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è\n\n"
            "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–æ—Ä–æ–≥–∏\n"
            "(–ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø—Ä–æ–º—Ç–æ–º)"
        )
        dynamics_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        dynamics_label.setStyleSheet("color: #888; font-size: 12px; padding: 20px;")
        dynamics_layout.addWidget(dynamics_label)
        dynamics_layout.addStretch()
        self.tab_widget.addTab(dynamics_stub, "–î–∏–Ω–∞–º–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è")
        print("      ‚úÖ –í–∫–ª–∞–¥–∫–∞ '–î–∏–Ω–∞–º–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è' —Å–æ–∑–¥–∞–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)")
        
        # Add tab widget to right side of horizontal splitter
        self.main_horizontal_splitter.addWidget(self.tab_widget)
        
        # Set stretch factors for horizontal splitter
        self.main_horizontal_splitter.setStretchFactor(0, 3)  # 75% for scene+charts
        self.main_horizontal_splitter.setStretchFactor(1, 1)  # 25% for panels
        
        # Connect panel signals
        self._wire_panel_signals()
        
        # Restore last selected tab
        settings = QSettings(self.SETTINGS_ORG, self.SETTINGS_APP)
        last_tab = settings.value(self.SETTINGS_LAST_TAB, 0, type=int)
        if 0 <= last_tab < self.tab_widget.count():
            self.tab_widget.setCurrentIndex(last_tab)
        
        # Save selected tab on change
        self.tab_widget.currentChanged.connect(self._on_tab_changed)
        
        print("    ‚úÖ –í–∫–ª–∞–¥–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –≥–æ—Ä–∏–∑–æ–Ω–∞–ª—å–Ω–æ–º—É —Å–ø–ª–∏—Ç—Ç–µ—Ä—É")

    @Slot(int)
    def _on_tab_changed(self, index: int):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É / Save selected tab"""
        settings = QSettings(self.SETTINGS_ORG, self.SETTINGS_APP)
        settings.setValue(self.SETTINGS_LAST_TAB, index)
        
        tab_names = [
            "–ì–µ–æ–º–µ—Ç—Ä–∏—è", "–ü–Ω–µ–≤–º–æ—Å–∏—Å—Ç–µ–º–∞", "–†–µ–∂–∏–º—ã —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä–∞",
            "–ì—Ä–∞—Ñ–∏–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "–î–∏–Ω–∞–º–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è"
        ]
        if 0 <= index < len(tab_names):
            self.logger.debug(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: {tab_names[index]}")

    def _wire_panel_signals(self):
        """Connect panel signals to simulation/state bus"""
        bus = self.simulation_manager.state_bus

        # Geometry updates
        if self.geometry_panel:
            self.geometry_panel.parameter_changed.connect(
                lambda name, val: [
                    self.logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä –≥–µ–æ–º–µ—Ç—Ä–∏–∏ {name}={val}"),
                    print(f"üîß GeometryPanel: {name}={val}")
                ])
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–∫–ª—é—á–∞–µ–º geometry_changed —Å–∏–≥–Ω–∞–ª –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É QML
            self.geometry_panel.geometry_changed.connect(self._on_geometry_changed_qml)
            print("‚úÖ –°–∏–≥–Ω–∞–ª—ã GeometryPanel –ø–æ–¥–∫–ª—é—á–µ–Ω—ã (geometry_changed ‚Üí QML)")

        # Pneumatic panel
        if self.pneumo_panel:
            # –í–†–ï–ú–ï–ù–ù–ê–Ø –ó–ê–ì–õ–£–®–ö–ê - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            self.pneumo_panel.mode_changed.connect(lambda mode_type, new_mode: print(f"üîß Mode changed: {mode_type} -> {new_mode}"))
            self.pneumo_panel.parameter_changed.connect(lambda name, value: print(f"üîß Pneumo param: {name} = {value}"))
            print("‚úÖ –°–∏–≥–Ω–∞–ª—ã PneumoPanel –ø–æ–¥–∫–ª—é—á–µ–Ω—ã (–ó–ê–ì–õ–£–®–ö–ê)")

        # Modes panel
        if self.modes_panel:
            # Simulation control
            self.modes_panel.simulation_control.connect(self._on_sim_control)
            print("‚úÖ –°–∏–≥–Ω–∞–ª simulation_control –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Mode changes (–∑–∞–≥–ª—É—à–∫–∞)
            self.modes_panel.mode_changed.connect(lambda mode_type, new_mode: print(f"üîß Mode changed: {mode_type} -> {new_mode}"))
            
            # Parameter changes (–∑–∞–≥–ª—É—à–∫–∞)
            self.modes_panel.parameter_changed.connect(lambda n, v: print(f"üîß Param: {n} = {v}"))
            
            # ‚ú® –ù–û–í–û–ï: –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
            self.modes_panel.animation_changed.connect(self._on_animation_changed)
            print("‚úÖ –°–∏–≥–Ω–∞–ª animation_changed –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ _on_animation_changed")
            
            print("‚úÖ –°–∏–≥–Ω–∞–ª—ã ModesPanel –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

        # Graphics panel  
        if self.graphics_panel:
            # Lighting changes
            self.graphics_panel.lighting_changed.connect(self._on_lighting_changed)
            print("‚úÖ –°–∏–≥–Ω–∞–ª lighting_changed –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Material changes
            self.graphics_panel.material_changed.connect(self._on_material_changed)
            print("‚úÖ –°–∏–≥–Ω–∞–ª material_changed –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Environment changes
            self.graphics_panel.environment_changed.connect(self._on_environment_changed)  
            print("‚úÖ –°–∏–≥–Ω–∞–ª environment_changed –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Quality changes
            self.graphics_panel.quality_changed.connect(self._on_quality_changed)
            print("‚úÖ –°–∏–≥–Ω–∞–ª quality_changed –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Camera changes
            self.graphics_panel.camera_changed.connect(self._on_camera_changed)
            print("‚úÖ –°–∏–≥–Ω–∞–ª camera_changed –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Effects changes
            self.graphics_panel.effects_changed.connect(self._on_effects_changed)
            print("‚úÖ –°–∏–≥–Ω–∞–ª effects_changed –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # Preset applied
            self.graphics_panel.preset_applied.connect(self._on_preset_applied)
            print("‚úÖ –°–∏–≥–Ω–∞–ª preset_applied –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            print("‚úÖ –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã GraphicsPanel –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

    # =================================================================
    # Graphics Panel Signal Handlers
    # =================================================================
    
    @Slot(dict)
    def _on_lighting_changed(self, lighting_params: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Å–≤–µ—â–µ–Ω–∏—è –æ—Ç GraphicsPanel
        
        Args:
            lighting_params: Dictionary with lighting parameters
        """
        print(f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        print(f"üí° MainWindow: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Å–≤–µ—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω—ã!")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {lighting_params}")
        print(f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        
        self.logger.info(f"Lighting changed: {lighting_params}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–µ –≤ QML —Å—Ü–µ–Ω–µ
        if self._qml_root_object:
            try:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é updateLighting
                if hasattr(self._qml_root_object, 'updateLighting'):
                    self._qml_root_object.updateLighting(lighting_params)
                    print(f"   ‚úÖ –û—Å–≤–µ—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ QML —á–µ—Ä–µ–∑ updateLighting()")
                else:
                    # Fallback: –ø—Ä—è–º–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–π—Å—Ç–≤
                    if 'key_light' in lighting_params:
                        key_light = lighting_params['key_light']
                        if 'brightness' in key_light:
                            self._qml_root_object.setProperty("keyLightBrightness", key_light['brightness'])
                        if 'color' in key_light:
                            self._qml_root_object.setProperty("keyLightColor", key_light['color'])
                        if 'angle_x' in key_light:
                            self._qml_root_object.setProperty("keyLightAngleX", key_light['angle_x'])
                        if 'angle_y' in key_light:
                            self._qml_root_object.setProperty("keyLightAngleY", key_light['angle_y'])
                        print(f"   ‚úÖ Key Light –æ–±–Ω–æ–≤–ª–µ–Ω")
                    
                    if 'fill_light' in lighting_params:
                        fill_light = lighting_params['fill_light']
                        if 'brightness' in fill_light:
                            self._qml_root_object.setProperty("fillLightBrightness", fill_light['brightness'])
                        if 'color' in fill_light:
                            self._qml_root_object.setProperty("fillLightColor", fill_light['color'])
                        print(f"   ‚úÖ Fill Light –æ–±–Ω–æ–≤–ª–µ–Ω")
                    
                    if 'point_light' in lighting_params:
                        point_light = lighting_params['point_light']
                        if 'brightness' in point_light:
                            self._qml_root_object.setProperty("pointLightBrightness", point_light['brightness'])
                        if 'position_y' in point_light:
                            self._qml_root_object.setProperty("pointLightY", point_light['position_y'])
                        print(f"   ‚úÖ Point Light –æ–±–Ω–æ–≤–ª–µ–Ω")
                
                self.status_bar.showMessage("–û—Å–≤–µ—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                print(f"üìä –°—Ç–∞—Ç—É—Å: –û—Å–≤–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ QML")
                print(f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                
            except Exception as e:
                print(f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                print(f"‚ùå –û–®–ò–ë–ö–ê –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å–≤–µ—â–µ–Ω–∏—è –≤ QML!")
                print(f"   Error: {e}")
                print(f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                self.logger.error(f"QML lighting update failed: {e}")
        else:
            print(f"‚ùå QML root object –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
    
    @Slot(dict)
    def _on_environment_changed(self, env_params: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ—Ç GraphicsPanel
        
        Args:
            env_params: Dictionary with environment parameters
        """
        print(f"üåç MainWindow: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω—ã: {env_params}")
        self.logger.info(f"Environment changed: {env_params}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤ QML —Å—Ü–µ–Ω–µ
        if self._qml_root_object:
            try:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é updateEnvironment
                if hasattr(self._qml_root_object, 'updateEnvironment'):
                    self._qml_root_object.updateEnvironment(env_params)
                    print(f"   ‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ QML —á–µ—Ä–µ–∑ updateEnvironment()")
                else:
                    # Fallback: –ø—Ä—è–º–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–π—Å—Ç–≤
                    if 'background_color' in env_params:
                        self._qml_root_object.setProperty("backgroundColor", env_params['background_color'])
                        print(f"   ‚úÖ –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {env_params['background_color']}")
                
                self.status_bar.showMessage("–û–∫—Ä—É–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ QML: {e}")
                self.logger.error(f"QML environment update failed: {e}")
        else:
            print(f"‚ùå QML root object –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
    
    @Slot(dict)
    def _on_quality_changed(self, quality_params: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç GraphicsPanel
        
        Args:
            quality_params: Dictionary with quality parameters
        """
        print(f"‚öôÔ∏è MainWindow: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–º–µ–Ω–µ–Ω—ã: {quality_params}")
        self.logger.info(f"Quality changed: {quality_params}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≤ QML —Å—Ü–µ–Ω–µ
        if self._qml_root_object:
            try:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é updateQuality
                if hasattr(self._qml_root_object, 'updateQuality'):
                    self._qml_root_object.updateQuality(quality_params)
                    print(f"   ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ QML —á–µ—Ä–µ–∑ updateQuality()")
                else:
                    # Fallback: –ø—Ä—è–º–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–π—Å—Ç–≤
                    if 'antialiasing' in quality_params:
                        aa_mode = quality_params['antialiasing']
                        self._qml_root_object.setProperty("antialiasingMode", aa_mode)
                        print(f"   ‚úÖ –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {aa_mode}")
                    
                    if 'aa_quality' in quality_params:
                        aa_quality = quality_params['aa_quality']
                        self._qml_root_object.setProperty("antialiasingQuality", aa_quality)
                        print(f"   ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {aa_quality}")
                    
                    if 'shadows_enabled' in quality_params:
                        shadows = quality_params['shadows_enabled']
                        self._qml_root_object.setProperty("shadowsEnabled", shadows)
                        print(f"   ‚úÖ –¢–µ–Ω–∏: {'–≤–∫–ª—é—á–µ–Ω—ã' if shadows else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}")
                
                self.status_bar.showMessage("–ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤ QML: {e}")
                self.logger.error(f"QML quality update failed: {e}")
        else:
            print(f"‚ùå QML root object –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

    @Slot(str)
    def _on_preset_applied(self, preset_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è –æ—Ç GraphicsPanel
        
        Args:
            preset_name: Name of applied preset ('day', 'night', 'industrial')
        """
        preset_names = {
            'day': '–î–Ω–µ–≤–Ω–æ–µ',
            'night': '–ù–æ—á–Ω–æ–µ', 
            'industrial': '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ'
        }
        
        display_name = preset_names.get(preset_name, preset_name)
        print(f"üé≠ MainWindow: –ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–µ—Å–µ—Ç –æ—Å–≤–µ—â–µ–Ω–∏—è '{display_name}'")
        self.logger.info(f"Lighting preset applied: {preset_name}")
        
        self.status_bar.showMessage(f"–ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–µ—Å–µ—Ç: {display_name}")
        # Preset application may affect lighting/materials ‚Äî flush quickly
        if self._qml_root_object:
            self._queue_qml_update('preset', {'name': preset_name})

    @Slot(str)
    def _on_sim_control(self, command: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–µ–π / Handle simulation control commands
        
        Args:
            command: "start", "stop", "pause", or "reset"
        """
        print(f"üéÆ SimControl: {command}")
        self.logger.info(f"Simulation control: {command}")
        
        try:
            if command == "start":
                if not self.is_simulation_running:
                    print("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏...")
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º state_bus —Å–∏–≥–Ω–∞–ª—ã –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö –≤—ã–∑–æ–≤–æ–≤
                    self.simulation_manager.state_bus.start_simulation.emit()
                    self.is_simulation_running = True
                    self.status_bar.showMessage("–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
                    self._start_time = None  # Reset animation timer
                    
                    # ‚ú® –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤ QML
                    if self._qml_root_object:
                        # Start immediately (do not batch start/stop commands)
                        try:
                            self._qml_root_object.setProperty("isRunning", True)
                            print("‚úÖ QML –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ (isRunning=True)")
                        except Exception:
                            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å isRunning=True, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")
                            self._queue_qml_update('control', {'isRunning': True})
                else:
                    print("‚ö†Ô∏è –°–∏–º—É–ª—è—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
                    
            elif command == "stop":
                if self.is_simulation_running:
                    print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏...")
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º state_bus —Å–∏–≥–Ω–∞–ª—ã
                    self.simulation_manager.state_bus.stop_simulation.emit()
                    self.is_simulation_running = False
                    self.status_bar.showMessage("–°–∏–º—É–ª—è—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    
                    # ‚ú® –ù–û–í–û–ï: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤ QML
                    if self._qml_root_object:
                        try:
                            self._qml_root_object.setProperty("isRunning", False)
                            print("‚úÖ QML –∞–Ω–∏–º–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (isRunning=False)")
                        except Exception:
                            self._queue_qml_update('control', {'isRunning': False})
                else:
                    print("‚ö†Ô∏è –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
                
            elif command == "pause":
                if self.is_simulation_running:
                    print("‚è∏Ô∏è –ü–∞—É–∑–∞ —Å–∏–º—É–ª—è—Ü–∏–∏...")
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º state_bus —Å–∏–≥–Ω–∞–ª—ã
                    self.simulation_manager.state_bus.pause_simulation.emit()
                    self.status_bar.showMessage("–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    
                    # ‚ú® –ù–û–í–û–ï: –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤ QML
                    if self._qml_root_object:
                        current_running = self._qml_root_object.property("isRunning")
                        self._qml_root_object.setProperty("isRunning", not current_running)
                        state_text = "–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞" if not current_running else "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
                        print(f"‚úÖ QML –∞–Ω–∏–º–∞—Ü–∏—è {state_text} (isRunning={not current_running})")
                else:
                    print("‚ö†Ô∏è –ù–µ—á–µ–≥–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å")
                    
            elif command == "reset":
                print("üîÑ –°–±—Ä–æ—Å —Å–∏–º—É–ª—è—Ü–∏–∏...")
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º state_bus —Å–∏–≥–Ω–∞–ª—ã
                self.simulation_manager.state_bus.reset_simulation.emit()
                self.is_simulation_running = False
                self.status_bar.showMessage("–°–∏–º—É–ª—è—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞")
                self._start_time = None  # Reset animation timer
                
                # ‚ú® –ù–û–í–û–ï: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≥–ª—ã –≤ QML
                if self._qml_root_object:
                    # Batch reset properties for fewer QML calls
                    reset_params = {
                        'isRunning': False,
                        'fl_angle': 0.0,
                        'fr_angle': 0.0,
                        'rl_angle': 0.0,
                        'rr_angle': 0.0,
                        'animationTime': 0.0
                    }
                    self._queue_qml_update('reset', reset_params)
                    print("‚úÖ QML –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–±—Ä–æ—Å")
                
            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–µ–π ({command}): {e}"
            print(f"‚ùå {error_msg}")
            self.logger.error(error_msg)
            self.status_bar.showMessage(f"–û—à–∏–±–∫–∞: {command}")
            import traceback
            traceback.print_exc()
    
    @Slot(dict)
    def _on_geometry_changed_qml(self, geometry_params: dict):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä—è–º–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –æ—Ç –ø–∞–Ω–µ–ª–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏
        
        Args:
            geometry_params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –æ—Ç –ø–∞–Ω–µ–ª–∏ (—É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)
        """
        print(f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        print(f"üî∫ MainWindow: –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª geometry_changed –æ—Ç –ø–∞–Ω–µ–ª–∏")
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ({len(geometry_params)}): {list(geometry_params.keys())}")
        print(f"   –ö–ª—é—á–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
        for key in ['frameLength', 'leverLength', 'trackWidth', 'rodPosition']:
            if key in geometry_params:
                print(f"      {key} = {geometry_params[key]}")
        print(f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        
        if not self._qml_root_object:
            print(f"‚ùå QML root object –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –°—Ö–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å—Å—è")
            print(f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
            return
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º updateGeometry —Ñ—É–Ω–∫—Ü–∏—é
            if hasattr(self._qml_root_object, 'updateGeometry'):
                print(f"   üîß –í—ã–∑—ã–≤–∞–µ–º updateGeometry() –≤ QML...")
                self._qml_root_object.updateGeometry(geometry_params)
                print(f"   ‚úÖ –ì–µ–æ–º–µ—Ç—Ä–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ QML —á–µ—Ä–µ–∑ updateGeometry()")
            else:
                print(f"   ‚ö†Ô∏è QML –æ–±—ä–µ–∫—Ç –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ updateGeometry, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                # Fallback: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–∞–ø—Ä—è–º—É—é
                property_map = {
                    'frameLength': 'userFrameLength',
                    'frameHeight': 'userFrameHeight', 
                    'frameBeamSize': 'userBeamSize',
                    'leverLength': 'userLeverLength',
                    'cylinderBodyLength': 'userCylinderLength',
                    'trackWidth': 'userTrackWidth',
                    'frameToPivot': 'userFrameToPivot',
                    'rodPosition': 'userRodPosition',
                    'boreHead': 'userBoreHead',
                    'boreRod': 'userBoreRod',
                    'rodDiameter': 'userRodDiameter',
                    'pistonThickness': 'userPistonThickness',
                    'pistonRodLength': 'userPistonRodLength'
                }
                
                updated_props = []
                for geom_key, qml_prop in property_map.items():
                    if geom_key in geometry_params:
                        try:
                            self._qml_root_object.setProperty(qml_prop, geometry_params[geom_key])
                            updated_props.append(f"{qml_prop}={geometry_params[geom_key]}")
                        except Exception as e:
                            print(f"      ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {qml_prop}: {e}")
                
                if updated_props:
                    print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤: {len(updated_props)}")
                    for prop in updated_props[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                        print(f"      {prop}")
                    if len(updated_props) > 3:
                        print(f"      ... –∏ –µ—â—ë {len(updated_props) - 3}")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ QML —Å—Ü–µ–Ω—ã
            if hasattr(self._qquick_widget, 'update'):
                self._qquick_widget.update()
                print(f"   üîÑ QML widget –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
            
            self.status_bar.showMessage("–ì–µ–æ–º–µ—Ç—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ 3D —Å—Ü–µ–Ω–µ")
            print(f"üìä –°—Ç–∞—Ç—É—Å: –ì–µ–æ–º–µ—Ç—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –≤ QML!")
            print(f"   Error: {e}")
            print(f"   Type: {type(e)}")
            import traceback
            traceback.print_exc()
            self.logger.error(f"QML geometry update failed: {e}")
            self.status_bar.showMessage(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏: {e}")
        
        print(f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    @Slot(dict)
    def _on_material_changed(self, material_params: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –æ—Ç GraphicsPanel
        
        Args:
            material_params: Dictionary with material parameters
        """
        print(f"üèóÔ∏è MainWindow: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω—ã: {material_params}")
        self.logger.info(f"Materials changed: {material_params}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ QML —Å—Ü–µ–Ω–µ
        if self._qml_root_object:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é updateMaterials
                if hasattr(self._qml_root_object, 'updateMaterials'):
                    self._qml_root_object.updateMaterials(material_params)
                    print(f"   ‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ QML —á–µ—Ä–µ–∑ updateMaterials()")
                else:
                    # Fallback: –ø—Ä—è–º–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–π—Å—Ç–≤
                    if 'metal' in material_params:
                        metal = material_params['metal']
                        if 'roughness' in metal:
                            self._qml_root_object.setProperty("metalRoughness", metal['roughness'])
                        if 'metalness' in metal:
                            self._qml_root_object.setProperty("metalMetalness", metal['metalness'])
                        print(f"   ‚úÖ –ú–µ—Ç–∞–ª–ª –æ–±–Ω–æ–≤–ª–µ–Ω")
                    
                    if 'glass' in material_params:
                        glass = material_params['glass']
                        if 'opacity' in glass:
                            self._qml_root_object.setProperty("glassOpacity", glass['opacity'])
                        if 'ior' in glass:
                            self._qml_root_object.setProperty("glassIOR", glass['ior'])
                            print(f"   ‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è —Å—Ç–µ–∫–ª–∞: {glass['ior']}")
                        print(f"   ‚úÖ –°—Ç–µ–∫–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                
                self.status_bar.showMessage("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ QML: {e}")
                self.logger.error(f"QML materials update failed: {e}")
        else:
            print(f"‚ùå QML root object –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

    @Slot(dict)
    def _on_camera_changed(self, camera_params: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–º–µ—Ä—ã –æ—Ç GraphicsPanel
        
        Args:
            camera_params: Dictionary with camera parameters
        """
        print(f"üì∑ MainWindow: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã –∏–∑–º–µ–Ω–µ–Ω—ã: {camera_params}")
        self.logger.info(f"Camera changed: {camera_params}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–º–µ—Ä—É –≤ QML —Å—Ü–µ–Ω–µ
        if self._qml_root_object:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é updateCamera
                if hasattr(self._qml_root_object, 'updateCamera'):
                    self._qml_root_object.updateCamera(camera_params)
                    print(f"   ‚úÖ –ö–∞–º–µ—Ä–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ QML —á–µ—Ä–µ–∑ updateCamera()")
                else:
                    # Fallback: –ø—Ä—è–º–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–π—Å—Ç–≤
                    if 'fov' in camera_params:
                        self._qml_root_object.setProperty("cameraFov", camera_params['fov'])
                        print(f"   ‚úÖ FOV –∫–∞–º–µ—Ä—ã: {camera_params['fov']}")
                    if 'auto_rotate' in camera_params:
                        self._qml_root_object.setProperty("autoRotate", camera_params['auto_rotate'])
                        print(f"   ‚úÖ –ê–≤—Ç–æ–≤—Ä–∞—â–µ–Ω–∏–µ: {camera_params['auto_rotate']}")
                
                self.status_bar.showMessage("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã –≤ QML: {e}")
                self.logger.error(f"QML camera update failed: {e}")
        else:
            print(f"‚ùå QML root object –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

    @Slot(dict)
    def _on_effects_changed(self, effects_params: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –æ—Ç GraphicsPanel
        
        Args:
            effects_params: Dictionary with effects parameters
        """
        print(f"‚ú® MainWindow: –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏–∑–º–µ–Ω–µ–Ω—ã: {effects_params}")
        self.logger.info(f"Effects changed: {effects_params}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ QML —Å—Ü–µ–Ω–µ
        if self._qml_root_object:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é updateEffects
                if hasattr(self._qml_root_object, 'updateEffects'):
                    self._qml_root_object.updateEffects(effects_params)
                    print(f"   ‚úÖ –≠—Ñ—Ñ–µ–∫—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ QML —á–µ—Ä–µ–∑ updateEffects()")
                else:
                    # Fallback: –ø—Ä—è–º–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–π—Å—Ç–≤
                    effect_updates = []
                    if 'bloom_enabled' in effects_params:
                        self._qml_root_object.setProperty("bloomEnabled", effects_params['bloom_enabled'])
                        effect_updates.append(f"Bloom: {effects_params['bloom_enabled']}")
                    if 'ssao_enabled' in effects_params:
                        self._qml_root_object.setProperty("ssaoEnabled", effects_params['ssao_enabled'])
                        effect_updates.append(f"SSAO: {effects_params['ssao_enabled']}")
                    if 'vignette_enabled' in effects_params:
                        self._qml_root_object.setProperty("vignetteEnabled", effects_params['vignette_enabled'])
                        effect_updates.append(f"Vignette: {effects_params['vignette_enabled']}")
                    
                    if effect_updates:
                        print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —ç—Ñ—Ñ–µ–∫—Ç—ã: {', '.join(effect_updates)}")
                
                self.status_bar.showMessage("–í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤ QML: {e}")
                self.logger.error(f"QML effects update failed: {e}")
        else:
            print(f"‚ùå QML root object –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

    @Slot(dict)
    def _on_animation_changed(self, animation_params: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç ModesPanel
        
        Args:
            animation_params: Dictionary with animation parameters (amplitude, frequency, phases)
        """
        self.logger.info(f"Animation changed: {animation_params}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ QML —Å—Ü–µ–Ω–µ
        if self._qml_root_object:
            try:
                print(f"üîß Setting QML animation properties: {animation_params}")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
                if 'amplitude' in animation_params:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞–º–ø–ª–∏—Ç—É–¥—É –∏–∑ –º–µ—Ç—Ä–æ–≤ –≤ –≥—Ä–∞–¥—É—Å—ã –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è —Ä—ã—á–∞–≥–∞
                    amplitude_deg = animation_params['amplitude'] * 1000 / 10  # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
                    self._qml_root_object.setProperty("userAmplitude", amplitude_deg)
                    print(f"   ‚úÖ Set userAmplitude = {amplitude_deg} deg")
                
                if 'frequency' in animation_params:
                    self._qml_root_object.setProperty("userFrequency", animation_params['frequency'])
                    print(f"   ‚úÖ Set userFrequency = {animation_params['frequency']} Hz")
                
                if 'phase' in animation_params:
                    self._qml_root_object.setProperty("userPhaseGlobal", animation_params['phase'])
                    print(f"   ‚úÖ Set userPhaseGlobal = {animation_params['phase']} deg")
                
                if 'lf_phase' in animation_params:
                    self._qml_root_object.setProperty("userPhaseFL", animation_params['lf_phase'])
                    print(f"   ‚úÖ Set userPhaseFL = {animation_params['lf_phase']} deg")
                
                if 'rf_phase' in animation_params:
                    self._qml_root_object.setProperty("userPhaseFR", animation_params['rf_phase'])
                    print(f"   ‚úÖ Set userPhaseFR = {animation_params['rf_phase']} deg")
                
                if 'lr_phase' in animation_params:
                    self._qml_root_object.setProperty("userPhaseRL", animation_params['lr_phase'])
                    print(f"   ‚úÖ Set userPhaseRL = {animation_params['lr_phase']} deg")
                
                if 'rr_phase' in animation_params:
                    self._qml_root_object.setProperty("userPhaseRR", animation_params['rr_phase'])
                    print(f"   ‚úÖ Set userPhaseRR = {animation_params['rr_phase']} deg")
                
                self.status_bar.showMessage("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                print(f"‚úÖ QML animation properties set successfully")
                    
            except Exception as e:
                self.logger.error(f"QML animation update failed: {e}")
                self.status_bar.showMessage(f"Animation update failed: {e}")
                import traceback
                traceback.print_exc()

    # =================================================================
    # Batch QML Update System (–¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
    # =================================================================
    
    def _queue_qml_update(self, update_type: str, params: dict):
        """–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ QML –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Args:
            update_type: –¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ('geometry', 'materials', 'lighting', etc.)
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        self._qml_update_queue[update_type] = params
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω)
        if not self._qml_flush_timer.isActive():
            self._qml_flush_timer.start(50)  # 50–º—Å –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    
    @Slot()
    def _flush_qml_updates(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è QML"""
        if not self._qml_update_queue or not self._qml_root_object:
            return
        
        try:
            print(f"üì¶ Flushing {len(self._qml_update_queue)} QML updates...")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è applyBatchedUpdates –≤ QML, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            if hasattr(self._qml_root_object, 'applyBatchedUpdates'):
                self._qml_root_object.applyBatchedUpdates(self._qml_update_queue)
                print(f"‚úÖ Applied batched updates via applyBatchedUpdates()")
            else:
                # Fallback: –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É
                for update_type, params in self._qml_update_queue.items():
                    print(f"   Applying {update_type}: {params}")
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä—è–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
                    for key, value in params.items():
                        try:
                            self._qml_root_object.setProperty(key, value)
                        except Exception as e:
                            print(f"     ‚ùå Failed to set {key}: {e}")
                
                print(f"‚úÖ Applied {len(self._qml_update_queue)} updates individually")
            
        except Exception as e:
            print(f"‚ùå Error flushing QML updates: {e}")
            self.logger.error(f"QML batch update failed: {e}")
        finally:
            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            self._qml_update_queue.clear()

    # =================================================================
    # MISSING METHODS - CRITICAL FIX
    # =================================================================
    
    def _setup_menus(self):
        """–°–æ–∑–¥–∞—Ç—å –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è / Create application menus"""
        menubar = self.menuBar()

        # File menu
        file_menu = menubar.addMenu("–§–∞–π–ª")
        
        # Preset actions
        save_preset_act = QAction("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç...", self)
        load_preset_act = QAction("–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ—Å–µ—Ç...", self)
        save_preset_act.triggered.connect(self._save_preset)
        load_preset_act.triggered.connect(self._load_preset)
        file_menu.addAction(save_preset_act)
        file_menu.addAction(load_preset_act)
        file_menu.addSeparator()
        
        # Export submenu
        export_menu = file_menu.addMenu("–≠–∫—Å–ø–æ—Ä—Ç")
        export_timeseries_act = QAction("–≠–∫—Å–ø–æ—Ä—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤...", self)
        export_snapshots_act = QAction("–≠–∫—Å–ø–æ—Ä—Ç —Å–Ω–∏–º–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è...", self)
        export_timeseries_act.triggered.connect(self._export_timeseries)
        export_snapshots_act.triggered.connect(self._export_snapshots)
        export_menu.addAction(export_timeseries_act)
        export_menu.addAction(export_snapshots_act)
        file_menu.addSeparator()
        
        # Exit
        exit_act = QAction("–í—ã—Ö–æ–¥", self)
        exit_act.setShortcut(QKeySequence.StandardKey.Quit)
        exit_act.triggered.connect(self.close)
        file_menu.addAction(exit_act)

        # View menu
        view_menu = menubar.addMenu("–í–∏–¥")
        reset_ui_act = QAction("–°–±—Ä–æ—Å–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", self)
        reset_ui_act.triggered.connect(self._reset_ui_layout)
        view_menu.addAction(reset_ui_act)

        # Settings menu
        settings_menu = menubar.addMenu("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        preferences_act = QAction("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã...", self)
        preferences_act.triggered.connect(self._show_preferences)
        settings_menu.addAction(preferences_act)

        # Help menu
        help_menu = menubar.addMenu("–°–ø—Ä–∞–≤–∫–∞")
        about_act = QAction("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", self)
        about_act.triggered.connect(self._show_about)
        help_menu.addAction(about_act)

    def _setup_toolbar(self):
        """–°–æ–∑–¥–∞—Ç—å –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ / Create toolbar"""
        toolbar = self.addToolBar("–û—Å–Ω–æ–≤–Ω–∞—è")
        toolbar.setObjectName("MainToolbar")
        toolbar.setMovable(True)
        
        # Simulation control actions
        start_act = QAction("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç", self)
        stop_act = QAction("‚èπÔ∏è –°—Ç–æ–ø", self)
        pause_act = QAction("‚è∏Ô∏è –ü–∞—É–∑–∞", self)
        reset_act = QAction("üîÑ –°–±—Ä–æ—Å", self)
        
        start_act.triggered.connect(lambda: self._on_sim_control("start"))
        stop_act.triggered.connect(lambda: self._on_sim_control("stop"))
        pause_act.triggered.connect(lambda: self._on_sim_control("pause"))
        reset_act.triggered.connect(lambda: self._on_sim_control("reset"))
        
        toolbar.addActions([start_act, stop_act, pause_act, reset_act])
        toolbar.addSeparator()
        
        # Toggle tabs action
        toggle_tabs_act = QAction("–°–∫—Ä—ã—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª–∏", self)
        toggle_tabs_act.setCheckable(True)
        toggle_tabs_act.setChecked(True)
        toggle_tabs_act.toggled.connect(self._toggle_tabs_visibility)
        toolbar.addAction(toggle_tabs_act)
        
        # Prevent toolbar from taking too much space
        toolbar.setMaximumHeight(50)

    def _setup_status_bar(self):
        """–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è / Create status bar"""
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        
        # Create status bar widgets
        self.sim_time_label = QLabel("–í—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏: 0.000—Å")
        self.sim_time_label.setMinimumWidth(150)
        
        self.step_count_label = QLabel("–®–∞–≥–æ–≤: 0")
        self.step_count_label.setMinimumWidth(80)
        
        self.fps_label = QLabel("FPS: 0")
        self.fps_label.setMinimumWidth(80)
        
        self.realtime_label = QLabel("RT: 1.00x")
        self.realtime_label.setMinimumWidth(80)
        
        self.queue_label = QLabel("–û—á–µ—Ä–µ–¥—å: 0/0")
        self.queue_label.setMinimumWidth(100)
        
        # Add widgets to status bar
        for widget in [self.sim_time_label, self.step_count_label, self.fps_label, 
                      self.realtime_label, self.queue_label]:
            self.status_bar.addPermanentWidget(widget)
        
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_bar.setMaximumHeight(30)

    def _connect_simulation_signals(self):
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã —Å–∏–º—É–ª—è—Ü–∏–∏ / Connect simulation signals"""
        try:
            bus = self.simulation_manager.state_bus
            bus.state_ready.connect(self._on_state_update, Qt.ConnectionType.QueuedConnection)
            bus.physics_error.connect(self._on_physics_error, Qt.ConnectionType.QueuedConnection)
            print("‚úÖ –°–∏–≥–Ω–∞–ª—ã —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")

    @Slot()
    def _update_render(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ / Update rendering"""
        if not self._qml_root_object:
            return
        
        try:
            # Update simulation info if available
            if hasattr(self, 'current_snapshot') and self.current_snapshot:
                sim_text = f"–í—Ä–µ–º—è: {self.current_snapshot.simulation_time:.2f}—Å | –®–∞–≥: {self.current_snapshot.step_number}"
                if hasattr(self._qml_root_object, 'setProperty'):
                    self._qml_root_object.setProperty("simulationText", sim_text)
                
                # Update status bar
                self.sim_time_label.setText(f"–í—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏: {self.current_snapshot.simulation_time:.3f}—Å")
                self.step_count_label.setText(f"–®–∞–≥–æ–≤: {self.current_snapshot.step_number}")
                
                if hasattr(self.current_snapshot, 'aggregates') and self.current_snapshot.aggregates.physics_step_time > 0:
                    fps = 1.0 / self.current_snapshot.aggregates.physics_step_time
                    self.fps_label.setText(f"FPS: {fps:.0f}")
            
            # Update queue stats if available
            if hasattr(self.simulation_manager, 'get_queue_stats'):
                try:
                    stats = self.simulation_manager.get_queue_stats()
                    self.queue_label.setText(f"–û—á–µ—Ä–µ–¥—å: {stats.get('get_count', 0)}/{stats.get('put_count', 0)}")
                except:
                    pass
                    
        except Exception as e:
            # Fail silently to avoid spamming console
            pass

    def _restore_settings(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞ / Restore window settings"""
        try:
            settings = QSettings(self.SETTINGS_ORG, self.SETTINGS_APP)
            
            # Restore geometry (window size and position)
            if geometry := settings.value(self.SETTINGS_GEOMETRY):
                self.restoreGeometry(geometry)
            
            # Restore window state (toolbars, dock widgets)
            if state := settings.value(self.SETTINGS_STATE):
                self.restoreState(state)
            
            # Restore splitter positions
            if hasattr(self, 'main_horizontal_splitter') and self.main_horizontal_splitter:
                if splitter_state := settings.value(self.SETTINGS_HORIZONTAL_SPLITTER):
                    self.main_horizontal_splitter.restoreState(splitter_state)
            
            if hasattr(self, 'main_splitter') and self.main_splitter:
                if splitter_state := settings.value(self.SETTINGS_SPLITTER):
                    self.main_splitter.restoreState(splitter_state)
                    
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")

    # =================================================================
    # Event Handlers and Signal Slots
    # =================================================================

    @Slot(object)
    def _on_state_update(self, snapshot):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏"""
        self.current_snapshot = snapshot
        if self.chart_widget and snapshot:
            self.chart_widget.update_from_snapshot(snapshot)

    @Slot(str)
    def _on_physics_error(self, msg: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ñ–∏–∑–∏–∫–∏"""
        self.status_bar.showMessage(f"–û—à–∏–±–∫–∞ —Ñ–∏–∑–∏–∫–∏: {msg}", 5000)
        self.logger.error(f"Physics error: {msg}")

    def _toggle_tabs_visibility(self, visible: bool):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –≤–∫–ª–∞–¥–æ–∫"""
        if self.tab_widget:
            self.tab_widget.setVisible(visible)
        status_msg = "–ü–∞–Ω–µ–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã" if visible else "–ü–∞–Ω–µ–ª–∏ —Å–∫—Ä—ã—Ç—ã"
        self.status_bar.showMessage(status_msg)

    # =================================================================
    # Menu Actions (Stubs)
    # =================================================================

    def _save_preset(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∑–∞–≥–ª—É—à–∫–∞)"""
        from PySide6.QtWidgets import QMessageBox
        QMessageBox.information(self, "–ü—Ä–µ—Å–µ—Ç", "–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ")

    def _load_preset(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ—Å–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∑–∞–≥–ª—É—à–∫–∞)"""
        from PySide6.QtWidgets import QMessageBox
        QMessageBox.information(self, "–ü—Ä–µ—Å–µ—Ç", "–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ")

    def _export_timeseries(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)"""
        from PySide6.QtWidgets import QMessageBox
        QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", "–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ")

    def _export_snapshots(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–Ω–∏–º–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)"""
        from PySide6.QtWidgets import QMessageBox
        QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", "–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–Ω–∏–º–∫–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ")

    def _reset_ui_layout(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –º–∞–∫–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
        self.status_bar.showMessage("–ú–∞–∫–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–±—Ä–æ—à–µ–Ω")

    def _show_preferences(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∑–∞–≥–ª—É—à–∫–∞)"""
        from PySide6.QtWidgets import QMessageBox
        QMessageBox.information(self, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ")

    def _show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ'"""
        from PySide6.QtWidgets import QMessageBox
        QMessageBox.about(
            self,
            "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ PneumoStabSim",
            "PneumoStabSim Professional v2.0.1\n\n"
            "–°–∏–º—É–ª—è—Ç–æ—Ä –ø–Ω–µ–≤–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä–æ–≤\n"
            "—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª–∞\n\n"
            "¬© 2025 PneumoStabSim Project"
        )

    # =================================================================
    # Window Events and Cleanup
    # =================================================================

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        try:
            self.logger.info("Main window closing")
            
            # Stop render timer
            if hasattr(self, 'render_timer'):
                self.render_timer.stop()
            
            # Save settings
            self._save_settings()
            
            # Stop simulation manager
            if hasattr(self, 'simulation_manager'):
                self.simulation_manager.stop()
            
            event.accept()
            self.logger.info("Main window closed successfully")
        except Exception as e:
            self.logger.error(f"Error during window close: {e}")
            event.accept()  # Close anyway

    def _save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞"""
        try:
            settings = QSettings(self.SETTINGS_ORG, self.SETTINGS_APP)
            settings.setValue(self.SETTINGS_GEOMETRY, self.saveGeometry())
            settings.setValue(self.SETTINGS_STATE, self.saveState())
            
            # Save splitter states
            if hasattr(self, 'main_horizontal_splitter') and self.main_horizontal_splitter:
                settings.setValue(self.SETTINGS_HORIZONTAL_SPLITTER, self.main_horizontal_splitter.saveState())
            
            if hasattr(self, 'main_splitter') and self.main_splitter:
                settings.setValue(self.SETTINGS_SPLITTER, self.main_splitter.saveState())
                
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")

    def showEvent(self, event):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ showEvent –¥–ª—è –∑–∞–ø—É—Å–∫–∞ SimulationManager –ü–û–°–õ–ï –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–∫–Ω–∞"""
        super().showEvent(event)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º simulation manager —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–∫–Ω–∞
        if not self._sim_started:
            print("\nüöÄ –û–∫–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ - –∑–∞–ø—É—Å–∫ SimulationManager...")
            try:
                self.simulation_manager.start()
                self._sim_started = True
                print("‚úÖ SimulationManager –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ\n")
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å SimulationManager: {e}")
                import traceback
                traceback.print_exc()

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        try:
            self.logger.info("Main window closing")
            
            # Stop render timer
            if hasattr(self, 'render_timer'):
                self.render_timer.stop()
            
            # Save settings
            self._save_settings()
            
            # Stop simulation manager
            if hasattr(self, 'simulation_manager'):
                self.simulation_manager.stop()
            
            event.accept()
            self.logger.info("Main window closed successfully")
        except Exception as e:
            self.logger.error(f"Error during window close: {e}")
            event.accept()  # Close anyway
