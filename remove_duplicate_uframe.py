#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è 3 Model –¥–ª—è U-—Ä–∞–º—ã –∏–∑ main.qml
"""

import re
from pathlib import Path
from datetime import datetime

def remove_duplicate_uframe():
    """–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è 3 Model –¥–ª—è U-—Ä–∞–º—ã"""
    
    main_qml = Path("assets/qml/main.qml")
    
    if not main_qml.exists():
        print(f"‚ùå {main_qml} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    print(f"üìñ –ß–∏—Ç–∞–µ–º {main_qml}...")
    with open(main_qml, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    print(f"üìè –ò—Å—Ö–æ–¥–Ω–æ: {len(lines)} —Å—Ç—Ä–æ–∫")
    
    # –ò—â–µ–º –±–ª–æ–∫ —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è Model –º–µ–∂–¥—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º "// U-FRAME" –∏ "// Frame component"
    # –ü–∞—Ç—Ç–µ—Ä–Ω: –∏—â–µ–º —Å—Ç—Ä–æ–∫—É —Å "// U-FRAME" –∏ —Å–ª–µ–¥—É—é—â–∏–µ 3 Model –±–ª–æ–∫–∞ –¥–æ "// Frame component"
    
    start_idx = None
    end_idx = None
    
    for i, line in enumerate(lines):
        if '// U-FRAME (3 beams)' in line and 'controlled materials' in line:
            start_idx = i
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π –±–ª–æ–∫ U-FRAME –Ω–∞ —Å—Ç—Ä–æ–∫–µ {i+1}")
        
        if start_idx is not None and '// ‚úÖ Frame component' in line:
            end_idx = i
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ {i+1}")
            break
    
    if start_idx is None:
        print("‚ö†Ô∏è –°—Ç–∞—Ä—ã–π –±–ª–æ–∫ U-FRAME –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    if end_idx is None:
        print("‚ö†Ô∏è –ì—Ä–∞–Ω–∏—Ü–∞ Frame component –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Model –º–µ–∂–¥—É start –∏ end
    models_count = 0
    for i in range(start_idx, end_idx):
        if 'Model {' in lines[i]:
            models_count += 1
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {models_count} Model –±–ª–æ–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    print(f"   –°—Ç—Ä–æ–∫–∏ {start_idx+1} - {end_idx}")
    
    if models_count != 3:
        print(f"‚ö†Ô∏è –û–∂–∏–¥–∞–ª–æ—Å—å 3 Model, –Ω–∞–π–¥–µ–Ω–æ {models_count}")
        print("   –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å")
    
    # –°–æ–∑–¥–∞—ë–º backup
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = main_qml.with_suffix(f'.qml.backup_uframe_{timestamp}')
    print(f"üíæ –°–æ–∑–¥–∞—ë–º backup: {backup_path}")
    
    with open(backup_path, 'w', encoding='utf-8') as f:
        f.writelines(lines)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –æ—Ç start –¥–æ end (–Ω–µ –≤–∫–ª—é—á–∞—è end)
    new_lines = lines[:start_idx] + lines[end_idx:]
    
    print(f"üìè –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {len(new_lines)} —Å—Ç—Ä–æ–∫")
    print(f"   –£–¥–∞–ª–µ–Ω–æ: {len(lines) - len(new_lines)} —Å—Ç—Ä–æ–∫")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with open(main_qml, 'w', encoding='utf-8') as f:
        f.writelines(new_lines)
    
    print("‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –±–ª–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 70)
    print("üßπ –£–î–ê–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø U-FRAME MODEL")
    print("=" * 70)
    print()
    
    success = remove_duplicate_uframe()
    
    print()
    print("=" * 70)
    if success:
        print("‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("   –°—Ç–∞—Ä—ã–µ 3 Model –¥–ª—è U-—Ä–∞–º—ã —É–¥–∞–ª–µ–Ω—ã")
        print("   –û—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ Frame –∫–æ–º–ø–æ–Ω–µ–Ω—Ç")
    else:
        print("‚ö†Ô∏è –ù–ò–ß–ï–ì–û –ù–ï –ò–ó–ú–ï–ù–ï–ù–û")
        print("   –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    print("=" * 70)

if __name__ == "__main__":
    main()
