#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è PneumoStabSim
Environment diagnostics for PneumoStabSim
"""
import sys
import os
from pathlib import Path

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print("üêç PYTHON VERSION CHECK")
    print(f"   Version: {sys.version}")
    print(f"   Executable: {sys.executable}")
    
    if sys.version_info < (3, 8):
        print("   ‚ùå ERROR: Python 3.8+ required")
        return False
    else:
        print("   ‚úÖ OK: Python version is compatible")
        return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ DEPENDENCIES CHECK")
    
    required_packages = [
        'PySide6',
        'numpy',
        'scipy',
        'matplotlib',
        'OpenGL'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            if package == 'OpenGL':
                import OpenGL.GL
                version = "installed"
            else:
                module = __import__(package)
                version = getattr(module, '__version__', 'unknown')
            
            print(f"   ‚úÖ {package}: {version}")
        except ImportError as e:
            print(f"   ‚ùå {package}: NOT FOUND")
            missing_packages.append(package)
    
    return len(missing_packages) == 0

def check_qt_functionality():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Qt"""
    print("\nüñºÔ∏è  QT FUNCTIONALITY CHECK")
    
    try:
        from PySide6.QtCore import QCoreApplication, qVersion
        from PySide6.QtWidgets import QApplication
        from PySide6.QtQuick3D import QQuick3DGeometry
        from PySide6.QtQuickWidgets import QQuickWidget
        
        print(f"   ‚úÖ Qt Version: {qVersion()}")
        print("   ‚úÖ QtCore: OK")
        print("   ‚úÖ QtWidgets: OK")  
        print("   ‚úÖ QtQuick3D: OK")
        print("   ‚úÖ QtQuickWidgets: OK")
        return True
        
    except ImportError as e:
        print(f"   ‚ùå Qt Import Error: {e}")
        return False

def check_project_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüìÅ PROJECT STRUCTURE CHECK")
    
    required_dirs = [
        'src',
        'src/ui',
        'src/ui/panels',
        'src/ui/widgets',
        'src/common',
        'src/runtime',
        'assets',
        'assets/qml'
    ]
    
    required_files = [
        'app.py',
        'requirements.txt',
        'assets/qml/main.qml',
        'src/ui/main_window.py',
        'src/ui/panels/panel_geometry.py',
        'src/ui/widgets/range_slider.py'
    ]
    
    all_good = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫
    for dir_path in required_dirs:
        if Path(dir_path).exists():
            print(f"   ‚úÖ {dir_path}/")
        else:
            print(f"   ‚ùå {dir_path}/ - NOT FOUND")
            all_good = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    for file_path in required_files:
        if Path(file_path).exists():
            print(f"   ‚úÖ {file_path}")
        else:
            print(f"   ‚ùå {file_path} - NOT FOUND")
            all_good = False
    
    return all_good

def check_graphics_backend():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–µ–Ω–¥–∞"""
    print("\nüé® GRAPHICS BACKEND CHECK")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    rhi_backend = os.environ.get("QSG_RHI_BACKEND", "not set")
    print(f"   QSG_RHI_BACKEND: {rhi_backend}")
    
    if rhi_backend == "d3d11":
        print("   ‚úÖ Direct3D 11 backend configured")
    else:
        print("   ‚ö†Ô∏è  Direct3D 11 not explicitly set")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenGL
    try:
        import OpenGL.GL as gl
        print("   ‚úÖ OpenGL available")
        return True
    except ImportError:
        print("   ‚ùå OpenGL not available")
        return False

def run_minimal_test():
    """–ó–∞–ø—É—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ Qt –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüß™ MINIMAL QT TEST")
    
    try:
        from PySide6.QtWidgets import QApplication, QLabel, QWidget
        from PySide6.QtCore import Qt
        
        app = QApplication([])
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –æ–∫–Ω–æ
        window = QWidget()
        window.setWindowTitle("PneumoStabSim Environment Test")
        window.resize(300, 200)
        
        label = QLabel("Environment test successful!\nQt is working properly.", window)
        label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        label.setGeometry(50, 50, 200, 100)
        
        window.show()
        
        print("   ‚úÖ Qt application created successfully")
        print("   ‚úÖ Test window should be visible")
        print("   üìù Close the test window to continue...")
        
        app.exec()  # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        return True
        
    except Exception as e:
        print(f"   ‚ùå Qt test failed: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("=" * 60)
    print("üîß PneumoStabSim Environment Diagnostics")
    print("=" * 60)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫
    results = {
        'python': check_python_version(),
        'dependencies': check_dependencies(),
        'qt': check_qt_functionality(),
        'structure': check_project_structure(),
        'graphics': check_graphics_backend()
    }
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìã SUMMARY REPORT")
    print("=" * 60)
    
    all_passed = True
    for test_name, passed in results.items():
        status = "‚úÖ PASS" if passed else "‚ùå FAIL"
        print(f"   {test_name.upper():12}: {status}")
        if not passed:
            all_passed = False
    
    if all_passed:
        print("\nüéâ ALL CHECKS PASSED!")
        print("   Environment is ready for PneumoStabSim")
        print("   You can run: py app.py")
        
        # –ü—Ä–µ–¥–ª–æ–∂–∏–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
        response = input("\nüß™ Run minimal Qt test? (y/n): ").lower()
        if response == 'y':
            run_minimal_test()
            
    else:
        print("\n‚ö†Ô∏è  SOME CHECKS FAILED!")
        print("   Please fix the issues above before running PneumoStabSim")
        print("   Install missing dependencies: py -m pip install -r requirements.txt")
    
    print("\n" + "=" * 60)

if __name__ == "__main__":
    main()
