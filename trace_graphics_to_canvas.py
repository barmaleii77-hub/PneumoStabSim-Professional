#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç –ü–û–õ–ù–ê–Ø –¢–†–ê–°–°–ò–†–û–í–ö–ê –ì–†–ê–§–ò–ß–ï–°–ö–ò–• –ü–ê–†–ê–ú–ï–¢–†–û–í –î–û CANVAS
–ü—Ä–æ–≤–µ—Ä—è–µ–º –í–ï–°–¨ –ü–£–¢–¨: Python ‚Üí QML ‚Üí ExtendedSceneEnvironment ‚Üí Canvas Rendering
"""

import sys
from pathlib import Path


def trace_parameter_to_canvas(param_name: str):
    """–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –æ—Ç Python –¥–æ Canvas"""

    print(f"\n{'='*80}")
    print(f"üîç –¢–†–ê–°–°–ò–†–û–í–ö–ê –ü–ê–†–ê–ú–ï–¢–†–ê: {param_name}")
    print(f"{'='*80}")

    # –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ GraphicsPanel
    graphics_panel = Path("src/ui/panels/panel_graphics.py")
    if graphics_panel.exists():
        content = graphics_panel.read_text(encoding="utf-8")

        # –ü–æ–∏—Å–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ current_graphics
        if f"'{param_name}'" in content or f'"{param_name}"' in content:
            print("‚úÖ –®–ê–ì 1: –ù–∞–π–¥–µ–Ω –≤ GraphicsPanel current_graphics")

            # –ü–æ–∏—Å–∫ emit —Ñ—É–Ω–∫—Ü–∏–∏
            emit_found = False
            for emit_func in [
                "emit_lighting_update",
                "emit_material_update",
                "emit_environment_update",
                "emit_quality_update",
                "emit_camera_update",
                "emit_effects_update",
            ]:
                if f"def {emit_func}" in content:
                    func_start = content.find(f"def {emit_func}")
                    func_end = content.find("\n    def ", func_start + 1)
                    if func_end == -1:
                        func_end = len(content)
                    func_body = content[func_start:func_end]

                    if param_name in func_body:
                        print(f"‚úÖ –®–ê–ì 2: –ü–∞—Ä–∞–º–µ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ {emit_func}()")
                        emit_found = True

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª
                        signal_name = emit_func.replace("emit_", "") + "_changed"
                        if signal_name in content:
                            print(f"‚úÖ –®–ê–ì 3: –°–∏–≥–Ω–∞–ª {signal_name} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        else:
                            print(f"‚ùå –®–ê–ì 3: –°–∏–≥–Ω–∞–ª {signal_name} –ù–ï –ù–ê–ô–î–ï–ù!")
                        break

            if not emit_found:
                print("‚ùå –®–ê–ì 2: –ü–∞—Ä–∞–º–µ—Ç—Ä –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ QML!")
        else:
            print("‚ùå –®–ê–ì 1: –ü–∞—Ä–∞–º–µ—Ç—Ä –ù–ï –Ω–∞–π–¥–µ–Ω –≤ GraphicsPanel!")
            return

    # –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ MainWindow
    main_window = Path("src/ui/main_window.py")
    if main_window.exists():
        content = main_window.read_text(encoding="utf-8")

        # –ü–æ–∏—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
        handler_found = False
        for handler in [
            "_on_lighting_changed",
            "_on_material_changed",
            "_on_environment_changed",
            "_on_quality_changed",
            "_on_camera_changed",
            "_on_effects_changed",
        ]:
            if handler in content:
                handler_start = content.find(f"def {handler}")
                handler_end = content.find("\n    def ", handler_start + 1)
                if handler_end == -1:
                    handler_end = content.find("\n    @Slot", handler_start + 1)
                if handler_end == -1:
                    handler_end = len(content)
                handler_body = content[handler_start:handler_end]

                if (
                    "invokeMethod" in handler_body
                    or "updateLighting" in handler_body
                    or "updateMaterials" in handler_body
                    or "updateEnvironment" in handler_body
                    or "updateQuality" in handler_body
                    or "updateEffects" in handler_body
                ):
                    print(f"‚úÖ –®–ê–ì 4: MainWindow –≤—ã–∑—ã–≤–∞–µ—Ç QML —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ {handler}")
                    handler_found = True
                    break

        if not handler_found:
            print("‚ùå –®–ê–ì 4: MainWindow –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç QML —Ñ—É–Ω–∫—Ü–∏—é!")

    # –®–ê–ì 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ main.qml
    main_qml = Path("assets/qml/main.qml")
    if main_qml.exists():
        content = main_qml.read_text(encoding="utf-8")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ property
        qml_property_found = False
        for prop_pattern in [
            f"property real {param_name}",
            f"property bool {param_name}",
            f"property int {param_name}",
            f"property string {param_name}",
            f"property color {param_name}",
            f"property url {param_name}",
        ]:
            if prop_pattern in content:
                print(f"‚úÖ –®–ê–ì 5: QML property –æ–±—ä—è–≤–ª–µ–Ω: {prop_pattern}")
                qml_property_found = True
                break

        if not qml_property_found:
            print(f"‚ùå –®–ê–ì 5: QML property {param_name} –ù–ï –û–ë–™–Ø–í–õ–ï–ù!")
            return

        # –®–ê–ì 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ update —Ñ—É–Ω–∫—Ü–∏–π
        update_found = False
        for update_func in [
            "applyLightingUpdates",
            "applyMaterialUpdates",
            "applyEnvironmentUpdates",
            "applyQualityUpdates",
            "applyCameraUpdates",
            "applyEffectsUpdates",
        ]:
            if f"function {update_func}" in content:
                func_start = content.find(f"function {update_func}")
                func_end = content.find("\n    }", func_start)
                if func_end == -1:
                    func_end = content.find("\n    function ", func_start + 1)
                if func_end == -1:
                    func_end = len(content)
                func_body = content[func_start:func_end]

                if param_name in func_body:
                    print(f"‚úÖ –®–ê–ì 6: –ü–∞—Ä–∞–º–µ—Ç—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ {update_func}()")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
                    if f"{param_name} =" in func_body:
                        print("‚úÖ –®–ê–ì 7: –ü–∞—Ä–∞–º–µ—Ç—Ä –ü–†–ò–°–í–ê–ò–í–ê–ï–¢–°–Ø –≤ QML property")
                        update_found = True
                    else:
                        print("‚ùå –®–ê–ì 7: –ü–∞—Ä–∞–º–µ—Ç—Ä –ù–ï –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è!")
                    break

        if not update_found:
            print("‚ùå –®–ê–ì 6: –ü–∞—Ä–∞–º–µ—Ç—Ä –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ update —Ñ—É–Ω–∫—Ü–∏—è—Ö!")
            return

        # –®–ê–ì 8: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ ExtendedSceneEnvironment –∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
        canvas_found = False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ ExtendedSceneEnvironment
        if "ExtendedSceneEnvironment {" in content:
            env_start = content.find("ExtendedSceneEnvironment {")
            env_end = content.find("\n        }", env_start)
            if env_end == -1:
                env_end = len(content)
            env_body = content[env_start:env_end]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫ —Å–≤–æ–π—Å—Ç–≤—É ExtendedSceneEnvironment
            if f": {param_name}" in env_body or f": root.{param_name}" in env_body:
                print("‚úÖ –®–ê–ì 8: –ü–∞—Ä–∞–º–µ—Ç—Ä –ü–†–ò–í–Ø–ó–ê–ù –∫ ExtendedSceneEnvironment!")
                canvas_found = True

                # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
                for line in env_body.split("\n"):
                    if param_name in line and ":" in line:
                        prop_name = line.split(":")[0].strip()
                        print(f"   üìå –ü—Ä–∏–≤—è–∑–∫–∞: {prop_name}: {param_name}")
            else:
                print("‚ö†Ô∏è –®–ê–ì 8: –ü–∞—Ä–∞–º–µ—Ç—Ä –ù–ï –ø—Ä–∏–≤—è–∑–∞–Ω –∫ ExtendedSceneEnvironment!")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö (PrincipledMaterial)
        if "PrincipledMaterial {" in content:
            mat_positions = []
            start = 0
            while True:
                pos = content.find("PrincipledMaterial {", start)
                if pos == -1:
                    break
                mat_positions.append(pos)
                start = pos + 1

            for mat_start in mat_positions:
                mat_end = content.find("\n            }", mat_start)
                if mat_end == -1:
                    mat_end = len(content)
                mat_body = content[mat_start:mat_end]

                if f": {param_name}" in mat_body or f": root.{param_name}" in mat_body:
                    print("‚úÖ –®–ê–ì 8: –ü–∞—Ä–∞–º–µ—Ç—Ä –ü–†–ò–í–Ø–ó–ê–ù –∫ PrincipledMaterial!")
                    canvas_found = True

                    # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    for line in mat_body.split("\n"):
                        if param_name in line and ":" in line:
                            prop_name = line.split(":")[0].strip()
                            print(f"   üìå –ü—Ä–∏–≤—è–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {prop_name}: {param_name}")
                    break

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ DirectionalLight/PointLight
        for light_type in ["DirectionalLight {", "PointLight {"]:
            if light_type in content:
                light_start = content.find(light_type)
                light_end = content.find("\n        }", light_start)
                if light_end == -1:
                    light_end = len(content)
                light_body = content[light_start:light_end]

                if (
                    f": {param_name}" in light_body
                    or f": root.{param_name}" in light_body
                ):
                    print(
                        f"‚úÖ –®–ê–ì 8: –ü–∞—Ä–∞–º–µ—Ç—Ä –ü–†–ò–í–Ø–ó–ê–ù –∫ {light_type.replace(' {', '')}!"
                    )
                    canvas_found = True

                    for line in light_body.split("\n"):
                        if param_name in line and ":" in line:
                            prop_name = line.split(":")[0].strip()
                            print(f"   üìå –ü—Ä–∏–≤—è–∑–∫–∞ —Å–≤–µ—Ç–∞: {prop_name}: {param_name}")

        if not canvas_found:
            print("‚ùå –®–ê–ì 8 –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô: –ü–∞—Ä–∞–º–µ—Ç—Ä –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø –í –†–ï–ù–î–ï–†–ò–ù–ì–ï!")
            print("   ‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä –µ—Å—Ç—å –≤ QML, –Ω–æ –ù–ï –ü–†–ò–í–Ø–ó–ê–ù –∫ –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º!")
            print(
                "   üí° –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –∫ ExtendedSceneEnvironment/PrincipledMaterial/Light"
            )
        else:
            print("‚úÖ –ü–û–õ–ù–ê–Ø –¶–ï–ü–û–ß–ö–ê: Python ‚Üí QML ‚Üí Canvas –†–ê–ë–û–¢–ê–ï–¢!")

    print(f"{'='*80}\n")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""

    print("üîç –î–ï–¢–ï–ö–¢–ò–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ì–†–ê–§–ò–ß–ï–°–ö–ò–• –ü–ê–†–ê–ú–ï–¢–†–û–í –î–û CANVAS")
    print("=" * 80)

    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    critical_params = {
        # –û—Å–≤–µ—â–µ–Ω–∏–µ
        "keyLightBrightness": "–Ø—Ä–∫–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–≤–µ—Ç–∞",
        "keyLightColor": "–¶–≤–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–≤–µ—Ç–∞",
        "fillLightBrightness": "–Ø—Ä–∫–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω—è—é—â–µ–≥–æ —Å–≤–µ—Ç–∞",
        "pointLightBrightness": "–Ø—Ä–∫–æ—Å—Ç—å —Ç–æ—á–µ—á–Ω–æ–≥–æ —Å–≤–µ—Ç–∞",
        # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã - –ö–†–ò–¢–ò–ß–ù–û!
        "metalRoughness": "–®–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç—å –º–µ—Ç–∞–ª–ª–∞",
        "metalMetalness": "–ú–µ—Ç–∞–ª–ª–∏—á–Ω–æ—Å—Ç—å",
        "glassOpacity": "–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Å—Ç–µ–∫–ª–∞",
        "glassRoughness": "–®–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç—å —Å—Ç–µ–∫–ª–∞",
        "glassIOR": "üî• –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢ –ü–†–ï–õ–û–ú–õ–ï–ù–ò–Ø (IOR)",
        # –û–∫—Ä—É–∂–µ–Ω–∏–µ
        "backgroundColor": "–¶–≤–µ—Ç —Ñ–æ–Ω–∞",
        "iblEnabled": "üî• IBL –í–ö–õ–Æ–ß–ï–ù–ò–ï",
        "iblIntensity": "üî• IBL –ò–ù–¢–ï–ù–°–ò–í–ù–û–°–¢–¨",
        "skyboxEnabled": "Skybox –≤–∫–ª—é—á–µ–Ω–∏–µ",
        "fogEnabled": "–¢—É–º–∞–Ω –≤–∫–ª—é—á–µ–Ω–∏–µ",
        # –≠—Ñ—Ñ–µ–∫—Ç—ã
        "bloomEnabled": "Bloom –≤–∫–ª—é—á–µ–Ω–∏–µ",
        "bloomIntensity": "Bloom –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å",
        "bloomThreshold": "üî• BLOOM –ü–û–†–û–ì",
        "ssaoEnabled": "SSAO –≤–∫–ª—é—á–µ–Ω–∏–µ",
        "ssaoIntensity": "SSAO –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å",
        "ssaoRadius": "üî• SSAO –†–ê–î–ò–£–°",
        "tonemapEnabled": "üî• –¢–û–ù–ï–ú–ê–ü–ü–ò–ù–ì –í–ö–õ–Æ–ß–ï–ù–ò–ï",
        "tonemapMode": "üî• –†–ï–ñ–ò–ú –¢–û–ù–ï–ú–ê–ü–ü–ò–ù–ì–ê",
        "depthOfFieldEnabled": "Depth of Field",
        "dofFocusDistance": "üî• DOF –î–ò–°–¢–ê–ù–¶–ò–Ø –§–û–ö–£–°–ê",
        "lensFlareEnabled": "Lens Flare –≤–∫–ª—é—á–µ–Ω–∏–µ",
        # –ö–∞—á–µ—Å—Ç–≤–æ
        "shadowsEnabled": "–¢–µ–Ω–∏ –≤–∫–ª—é—á–µ–Ω–∏–µ",
        "shadowSoftness": "üî• –ú–Ø–ì–ö–û–°–¢–¨ –¢–ï–ù–ï–ô",
        "antialiasingMode": "–†–µ–∂–∏–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è",
    }

    broken_params = []
    working_params = []

    for param, description in critical_params.items():
        print(f"\n{'üî•' if 'üî•' in description else 'üìù'} –ü—Ä–æ–≤–µ—Ä—è–µ–º: {description}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
        import io
        import contextlib

        output = io.StringIO()
        with contextlib.redirect_stdout(output):
            trace_parameter_to_canvas(param)

        result = output.getvalue()

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if "‚ùå –®–ê–ì 8 –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô" in result:
            broken_params.append((param, description, "–ù–ï –ü–†–ò–í–Ø–ó–ê–ù –ö CANVAS"))
            print(f"‚ùå –°–õ–û–ú–ê–ù–û: {param} - –ù–ï –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É!")
        elif "‚ùå" in result:
            broken_params.append((param, description, "–ü–†–û–ë–õ–ï–ú–ê –í –¶–ï–ü–û–ß–ö–ï"))
            print(f"‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: {param} - –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ü–µ–ø–æ—á–∫–µ")
        else:
            working_params.append((param, description))
            print(f"‚úÖ –†–ê–ë–û–¢–ê–ï–¢: {param}")

    # –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢
    print("\n" + "=" * 80)
    print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó - –í–õ–ò–Ø–ù–ò–ï –ù–ê –ö–ê–†–¢–ò–ù–ö–£")
    print("=" * 80)

    print(f"\n‚úÖ –†–ê–ë–û–¢–ê–Æ–©–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´ ({len(working_params)}/{len(critical_params)}):")
    for param, desc in working_params:
        print(f"   ‚úÖ {param}: {desc}")

    if broken_params:
        print(f"\n‚ùå –°–õ–û–ú–ê–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ ({len(broken_params)}/{len(critical_params)}):")
        for param, desc, reason in broken_params:
            print(f"   ‚ùå {param}: {desc}")
            print(f"      üí• –ü–†–ò–ß–ò–ù–ê: {reason}")

        print("\n" + "=" * 80)
        print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê!")
        print("=" * 80)
        print(
            f"–ù–∞–π–¥–µ–Ω–æ {len(broken_params)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –í–õ–ò–Ø–Æ–¢ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É!"
        )
        print("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Ö–æ–¥—è—Ç –¥–æ QML, –Ω–æ –ù–ï –ü–†–ò–í–Ø–ó–ê–ù–´ –∫ –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º!")
        print("\nüí° –†–ï–®–ï–ù–ò–ï:")
        print("   1. –û—Ç–∫—Ä—ã—Ç—å assets/qml/main.qml")
        print("   2. –ù–∞–π—Ç–∏ ExtendedSceneEnvironment { ... }")
        print("   3. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è —Å–ª–æ–º–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        print("   4. –ü—Ä–∏–º–µ—Ä: bloomThreshold: root.bloomThreshold")
        print("=" * 80)
    else:
        print("\n" + "=" * 80)
        print("üéâ –í–°–ï –ü–ê–†–ê–ú–ï–¢–†–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("=" * 80)
        print("–í—Å–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ Canvas!")
        print("–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–∞–Ω–µ–ª–∏ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –≤–ª–∏—è—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É.")
        print("=" * 80)

    return len(broken_params)


if __name__ == "__main__":
    sys.exit(main())
