#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
QML Primitives Duplication Diagnostic
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤ –≤ QML —Ñ–∞–π–ª–∞—Ö
"""

import re
import sys
from pathlib import Path


def analyze_qml_file(qml_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç QML —Ñ–∞–π–ª –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤"""

    print(f"üîç –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–ê: {qml_path}")
    print("=" * 60)

    try:
        with open(qml_path, "r", encoding="utf-8") as f:
            content = f.read()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤
    primitive_counts = {}
    component_declarations = {}
    component_instances = {}

    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞–∑–¥–µ–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä—ã

    # 1. –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (component ComponentName:)
    component_declarations_pattern = r"component\s+(\w+):"
    component_decl_matches = re.findall(
        component_declarations_pattern, content, re.MULTILINE
    )

    print("üì¶ –û–ë–™–Ø–í–õ–ï–ù–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
    for comp_name in component_decl_matches:
        component_declarations[comp_name] = 1
        print(f"  üì¶ component {comp_name}: –æ–±—ä—è–≤–ª–µ–Ω")

    # 2. –ü–æ–∏—Å–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (ComponentName { )
    print("\nüîß –≠–ö–ó–ï–ú–ü–õ–Ø–†–´ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
    for comp_name in component_decl_matches:
        # –ò—â–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        instance_pattern = rf"{comp_name}\s*\{{"
        instances = re.findall(instance_pattern, content, re.MULTILINE)
        instance_count = len(instances)
        component_instances[comp_name] = instance_count
        print(f"  üîß {comp_name}: {instance_count} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤")

    # 3. –ü–æ–∏—Å–∫ –±–∞–∑–æ–≤—ã—Ö QML –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤
    print("\nüé® –ë–ê–ó–û–í–´–ï QML –ü–†–ò–ú–ò–¢–ò–í–´:")
    base_patterns = {
        "Model": r"Model\s*\{",
        "Node": r"Node\s*\{",
        "PerspectiveCamera": r"PerspectiveCamera\s*\{",
        "DirectionalLight": r"DirectionalLight\s*\{",
        "PointLight": r"PointLight\s*\{",
        "Timer": r"Timer\s*\{",
        "MouseArea": r"MouseArea\s*\{",
        "Rectangle": r"Rectangle\s*\{",
        "Text": r"Text\s*\{",
        "Column": r"Column\s*\{",
        "QtObject": r"QtObject\s*\{",
    }

    for pattern_name, pattern in base_patterns.items():
        matches = re.findall(pattern, content, re.MULTILINE)
        if matches:
            primitive_counts[pattern_name] = len(matches)
            print(f"  üîß {pattern_name}: {len(matches)} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤")

    print("\n" + "=" * 60)

    # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ (source)
    print("üé® –ê–ù–ê–õ–ò–ó –ò–°–¢–û–ß–ù–ò–ö–û–í –ì–ï–û–ú–ï–¢–†–ò–ò:")
    geometry_sources = re.findall(r'source:\s*"([^"]+)"', content)
    geometry_count = {}
    for source in geometry_sources:
        geometry_count[source] = geometry_count.get(source, 0) + 1

    for source, count in sorted(geometry_count.items()):
        print(f"  üìê {source}: {count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")

    # –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π (–ø–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)
    print("\nüó∫Ô∏è –ê–ù–ê–õ–ò–ó –ü–û–ó–ò–¶–ò–ô:")
    position_pattern = r"position:\s*Qt\.vector3d\((.*?)\)"
    positions = re.findall(position_pattern, content, re.DOTALL)

    position_count = {}
    for pos in positions:
        # –û—á–∏—â–∞–µ–º –æ—Ç –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        clean_pos = re.sub(r"\s+", " ", pos.strip())
        position_count[clean_pos] = position_count.get(clean_pos, 0) + 1

    duplicated_positions = {
        pos: count for pos, count in position_count.items() if count > 1
    }

    if duplicated_positions:
        print("‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–ï –ü–û–ó–ò–¶–ò–ò:")
        for pos, count in sorted(duplicated_positions.items()):
            print(f"  üîÑ –ü–æ–∑–∏—Ü–∏—è ({pos}): {count} —Ä–∞–∑")
    else:
        print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # –ê–Ω–∞–ª–∏–∑ –º–∞—Å—à—Ç–∞–±–æ–≤
    print("\nüìè –ê–ù–ê–õ–ò–ó –ú–ê–°–®–¢–ê–ë–û–í:")
    scale_pattern = r"scale:\s*Qt\.vector3d\((.*?)\)"
    scales = re.findall(scale_pattern, content, re.DOTALL)

    scale_count = {}
    for scale in scales:
        clean_scale = re.sub(r"\s+", " ", scale.strip())
        scale_count[clean_scale] = scale_count.get(clean_scale, 0) + 1

    duplicated_scales = {
        scale: count for scale, count in scale_count.items() if count > 1
    }

    if duplicated_scales:
        print("‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–†–û–í–ê–ù–ù–´–ï –ú–ê–°–®–¢–ê–ë–´:")
        for scale, count in sorted(duplicated_scales.items()):
            print(f"  üîÑ –ú–∞—Å—à—Ç–∞–± ({scale}): {count} —Ä–∞–∑")
    else:
        print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—à—Ç–∞–±–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # –ê–Ω–∞–ª–∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    print("\nüé® –ê–ù–ê–õ–ò–ó –ú–ê–¢–ï–†–ò–ê–õ–û–í:")
    material_pattern = (
        r'materials:\s*PrincipledMaterial\s*\{[^}]*baseColor:\s*"([^"]+)"'
    )
    materials = re.findall(material_pattern, content, re.DOTALL)

    material_count = {}
    for material in materials:
        material_count[material] = material_count.get(material, 0) + 1

    for material, count in sorted(material_count.items()):
        color_name = {
            "#cc0000": "–ö—Ä–∞—Å–Ω—ã–π (—Ä–∞–º–∞)",
            "#888888": "–°–µ—Ä—ã–π (—Ä—ã—á–∞–≥)",
            "#cccccc": "–°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π (—à—Ç–æ–∫)",
            "#ffffff": "–ë–µ–ª—ã–π (—Ü–∏–ª–∏–Ω–¥—Ä)",
            "#ff0066": "–†–æ–∑–æ–≤—ã–π (–ø–æ—Ä—à–µ–Ω—å)",
            "#0088ff": "–°–∏–Ω–∏–π (—à–∞—Ä–Ω–∏—Ä —Ü–∏–ª–∏–Ω–¥—Ä–∞)",
            "#ff8800": "–û—Ä–∞–Ω–∂–µ–≤—ã–π (—à–∞—Ä–Ω–∏—Ä —Ä—ã—á–∞–≥–∞)",
            "#00ff44": "–ó–µ–ª–µ–Ω—ã–π (—à–∞—Ä–Ω–∏—Ä —à—Ç–æ–∫–∞)",
            "#ff0000": "–ö—Ä–∞—Å–Ω—ã–π (–æ—à–∏–±–∫–∞)",
            "#ff4444": "–°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π (–æ—à–∏–±–∫–∞)",
        }.get(material, material)

        print(f"  üé® {color_name}: {count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")

    # –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    print("\nüö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú:")

    issues_found = 0

    # –ü—Ä–æ–±–ª–µ–º–∞ 1: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à–∞—Ä–Ω–∏—Ä—ã –≤ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    joint_colors = ["#0088ff", "#ff8800", "#00ff44"]  # –¶–≤–µ—Ç–∞ —à–∞—Ä–Ω–∏—Ä–æ–≤
    for color in joint_colors:
        if material_count.get(color, 0) > 4:
            print(
                f"  ‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞—Ä–Ω–∏—Ä–æ–≤ —Ü–≤–µ—Ç–∞ {color}: {material_count[color]} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ (–æ–∂–∏–¥–∞–µ—Ç—Å—è 4)"
            )
            issues_found += 1

    # –ü—Ä–æ–±–ª–µ–º–∞ 2: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤
    if geometry_count.get("#Cylinder", 0) > 20:
        print(
            f"  ‚ö†Ô∏è  –û—á–µ–Ω—å –º–Ω–æ–≥–æ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤: {geometry_count.get('#Cylinder', 0)} (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)"
        )
        issues_found += 1

    # –ü—Ä–æ–±–ª–µ–º–∞ 3: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    if len(duplicated_positions) > 0:
        print(f"  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(duplicated_positions)} —Ç–∏–ø–æ–≤ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
        issues_found += 1

    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–±–ª–µ–º–∞ 4 - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    expected_instances = {
        "OptimizedSuspensionCorner": 4,
        "SuspensionCorner": 0,  # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ optimized –≤–µ—Ä—Å–∏–∏
    }

    for comp_name, expected_count in expected_instances.items():
        actual_count = component_instances.get(comp_name, 0)
        if actual_count != expected_count:
            if expected_count == 0 and actual_count > 0:
                print(
                    f"  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã {comp_name}: {actual_count} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å {expected_count})"
                )
                issues_found += 1
            elif expected_count > 0 and actual_count != expected_count:
                print(
                    f"  ‚ö†Ô∏è  –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {comp_name}: {actual_count} (–æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_count})"
                )
                issues_found += 1
        else:
            print(f"  ‚úÖ {comp_name}: {actual_count} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")

    if issues_found == 0:
        print("  ‚úÖ –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û:")
    print(f"   üì¶ –û–±—ä—è–≤–ª–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(component_declarations)}")
    print(f"   üîß –≠–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {sum(component_instances.values())}")
    print(f"   üé® –ë–∞–∑–æ–≤—ã—Ö –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤: {sum(primitive_counts.values())}")
    print(f"   üìê –¢–∏–ø–æ–≤ –≥–µ–æ–º–µ—Ç—Ä–∏–∏: {len(geometry_count)}")
    print(f"   üîç –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: {issues_found}")

    return issues_found == 0


def analyze_main_qml():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç main_optimized.qml —Ñ–∞–π–ª"""

    print("üîÑ –ê–ù–ê–õ–ò–ó main_optimized.qml")
    print("=" * 60)

    project_root = Path(__file__).parent
    main_qml = project_root / "assets" / "qml" / "main_optimized.qml"

    if not main_qml.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {main_qml}")
        print("üîß –û–∂–∏–¥–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û main_optimized.qml")
        return False

    print("\nüìÑ –ê–ù–ê–õ–ò–ó main_optimized.qml:")
    main_ok = analyze_qml_file(main_qml)

    print("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    if main_ok:
        print("‚úÖ main_optimized.qml –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ")
        print("‚úÖ OptimizedSuspensionCorner —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    else:
        print("‚ö†Ô∏è  –í main_optimized.qml –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
        print("üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")

    return main_ok


def check_visual_artifacts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"""

    print("\nüé® –ü–†–û–í–ï–†–ö–ê –í–ò–ó–£–ê–õ–¨–ù–´–• –ê–†–¢–ï–§–ê–ö–¢–û–í")
    print("=" * 50)

    print("‚úÖ –†–ï–®–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
    print("1. ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û main_optimized.qml")
    print("2. ‚úÖ main.qml –û–¢–ö–õ–Æ–ß–ï–ù –ø–æ–ª–Ω–æ—Å—Ç—å—é")
    print("3. ‚úÖ OptimizedSuspensionCorner - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–¥–≤–µ—Å–∫–∏")
    print("4. ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    print("5. ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—è —à–∞—Ä–Ω–∏—Ä–æ–≤ –∏ –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤")
    print("6. ‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞—Ä–Ω–∏—Ä–æ–≤ (—Ü–≤–µ—Ç–Ω—ã—Ö —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤)")

    print("\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò v4.2:")
    print("- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω QML —Ñ–∞–π–ª: main_optimized.qml")
    print("- –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–∏–Ω–µ–º–∞—Ç–∏–∫–∞ —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–π –¥–ª–∏–Ω–æ–π —à—Ç–æ–∫–æ–≤")
    print("- –ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤")
    print("- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ GraphicsPanel")

    print("\nüîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:")
    print("- –ó–∞–ø—É—Å—Ç–∏—Ç–µ: py app.py --debug –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ª–æ–≥–æ–≤")
    print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å QML –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    print("- –í–∏–∑—É–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤")
    print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê main_optimized.qml")
    print("=" * 60)
    print("PneumoStabSim-Professional - main_optimized.qml Analysis")
    print("=" * 60)

    success = analyze_main_qml()
    check_visual_artifacts()

    print("\n" + "=" * 60)

    if success:
        print("üéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: main_optimized.qml —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ")
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print("‚úÖ main.qml –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø")
        print("üí° –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –≤–∏–¥–Ω—ã –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –õ–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–π —à–∞—Ä–Ω–∏—Ä–æ–≤")
        print("   - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏")
        print("   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ Qt Quick 3D")
    else:
        print("‚ö†Ô∏è  –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        print("üéØ –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø –¢–û–õ–¨–ö–û: main_optimized.qml")

    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())
