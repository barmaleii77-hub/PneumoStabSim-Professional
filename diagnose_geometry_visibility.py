#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —à—Ç–æ–∫–æ–≤ –∏ –ø–æ—Ä—à–Ω–µ–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
"""


def diagnose_geometry():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–æ–º–µ—Ç—Ä–∏–∏"""

    print("=" * 70)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–ò–î–ò–ú–û–°–¢–ò –®–¢–û–ö–û–í –ò –ü–û–†–®–ù–ï–ô")
    print("=" * 70)
    print()

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ main.qml (–¥–µ—Ñ–æ–ª—Ç—ã)
    userPistonThickness = 25  # –º–º
    userPistonRodLength = 200  # –º–º
    userRodDiameter = 35  # –º–º
    userBoreHead = 80  # –º–º
    userCylinderLength = 500  # –º–º

    print("üìè –ü–ê–†–ê–ú–ï–¢–†–´ –ò–ó main.qml (–¥–µ—Ñ–æ–ª—Ç—ã):")
    print(f"   userPistonThickness: {userPistonThickness} –º–º")
    print(f"   userPistonRodLength: {userPistonRodLength} –º–º")
    print(f"   userRodDiameter: {userRodDiameter} –º–º")
    print(f"   userBoreHead: {userBoreHead} –º–º")
    print(f"   userCylinderLength: {userCylinderLength} –º–º")

    print()
    print("üìê –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï –í SuspensionCorner.qml:")
    print("-" * 70)

    # 1. –ü–û–†–®–ï–ù–¨ (piston body)
    piston_scale_x = (userBoreHead / 100) * 1.08
    piston_scale_y = userPistonThickness / 100
    piston_scale_z = (userBoreHead / 100) * 1.08

    print("üî¥ PISTON (Model #Cylinder):")
    print(
        f"   scale: ({piston_scale_x:.3f}, {piston_scale_y:.3f}, {piston_scale_z:.3f})"
    )
    print(f"   ‚ö†Ô∏è  scale.y = {piston_scale_y:.3f} (–æ—á–µ–Ω—å –º–∞–ª–æ!)")
    print("   –ü—Ä–∏—á–∏–Ω–∞: pistonThickness=25–º–º ‚Üí 25/100 = 0.25")

    if piston_scale_y < 0.5:
        print("   ‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ü–æ—Ä—à–µ–Ω—å –°–õ–ò–®–ö–û–ú –¢–û–ù–ö–ò–ô (< 0.5 –µ–¥–∏–Ω–∏—Ü)!")
        print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–±—Ä–∞—Ç—å –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 100 –¥–ª—è —Ç–æ–ª—â–∏–Ω—ã")

    print()

    # 2. –®–¢–û–ö –ü–û–†–®–ù–Ø (piston rod)
    rod_scale_x = (userRodDiameter / 100) * 0.5
    rod_scale_y = userPistonRodLength / 100
    rod_scale_z = (userRodDiameter / 100) * 0.5

    print("üîµ PISTON ROD (Model #Cylinder):")
    print(f"   scale: ({rod_scale_x:.3f}, {rod_scale_y:.3f}, {rod_scale_z:.3f})")
    print(f"   scale.x = {rod_scale_x:.3f} (–¥–∏–∞–º–µ—Ç—Ä)")
    print(f"   scale.y = {rod_scale_y:.3f} (–¥–ª–∏–Ω–∞)")

    if rod_scale_x < 0.2:
        print("   ‚ö†Ô∏è  –®—Ç–æ–∫ –°–õ–ò–®–ö–û–ú –¢–û–ù–ö–ò–ô (< 0.2 –µ–¥–∏–Ω–∏—Ü)!")
        print("   –ü—Ä–∏—á–∏–Ω–∞: rodDiameter=35–º–º ‚Üí (35/100)*0.5 = 0.175")

    if rod_scale_y < 1.0:
        print("   ‚ùå –ö–†–ò–¢–ò–ß–ù–û: –®—Ç–æ–∫ –°–õ–ò–®–ö–û–ú –ö–û–†–û–¢–ö–ò–ô (< 1.0 –µ–¥–∏–Ω–∏—Ü)!")
        print("   –ü—Ä–∏—á–∏–Ω–∞: pistonRodLength=200–º–º ‚Üí 200/100 = 2.0")
        print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–±—Ä–∞—Ç—å –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 100 –¥–ª—è –¥–ª–∏–Ω—ã")

    print()

    # 3. –¶–ò–õ–ò–ù–î–† (cylinder body)
    cyl_scale_x = (userBoreHead / 100) * 1.2
    cyl_scale_y = userCylinderLength / 100
    cyl_scale_z = (userBoreHead / 100) * 1.2

    print("‚ö™ CYLINDER BODY (Model #Cylinder, transparent):")
    print(f"   scale: ({cyl_scale_x:.3f}, {cyl_scale_y:.3f}, {cyl_scale_z:.3f})")
    print(f"   scale.y = {cyl_scale_y:.3f} (–¥–ª–∏–Ω–∞ —Ü–∏–ª–∏–Ω–¥—Ä–∞)")

    if cyl_scale_y < 3.0:
        print("   ‚ö†Ô∏è  –¶–∏–ª–∏–Ω–¥—Ä –ö–û–†–û–¢–ö–ò–ô –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ü–µ–Ω—ã")
    else:
        print(f"   ‚úÖ –¶–∏–ª–∏–Ω–¥—Ä –≤–∏–¥–µ–Ω (scale.y = {cyl_scale_y:.3f})")

    print()
    print("=" * 70)
    print("üéØ –í–´–í–û–î:")
    print("=" * 70)

    issues = []

    if piston_scale_y < 0.5:
        issues.append("‚ùå –ü–æ—Ä—à–µ–Ω—å –°–õ–ò–®–ö–û–ú –¢–û–ù–ö–ò–ô (–Ω–µ –≤–∏–¥–µ–Ω –Ω–∞ –∫–∞–º–µ—Ä–µ)")

    if rod_scale_x < 0.2:
        issues.append("‚ö†Ô∏è  –®—Ç–æ–∫ –ø–æ—Ä—à–Ω—è –°–õ–ò–®–ö–û–ú –¢–û–ù–ö–ò–ô")

    if rod_scale_y < 1.5:
        issues.append("‚ö†Ô∏è  –®—Ç–æ–∫ –ø–æ—Ä—à–Ω—è –ö–û–†–û–¢–ö–ò–ô")

    if issues:
        print("üö® –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
        for issue in issues:
            print(f"   {issue}")

        print()
        print("üí° –†–ï–®–ï–ù–ò–ï:")
        print("   1. –£–±—Ä–∞—Ç—å –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 100 –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤ –º–º:")
        print("      - pistonThickness (25–º–º ‚Üí 25 –µ–¥–∏–Ω–∏—Ü)")
        print("      - pistonRodLength (200–º–º ‚Üí 200 –µ–¥–∏–Ω–∏—Ü)")
        print("   2. –ò–õ–ò –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã –≤ –º–µ—Ç—Ä–∞—Ö:")
        print("      - pistonThickness: 0.025–º ‚Üí 25/1000 * scale_factor")
        print("      - pistonRodLength: 0.200–º ‚Üí 200/1000 * scale_factor")
        print()
        print("   ‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ü–†–Ø–ú–û–ï –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("      scale.y = pistonThickness (–±–µ–∑ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 100)")
    else:
        print("‚úÖ –ì–µ–æ–º–µ—Ç—Ä–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

    print()
    print("=" * 70)
    print("üìã –ü–†–û–í–ï–†–û–ß–ù–´–ô –°–ü–ò–°–û–ö:")
    print("=" * 70)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π
    print("1. ‚úÖ –ü–æ–∑–∏—Ü–∏–∏ (pistonCenter, j_rod) –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("2. ‚ö†Ô∏è  –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ Y (–≤—ã—Å–æ—Ç–∞) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç /100 ‚Üí –ü–†–û–ë–õ–ï–ú–ê")
    print("3. ‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã —á–µ—Ä–µ–∑ materials: [...]")
    print("4. ‚úÖ eulerRotation –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print()

    print("üéØ –ì–õ–ê–í–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê:")
    print("   Qt #Cylinder –∏–º–µ–µ—Ç –í–´–°–û–¢–£ = 100 –µ–¥–∏–Ω–∏—Ü –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    print("   –ï—Å–ª–∏ pistonThickness=25–º–º, —Ç–æ scale.y=25/100=0.25")
    print("   –≠—Ç–æ –¥–∞—ë—Ç –û–ß–ï–ù–¨ –¢–û–ù–ö–ò–ô –ø–æ—Ä—à–µ–Ω—å (0.25 –µ–¥–∏–Ω–∏—Ü –≤—ã—Å–æ—Ç–æ–π)")
    print()
    print("   –ö–∞–º–µ—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ ~3000-5000 –µ–¥–∏–Ω–∏—Ü")
    print("   –ü–æ—Ä—à–µ–Ω—å —Ç–æ–ª—â–∏–Ω–æ–π 0.25 –ù–ï –í–ò–î–ï–ù —Å —Ç–∞–∫–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è!")
    print()

    print("üí° –ü–†–ê–í–ò–õ–¨–ù–û–ï –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï:")
    print("   ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û:")
    print("      scale: Qt.vector3d(1.08, pistonThickness/100, 1.08)")
    print("                                 ‚Üë 25/100 = 0.25 (–Ω–µ –≤–∏–¥–µ–Ω!)")
    print()
    print("   ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û:")
    print("      scale: Qt.vector3d(1.08, pistonThickness/10, 1.08)")
    print("                                 ‚Üë 25/10 = 2.5 (–≤–∏–¥–µ–Ω!)")
    print()
    print("   –ò–õ–ò:")
    print("      scale: Qt.vector3d(1.08, pistonThickness, 1.08)")
    print("                                 ‚Üë 25 (–≤–∏–¥–µ–Ω –æ—Ç–ª–∏—á–Ω–æ!)")
    print()


def calculate_optimal_scale():
    """–í—ã—á–∏—Å–ª–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ"""

    print("=" * 70)
    print("‚öôÔ∏è  –û–ü–¢–ò–ú–ê–õ–¨–ù–û–ï –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï")
    print("=" * 70)
    print()

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    piston_thickness_mm = 25
    rod_length_mm = 200
    rod_diameter_mm = 35
    bore_diameter_mm = 80

    # Qt #Cylinder default height = 100 units
    qt_cylinder_height = 100

    # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ scale —Ñ–∞–∫—Ç–æ—Ä—ã
    print("üìè –ò–°–•–û–î–ù–´–ï –†–ê–ó–ú–ï–†–´ (–º–º):")
    print(f"   –¢–æ–ª—â–∏–Ω–∞ –ø–æ—Ä—à–Ω—è:   {piston_thickness_mm} –º–º")
    print(f"   –î–ª–∏–Ω–∞ —à—Ç–æ–∫–∞:      {rod_length_mm} –º–º")
    print(f"   –î–∏–∞–º–µ—Ç—Ä —à—Ç–æ–∫–∞:    {rod_diameter_mm} –º–º")
    print(f"   –î–∏–∞–º–µ—Ç—Ä —Ü–∏–ª–∏–Ω–¥—Ä–∞: {bore_diameter_mm} –º–º")
    print()

    print("üéØ –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ï SCALE –§–ê–ö–¢–û–†–´:")
    print()

    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä—è–º–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ä–∞–∑–º–µ—Ä—ã –≤ –º–º = –µ–¥–∏–Ω–∏—Ü—ã –≤ Qt)
    print("‚úÖ –í–ê–†–ò–ê–ù–¢ 1: –ü—Ä—è–º–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ (1–º–º = 1 –µ–¥–∏–Ω–∏—Ü–∞)")
    piston_scale_v1 = piston_thickness_mm / qt_cylinder_height
    rod_scale_v1 = rod_length_mm / qt_cylinder_height

    print(
        f"   –ü–æ—Ä—à–µ–Ω—å: scale.y = {piston_thickness_mm}/{qt_cylinder_height} = {piston_scale_v1:.2f}"
    )
    print(
        f"   –®—Ç–æ–∫:    scale.y = {rod_length_mm}/{qt_cylinder_height} = {rod_scale_v1:.2f}"
    )
    print()

    # –í–∞—Ä–∏–∞–Ω—Ç 2: –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ /10 (–±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –¥–ª—è Qt —Å—Ü–µ–Ω—ã)
    print("‚úÖ –í–ê–†–ò–ê–ù–¢ 2: –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ /10 (1—Å–º = 1 –µ–¥–∏–Ω–∏—Ü–∞)")
    piston_scale_v2 = piston_thickness_mm / 10 / qt_cylinder_height * qt_cylinder_height
    rod_scale_v2 = rod_length_mm / 10 / qt_cylinder_height * qt_cylinder_height

    print(
        f"   –ü–æ—Ä—à–µ–Ω—å: scale.y = {piston_thickness_mm}/10 = {piston_thickness_mm / 10:.1f} (scale = {piston_scale_v2 / 100:.2f})"
    )
    print(
        f"   –®—Ç–æ–∫:    scale.y = {rod_length_mm}/10 = {rod_length_mm / 10:.1f} (scale = {rod_scale_v2 / 100:.2f})"
    )
    print()

    # –í–∞—Ä–∏–∞–Ω—Ç 3: –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ü–µ–Ω—ã 1000-5000 –µ–¥–∏–Ω–∏—Ü
    print("‚úÖ –í–ê–†–ò–ê–ù–¢ 3: –î–ª—è –∫–∞–º–µ—Ä—ã –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 3000-5000 –µ–¥–∏–Ω–∏—Ü")
    scene_scale_factor = 5  # –£–º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
    piston_scale_v3 = piston_thickness_mm / qt_cylinder_height * scene_scale_factor
    rod_scale_v3 = rod_length_mm / qt_cylinder_height * scene_scale_factor

    print(
        f"   –ü–æ—Ä—à–µ–Ω—å: scale.y = ({piston_thickness_mm}/100) * {scene_scale_factor} = {piston_scale_v3:.2f}"
    )
    print(
        f"   –®—Ç–æ–∫:    scale.y = ({rod_length_mm}/100) * {scene_scale_factor} = {rod_scale_v3:.2f}"
    )
    print()

    print("=" * 70)
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
    print("=" * 70)
    print()
    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –í–ê–†–ò–ê–ù–¢ 1 (–ø—Ä—è–º–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ):")
    print()
    print("```qml")
    print("// 4. PISTON")
    print("Model {")
    print('    source: "#Cylinder"')
    print("    scale: Qt.vector3d(1.08, pistonThickness/100, 1.08)")
    print("    // ‚Üë –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞: pistonThickness (–ë–ï–ó /100)")
    print("    materials: [pistonBodyMaterial]")
    print("}")
    print()
    print("// 5. PISTON ROD")
    print("Model {")
    print('    source: "#Cylinder"')
    print("    scale: Qt.vector3d(0.5, pistonRodLength/100, 0.5)")
    print("    // ‚Üë –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞: pistonRodLength (–ë–ï–ó /100)")
    print("    materials: [pistonRodMaterial]")
    print("}")
    print("```")
    print()
    print("‚úÖ –≠—Ç–æ –¥–∞—Å—Ç:")
    print(f"   - –ü–æ—Ä—à–µ–Ω—å —Ç–æ–ª—â–∏–Ω–æ–π {piston_thickness_mm} –µ–¥–∏–Ω–∏—Ü (—Ö–æ—Ä–æ—à–æ –≤–∏–¥–µ–Ω)")
    print(f"   - –®—Ç–æ–∫ –¥–ª–∏–Ω–æ–π {rod_length_mm} –µ–¥–∏–Ω–∏—Ü (–æ—Ç–ª–∏—á–Ω–æ –≤–∏–¥–µ–Ω)")
    print()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    print()
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏...")
    print()

    diagnose_geometry()
    calculate_optimal_scale()

    print("=" * 70)
    print("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 70)
    print()
    print("üìã –ò–¢–û–ì–ò:")
    print("   1. –ü—Ä–æ–±–ª–µ–º–∞: –î–µ–ª–µ–Ω–∏–µ –Ω–∞ 100 –¥–µ–ª–∞–µ—Ç –ø–æ—Ä—à–Ω–∏/—à—Ç–æ–∫–∏ –û–ß–ï–ù–¨ –º–∞–ª–µ–Ω—å–∫–∏–º–∏")
    print("   2. –†–µ—à–µ–Ω–∏–µ: –£–±—Ä–∞—Ç—å /100 –¥–ª—è pistonThickness –∏ pistonRodLength")
    print("   3. –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –®—Ç–æ–∫–∏ –∏ –ø–æ—Ä—à–Ω–∏ —Å—Ç–∞–Ω—É—Ç –í–ò–î–ù–´")
    print()
    print("üîß –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ SuspensionCorner.qml")
    print()


if __name__ == "__main__":
    main()
