#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ—Å—Ç–∏ —Å–ª–∞–π–¥–µ—Ä–æ–≤ 0.001–º
Test slider precision with 0.001m step
"""
import sys
import os
from pathlib import Path

from PySide6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QLabel
from PySide6.QtCore import Qt

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
sys.path.insert(0, str(Path(__file__).parent))
from src.ui.widgets.range_slider import RangeSlider


class SliderPrecisionTest(QMainWindow):
    """–¢–µ—Å—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–ª–∞–π–¥–µ—Ä–æ–≤"""
    
    def __init__(self):
        super().__init__()
        
        self.setWindowTitle("üîß –¢–µ—Å—Ç –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ—Å—Ç–∏ —Å–ª–∞–π–¥–µ—Ä–æ–≤ 0.001–º")
        self.resize(600, 800)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central = QWidget()
        self.setCentralWidget(central)
        layout = QVBoxLayout(central)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–¢–ï–°–¢ –î–ò–°–ö–†–ï–¢–ù–û–°–¢–ò –°–õ–ê–ô–î–ï–†–û–í")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet("font-size: 16px; font-weight: bold; color: #333; margin: 10px;")
        layout.addWidget(title)
        
        info = QLabel("–í—Å–µ —Å–ª–∞–π–¥–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —à–∞–≥ 0.001–º (1–º–º)")
        info.setAlignment(Qt.AlignmentFlag.AlignCenter)
        info.setStyleSheet("font-size: 12px; color: #666; margin-bottom: 20px;")
        layout.addWidget(info)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª–∞–π–¥–µ—Ä—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ GeometryPanel
        self.create_test_sliders(layout)
        
        # –õ–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.log_label = QLabel("–õ–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
        self.log_label.setStyleSheet("font-weight: bold; margin-top: 20px;")
        layout.addWidget(self.log_label)
        
        self.log_text = QLabel("")
        self.log_text.setWordWrap(True)
        self.log_text.setStyleSheet("background: #f0f0f0; padding: 10px; font-family: monospace;")
        self.log_text.setMinimumHeight(150)
        self.log_text.setAlignment(Qt.AlignmentFlag.AlignTop)
        layout.addWidget(self.log_text)
        
        layout.addStretch()
    
    def create_test_sliders(self, layout):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª–∞–π–¥–µ—Ä—ã —Å —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, —á—Ç–æ –≤ GeometryPanel"""
        
        # 1. –ë–∞–∑–∞ –∫–æ–ª—ë—Å–Ω–∞—è (wheelbase)
        self.wheelbase_slider = RangeSlider(
            minimum=2.0, maximum=4.0, value=3.2, step=0.001,
            decimals=3, units="–º", title="–ë–∞–∑–∞ (–∫–æ–ª—ë—Å–Ω–∞—è) - —à–∞–≥ 0.001–º"
        )
        self.wheelbase_slider.valueChanged.connect(
            lambda v: self.log_change("wheelbase", v))
        layout.addWidget(self.wheelbase_slider)
        
        # 2. –ö–æ–ª–µ—è (track)
        self.track_slider = RangeSlider(
            minimum=1.0, maximum=2.5, value=1.6, step=0.001,
            decimals=3, units="–º", title="–ö–æ–ª–µ—è - —à–∞–≥ 0.001–º"
        )
        self.track_slider.valueChanged.connect(
            lambda v: self.log_change("track", v))
        layout.addWidget(self.track_slider)
        
        # 3. –î–ª–∏–Ω–∞ —Ä—ã—á–∞–≥–∞ (lever_length)
        self.lever_slider = RangeSlider(
            minimum=0.5, maximum=1.5, value=0.8, step=0.001,
            decimals=3, units="–º", title="–î–ª–∏–Ω–∞ —Ä—ã—á–∞–≥–∞ - —à–∞–≥ 0.001–º"
        )
        self.lever_slider.valueChanged.connect(
            lambda v: self.log_change("lever_length", v))
        layout.addWidget(self.lever_slider)
        
        # 4. –î–∏–∞–º–µ—Ç—Ä —Ü–∏–ª–∏–Ω–¥—Ä–∞
        self.cyl_diam_slider = RangeSlider(
            minimum=0.030, maximum=0.150, value=0.080, step=0.001,
            decimals=3, units="–º", title="–î–∏–∞–º–µ—Ç—Ä —Ü–∏–ª–∏–Ω–¥—Ä–∞ - —à–∞–≥ 0.001–º"
        )
        self.cyl_diam_slider.valueChanged.connect(
            lambda v: self.log_change("cyl_diam", v))
        layout.addWidget(self.cyl_diam_slider)
        
        # 5. –î–∏–∞–º–µ—Ç—Ä —à—Ç–æ–∫–∞
        self.rod_diam_slider = RangeSlider(
            minimum=0.020, maximum=0.060, value=0.035, step=0.001,
            decimals=3, units="–º", title="–î–∏–∞–º–µ—Ç—Ä —à—Ç–æ–∫–∞ - —à–∞–≥ 0.001–º"
        )
        self.rod_diam_slider.valueChanged.connect(
            lambda v: self.log_change("rod_diameter", v))
        layout.addWidget(self.rod_diam_slider)
        
        self.log_entries = []
    
    def log_change(self, param_name: str, value: float):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å
        expected_step = 0.001
        value_rounded = round(value, 3)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 3 –∑–Ω–∞–∫–æ–≤ (1–º–º)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ä–∞—Ç–Ω–æ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —à–∞–≥—É
        steps_from_min = (value_rounded - self.get_slider_min(param_name)) / expected_step
        is_discrete = abs(steps_from_min - round(steps_from_min)) < 1e-9
        
        status = "‚úÖ" if is_discrete else "‚ùå"
        entry = f"{status} {param_name}: {value_rounded:.3f}–º"
        
        if not is_discrete:
            entry += f" (–ù–ï –ö–†–ê–¢–ù–û {expected_step}–º!)"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π)
        self.log_entries.append(entry)
        if len(self.log_entries) > 10:
            self.log_entries.pop(0)
        
        self.log_text.setText("\n".join(self.log_entries))
    
    def get_slider_min(self, param_name: str) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–∞"""
        mins = {
            'wheelbase': 2.0,
            'track': 1.0,
            'lever_length': 0.5,
            'cyl_diam': 0.030,
            'rod_diameter': 0.020
        }
        return mins.get(param_name, 0.0)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("=" * 60)
    print("üîß –¢–ï–°–¢ –î–ò–°–ö–†–ï–¢–ù–û–°–¢–ò –°–õ–ê–ô–î–ï–†–û–í 0.001–º")
    print("=" * 60)
    print()
    print("–ü–†–û–í–ï–†–Ø–ï–ú:")
    print("‚úÖ –®–∞–≥ –≤—Å–µ—Ö —Å–ª–∞–π–¥–µ—Ä–æ–≤ = 0.001–º (1–º–º)")
    print("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–∞ = 100000 –ø–æ–∑–∏—Ü–∏–π")
    print("‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π")
    print()
    print("–ò–ù–°–¢–†–£–ö–¶–ò–ò:")
    print("1. –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–∞–∂–¥—ã–π —Å–ª–∞–π–¥–µ—Ä")
    print("2. –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ª–æ–≥–µ")
    print("3. –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã 0.001–º")
    print("4. ‚úÖ = –ø—Ä–∞–≤–∏–ª—å–Ω–æ, ‚ùå = –æ—à–∏–±–∫–∞ –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ—Å—Ç–∏")
    print()
    print("=" * 60)
    
    app = QApplication(sys.argv)
    window = SliderPrecisionTest()
    window.show()
    sys.exit(app.exec())


if __name__ == "__main__":
    main()
