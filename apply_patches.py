#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–µ–π –∫ —Ñ–∞–π–ª–∞–º –ø—Ä–æ–µ–∫—Ç–∞
Script to automatically apply patches to project files

–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–∞—Ç—á–∏:
- panel_graphics.py.patch ‚Üí src/ui/panels/panel_graphics.py
- main.qml.patch ‚Üí assets/qml/main.qml

–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ø–∞—Ç—á–µ–π
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path
from datetime import datetime


class PatchApplier:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–µ–π —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –±—ç–∫–∞–ø–æ–≤"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.backup_dir = self.project_root / "patch_backups" / datetime.now().strftime("%Y%m%d_%H%M%S")
        self.patches = [
            {
                'patch_file': 'panel_graphics.py.patch',
                'target_file': 'src/ui/panels/panel_graphics.py',
                'description': 'GraphicsPanel —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
            },
            {
                'patch_file': 'main.qml.patch',
                'target_file': 'assets/qml/main.qml',
                'description': 'Main QML —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
            }
        ]
    
    def create_backup(self, file_path: Path) -> Path:
        """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞"""
        if not file_path.exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            return None
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
        self.backup_dir.mkdir(parents=True, exist_ok=True)
        
        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±—ç–∫–∞–ø–∞
        rel_path = file_path.relative_to(self.project_root)
        backup_path = self.backup_dir / rel_path
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        backup_path.parent.mkdir(parents=True, exist_ok=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        shutil.copy2(file_path, backup_path)
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
        
        return backup_path
    
    def check_patch_exists(self, patch_file: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–∞—Ç—á–∞"""
        patch_path = self.project_root / patch_file
        exists = patch_path.exists()
        
        if not exists:
            print(f"‚ùå –§–∞–π–ª –ø–∞—Ç—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {patch_path}")
        else:
            print(f"‚úÖ –§–∞–π–ª –ø–∞—Ç—á–∞ –Ω–∞–π–¥–µ–Ω: {patch_path}")
        
        return exists
    
    def check_target_exists(self, target_file: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        target_path = self.project_root / target_file
        exists = target_path.exists()
        
        if not exists:
            print(f"‚ùå –¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {target_path}")
        else:
            print(f"‚úÖ –¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {target_path}")
        
        return exists
    
    def apply_patch_git(self, patch_file: str, target_file: str) -> bool:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á –∏—Å–ø–æ–ª—å–∑—É—è git apply"""
        patch_path = self.project_root / patch_file
        
        # –ü—Ä–æ–±—É–µ–º git apply --check —Å–Ω–∞—á–∞–ª–∞
        check_cmd = ['git', 'apply', '--check', str(patch_path)]
        
        try:
            result = subprocess.run(
                check_cmd,
                capture_output=True,
                text=True,
                cwd=str(self.project_root)
            )
            
            if result.returncode != 0:
                print(f"‚ö†Ô∏è –ü–∞—Ç—á –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:")
                print(f"   {result.stderr}")
                return False
            
            print(f"‚úÖ –ü–∞—Ç—á –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á
            apply_cmd = ['git', 'apply', str(patch_path)]
            result = subprocess.run(
                apply_cmd,
                capture_output=True,
                text=True,
                cwd=str(self.project_root)
            )
            
            if result.returncode != 0:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–∞:")
                print(f"   {result.stderr}")
                return False
            
            print(f"‚úÖ –ü–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω")
            return True
            
        except FileNotFoundError:
            print("‚ö†Ô∏è Git –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ç—á–∞ —á–µ—Ä–µ–∑ git: {e}")
            return False
    
    def apply_patch_manual(self, patch_file: str, target_file: str) -> bool:
        """–†—É—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –ø–∞—Ç—á–µ–π)"""
        print(f"üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –≤—Ä—É—á–Ω—É—é...")
        
        patch_path = self.project_root / patch_file
        target_path = self.project_root / target_file
        
        try:
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞—Ç—á–∞
            with open(patch_path, 'r', encoding='utf-8') as f:
                patch_content = f.read()
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –ø–∞—Ç—á–∞
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å +++ (–Ω–æ–≤—ã–π —Ñ–∞–π–ª)
            lines = patch_content.split('\n')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (+) –∏ —É–¥–∞–ª–µ–Ω–Ω—ã–µ (-)
            additions = []
            deletions = []
            
            for line in lines:
                if line.startswith('+') and not line.startswith('+++'):
                    additions.append(line[1:])
                elif line.startswith('-') and not line.startswith('---'):
                    deletions.append(line[1:])
            
            if not additions and not deletions:
                print("‚ö†Ô∏è –ü–∞—Ç—á –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç")
                return False
            
            # –ß–∏—Ç–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª
            with open(target_path, 'r', encoding='utf-8') as f:
                target_content = f.read()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞)
            modified_content = target_content
            
            for deletion in deletions:
                if deletion in modified_content:
                    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
                    modified_content = modified_content.replace(deletion + '\n', '')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
            # (—ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞, –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ç—á–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ git apply)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            with open(target_path, 'w', encoding='utf-8') as f:
                f.write(modified_content)
            
            print(f"‚úÖ –ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)")
            print(f"‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–∞: {e}")
            return False
    
    def apply_all_patches(self) -> bool:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø–∞—Ç—á–∏"""
        print("=" * 80)
        print("üöÄ –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ü–ê–¢–ß–ï–ô –ö –ü–†–û–ï–ö–¢–£")
        print("=" * 80)
        print()
        
        all_success = True
        applied_count = 0
        failed_patches = []
        
        for patch_info in self.patches:
            patch_file = patch_info['patch_file']
            target_file = patch_info['target_file']
            description = patch_info['description']
            
            print(f"üìã –û–±—Ä–∞–±–æ—Ç–∫–∞: {description}")
            print(f"   –ü–∞—Ç—á: {patch_file}")
            print(f"   –¶–µ–ª—å: {target_file}")
            print()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            if not self.check_patch_exists(patch_file):
                all_success = False
                failed_patches.append(patch_file)
                print()
                continue
            
            if not self.check_target_exists(target_file):
                all_success = False
                failed_patches.append(patch_file)
                print()
                continue
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
            target_path = self.project_root / target_file
            backup_path = self.create_backup(target_path)
            
            if backup_path is None:
                all_success = False
                failed_patches.append(patch_file)
                print()
                continue
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–∞ (—Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ git, –ø–æ—Ç–æ–º –≤—Ä—É—á–Ω—É—é)
            success = self.apply_patch_git(patch_file, target_file)
            
            if not success:
                print("‚ö†Ô∏è Git apply –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º —Ä—É—á–Ω–æ–π –º–µ—Ç–æ–¥...")
                success = self.apply_patch_manual(patch_file, target_file)
            
            if success:
                applied_count += 1
                print(f"‚úÖ –ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            else:
                all_success = False
                failed_patches.append(patch_file)
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á!")
            
            print()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("=" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –ü–ê–¢–ß–ï–ô")
        print("=" * 80)
        print(f"–í—Å–µ–≥–æ –ø–∞—Ç—á–µ–π: {len(self.patches)}")
        print(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {applied_count}")
        print(f"–ù–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {len(failed_patches)}")
        
        if failed_patches:
            print()
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ç—á–∏:")
            for patch in failed_patches:
                print(f"   - {patch}")
        
        print()
        print(f"üì¶ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.backup_dir}")
        print()
        
        if all_success:
            print("‚úÖ –í–°–ï –ü–ê–¢–ß–ò –ü–†–ò–ú–ï–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print()
            print("üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
            print("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: git diff")
            print("  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: py check_graphics_params.py")
            print("  3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: py app.py")
            print()
            return True
        else:
            print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –ü–ê–¢–ß–ò –ù–ï –ü–†–ò–ú–ï–ù–ï–ù–´!")
            print()
            print("üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–∞—Ç—á–µ–π")
            print("  2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ü–µ–ª–µ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –∏–∑–º–µ–Ω–µ–Ω—ã")
            print("  3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á–∏ –≤—Ä—É—á–Ω—É—é")
            print(f"  4. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–∑ –±—ç–∫–∞–ø–æ–≤: {self.backup_dir}")
            print()
            return False
    
    def restore_from_backup(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞"""
        if not self.backup_dir.exists():
            print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞: {self.backup_dir}")
        
        restored_count = 0
        
        for backup_file in self.backup_dir.rglob('*'):
            if backup_file.is_file():
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
                rel_path = backup_file.relative_to(self.backup_dir)
                target_path = self.project_root / rel_path
                
                # –ö–æ–ø–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                shutil.copy2(backup_file, target_path)
                print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {target_path}")
                restored_count += 1
        
        print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {restored_count}")
        return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    applier = PatchApplier()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        if sys.argv[1] == '--restore':
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞
            applier.restore_from_backup()
            return 0
        elif sys.argv[1] == '--help':
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  py apply_patches.py          - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø–∞—Ç—á–∏")
            print("  py apply_patches.py --restore - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞")
            print("  py apply_patches.py --help    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
            return 0
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –ø–∞—Ç—á–∏
    success = applier.apply_all_patches()
    
    return 0 if success else 1


if __name__ == '__main__':
    sys.exit(main())
