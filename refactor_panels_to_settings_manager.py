#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–Ω–µ–ª–µ–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SettingsManager
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞–Ω–µ–ª–µ–π –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

–¶–ï–õ–¨:
‚úÖ –ó–∞–º–µ–Ω–∏—Ç—å –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ defaults –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ SettingsManager
‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
‚úÖ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã reset_to_defaults() –∏ load_settings()
‚úÖ –°–¥–µ–ª–∞—Ç—å —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º (–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ JSON defaults_snapshot)
"""

import re
from pathlib import Path
import logging

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
logger = logging.getLogger(__name__)


class PanelRefactorer:
    """–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ø–∞–Ω–µ–ª–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SettingsManager"""

    def __init__(self, panel_file: Path):
        self.panel_file = panel_file
        self.panel_name = panel_file.stem
        self.content: str = ""
        self.modified = False

    def load(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–Ω–µ–ª–∏"""
        try:
            with open(self.panel_file, "r", encoding="utf-8") as f:
                self.content = f.read()
            return True
        except Exception as e:
            logger.error(f"Failed to load {self.panel_file}: {e}")
            return False

    def save(self) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
        if not self.modified:
            logger.info(f"{self.panel_name}: No changes needed")
            return True

        try:
            # –ë—ç–∫–∞–ø –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
            backup = self.panel_file.with_suffix(".py.backup")
            with open(backup, "w", encoding="utf-8") as f:
                # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∑–∞–Ω–æ–≤–æ –¥–ª—è –±—ç–∫–∞–ø–∞
                with open(self.panel_file, "r", encoding="utf-8") as orig:
                    f.write(orig.read())

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(self.panel_file, "w", encoding="utf-8") as f:
                f.write(self.content)

            logger.info(
                f"‚úÖ {self.panel_name}: Refactored successfully (backup: {backup.name})"
            )
            return True

        except Exception as e:
            logger.error(f"Failed to save {self.panel_file}: {e}")
            return False

    def add_settings_manager_import(self) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç SettingsManager –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        if "from src.common.settings_manager import SettingsManager" in self.content:
            return False  # –£–∂–µ –µ—Å—Ç—å

        # –ò—â–µ–º –±–ª–æ–∫ –∏–º–ø–æ—Ä—Ç–æ–≤
        import_pattern = r"(from\s+PySide6\.QtWidgets\s+import.*?\n)"

        match = re.search(import_pattern, self.content, re.MULTILINE)
        if match:
            insert_pos = match.end()
            import_line = "from src.common.settings_manager import SettingsManager\n"
            self.content = (
                self.content[:insert_pos] + import_line + self.content[insert_pos:]
            )
            self.modified = True
            return True

        return False

    def replace_init_defaults(self) -> bool:
        """–ó–∞–º–µ–Ω–∏—Ç—å _set_default_values() –Ω–∞ _load_defaults_from_settings()"""
        # –ò—â–µ–º –º–µ—Ç–æ–¥ _set_default_values
        pattern = r"(\s+)def\s+_set_default_values\(self\):.*?\n\s+self\.parameters\.update\(defaults\)"

        if not re.search(pattern, self.content, re.DOTALL):
            return False

        # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
        replacement = r"""\1def _load_defaults_from_settings(self):
\1    \"\"\"–ó–∞–≥—Ä—É–∑–∏—Ç—å defaults –∏–∑ SettingsManager\"\"\"
\1    category = self._get_category_name()
\1    defaults = self._settings_manager.get(category, self._get_fallback_defaults())
\1    self.parameters.update(defaults)
\1    self.logger.info(f"‚úÖ {category.title()} defaults loaded from SettingsManager")"""

        self.content = re.sub(pattern, replacement, self.content, flags=re.DOTALL)
        self.modified = True
        return True

    def add_settings_manager_init(self) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é _settings_manager –≤ __init__"""
        init_pattern = r"(def\s+__init__\(self,\s*parent=None\):.*?\n\s+)(super\(\)\.__init__\(parent\))"

        match = re.search(init_pattern, self.content, re.DOTALL)
        if not match:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ _settings_manager
        if "self._settings_manager = SettingsManager()" in self.content:
            return False

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ super().__init__()
        insert_text = f"{match.group(1)}{match.group(2)}\n        \n        # ‚úÖ –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º SettingsManager\n        self._settings_manager = SettingsManager()\n        "

        self.content = self.content.replace(match.group(0), insert_text)
        self.modified = True
        return True

    def update_reset_method(self) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç–æ–¥ _reset_to_defaults –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SettingsManager"""
        reset_pattern = r"(\s+)@Slot\(\)\s+def\s+_reset_to_defaults\(self\):.*?self\.parameters\.update\(defaults\)"

        if not re.search(reset_pattern, self.content, re.DOTALL):
            return False

        category_name = self._guess_category_name()

        replacement = rf"""\1@Slot()
\1def _reset_to_defaults(self):
\1    \"\"\"–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ JSON\"\"\"
\1    self.logger.info("üîÑ Resetting {category_name} to defaults from SettingsManager")
\1
\1    # ‚úÖ –ù–û–í–û–ï: –°–±—Ä–æ—Å —á–µ—Ä–µ–∑ SettingsManager
\1    self._settings_manager.reset_to_defaults(category="{category_name}")
\1    self.parameters = self._settings_manager.get("{category_name}")"""

        self.content = re.sub(reset_pattern, replacement, self.content, flags=re.DOTALL)
        self.modified = True
        return True

    def update_set_parameters(self) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å set_parameters –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ SettingsManager"""
        pattern = r"(def\s+set_parameters\(self,\s*params:\s*dict\):.*?)(self\.parameters\.update\(params\))"

        match = re.search(pattern, self.content, re.DOTALL)
        if not match:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ SettingsManager
        if "_settings_manager.set" in match.group(0):
            return False

        category_name = self._guess_category_name()

        replacement = f'{match.group(1)}{match.group(2)}\n        \n        # ‚úÖ –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ SettingsManager\n        self._settings_manager.set("{category_name}", self.parameters, auto_save=True)\n        '

        self.content = self.content.replace(match.group(0), replacement)
        self.modified = True
        return True

    def _guess_category_name(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        name = self.panel_name.replace("panel_", "").replace("_panel", "")
        if name == "graphics":
            return "graphics"
        elif name == "geometry":
            return "geometry"
        elif name == "pneumo":
            return "pneumatic"
        elif name == "modes":
            return "modes"
        else:
            return name

    def refactor(self) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ø–∞–Ω–µ–ª–∏"""
        if not self.load():
            return False

        logger.info(f"üìù Refactoring {self.panel_name}...")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
        changes = []

        if self.add_settings_manager_import():
            changes.append("Added SettingsManager import")

        if self.add_settings_manager_init():
            changes.append("Added _settings_manager initialization")

        if self.replace_init_defaults():
            changes.append(
                "Replaced _set_default_values with _load_defaults_from_settings"
            )

        if self.update_reset_method():
            changes.append("Updated _reset_to_defaults method")

        if self.update_set_parameters():
            changes.append("Updated set_parameters method")

        if changes:
            logger.info(f"  Changes: {', '.join(changes)}")

        return self.save()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"""
    logger.info("üîß Starting panel refactoring to SettingsManager...")
    logger.info("=" * 60)

    # –ü–∞–Ω–µ–ª–∏ –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
    panels_dir = Path("src/ui/panels")
    panel_files = [
        panels_dir / "panel_geometry.py",
        panels_dir / "panel_pneumo.py",
        panels_dir / "panel_modes.py",
        panels_dir / "panel_graphics.py",
    ]

    results = []

    for panel_file in panel_files:
        if not panel_file.exists():
            logger.warning(f"‚ö†Ô∏è Panel not found: {panel_file}")
            continue

        refactorer = PanelRefactorer(panel_file)
        success = refactorer.refactor()

        results.append((panel_file.stem, success))

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info("=" * 60)
    logger.info("üìä REFACTORING SUMMARY")
    logger.info("=" * 60)

    successful = sum(1 for _, success in results if success)
    total = len(results)

    for panel_name, success in results:
        status = "‚úÖ" if success else "‚ùå"
        logger.info(f"  {status} {panel_name}")

    logger.info("=" * 60)
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}/{total}")
    logger.info("=" * 60)

    if successful == total:
        logger.info("üéâ –í–°–ï –ü–ê–ù–ï–õ–ò –£–°–ü–ï–®–ù–û –†–ï–§–ê–ö–¢–û–†–ò–†–û–í–ê–ù–´!")
        logger.info("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        logger.info("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–º–ø–∏–ª—è—Ü–∏—é: python -m compileall src/ui/panels/")
        logger.info("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã: pytest tests/")
        logger.info("3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python app.py")
        logger.info("4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –∫–Ω–æ–ø–∫–∏ '–°–±—Ä–æ—Å' –≤ –∫–∞–∂–¥–æ–π –ø–∞–Ω–µ–ª–∏")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞–Ω–µ–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞—Ç—å")
        logger.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")


if __name__ == "__main__":
    main()
