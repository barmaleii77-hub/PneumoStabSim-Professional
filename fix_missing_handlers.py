"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ GraphicsPanel
–î–æ–±–∞–≤–ª—è–µ—Ç 4 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ 1 UI —ç–ª–µ–º–µ–Ω—Ç
"""

import sys
from pathlib import Path


def add_missing_handlers():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ panel_graphics.py"""
    
    panel_file = Path("src/ui/panels/panel_graphics.py")
    
    if not panel_file.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {panel_file}")
        return False
    
    print("=" * 80)
    print("üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï GRAPHICSPANEL")
    print("=" * 80)
    
    content = panel_file.read_text(encoding='utf-8')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ—â—ë –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã
    if "on_ibl_toggled" in content:
        print("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ on_ibl_toggled —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        print("   –ü—Ä–æ–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
        return True
    
    # –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–ø–æ—Å–ª–µ on_ibl_intensity_changed)
    insert_marker = "def on_ibl_intensity_changed(self, value: float):"
    
    if insert_marker not in content:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Ä–∫–µ—Ä –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏: {insert_marker}")
        return False
    
    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    new_handlers = '''
    @Slot(bool)
    def on_ibl_toggled(self, enabled: bool):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ IBL"""
        self.current_graphics['ibl_enabled'] = enabled
        if hasattr(self, 'ibl_intensity'):
            self.ibl_intensity.setEnabled(enabled)
        self.emit_environment_update()

    @Slot(bool)
    def on_tonemap_toggled(self, enabled: bool):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–Ω–µ–º–∞–ø–ø–∏–Ω–≥–∞"""
        self.current_graphics['tonemap_enabled'] = enabled
        if hasattr(self, 'tonemap_mode'):
            self.tonemap_mode.setEnabled(enabled)
        self.emit_effects_update()

    @Slot(bool)
    def on_vignette_toggled(self, enabled: bool):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–Ω—å–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.current_graphics['vignette_enabled'] = enabled
        if hasattr(self, 'vignette_strength'):
            self.vignette_strength.setEnabled(enabled)
        self.emit_effects_update()

    @Slot(bool)
    def on_lens_flare_toggled(self, enabled: bool):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ Lens Flare"""
        self.current_graphics['lens_flare_enabled'] = enabled
        self.emit_effects_update()
'''
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ on_ibl_intensity_changed
    lines = content.split('\n')
    new_lines = []
    inserted = False
    
    for i, line in enumerate(lines):
        new_lines.append(line)
        
        # –ò—â–µ–º –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ on_ibl_intensity_changed
        if not inserted and "def on_ibl_intensity_changed" in line:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞ —Ñ—É–Ω–∫—Ü–∏–∏ (—Å–ª–µ–¥—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–ª–∏ –∫–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∞)
            j = i + 1
            while j < len(lines):
                new_lines.append(lines[j])
                if lines[j].strip().startswith("@Slot") or lines[j].strip().startswith("def ") or lines[j].strip().startswith("# ==="):
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–µ–π/—Å–µ–∫—Ü–∏–µ–π
                    new_lines.insert(-1, new_handlers)
                    inserted = True
                    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã 4 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞:")
                    print("   ‚Ä¢ on_ibl_toggled()")
                    print("   ‚Ä¢ on_tonemap_toggled()")
                    print("   ‚Ä¢ on_vignette_toggled()")
                    print("   ‚Ä¢ on_lens_flare_toggled()")
                    break
                j += 1
            
            # –°–¥–≤–∏–≥–∞–µ–º –∏–Ω–¥–µ–∫—Å, —á—Ç–æ–±—ã –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Ç—Ä–æ–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ
            break
    
    if not inserted:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
        return False
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏
    new_lines.extend(lines[j:])
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π —Ñ–∞–π–ª
    new_content = '\n'.join(new_lines)
    
    # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_file = panel_file.with_suffix('.py.backup')
    panel_file.write_text(content, encoding='utf-8')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∫–∞–∫ backup
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    panel_file.write_text(new_content, encoding='utf-8')
    print(f"‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª—ë–Ω: {panel_file}")
    
    return True


def add_connect_statements():
    """–î–æ–±–∞–≤–ª—è–µ—Ç .connect() –≤—ã–∑–æ–≤—ã –¥–ª—è –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    panel_file = Path("src/ui/panels/panel_graphics.py")
    content = panel_file.read_text(encoding='utf-8')
    
    print("\nüîó –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –ö UI –≠–õ–ï–ú–ï–ù–¢–ê–ú:")
    print("-" * 80)
    
    # –ò—â–µ–º –º–µ—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è .connect()
    modifications = [
        {
            'marker': 'self.ibl_enabled = QCheckBox("–í–∫–ª—é—á–∏—Ç—å IBL")',
            'after_marker': 'self.ibl_enabled.setChecked(self.current_graphics[\'ibl_enabled\'])',
            'add': '        self.ibl_enabled.toggled.connect(self.on_ibl_toggled)',
            'name': 'IBL toggle',
        },
        {
            'marker': 'self.tonemap_enabled = QCheckBox("–í–∫–ª—é—á–∏—Ç—å —Ç–æ–Ω–µ–º–∞–ø–ø–∏–Ω–≥")',
            'after_marker': 'self.tonemap_enabled.setChecked(self.current_graphics[\'tonemap_enabled\'])',
            'add': '        self.tonemap_enabled.toggled.connect(self.on_tonemap_toggled)',
            'name': 'Tonemap toggle',
        },
        {
            'marker': 'self.vignette_enabled = QCheckBox("–í–∫–ª—é—á–∏—Ç—å –≤–∏–Ω—å–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")',
            'after_marker': 'self.vignette_enabled.setChecked(self.current_graphics[\'vignette_enabled\'])',
            'add': '        self.vignette_enabled.toggled.connect(self.on_vignette_toggled)',
            'name': 'Vignette toggle',
        },
        {
            'marker': 'self.lens_flare_enabled = QCheckBox("Lens Flare (–±–ª–∏–∫–∏)")',
            'after_marker': 'self.lens_flare_enabled.setChecked(self.current_graphics[\'lens_flare_enabled\'])',
            'add': '        self.lens_flare_enabled.toggled.connect(self.on_lens_flare_toggled)',
            'name': 'Lens Flare toggle',
        },
    ]
    
    modified = False
    
    for mod in modifications:
        if mod['add'] not in content:
            # –ò—â–µ–º –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ setChecked
            if mod['after_marker'] in content:
                content = content.replace(
                    mod['after_marker'],
                    mod['after_marker'] + '\n' + mod['add']
                )
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω: {mod['name']}")
                modified = True
            else:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Ä–∫–µ—Ä –¥–ª—è: {mod['name']}")
        else:
            print(f"‚è≠Ô∏è –£–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω: {mod['name']}")
    
    if modified:
        panel_file.write_text(content, encoding='utf-8')
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ {panel_file}")
        return True
    else:
        print(f"‚è≠Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        return True


def verify_fixes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    print("\n" + "=" * 80)
    print("üîç –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("=" * 80)
    
    panel_file = Path("src/ui/panels/panel_graphics.py")
    content = panel_file.read_text(encoding='utf-8')
    
    checks = [
        ('on_ibl_toggled', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ IBL toggle'),
        ('on_tonemap_toggled', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Tonemap toggle'),
        ('on_vignette_toggled', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Vignette toggle'),
        ('on_lens_flare_toggled', '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Lens Flare toggle'),
        ('self.ibl_enabled.toggled.connect(self.on_ibl_toggled)', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ IBL'),
        ('self.tonemap_enabled.toggled.connect(self.on_tonemap_toggled)', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Tonemap'),
        ('self.vignette_enabled.toggled.connect(self.on_vignette_toggled)', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Vignette'),
        ('self.lens_flare_enabled.toggled.connect(self.on_lens_flare_toggled)', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Lens Flare'),
    ]
    
    all_ok = True
    
    for check, name in checks:
        if check in content:
            print(f"‚úÖ {name}")
        else:
            print(f"‚ùå {name} - –ù–ï –ù–ê–ô–î–ï–ù!")
            all_ok = False
    
    return all_ok


if __name__ == "__main__":
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï GRAPHICSPANEL")
    print("=" * 80)
    
    # –®–∞–≥ 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    if not add_missing_handlers():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏!")
        sys.exit(1)
    
    # –®–∞–≥ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ UI
    if not add_connect_statements():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏!")
        sys.exit(1)
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞
    if verify_fixes():
        print("\n" + "=" * 80)
        print("‚úÖ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("=" * 80)
        print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: py check_graphics_params.py")
        print("  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 100%)")
        print("  3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: py app.py")
        print("  4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –ø–∞–Ω–µ–ª–∏ –≥—Ä–∞—Ñ–∏–∫–∏")
        sys.exit(0)
    else:
        print("\n‚ùå –ü–†–û–í–ï–†–ö–ê –ù–ï –ü–†–û–ô–î–ï–ù–ê!")
        sys.exit(1)
