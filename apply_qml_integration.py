# -*- coding: utf-8 -*-
"""
QML Integration Script - FINAL VERSION
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ QML –º–æ–¥—É–ª–∏ –≤ main.qml
–° —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –æ—Ç–∫–∞—Ç–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
"""

import re
import shutil
from pathlib import Path
from datetime import datetime
import sys


class QMLIntegrator:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä QML –º–æ–¥—É–ª–µ–π"""
    
    def __init__(self, main_qml_path: Path):
        self.main_qml_path = main_qml_path
        self.backup_path = None
        self.changes_made = []
        
    def create_backup(self) -> Path:
        """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é main.qml"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = self.main_qml_path.with_suffix(f'.qml.backup_{timestamp}')
        shutil.copy2(self.main_qml_path, backup_path)
        print(f"‚úÖ Backup created: {backup_path}")
        self.backup_path = backup_path
        return backup_path
    
    def restore_backup(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        if self.backup_path and self.backup_path.exists():
            shutil.copy2(self.backup_path, self.main_qml_path)
            print(f"‚Ü©Ô∏è Restored from backup: {self.backup_path}")
    
    def read_file(self) -> str:
        """–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ main.qml"""
        with open(self.main_qml_path, 'r', encoding='utf-8') as f:
            return f.read()
    
    def write_file(self, content: str):
        """–ó–∞–ø–∏—Å–∞—Ç—å –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
        with open(self.main_qml_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"‚úÖ File written: {self.main_qml_path}")
    
    def add_imports(self, content: str) -> str:
        """–î–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π"""
        print("\nüì¶ Adding module imports...")
        
        # –ù–∞–π—Ç–∏ –±–ª–æ–∫ –∏–º–ø–æ—Ä—Ç–æ–≤ (–ø–æ—Å–ª–µ import QtQuick3D)
        import_pattern = r'(import QtQuick3D\s+)'
        
        new_imports = '''
// ‚úÖ REFACTORED: Module imports
import "lighting"
import "materials"
import "geometry"
import "effects"
import "scene"
'''
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏ —É–∂–µ –∏–º–ø–æ—Ä—Ç—ã
        if 'import "lighting"' in content:
            print("  ‚è≠Ô∏è Imports already present, skipping")
            return content
        
        content = re.sub(import_pattern, r'\1' + new_imports, content, count=1)
        self.changes_made.append("Added module imports")
        print("  ‚úÖ Added 5 module imports")
        return content
    
    def replace_materials_with_shared(self, content: str) -> str:
        """–ó–∞–º–µ–Ω–∏—Ç—å inline –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞ SharedMaterials"""
        print("\nüé® Replacing materials with SharedMaterials...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–º–µ–Ω–µ–Ω–æ –ª–∏ —É–∂–µ
        if 'SharedMaterials {' in content:
            print("  ‚è≠Ô∏è SharedMaterials already integrated, skipping")
            return content
        
        # ‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï —É–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º SharedMaterials
        # –°—Ç–∞—Ä—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
        
        shared_materials_block = '''
    // ‚úÖ REFACTORED: Shared materials (all PBR parameters)
    SharedMaterials {
        id: sharedMaterials
        
        // Frame Material
        frameBaseColor: root.frameBaseColor
        frameMetalness: root.frameMetalness
        frameRoughness: root.frameRoughness
        frameSpecularAmount: root.frameSpecularAmount
        frameSpecularTint: root.frameSpecularTint
        frameClearcoat: root.frameClearcoat
        frameClearcoatRoughness: root.frameClearcoatRoughness
        frameTransmission: root.frameTransmission
        frameOpacity: root.frameOpacity
        frameIor: root.frameIor
        frameAttenuationDistance: root.frameAttenuationDistance
        frameAttenuationColor: root.frameAttenuationColor
        frameEmissiveColor: root.frameEmissiveColor
        frameEmissiveIntensity: root.frameEmissiveIntensity
        
        // Lever Material
        leverBaseColor: root.leverBaseColor
        leverMetalness: root.leverMetalness
        leverRoughness: root.leverRoughness
        leverSpecularAmount: root.leverSpecularAmount
        leverSpecularTint: root.leverSpecularTint
        leverClearcoat: root.leverClearcoat
        leverClearcoatRoughness: root.leverClearcoatRoughness
        leverTransmission: root.leverTransmission
        leverOpacity: root.leverOpacity
        leverIor: root.leverIor
        leverAttenuationDistance: root.leverAttenuationDistance
        leverAttenuationColor: root.leverAttenuationColor
        leverEmissiveColor: root.leverEmissiveColor
        leverEmissiveIntensity: root.leverEmissiveIntensity
        
        // Tail Rod Material
        tailRodBaseColor: root.tailRodBaseColor
        tailRodMetalness: root.tailRodMetalness
        tailRodRoughness: root.tailRodRoughness
        tailRodSpecularAmount: root.tailRodSpecularAmount
        tailRodSpecularTint: root.tailRodSpecularTint
        tailRodClearcoat: root.tailRodClearcoat
        tailRodClearcoatRoughness: root.tailRodClearcoatRoughness
        tailRodTransmission: root.tailRodTransmission
        tailRodOpacity: root.tailRodOpacity
        tailRodIor: root.tailRodIor
        tailRodAttenuationDistance: root.tailRodAttenuationDistance
        tailRodAttenuationColor: root.tailRodAttenuationColor
        tailRodEmissiveColor: root.tailRodEmissiveColor
        tailRodEmissiveIntensity: root.tailRodEmissiveIntensity
        
        // Cylinder Material
        cylinderBaseColor: root.cylinderBaseColor
        cylinderMetalness: root.cylinderMetalness
        cylinderRoughness: root.cylinderRoughness
        cylinderSpecularAmount: root.cylinderSpecularAmount
        cylinderSpecularTint: root.cylinderSpecularTint
        cylinderClearcoat: root.cylinderClearcoat
        cylinderClearcoatRoughness: root.cylinderClearcoatRoughness
        cylinderTransmission: root.cylinderTransmission
        cylinderOpacity: root.cylinderOpacity
        cylinderIor: root.cylinderIor
        cylinderAttenuationDistance: root.cylinderAttenuationDistance
        cylinderAttenuationColor: root.cylinderAttenuationColor
        cylinderEmissiveColor: root.cylinderEmissiveColor
        cylinderEmissiveIntensity: root.cylinderEmissiveIntensity
        
        // Piston Body Material
        pistonBodyBaseColor: root.pistonBodyBaseColor
        pistonBodyWarningColor: root.pistonBodyWarningColor
        pistonBodyMetalness: root.pistonBodyMetalness
        pistonBodyRoughness: root.pistonBodyRoughness
        pistonBodySpecularAmount: root.pistonBodySpecularAmount
        pistonBodySpecularTint: root.pistonBodySpecularTint
        pistonBodyClearcoat: root.pistonBodyClearcoat
        pistonBodyClearcoatRoughness: root.pistonBodyClearcoatRoughness
        pistonBodyTransmission: root.pistonBodyTransmission
        pistonBodyOpacity: root.pistonBodyOpacity
        pistonBodyIor: root.pistonBodyIor
        pistonBodyAttenuationDistance: root.pistonBodyAttenuationDistance
        pistonBodyAttenuationColor: root.pistonBodyAttenuationColor
        pistonBodyEmissiveColor: root.pistonBodyEmissiveColor
        pistonBodyEmissiveIntensity: root.pistonBodyEmissiveIntensity
        
        // Piston Rod Material
        pistonRodBaseColor: root.pistonRodBaseColor
        pistonRodWarningColor: root.pistonRodWarningColor
        pistonRodMetalness: root.pistonRodMetalness
        pistonRodRoughness: root.pistonRodRoughness
        pistonRodSpecularAmount: root.pistonRodSpecularAmount
        pistonRodSpecularTint: root.pistonRodSpecularTint
        pistonRodClearcoat: root.pistonRodClearcoat
        pistonRodClearcoatRoughness: root.pistonRodClearcoatRoughness
        pistonRodTransmission: root.pistonRodTransmission
        pistonRodOpacity: root.pistonRodOpacity
        pistonRodIor: root.pistonRodIor
        pistonRodAttenuationDistance: root.pistonRodAttenuationDistance
        pistonRodAttenuationColor: root.pistonRodAttenuationColor
        pistonRodEmissiveColor: root.pistonRodEmissiveColor
        pistonRodEmissiveIntensity: root.pistonRodEmissiveIntensity
        
        // Joint Tail Material
        jointTailBaseColor: root.jointTailBaseColor
        jointTailMetalness: root.jointTailMetalness
        jointTailRoughness: root.jointTailRoughness
        jointTailSpecularAmount: root.jointTailSpecularAmount
        jointTailSpecularTint: root.jointTailSpecularTint
        jointTailClearcoat: root.jointTailClearcoat
        jointTailClearcoatRoughness: root.jointTailClearcoatRoughness
        jointTailTransmission: root.jointTailTransmission
        jointTailOpacity: root.jointTailOpacity
        jointTailIor: root.jointTailIor
        jointTailAttenuationDistance: root.jointTailAttenuationDistance
        jointTailAttenuationColor: root.jointTailAttenuationColor
        jointTailEmissiveColor: root.jointTailEmissiveColor
        jointTailEmissiveIntensity: root.jointTailEmissiveIntensity
        
        // Joint Arm Material
        jointArmBaseColor: root.jointArmBaseColor
        jointArmMetalness: root.jointArmMetalness
        jointArmRoughness: root.jointArmRoughness
        jointArmSpecularAmount: root.jointArmSpecularAmount
        jointArmSpecularTint: root.jointArmSpecularTint
        jointArmClearcoat: root.jointArmClearcoat
        jointArmClearcoatRoughness: root.jointArmClearcoatRoughness
        jointArmTransmission: root.jointArmTransmission
        jointArmOpacity: root.jointArmOpacity
        jointArmIor: root.jointArmIor
        jointArmAttenuationDistance: root.jointArmAttenuationDistance
        jointArmAttenuationColor: root.jointArmAttenuationColor
        jointArmEmissiveColor: root.jointArmEmissiveColor
        jointArmEmissiveIntensity: root.jointArmEmissiveIntensity
        
        // Joint Rod Colors
        jointRodOkColor: root.jointRodOkColor
        jointRodErrorColor: root.jointRodErrorColor
    }

'''
        
        # –ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ worldRoot Node (–ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º)
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "Node { id: worldRoot" –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –Ω–µ–≥–æ
        worldroot_pattern = r'(Node\s*\{\s*id:\s*worldRoot[^\n]*\n)'
        
        if re.search(worldroot_pattern, content):
            content = re.sub(worldroot_pattern, r'\1' + shared_materials_block, content, count=1)
            self.changes_made.append("Added SharedMaterials block")
            print("  ‚úÖ Added SharedMaterials block")
        else:
            print("  ‚ö†Ô∏è worldRoot not found, skipping SharedMaterials")
            return content
        
        # –ó–∞–º–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (materials: [frameMaterial] ‚Üí materials: [sharedMaterials.frameMaterial])
        material_names = [
            'frameMaterial', 'leverMaterial', 'tailRodMaterial', 'cylinderMaterial',
            'pistonBodyMaterial', 'pistonRodMaterial', 'jointTailMaterial', 'jointArmMaterial'
        ]
        
        replacements = 0
        for mat_name in material_names:
            # –ó–∞–º–µ–Ω–∏—Ç—å materials: [matName] –Ω–∞ materials: [sharedMaterials.matName]
            old_usage = f'materials: [{mat_name}]'
            new_usage = f'materials: [sharedMaterials.{mat_name}]'
            if old_usage in content:
                content = content.replace(old_usage, new_usage)
                replacements += 1
        
        self.changes_made.append(f"Replaced {replacements} material usages with sharedMaterials references")
        print(f"  ‚úÖ Replaced {replacements} material usages")
        return content
    
    def integrate_lighting(self, content: str) -> str:
        """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å DirectionalLights –∏ PointLights"""
        print("\nüí° Integrating lighting modules...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–º–µ–Ω–µ–Ω–æ –ª–∏ —É–∂–µ
        if 'DirectionalLights {' in content:
            print("  ‚è≠Ô∏è Lighting modules already integrated, skipping")
            return content
        
        # ‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª–∏
        # –°—Ç–∞—Ä—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª–∏ –æ—Å–≤–µ—â–µ–Ω–∏—è –ø–æ—Å–ª–µ SharedMaterials (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –ø–æ—Å–ª–µ worldRoot
        lighting_block = '''
    // ‚úÖ REFACTORED: Directional Lights (Key + Fill + Rim)
    DirectionalLights {
        id: directionalLights
        worldRoot: worldRoot
        cameraRig: cameraController.rig
        
        // Key Light
        keyBrightness: root.keyLightBrightness
        keyColor: root.keyLightColor
        keyAngleX: root.keyLightAngleX
        keyAngleY: root.keyLightAngleY
        keyCastsShadow: root.keyLightCastsShadow
        keyBindToCamera: root.keyLightBindToCamera
        keyPosX: root.keyLightPosX
        keyPosY: root.keyLightPosY
        
        // Fill Light
        fillBrightness: root.fillLightBrightness
        fillColor: root.fillLightColor
        fillCastsShadow: root.fillLightCastsShadow
        fillBindToCamera: root.fillLightBindToCamera
        fillPosX: root.fillLightPosX
        fillPosY: root.fillLightPosY
        
        // Rim Light
        rimBrightness: root.rimLightBrightness
        rimColor: root.rimLightColor
        rimCastsShadow: root.rimLightCastsShadow
        rimBindToCamera: root.rimLightBindToCamera
        rimPosX: root.rimLightPosX
        rimPosY: root.rimLightPosY
        
        // Shadow settings
        shadowsEnabled: root.shadowsEnabled
        shadowQuality: root.shadowResolution === "4096" ? 2 :
                      root.shadowResolution === "2048" ? 1 : 0
        shadowBias: root.shadowBias
        shadowFactor: root.shadowFactor
        shadowSoftness: root.shadowFilterSamples / 32.0
    }
    
    // ‚úÖ REFACTORED: Point Light
    PointLights {
        id: pointLights
        worldRoot: worldRoot
        
        brightness: root.pointLightBrightness
        color: root.pointLightColor
        posX: root.pointLightX
        posY: root.pointLightY
        range: root.pointLightRange
        castsShadow: root.pointLightCastsShadow
        bindToCamera: root.pointLightBindToCamera
    }

'''
        
        # –ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ SharedMaterials (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –ø–æ—Å–ª–µ worldRoot
        if 'SharedMaterials {' in content:
            # –í—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏ SharedMaterials
            pattern = r'(SharedMaterials\s*\{[^}]*?\n\s*\})'
            
            def insert_after_materials(match):
                return match.group(1) + '\n' + lighting_block
            
            content = re.sub(pattern, insert_after_materials, content, count=1, flags=re.DOTALL)
            self.changes_made.append("Added DirectionalLights + PointLights after SharedMaterials")
        else:
            # –í—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ worldRoot
            worldroot_pattern = r'(Node\s*\{\s*id:\s*worldRoot[^\n]*\n)'
            content = re.sub(worldroot_pattern, r'\1' + lighting_block, content, count=1)
            self.changes_made.append("Added DirectionalLights + PointLights after worldRoot")
        
        print("  ‚úÖ Integrated 4 light sources into modules")
        return content
    
    def calculate_line_reduction(self, old_content: str, new_content: str) -> int:
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫"""
        old_lines = len(old_content.split('\n'))
        new_lines = len(new_content.split('\n'))
        reduction = old_lines - new_lines
        return reduction
    
    def validate_syntax(self, content: str) -> bool:
        """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ QML"""
        print("\nüîç Validating QML syntax...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–Ω—ã—Ö —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫
        open_braces = content.count('{')
        close_braces = content.count('}')
        
        if open_braces != close_braces:
            print(f"  ‚ùå Brace mismatch: {open_braces} {{ vs {close_braces} }}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–ª–æ–∫–æ–≤
        required_blocks = ['Item {', 'View3D {', 'Node {']
        for block in required_blocks:
            if block not in content:
                print(f"  ‚ùå Missing required block: {block}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        required_imports = ['import QtQuick', 'import QtQuick3D']
        for imp in required_imports:
            if imp not in content:
                print(f"  ‚ùå Missing required import: {imp}")
                return False
        
        print("  ‚úÖ Syntax validation passed")
        return True
    
    def run(self) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
        print("=" * 70)
        print("üöÄ QML INTEGRATION SCRIPT - FINAL VERSION")
        print("=" * 70)
        
        try:
            # 1. –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø
            self.create_backup()
            
            # 2. –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª
            print(f"\nüìñ Reading {self.main_qml_path}...")
            original_content = self.read_file()
            original_lines = len(original_content.split('\n'))
            print(f"  üìä Original: {original_lines} lines")
            
            # 3. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            content = original_content
            content = self.add_imports(content)
            content = self.replace_materials_with_shared(content)
            content = self.integrate_lighting(content)
            
            # 4. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            if not self.validate_syntax(content):
                print("\n‚ùå Syntax validation failed!")
                print("‚Ü©Ô∏è Restoring from backup...")
                self.restore_backup()
                return False
            
            # 5. –ó–∞–ø–∏—Å–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.write_file(content)
            
            # 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            new_lines = len(content.split('\n'))
            reduction = original_lines - new_lines
            
            print("\n" + "=" * 70)
            print("‚úÖ INTEGRATION COMPLETE!")
            print("=" * 70)
            print(f"\nüìä Statistics:")
            print(f"  Original lines:    {original_lines}")
            print(f"  New lines:         {new_lines}")
            print(f"  Lines reduced:     {reduction} ({reduction/original_lines*100:.1f}%)")
            print(f"\nüîß Changes applied:")
            for i, change in enumerate(self.changes_made, 1):
                print(f"  {i}. {change}")
            
            print(f"\nüíæ Backup saved at: {self.backup_path}")
            print(f"\n‚úÖ {self.main_qml_path} successfully updated!")
            
            return True
            
        except Exception as e:
            print(f"\n‚ùå ERROR: {e}")
            print("‚Ü©Ô∏è Restoring from backup...")
            self.restore_backup()
            import traceback
            traceback.print_exc()
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    main_qml = Path("assets/qml/main.qml")
    
    if not main_qml.exists():
        print(f"‚ùå File not found: {main_qml}")
        return 1
    
    integrator = QMLIntegrator(main_qml)
    success = integrator.run()
    
    if success:
        print("\nüéâ Integration successful!")
        print("\nüìù Next steps:")
        print("  1. Test the application: python app.py")
        print("  2. Check 3D scene rendering")
        print("  3. Verify material changes in UI")
        print("  4. Commit changes: git add assets/qml/main.qml && git commit -m 'QML: Integrate modules'")
        return 0
    else:
        print("\n‚ùå Integration failed!")
        print("   File restored from backup")
        return 1


if __name__ == "__main__":
    sys.exit(main())
