#!/usr/bin/env python3
"""
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ì–ï–û–ú–ï–¢–†–ò–ò –ò –ú–£–ê–†–ê –í QML
================================================================
–ü—Ä–æ–±–ª–µ–º—ã:
1. –ú—É–∞—Ä –Ω–∞ —Ü–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—è—Ö (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏)
2. –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫ –æ–¥–Ω–æ–π —Å—Ü–µ–Ω–µ, –∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è –¥—Ä—É–≥–∞—è
3. HDR —Ñ–æ–Ω –¥–µ—Ä–≥–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ä–±–∏—Ç–µ
4. –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
"""

import os
import re


def check_cylinder_duplication():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤ –≤ main.qml"""

    main_qml_path = "assets/qml/main.qml"

    if not os.path.exists(main_qml_path):
        print("‚ùå main.qml –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    with open(main_qml_path, "r", encoding="utf-8") as f:
        content = f.read()

    print("üîç –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –¶–ò–õ–ò–ù–î–†–û–í:")
    print("=" * 50)

    # –ò—â–µ–º –≤—Å–µ —Ü–∏–ª–∏–Ω–¥—Ä—ã
    cylinder_pattern = r'Model\s*{[^}]*source:\s*(#Cylinder|"#Cylinder")[^}]*}'
    cylinder_matches = re.findall(cylinder_pattern, content, re.DOTALL)

    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤: {len(cylinder_matches)}")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤
    position_pattern = r"position:\s*Qt\.vector3d\(([^)]+)\)"
    positions = re.findall(position_pattern, content)

    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
    position_dict = {}
    for pos in positions:
        if pos in position_dict:
            position_dict[pos] += 1
            print(
                f"‚ö†Ô∏è –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –ü–û–ó–ò–¶–ò–ò: {pos} (–≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {position_dict[pos]} —Ä–∞–∑)"
            )
        else:
            position_dict[pos] = 1

    print("\nüîç –ê–ù–ê–õ–ò–ó –ö–û–ú–ü–û–ù–ï–ù–¢–û–í OptimizedSuspensionCorner:")
    print("=" * 50)

    # –ò—â–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã OptimizedSuspensionCorner
    corner_pattern = r"OptimizedSuspensionCorner\s*{[^}]*}"
    corner_matches = re.findall(corner_pattern, content, re.DOTALL)

    print(f"üìä –ù–∞–π–¥–µ–Ω–æ OptimizedSuspensionCorner: {len(corner_matches)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ü–∏–ª–∏–Ω–¥—Ä—ã –≤–Ω–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    lines = content.split("\n")
    in_suspension_corner = False
    standalone_cylinders = 0

    for i, line in enumerate(lines):
        if "OptimizedSuspensionCorner" in line and "{" in line:
            in_suspension_corner = True
        elif in_suspension_corner and line.strip() == "}":
            in_suspension_corner = False
        elif not in_suspension_corner and "#Cylinder" in line:
            standalone_cylinders += 1
            print(f"‚ö†Ô∏è –û–¢–î–ï–õ–¨–ù–´–ô –¶–ò–õ–ò–ù–î–† –≤–Ω–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (—Å—Ç—Ä–æ–∫–∞ {i+1}): {line.strip()}")

    print(f"üìä –û—Ç–¥–µ–ª—å–Ω—ã—Ö —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤ –≤–Ω–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {standalone_cylinders}")

    return True


def check_scene_environment_usage():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ExtendedSceneEnvironment"""

    main_qml_path = "assets/qml/main.qml"

    with open(main_qml_path, "r", encoding="utf-8") as f:
        content = f.read()

    print("\nüîç –ê–ù–ê–õ–ò–ó SCENE ENVIRONMENT:")
    print("=" * 50)

    # –ò—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ExtendedSceneEnvironment
    if "ExtendedSceneEnvironment" in content:
        print("‚úÖ ExtendedSceneEnvironment –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∫ View3D
        view3d_pattern = r"View3D\s*{[^}]*environment:\s*ExtendedSceneEnvironment"
        if re.search(view3d_pattern, content, re.DOTALL):
            print("‚úÖ ExtendedSceneEnvironment –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ View3D")
        else:
            print("‚ùå ExtendedSceneEnvironment –ù–ï –ø—Ä–∏–≤—è–∑–∞–Ω –∫ View3D!")
            return False
    else:
        print("‚ùå ExtendedSceneEnvironment –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    effect_props = [
        "bloomEnabled",
        "ssaoEnabled",
        "tonemapMode",
        "antialiasingMode",
        "shadowsEnabled",
    ]

    for prop in effect_props:
        if prop in content:
            print(f"‚úÖ {prop} –Ω–∞–π–¥–µ–Ω –≤ QML")
        else:
            print(f"‚ùå {prop} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ QML!")

    return True


def analyze_antialiasing_values():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∞–Ω—Ç–∏–∞–ª–∏–∞—Å–∏–Ω–≥–∞"""

    main_qml_path = "assets/qml/main.qml"

    with open(main_qml_path, "r", encoding="utf-8") as f:
        content = f.read()

    print("\nüîç –ê–ù–ê–õ–ò–ó –ê–ù–¢–ò–ê–õ–ò–ê–°–ò–ù–ì–ê:")
    print("=" * 50)

    # –ò—â–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏–∞–ª–∏–∞—Å–∏–Ω–≥–∞
    aa_mode_match = re.search(r"property\s+int\s+antialiasingMode:\s*(\d+)", content)
    aa_quality_match = re.search(
        r"property\s+int\s+antialiasingQuality:\s*(\d+)", content
    )

    if aa_mode_match:
        aa_mode = int(aa_mode_match.group(1))
        print(f"üìä antialiasingMode: {aa_mode}")

        modes = {
            0: "NoAA (–æ—Ç–∫–ª—é—á–µ–Ω)",
            1: "SSAA (—Å—É–ø–µ—Ä—Å–µ–º–ø–ª–∏–Ω–≥)",
            2: "MSAA (–º—É–ª—å—Ç–∏—Å–µ–º–ø–ª–∏–Ω–≥)",
            3: "ProgressiveAA (–ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π)",
        }
        print(f"   –†–µ–∂–∏–º: {modes.get(aa_mode, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}")

    if aa_quality_match:
        aa_quality = int(aa_quality_match.group(1))
        print(f"üìä antialiasingQuality: {aa_quality}")

        qualities = {0: "Low (–Ω–∏–∑–∫–æ–µ)", 1: "Medium (—Å—Ä–µ–¥–Ω–µ–µ)", 2: "High (–≤—ã—Å–æ–∫–æ–µ)"}
        print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {qualities.get(aa_quality, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ')}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –≤ ExtendedSceneEnvironment
    aa_binding_pattern = r"antialiasingMode:\s*([^,\n}]+)"
    aa_binding_match = re.search(aa_binding_pattern, content)

    if aa_binding_match:
        binding = aa_binding_match.group(1).strip()
        print(f"üìä –ü—Ä–∏–≤—è–∑–∫–∞ antialiasingMode: {binding}")

        if "SceneEnvironment" in binding:
            print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∫ SceneEnvironment")
        else:
            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∞–Ω—Ç–∏–∞–ª–∏–∞—Å–∏–Ω–≥–∞!")


def check_hdr_background():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HDR —Ñ–æ–Ω–∞"""

    main_qml_path = "assets/qml/main.qml"

    with open(main_qml_path, "r", encoding="utf-8") as f:
        content = f.read()

    print("\nüîç –ê–ù–ê–õ–ò–ó HDR –§–û–ù–ê:")
    print("=" * 50)

    # –ò—â–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ–Ω–∞
    bg_mode_pattern = r"backgroundMode:\s*([^,\n}]+)"
    bg_mode_match = re.search(bg_mode_pattern, content)

    if bg_mode_match:
        bg_mode = bg_mode_match.group(1).strip()
        print(f"üìä backgroundMode: {bg_mode}")

        if "SkyBox" in bg_mode and "iblReady" in bg_mode:
            print("‚úÖ –£—Å–ª–æ–≤–Ω—ã–π SkyBox —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π IBL")
        elif "SkyBox" in bg_mode:
            print("‚ö†Ô∏è SkyBox –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ IBL - –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –¥–µ—Ä–≥–∞–Ω—å–µ!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º lightProbe
    light_probe_pattern = r"lightProbe:\s*([^,\n}]+)"
    light_probe_match = re.search(light_probe_pattern, content)

    if light_probe_match:
        light_probe = light_probe_match.group(1).strip()
        print(f"üìä lightProbe: {light_probe}")

        if "iblLoader.probe" in light_probe and "iblReady" in light_probe:
            print("‚úÖ –£—Å–ª–æ–≤–Ω—ã–π lightProbe —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π IBL")
        elif "iblLoader.probe" in light_probe:
            print("‚ö†Ô∏è lightProbe –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ - –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –¥–µ—Ä–≥–∞–Ω—å–µ!")


def suggest_fixes():
    """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""

    print("\nüîß –ü–†–ï–î–õ–ê–ì–ê–ï–ú–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("=" * 50)

    print("1. –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –ì–ï–û–ú–ï–¢–†–ò–ò:")
    print(
        "   ‚ùå –£–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ü–∏–ª–∏–Ω–¥—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –¥—É–±–ª–∏—Ä—É—é—Ç OptimizedSuspensionCorner"
    )
    print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û OptimizedSuspensionCorner –¥–ª—è –≤—Å–µ—Ö —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤")
    print("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è")

    print("\n2. –ú–£–ê–† –ù–ê –¶–ò–õ–ò–ù–î–†–ê–•:")
    print("   ‚ùå Z-fighting –∏–∑-–∑–∞ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤")
    print("   ‚úÖ –£–±—Ä–∞—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è Model —Å source: '#Cylinder'")
    print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ Z-–ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–ª–æ–µ–≤")

    print("\n3. HDR –§–û–ù –î–ï–†–ì–ê–ï–¢–°–Ø:")
    print("   ‚ùå backgroundMode –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ IBL")
    print("   ‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É iblReady –≤ backgroundMode")
    print("   ‚úÖ lightProbe –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null –ø–æ–∫–∞ IBL –Ω–µ –≥–æ—Ç–æ–≤")

    print("\n4. –≠–§–§–ï–ö–¢–´ –ù–ï –†–ê–ë–û–¢–ê–Æ–¢:")
    print("   ‚ùå –í–æ–∑–º–æ–∂–Ω–æ ExtendedSceneEnvironment –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    print("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫–∏ –≤—Å–µ—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤")
    print("   ‚úÖ –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ antialiasingMode –ø—Ä–∞–≤–∏–ª—å–Ω–æ –º–∞–ø–ø–∏—Ç—Å—è")

    print("\n5. –£–í–ï–õ–ò–ß–ï–ù–ò–ï –ó–ù–ê–ß–ï–ù–ò–ô –≠–§–§–ï–ö–¢–û–í:")
    print("   ‚úÖ ssaoStrength: —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 100+ (—Å–µ–π—á–∞—Å ~50)")
    print("   ‚úÖ bloomIntensity: —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 1.5+ (—Å–µ–π—á–∞—Å ~0.8)")
    print("   ‚úÖ shadowSoftness: —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 1.0+ (—Å–µ–π—á–∞—Å ~0.5)")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ò –ú–£–ê–†–ê –í QML")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤
    check_cylinder_duplication()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ExtendedSceneEnvironment
    check_scene_environment_usage()

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω—Ç–∏–∞–ª–∏–∞—Å–∏–Ω–≥
    analyze_antialiasing_values()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º HDR —Ñ–æ–Ω
    check_hdr_background()

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    suggest_fixes()

    print("\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º")


if __name__ == "__main__":
    main()
