#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PneumoStabSim-Professional Environment Setup Script
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
"""

import os
import platform
import subprocess
import sys
import hashlib
import shutil
import argparse
import glob
import textwrap
from contextlib import contextmanager
from datetime import datetime
from functools import lru_cache
from pathlib import Path
from typing import Dict, List, Optional

QT_ENV_DEFAULTS: Dict[str, str] = {
    "QT_QPA_PLATFORM": "offscreen",
    "QT_QUICK_BACKEND": "software",
    "QT_PLUGIN_PATH": "",
    "QML2_IMPORT_PATH": "",
}

DEFAULT_SOURCES = [
    "https://download.qt.io/official_releases/qt/5.15/5.15.2/",
    "https://download.qt.io/archive/qt/5.15/5.15.2/",
    "https://download.qt.io/official_releases/qt/6.2/6.2.4/",
    "https://download.qt.io/archive/qt/6.2/6.2.4/",
]
QT_SOURCES_DIR = Path.home() / "qt_sources"


@lru_cache(maxsize=1)
def _detect_qt_environment() -> Dict[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Qt."""

    environment = dict(QT_ENV_DEFAULTS)

    try:
        from PySide6.QtCore import QLibraryInfo, LibraryLocation  # type: ignore
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç–∏ Qt: {exc}")
        return environment

    plugin_path = QLibraryInfo.path(LibraryLocation.Plugins)
    if plugin_path:
        environment["QT_PLUGIN_PATH"] = plugin_path

    qml_import_path = QLibraryInfo.path(LibraryLocation.QmlImports)
    if qml_import_path:
        environment["QML2_IMPORT_PATH"] = qml_import_path

    return environment


class Logger:
    """–ü—Ä–æ—Å—Ç–æ–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–∞–π–º—Å—Ç–µ–º–ø–æ–º"""

    def __init__(self, prefix: str = ""):
        self.prefix = prefix

    def log(self, message: str):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"{timestamp} {self.prefix}{message}")


def _runtime_version_blocker(version: tuple[int, int]) -> Optional[str]:
    """Return a human readable error if the runtime Python is unsupported.

    The setup utilities intentionally target Python 3.11‚Äì3.13 because Qt 6.10 /
    PySide6 6.10.0 is not yet available for Python 3.14.  When the bootstrap
    script itself is executed with an unsupported interpreter the dependency
    installation stage will fail with a misleading pip resolution error.  By
    detecting the situation upfront we can provide an actionable explanation to
    the developer.
    """

    major, minor = version
    if major != 3:
        return (
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ Python 3.x. "
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.13 –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É."
        )

    if minor >= 14:
        return (
            "–û–±–Ω–∞—Ä—É–∂–µ–Ω Python 3.%d. Qt/PySide6 6.10.0 –ø–æ–∫–∞ –Ω–µ –≤—ã–ø—É—Å–∫–∞–µ—Ç—Å—è "
            "–¥–ª—è —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.13 –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç." % minor
        )

    return None


class EnvironmentSetup:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""

    def __init__(self, qt_sdk_version: Optional[str] = None):
        self.project_root = Path(__file__).parent
        self.platform = platform.system()
        self.logger = Logger("[Setup] ")

        self.qt_environment = _detect_qt_environment()
        os.environ.update(self.qt_environment)

        self.python_executable = self._find_python()
        self.python_version = self._detect_python_version()
        self.qt_sdk_version = qt_sdk_version
        self.venv_path = self.project_root / ".venv"
        self._venv_python_cmd: Optional[List[str]] = None
        self._venv_python_announced = False
        self._root_warning_shown = False

        self._pip_extra_args = self._detect_pip_extra_args()

        self.logger.log("–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–ö–†–£–ñ–ï–ù–ò–Ø PNEUMOSTABSIM-PROFESSIONAL")
        self.logger.log("=" * 60)
        self.logger.log(f"–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞: {self.project_root}")
        self.logger.log(f"Python executable: {self.python_executable}")
        self.logger.log(
            "–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Python: "
            + ".".join(str(part) for part in self.python_version)
        )
        self.logger.log(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {self.platform}")
        self.logger.log("Qt –æ–∫—Ä—É–∂–µ–Ω–∏–µ:")
        for key, value in self.qt_environment.items():
            self.logger.log(f" ‚Ä¢ {key}={value}")
        self.logger.log("=" * 60)

    def _find_python(self) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä Python3.13 (fallback 3.11)."""

        python_candidates: List[List[str]] = [
            ["py", "-3.13"],
            ["python3.13"],
            ["py", "-3.11"],
            ["python3.11"],
            ["python3"],
            ["py", "-3"],
            ["python"],
        ]

        for candidate in python_candidates:
            try:
                result = subprocess.run(
                    candidate + ["--version"], capture_output=True, text=True
                )
                if result.returncode == 0:
                    cmd_display = " ".join(candidate)
                    self.logger.log(
                        f"‚úÖ –ù–∞–π–¥–µ–Ω Python: {cmd_display} ({result.stdout.strip()})"
                    )
                    return candidate
            except FileNotFoundError:
                continue

        self.logger.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é –≤–µ—Ä—Å–∏—é Python (3.11‚Äì3.13)!")
        sys.exit(1)

    def _detect_python_version(self) -> tuple[int, int, int]:
        try:
            result = subprocess.run(
                self.python_executable
                + [
                    "-c",
                    "import sys; print('.'.join(map(str, sys.version_info[:3])))",
                ],
                capture_output=True,
                text=True,
                check=True,
            )
            version_parts = tuple(
                int(part) for part in result.stdout.strip().split(".")
            )
            return version_parts  # type: ignore[return-value]
        except Exception:
            return sys.version_info[:3]

    def _detect_pip_extra_args(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ pip –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ—Ç root."""

        geteuid = getattr(os, "geteuid", None)
        if callable(geteuid):
            try:
                if geteuid() == 0:
                    return ["--root-user-action=ignore"]
            except OSError:
                return []
        return []

    def _venv_executables(self) -> tuple[Path, Path]:
        if self.platform == "Windows":
            return (
                self.venv_path / "Scripts" / "python.exe",
                self.venv_path / "Scripts" / "activate.ps1",
            )
        return (
            self.venv_path / "bin" / "python",
            self.venv_path / "bin" / "activate",
        )

    def _register_venv_python(self, python_path: Path) -> bool:
        if not python_path.exists():
            self.logger.log(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è: "
                f"{python_path}"
            )
            return False

        self._venv_python_cmd = [str(python_path)]
        if not self._venv_python_announced:
            self.logger.log(
                "üõ°Ô∏è pip –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏"
            )
            self._venv_python_announced = True
        return True

    def _pip_command(self, *args: str) -> List[str]:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É pip —Å —É—á—ë—Ç–æ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤."""

        launcher = self._resolve_pip_launcher()
        command = [*launcher, *args]
        return command

    def _resolve_pip_launcher(self) -> List[str]:
        if self._venv_python_cmd is None and self.venv_path.exists():
            venv_python, _ = self._venv_executables()
            if venv_python.exists():
                self._register_venv_python(venv_python)

        if self._venv_python_cmd is not None:
            return [*self._venv_python_cmd, "-m", "pip"]

        if self._pip_extra_args and not self._root_warning_shown:
            self.logger.log(
                "‚ö†Ô∏è –ó–∞–ø—É—Å–∫ pip –æ—Ç –∏–º–µ–Ω–∏ root –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
            )
            self._root_warning_shown = True

        return [*self.python_executable, "-m", "pip", *self._pip_extra_args]

    def check_python_version(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
        try:
            result = subprocess.run(
                self.python_executable + ["--version"],
                capture_output=True,
                text=True,
            )
            version_str = result.stdout.strip()
            self.logger.log(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python: {version_str}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏
            version_parts = version_str.split()[1].split(".")
            major, minor = int(version_parts[0]), int(version_parts[1])

            if major != 3 or minor not in {11, 12, 13}:
                self.logger.log("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python3.11‚Äì3.13!")
                self.logger.log(
                    "üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é –≤–µ—Ä—Å–∏—é Python –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É"
                )
                return False

            if minor == 13:
                self.logger.log("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –≤–µ—Ä—Å–∏—è Python3.13")
            else:
                self.logger.log(
                    "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è Python3."
                    + str(minor)
                    + ". –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ 3.13 –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
                )

            return True

        except Exception as e:
            self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏ Python: {e}")
            return False

    def setup_virtual_environment(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
        venv_path = self.venv_path
        venv_python, activate_script = self._venv_executables()

        if venv_path.exists():
            self.logger.log(f"üì¶ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {venv_path}")
            self.logger.log(f"üîß Python –≤ venv: {venv_python}")
            self._register_venv_python(venv_python)
            if activate_script.exists():
                self.logger.log(f"üìú –°–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activate_script}")
            else:
                self.logger.log(
                    "‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: "
                    f"{activate_script}"
                )
            return True

        self.logger.log("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        try:
            subprocess.run(
                self.python_executable + ["-m", "venv", str(venv_path)],
                check=True,
            )
            self.logger.log("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")

            self.logger.log(f"üîß Python –≤ venv: {venv_python}")
            self.logger.log(f"üìú –°–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activate_script}")
            self._register_venv_python(venv_python)

            return True

        except subprocess.CalledProcessError as e:
            self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
            return False

    def _ensure_qt_runtime_dependencies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã PySide6 –Ω–∞ Linux."""

        if self.platform != "Linux":
            return True

        required_packages = [
            "libegl1",
            "libgl1",
            "libxkbcommon0",
            "libxcb-cursor0",
            "libnss3",
            "libdbus-1-3",
        ]
        missing: list[str] = []

        for package in required_packages:
            try:
                result = subprocess.run(
                    ["dpkg-query", "-W", "-f=${Status}", package],
                    capture_output=True,
                    text=True,
                    check=False,
                )
            except FileNotFoundError:
                self.logger.log(
                    "‚ö†Ô∏è dpkg-query –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é: "
                    + ", ".join(required_packages)
                )
                return False

            status = result.stdout.strip()
            if "install ok installed" not in status:
                missing.append(package)

        if not missing:
            self.logger.log(
                "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Qt —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: "
                + ", ".join(required_packages)
            )
            return True

        apt_get = shutil.which("apt-get")
        if not apt_get:
            self.logger.log(
                "‚ùå apt-get –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç—ã –≤—Ä—É—á–Ω—É—é: "
                + ", ".join(missing)
            )
            return False

        install_cmd = [apt_get, "install", "-y", *sorted(set(missing))]
        update_cmd = [apt_get, "update"]

        if os.geteuid() != 0:
            sudo = shutil.which("sudo")
            if not sudo:
                self.logger.log(
                    "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤. "
                    "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å sudo –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: "
                    + ", ".join(missing)
                )
                return False
            update_cmd.insert(0, sudo)
            install_cmd.insert(0, sudo)

        try:
            self.logger.log(
                "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ Qt: " + ", ".join(missing)
            )
            subprocess.run(update_cmd, check=True)
            subprocess.run(install_cmd, check=True)
        except subprocess.CalledProcessError as exc:
            self.logger.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: {exc}")
            return False

        self.logger.log("‚úÖ Qt –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è PySide6 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True

    def install_dependencies(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        if not self._ensure_qt_runtime_dependencies():
            return False

        uv_executable = shutil.which("uv")
        if uv_executable:
            self.logger.log("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ uv sync‚Ä¶")
            try:
                subprocess.run(
                    [uv_executable, "sync"], cwd=self.project_root, check=True
                )
                self.logger.log("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ uv")
                self._show_installed_packages()
                return True
            except subprocess.CalledProcessError as exc:
                self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è uv sync: {exc}")

        requirements_file = self.project_root / "requirements.txt"

        if not requirements_file.exists():
            self.logger.log("‚ö†Ô∏è  –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return self._install_project_editable()

        self.logger.log("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ requirements.txt...")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º pip –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            cmd = self._pip_command(
                "install",
                "-r",
                str(requirements_file),
                "-c",
                str(self.project_root / "requirements-compatible.txt"),
            )
            subprocess.run(cmd, check=True)

            self.logger.log("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
            self._show_installed_packages()

            return True

        except subprocess.CalledProcessError as e:
            self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            if e.stderr:
                self.logger.log(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e.stderr}")
            self.logger.log(
                "‚ö†Ô∏è  –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ editable-—Ä–µ–∂–∏–º–µ –∏–∑ pyproject.toml"
            )
            return self._install_project_editable()

    def _install_project_editable(self) -> bool:
        """–ü—Ä–æ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –≤ editable-—Ä–µ–∂–∏–º–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞."""

        commands = [
            self._pip_command("install", "-e", "."),
            self._pip_command("install", "-e", ".[dev]"),
        ]

        success = True
        for cmd in commands:
            try:
                subprocess.run(cmd, cwd=self.project_root, check=True)
            except subprocess.CalledProcessError as exc:
                self.logger.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å {' '.join(cmd)}: {exc}")
                success = False
                break

        if success:
            self.logger.log("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ editable-—Ä–µ–∂–∏–º")
            self._show_installed_packages()
        else:
            self.logger.log(
                "‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–∞–∂–µ —á–µ—Ä–µ–∑ editable-—Ä–µ–∂–∏–º"
            )

        return success

    def _verify_dependencies_hashes(self, requirements_file: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ö–µ—à–∏ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"""
        self.logger.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ requirements.txt
            with open(requirements_file, "r", encoding="utf-8") as f:
                lines = f.readlines()

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ (–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫)
            dependencies = [
                line.split("#")[0].strip()
                for line in lines
                if line.strip() and not line.startswith("#")
            ]

            all_files_ok = True
            for dep in dependencies:
                if "@" in dep:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º URL-–∞–¥—Ä–µ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Git)
                    package_name = dep.split("@")[0]
                    url = dep.split("@")[1]
                    if not self._check_url_hash(package_name, url):
                        all_files_ok = False
                else:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                    package_name = dep
                    if not self._check_package_hash(package_name):
                        all_files_ok = False

            return all_files_ok
        except Exception as e:
            self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–µ—à–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            return False

    def _check_url_hash(self, package_name: str, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ö–µ—à –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ø–æ URL"""
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏ –≤—ã—á–∏—Å–ª—è–µ–º –µ–≥–æ —Ö–µ—à
            response = subprocess.run(
                ["curl", "-sSL", url],
                capture_output=True,
                text=True,
                check=True,
            )
            file_hash = hashlib.sha256(response.stdout.encode()).hexdigest()

            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ö–µ—à–µ–º –≤ requirements.txt
            expected_hash = url.split("#")[-1]
            if file_hash != expected_hash:
                self.logger.log(
                    f"‚ùå –•–µ—à –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –¥–ª—è {package_name} (URL): –æ–∂–∏–¥–∞–µ–º—ã–π {expected_hash}, –Ω–∞–π–¥–µ–Ω–Ω—ã–π {file_hash}"
                )
                return False
            else:
                self.logger.log(f"‚úÖ –•–µ—à –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è {package_name} (URL)")
                return True
        except Exception as e:
            self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–µ—à–∞ –¥–ª—è {package_name} (URL): {e}")
            return False

    def _check_package_hash(self, package_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ö–µ—à —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ
            result = subprocess.run(
                self._pip_command("show", package_name),
                capture_output=True,
                text=True,
                check=True,
            )
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ö–µ—à–µ–º (SHA256)
            for line in result.stdout.splitlines():
                if line.startswith("Location:"):
                    package_dir = line.split(":", 1)[1].strip()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ .whl
                    wheel_files = list(Path(package_dir).glob(f"*.whl"))
                    if wheel_files:
                        # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ .whl
                        file_hash = hashlib.sha256(
                            wheel_files[0].read_bytes()
                        ).hexdigest()
                        self.logger.log(
                            f"üì¶ –ù–∞–π–¥–µ–Ω –ø–∞–∫–µ—Ç {package_name}, —Ö–µ—à={file_hash}"
                        )
                        return True
            self.logger.log(f"‚ö†Ô∏è –ü–∞–∫–µ—Ç {package_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç .whl —Ñ–∞–π–ª–∞")
            return False
        except Exception as e:
            self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–µ—à–∞ –¥–ª—è {package_name}: {e}")
            return False

    def _show_installed_packages(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.logger.log("\nüìã –û—Å–Ω–æ–≤–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:")
        key_packages = [
            "PySide6",
            "PySide6-QtQuick3D",
            "numpy",
            "scipy",
            "PyOpenGL",
            "pytest",
        ]

        for package in key_packages:
            try:
                check_cmd = self._pip_command("show", package)
                check_result = subprocess.run(check_cmd, capture_output=True, text=True)
                if check_result.returncode == 0:
                    lines = check_result.stdout.split("\n")
                    version_line = next(
                        (line for line in lines if line.startswith("Version:")),
                        None,
                    )
                    if version_line:
                        version = version_line.split(": ")[1]
                        self.logger.log(f"  ‚úÖ {package}: {version}")
                else:
                    self.logger.log(f"  ‚ùå {package}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception:
                self.logger.log(f"  ‚ùì {package}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")

    def setup_paths(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø—É—Ç–∏"""
        self.logger.log("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞...")

        # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
        env_file = self.project_root / ".env"
        pythonpath = f"{self.project_root}/src;{self.project_root}/tests;{self.project_root}/scripts"

        env_content = f"""# PneumoStabSim Professional Environment (–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ)
PYTHONPATH={pythonpath}
PYTHONIOENCODING=utf-8
PYTHONDONTWRITEBYTECODE=1

# Qt Configuration
QSG_RHI_BACKEND=d3d11
QT_LOGGING_RULES=js.debug=true;qt.qml.debug=true
QSG_INFO=1

# Project Paths
PROJECT_ROOT={self.project_root}
SOURCE_DIR=src
TEST_DIR=tests
SCRIPT_DIR=scripts

# Development Mode
DEVELOPMENT_MODE=true
DEBUG_ENABLED=true

# Russian Localization
LANG=ru_RU.UTF-8
COPILOT_LANGUAGE=ru
"""

        try:
            with open(env_file, "w", encoding="utf-8") as f:
                f.write(env_content)
            self.logger.log(f"‚úÖ –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω: {env_file}")
        except Exception as e:
            self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è .env: {e}")

        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        directories = ["logs", "reports", "temp", ".cache"]
        for dir_name in directories:
            dir_path = self.project_root / dir_name
            if not dir_path.exists():
                dir_path.mkdir(exist_ok=True)
                self.logger.log(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")

        return True

    def test_installation(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        self.logger.log("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–°–¢–ê–ù–û–í–ö–ò")
        self.logger.log("=" * 40)

        # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        test_imports = [
            ("PySide6.QtCore", "Qt Core"),
            ("PySide6.QtWidgets", "Qt Widgets"),
            ("PySide6.QtQuick3D", "Qt Quick 3D"),
            ("numpy", "NumPy"),
            ("scipy", "SciPy"),
            ("matplotlib", "Matplotlib"),
        ]

        self.logger.log("üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π:")
        import_success = 0
        for module_name, display_name in test_imports:
            try:
                subprocess.run(
                    self.python_executable + ["-c", f"import {module_name}"],
                    check=True,
                    capture_output=True,
                )
                self.logger.log(f"  ‚úÖ {display_name}")
                import_success += 1
            except subprocess.CalledProcessError:
                self.logger.log(f"  ‚ùå {display_name}")

        # –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger.log("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        self.logger.log(f"  üì¶ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π: {import_success}/{len(test_imports)}")

        if import_success >= len(test_imports) * 0.8:
            self.logger.log("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ.")
            return True
        else:
            self.logger.log(
                "‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ."
            )
            return False

    def print_usage_info(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"""
        self.logger.log("\nüéØ –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ")
        self.logger.log("=" * 50)

        self.logger.log("üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
        executable = " ".join(self.python_executable)
        self.logger.log(f"  {executable} app.py        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫")
        self.logger.log(f"  {executable} app.py --no-block     # –§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º")
        self.logger.log(f"  {executable} app.py --test-mode    # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
        self.logger.log(f"  {executable} app.py --debug        # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏")

        self.logger.log("\nüß™ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        self.logger.log(f"  {executable} -m pytest tests/ -v  # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤")

        if self.platform == "Windows":
            venv_activate = self.project_root / "venv" / "Scripts" / "activate.ps1"
            self.logger.log("\nüì¶ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
            self.logger.log(f"  {venv_activate}")

        self.logger.log("\nüìö –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ—Ñ–∏–ª—è—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: docs/environments.md")

    def download_qt_sdk(self):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Qt SDK"""
        if not self.qt_sdk_version:
            self.logger.log("‚ûï Qt SDK –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏.")
            return True

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        self.logger.log("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ Qt SDK...")
        try:
            if self.platform == "Windows":
                arch = "win32" if platform.architecture()[0] == "32bit" else "win64"
                url = f"https://download.qt.io/official_releases/qt/6.2/6.2.4/qt-installer-windows-{arch}.exe"
                installer = "qt-installer.exe"
            elif self.platform == "Linux":
                url = "https://download.qt.io/official_releases/qt/6.2/6.2.4/qt-unified-linux-x64-online.run"
                installer = "qt-installer.run"
            else:
                self.logger.log(
                    "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Qt SDK –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Windows –∏ Linux"
                )
                return False

            # –°–∫–∞—á–∏–≤–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫
            response = subprocess.run(
                ["curl", "-L", "-o", installer, url],
                check=True,
                capture_output=True,
                text=True,
            )
            if response.returncode != 0:
                self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Qt SDK: {response.stderr}")
                return False

            # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫
            self.logger.log(f"üì• –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ Qt SDK: {installer}")
            if self.platform == "Windows":
                response = subprocess.run(
                    [
                        "cmd",
                        "/c",
                        installer,
                        "--silent",
                        "--skip-components",
                        "qt.5.15.2.ansic",
                        "--include-subdir",
                    ],
                    check=True,
                    capture_output=True,
                    text=True,
                )
            else:
                response = subprocess.run(
                    [
                        installer,
                        "--silent",
                        "--skip-components",
                        "qt.5.15.2.ansic",
                        "--include-subdir",
                    ],
                    check=True,
                    capture_output=True,
                    text=True,
                )

            if response.returncode != 0:
                self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Qt SDK: {response.stderr}")
                return False

            self.logger.log("‚úÖ Qt SDK —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

            return True
        except Exception as e:
            self.logger.log(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Qt SDK: {e}")
            return False
        finally:
            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if Path(installer).exists():
                self.logger.log(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞: {installer}")
                try:
                    if platform.system() == "Windows":
                        subprocess.run(
                            ["cmd", "/c", "del", "/F", "/Q", installer], check=True
                        )
                    else:
                        subprocess.run(["rm", "-f", installer], check=True)
                except Exception as e:
                    self.logger.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞: {e}")

    def run_setup(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            # –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
            if not self.check_python_version():
                return False

            # –≠—Ç–∞–ø 2: –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            if not self.setup_virtual_environment():
                self.logger.log("‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

            # –≠—Ç–∞–ø 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            if not self.install_dependencies():
                return False

            # –≠—Ç–∞–ø 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
            if not self.setup_paths():
                return False

            # –≠—Ç–∞–ø 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            test_success = self.test_installation()

            # –≠—Ç–∞–ø 6: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            self.print_usage_info()

            self.logger.log("\nüéâ –ù–ê–°–¢–†–û–ô–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
            self.logger.log("=" * 50)

            if test_success:
                self.logger.log("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                self.logger.log("üöÄ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
            else:
                self.logger.log("‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
                self.logger.log("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤—ã—à–µ")

            return test_success

        except KeyboardInterrupt:
            self.logger.log("\n‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        except Exception as e:
            self.logger.log(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            import traceback

            traceback.print_exc()
            return False


def parse_arguments():
    parser = argparse.ArgumentParser(
        description=textwrap.dedent(
            """\
            PneumoStabSim-Professional Environment Setup Script
            –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

            –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/—Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            """
        ),
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    parser.add_argument(
        "--install-qt",
        action="store_true",
        help="–°–∫–∞—á–∞—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é Qt SDK",
    )
    parser.add_argument(
        "--qt-version",
        type=str,
        default=None,
        help="–í–µ—Ä—Å–∏—è Qt SDK –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6.2.4).",
    )
    parser.add_argument(
        "--no-pip",
        action="store_true",
        help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–∞–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é pip",
    )
    parser.add_argument(
        "--verbose",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏",
    )
    parser.add_argument(
        "--silent",
        action="store_true",
        help="–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞",
    )

    return parser.parse_args()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    args = parse_arguments()

    blocker_message = _runtime_version_blocker(sys.version_info[:2])
    if blocker_message is not None:
        if not args.silent:
            print("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è Python")
            print(blocker_message)
            print(
                "PySide6 6.10.0 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ Python 3.11‚Äì3.13. "
                "–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º. SETUP_GUIDE.md."
            )
        return 1

    with suppress_stdout(args.silent):
        if not args.silent:
            print("üîß PneumoStabSim-Professional Environment Setup")
            print("–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
            print()

        setup = EnvironmentSetup(qt_sdk_version=args.qt_version)
        success = setup.run_setup()

    return 0 if success else 1


@contextmanager
def suppress_stdout(enabled: bool):
    """–ü–æ–¥–∞–≤–ª—è–µ—Ç –≤—ã–≤–æ–¥ stdout, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º."""

    if not enabled:
        yield
        return

    original_stdout = sys.stdout
    try:
        with open(os.devnull, "w", encoding="utf-8") as devnull:
            sys.stdout = devnull
            yield
    finally:
        sys.stdout = original_stdout


if __name__ == "__main__":
    sys.exit(main())
