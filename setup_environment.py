#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PneumoStabSim-Professional Environment Setup Script
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
"""

import sys
import subprocess
from pathlib import Path
import platform


class EnvironmentSetup:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""

    def __init__(self):
        self.project_root = Path(__file__).parent
        self.python_executable = self._find_python()
        self.platform = platform.system()

        print("üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–ö–†–£–ñ–ï–ù–ò–Ø PNEUMOSTABSIM-PROFESSIONAL")
        print("=" * 60)
        print(f"üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞: {self.project_root}")
        print(f"üêç Python executable: {self.python_executable}")
        print(f"üíª –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {self.platform}")
        print("=" * 60)

    def _find_python(self):
        """–ù–∞—Ö–æ–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π Python –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä"""
        python_commands = ["py", "python3", "python"]

        for cmd in python_commands:
            try:
                result = subprocess.run(
                    [cmd, "--version"], capture_output=True, text=True
                )
                if result.returncode == 0:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω Python: {cmd} ({result.stdout.strip()})")
                    return cmd
            except FileNotFoundError:
                continue

        print("‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)

    def check_python_version(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
        try:
            result = subprocess.run(
                [self.python_executable, "--version"], capture_output=True, text=True
            )
            version_str = result.stdout.strip()
            print(f"üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python: {version_str}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏
            version_parts = version_str.split()[1].split(".")
            major, minor = int(version_parts[0]), int(version_parts[1])

            if major < 3 or (major == 3 and minor < 10):
                print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python3.10-3.12!")
                return False
            if major == 3 and minor >= 13:
                print("‚ö†Ô∏è Python3.13+ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
                print("üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Python3.10-3.12 –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
                return False

            if major == 3 and minor == 12:
                print("‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è Python –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞")
            else:
                print("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è Python")

            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏ Python: {e}")
            return False

    def setup_virtual_environment(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
        venv_path = self.project_root / "venv"

        if venv_path.exists():
            print(f"üì¶ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {venv_path}")
            return True

        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        try:
            subprocess.run(
                [self.python_executable, "-m", "venv", str(venv_path)], check=True
            )
            print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")

            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ Python –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
            if self.platform == "Windows":
                venv_python = venv_path / "Scripts" / "python.exe"
                activate_script = venv_path / "Scripts" / "activate.ps1"
            else:
                venv_python = venv_path / "bin" / "python"
                activate_script = venv_path / "bin" / "activate"

            print(f"üîß Python –≤ venv: {venv_python}")
            print(f"üìú –°–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activate_script}")

            return True

        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
            return False

    def install_dependencies(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        requirements_file = self.project_root / "requirements.txt"

        if not requirements_file.exists():
            print("‚ö†Ô∏è  –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ requirements.txt...")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º pip –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            cmd = [
                self.python_executable,
                "-m",
                "pip",
                "install",
                "-r",
                str(requirements_file),
            ]
            result = subprocess.run(cmd, check=True, capture_output=True, text=True)

            print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
            print("\nüìã –û—Å–Ω–æ–≤–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:")
            key_packages = ["PySide6", "numpy", "scipy", "matplotlib", "pytest"]

            for package in key_packages:
                try:
                    check_cmd = [self.python_executable, "-m", "pip", "show", package]
                    check_result = subprocess.run(
                        check_cmd, capture_output=True, text=True
                    )
                    if check_result.returncode == 0:
                        lines = check_result.stdout.split("\n")
                        version_line = next(
                            (line for line in lines if line.startswith("Version:")),
                            None,
                        )
                        if version_line:
                            version = version_line.split(": ")[1]
                            print(f"  ‚úÖ {package}: {version}")
                    else:
                        print(f"  ‚ùå {package}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except:
                    print(f"  ‚ùì {package}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")

            return True

        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            if e.stderr:
                print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e.stderr}")
            return False

    def setup_paths(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø—É—Ç–∏"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞...")

        # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
        env_file = self.project_root / ".env"
        pythonpath = f"{self.project_root}/src;{self.project_root}/tests;{self.project_root}/scripts"

        env_content = f"""# PneumoStabSim Professional Environment (–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ)
PYTHONPATH={pythonpath}
PYTHONIOENCODING=utf-8
PYTHONDONTWRITEBYTECODE=1

# Qt Configuration
QSG_RHI_BACKEND=d3d11
QT_LOGGING_RULES=js.debug=true;qt.qml.debug=true
QSG_INFO=1

# Project Paths
PROJECT_ROOT={self.project_root}
SOURCE_DIR=src
TEST_DIR=tests
SCRIPT_DIR=scripts

# Development Mode
DEVELOPMENT_MODE=true
DEBUG_ENABLED=true

# Russian Localization
LANG=ru_RU.UTF-8
COPILOT_LANGUAGE=ru
"""

        try:
            with open(env_file, "w", encoding="utf-8") as f:
                f.write(env_content)
            print(f"‚úÖ –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω: {env_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è .env: {e}")

        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        directories = ["logs", "reports", "temp", ".cache"]
        for dir_name in directories:
            dir_path = self.project_root / dir_name
            if not dir_path.exists():
                dir_path.mkdir(exist_ok=True)
                print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")

        return True

    def test_installation(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–°–¢–ê–ù–û–í–ö–ò")
        print("=" * 40)

        # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        test_imports = [
            ("PySide6.QtCore", "Qt Core"),
            ("PySide6.QtWidgets", "Qt Widgets"),
            ("PySide6.QtQuick3D", "Qt Quick 3D"),
            ("numpy", "NumPy"),
            ("scipy", "SciPy"),
            ("matplotlib", "Matplotlib"),
        ]

        print("üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π:")
        import_success = 0
        for module_name, display_name in test_imports:
            try:
                subprocess.run(
                    [self.python_executable, "-c", f"import {module_name}"],
                    check=True,
                    capture_output=True,
                )
                print(f"  ‚úÖ {display_name}")
                import_success += 1
            except subprocess.CalledProcessError:
                print(f"  ‚ùå {display_name}")

        # –¢–µ—Å—Ç 2: –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤:")

        # –¢–µ—Å—Ç qml_diagnostic.py
        qml_diag = self.project_root / "qml_diagnostic.py"
        if qml_diag.exists():
            try:
                result = subprocess.run(
                    [self.python_executable, str(qml_diag)],
                    capture_output=True,
                    text=True,
                    timeout=10,
                )
                if result.returncode == 0:
                    print("  ‚úÖ QML –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
                else:
                    print("  ‚ö†Ô∏è  QML –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)")
            except Exception as e:
                print(f"  ‚ùå QML –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {e}")

        # –¢–µ—Å—Ç 3: –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        app_file = self.project_root / "app.py"
        if app_file.exists():
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
                result = subprocess.run(
                    [self.python_executable, str(app_file), "--test-mode"],
                    capture_output=True,
                    text=True,
                    timeout=30,
                )
                if result.returncode == 0:
                    print("  ‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print("  ‚ö†Ô∏è  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
                    if result.stderr:
                        print(f"      –î–µ—Ç–∞–ª–∏: {result.stderr[:200]}...")
            except subprocess.TimeoutExpired:
                print(
                    "  ‚ö†Ô∏è  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å (timeout - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞)"
                )
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")

        # –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"  üì¶ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π: {import_success}/{len(test_imports)}")

        if import_success >= len(test_imports) * 0.8:
            print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ.")
            return True
        else:
            print("‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
            return False

    def print_usage_info(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"""
        print("\nüéØ –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ")
        print("=" * 50)

        print("üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
        print(f"  {self.python_executable} app.py                # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫")
        print(f"  {self.python_executable} app.py --no-block     # –§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º")
        print(f"  {self.python_executable} app.py --test-mode    # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
        print(f"  {self.python_executable} app.py --debug        # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏")

        print("\nüß™ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"  {self.python_executable} -m pytest tests/ -v  # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤")
        print(f"  {self.python_executable} quick_test.py         # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç")
        print(f"  {self.python_executable} qml_diagnostic.py     # QML –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")

        print("\nüîß VS Code:")
        print("  1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ VS Code")
        print(
            "  2. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä Python (Ctrl+Shift+P > Python: Select Interpreter)"
        )
        print("  3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ F5 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–ª–∏ Ctrl+F5 –¥–ª—è –∑–∞–ø—É—Å–∫–∞")

        print("\nüí° PowerShell (–≤ VS Code):")
        print("  –ü—Ä–æ—Ñ–∏–ª—å PowerShell –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è —Å –∞–ª–∏–∞—Å–∞–º–∏:")
        print("  app, debug, test, pytest, health, info")

        if self.platform == "Windows":
            venv_activate = self.project_root / "venv" / "Scripts" / "activate.ps1"
            print("\nüì¶ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
            print(f"  {venv_activate}")

        print("\nüéØ –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û main_optimized.qml")
        print("  ‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
        print("  ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∏–Ω–µ–º–∞—Ç–∏–∫–∞ v4.2")

    def run_setup(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            # –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
            if not self.check_python_version():
                return False

            # –≠—Ç–∞–ø 2: –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            if not self.setup_virtual_environment():
                print("‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

            # –≠—Ç–∞–ø 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            if not self.install_dependencies():
                return False

            # –≠—Ç–∞–ø 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
            if not self.setup_paths():
                return False

            # –≠—Ç–∞–ø 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            test_success = self.test_installation()

            # –≠—Ç–∞–ø 6: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            self.print_usage_info()

            print("\nüéâ –ù–ê–°–¢–†–û–ô–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
            print("=" * 50)

            if test_success:
                print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                print("üöÄ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
            else:
                print("‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
                print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤—ã—à–µ")

            return test_success

        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            import traceback

            traceback.print_exc()
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß PneumoStabSim-Professional Environment Setup")
    print("–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    print()

    setup = EnvironmentSetup()
    success = setup.run_setup()

    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())
