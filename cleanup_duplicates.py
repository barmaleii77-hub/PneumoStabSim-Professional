#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Cleanup Script - Remove Duplicate Defaults
–°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–µ—Ñ–æ–ª—Ç–æ–≤ –∏–∑ –∫–æ–¥–∞

–¶–ï–õ–¨: –û—Å—Ç–∞–≤–∏—Ç—å –¢–û–õ–¨–ö–û config/app_settings.json –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫

–£–î–ê–õ–Ø–ï–¢–°–Ø:
- config/graphics_defaults.py (438 —Å—Ç—Ä–æ–∫ —Ö–∞—Ä–¥–∫–æ–¥–∞)
- src/app/config_defaults.py (294 —Å—Ç—Ä–æ–∫–∏ —Ö–∞—Ä–¥–∫–æ–¥–∞)
- –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏

–ü–†–û–í–ï–†–Ø–ï–¢–°–Ø:
- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ —É–¥–∞–ª—è–µ–º—ã—Ö –º–æ–¥—É–ª–µ–π
- –ù–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ config/app_settings.json
- –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
"""

import sys
import os
from pathlib import Path
import json
import subprocess
from typing import List, Dict, Set

class DuplicatesCleanup:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–µ—Ñ–æ–ª—Ç–æ–≤"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.errors = []
        self.warnings = []
        self.success_count = 0
        
        # –§–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        self.files_to_delete = [
            "config/graphics_defaults.py",
            "src/app/config_defaults.py",
        ]
        
        # –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã)
        self.settings_file = self.project_root / "config/app_settings.json"
    
    def log_success(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—Ö–∞"""
        print(f"‚úÖ {message}")
        self.success_count += 1
    
    def log_error(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        print(f"‚ùå {message}")
        self.errors.append(message)
    
    def log_warning(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        print(f"‚ö†Ô∏è  {message}")
        self.warnings.append(message)
    
    def log_info(self, message: str):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        print(f"‚ÑπÔ∏è  {message}")
    
    def check_git_status(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –Ω–µ—Ç uncommitted changes"""
        try:
            result = subprocess.run(
                ["git", "status", "--porcelain"],
                capture_output=True,
                text=True,
                cwd=self.project_root
            )
            
            if result.stdout.strip():
                self.log_warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Git")
                self.log_info("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è commit –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π")
                
                response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
                return response.lower() == 'y'
            
            self.log_success("Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —á–∏—Å—Ç")
            return True
            
        except FileNotFoundError:
            self.log_warning("Git –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return True
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Git: {e}")
            return False
    
    def search_imports(self, file_path: str) -> List[str]:
        """–ù–∞–π—Ç–∏ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É–¥–∞–ª—è–µ–º–æ–≥–æ –º–æ–¥—É–ª—è"""
        module_name = file_path.replace("/", ".").replace("\\", ".").replace(".py", "")
        
        try:
            result = subprocess.run(
                ["git", "grep", "-n", f"import {module_name}"],
                capture_output=True,
                text=True,
                cwd=self.project_root
            )
            
            results = []
            if result.stdout:
                for line in result.stdout.split('\n'):
                    if line.strip():
                        results.append(line)
            
            return results
            
        except Exception:
            return []
    
    def check_imports(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –Ω–µ—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ —É–¥–∞–ª—è–µ–º—ã—Ö –º–æ–¥—É–ª–µ–π"""
        self.log_info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
        
        found_imports = False
        
        for file_path in self.files_to_delete:
            imports = self.search_imports(file_path)
            
            if imports:
                found_imports = True
                self.log_error(f"–ù–∞–π–¥–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã {file_path}:")
                for imp in imports:
                    print(f"    {imp}")
            else:
                self.log_success(f"–ò–º–ø–æ—Ä—Ç—ã {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        if found_imports:
            self.log_error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π!")
            return False
        
        return True
    
    def validate_settings_file(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å config/app_settings.json"""
        self.log_info("\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ config/app_settings.json...")
        
        if not self.settings_file.exists():
            self.log_error(f"–§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.settings_file}")
            return False
        
        try:
            with open(self.settings_file, 'r', encoding='utf-8') as f:
                settings = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            required_keys = ["current", "defaults_snapshot", "metadata"]
            missing_keys = [key for key in required_keys if key not in settings]
            
            if missing_keys:
                self.log_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: {missing_keys}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            required_categories = ["graphics", "geometry", "pneumatic", "modes"]
            current = settings.get("current", {})
            
            for category in required_categories:
                if category not in current:
                    self.log_warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –≤ current")
            
            self.log_success("config/app_settings.json –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_params = sum(self._count_params(current[cat]) for cat in current)
            self.log_info(f"–í—Å–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_params}")
            
            return True
            
        except json.JSONDecodeError as e:
            self.log_error(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {e}")
            return False
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False
    
    def _count_params(self, obj) -> int:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        if not isinstance(obj, dict):
            return 1
        
        count = 0
        for value in obj.values():
            if isinstance(value, dict):
                count += self._count_params(value)
            else:
                count += 1
        
        return count
    
    def create_backup(self) -> bool:
        """–°–æ–∑–¥–∞—Ç—å backup —É–¥–∞–ª—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        self.log_info("\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ backup...")
        
        backup_dir = self.project_root / "backup" / "defaults_cleanup"
        backup_dir.mkdir(parents=True, exist_ok=True)
        
        try:
            import shutil
            from datetime import datetime
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            for file_path in self.files_to_delete:
                src = self.project_root / file_path
                
                if src.exists():
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
                    rel_path = Path(file_path)
                    dst = backup_dir / timestamp / rel_path
                    dst.parent.mkdir(parents=True, exist_ok=True)
                    
                    shutil.copy2(src, dst)
                    self.log_success(f"Backup —Å–æ–∑–¥–∞–Ω: {dst}")
            
            # –°–æ–∑–¥–∞–µ–º README –≤ backup
            readme = backup_dir / timestamp / "README.md"
            with open(readme, 'w', encoding='utf-8') as f:
                f.write(f"""# Backup –¥–µ—Ñ–æ–ª—Ç–æ–≤ - {timestamp}

## –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:

""")
                for file_path in self.files_to_delete:
                    f.write(f"- {file_path}\n")
                
                f.write(f"""
## –ü—Ä–∏—á–∏–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è:

–î—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã - `config/app_settings.json`

## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ:

```bash
# –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –æ–±—Ä–∞—Ç–Ω–æ
cp -r backup/defaults_cleanup/{timestamp}/* .
```

""")
            
            self.log_success(f"Backup —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {backup_dir / timestamp}")
            return True
            
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup: {e}")
            return False
    
    def delete_files(self) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏"""
        self.log_info("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
        
        deleted_count = 0
        
        for file_path in self.files_to_delete:
            full_path = self.project_root / file_path
            
            if full_path.exists():
                try:
                    full_path.unlink()
                    self.log_success(f"–£–¥–∞–ª–µ–Ω: {file_path}")
                    deleted_count += 1
                except Exception as e:
                    self.log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")
            else:
                self.log_info(f"–£–∂–µ —É–¥–∞–ª–µ–Ω: {file_path}")
        
        if deleted_count > 0:
            self.log_success(f"–£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}")
        
        return True
    
    def test_application(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è"""
        self.log_info("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å
            sys.path.insert(0, str(self.project_root))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ SettingsManager —Ä–∞–±–æ—Ç–∞–µ—Ç
            from src.common.settings_manager import SettingsManager
            
            settings = SettingsManager(self.settings_file)
            
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            graphics_settings = settings.get("graphics", {})
            
            if graphics_settings:
                self.log_success("SettingsManager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                self.log_warning("Graphics –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Å—Ç—ã, –Ω–æ SettingsManager —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
            
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def run(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        print("=" * 60)
        print("üßπ CLEANUP DUPLICATE DEFAULTS")
        print("=" * 60)
        print()
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Git
        if not self.check_git_status():
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
        if not self.check_imports():
            return False
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ settings —Ñ–∞–π–ª–∞
        if not self.validate_settings_file():
            return False
        
        # 4. –°–æ–∑–¥–∞–Ω–∏–µ backup
        if not self.create_backup():
            return False
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n" + "=" * 60)
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï!")
        print("=" * 60)
        print(f"\n–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã:")
        for file_path in self.files_to_delete:
            print(f"  - {file_path}")
        print(f"\nBackup —Å–æ–∑–¥–∞–Ω –≤ backup/defaults_cleanup/")
        
        response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ? (y/N): ")
        if response.lower() != 'y':
            print("\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        
        # 5. –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        if not self.delete_files():
            return False
        
        # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if not self.test_application():
            self.log_warning("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ, –Ω–æ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
            self.log_info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é: python app.py")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ß–ò–°–¢–ö–ò")
        print("=" * 60)
        
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {self.success_count}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(self.errors)}")
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(self.warnings)}")
        
        if self.errors:
            print("\n‚ùå –û–®–ò–ë–ö–ò:")
            for error in self.errors:
                print(f"  ‚Ä¢ {error}")
        
        if self.warnings:
            print("\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in self.warnings:
                print(f"  ‚Ä¢ {warning}")
        
        print("\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python app.py")
        print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ –ø–∞–Ω–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è")
        print("4. Commit –∏–∑–º–µ–Ω–µ–Ω–∏–π: git commit -am 'chore: remove duplicate defaults'")
        
        print("\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return len(self.errors) == 0


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        cleanup = DuplicatesCleanup()
        success = cleanup.run()
        sys.exit(0 if success else 1)
    
    except KeyboardInterrupt:
        print("\n\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    
    except Exception as e:
        print(f"\nüíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
