"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ main.qml –Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–∞–Ω–µ–ª—å—é –≥—Ä–∞—Ñ–∏–∫–∏
Quick main.qml + Graphics Panel Integration Check
"""
import sys
from pathlib import Path


def check_main_qml():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ main.qml"""

    print("üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ main.qml...")

    # –ü—É—Ç—å –∫ main.qml
    main_qml_path = Path("assets/qml/main.qml")

    if not main_qml_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {main_qml_path}")
        return False

    try:
        content = main_qml_path.read_text(encoding="utf-8")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False

    print(f"üìÅ –§–∞–π–ª: {main_qml_path}")
    print(f"üìè –†–∞–∑–º–µ—Ä: {round(len(content) / 1024, 1)} KB")
    print(f"üìÑ –°—Ç—Ä–æ–∫: {len(content.splitlines())}")
    print()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    integration_functions = {
        "applyLightingUpdates": "üí° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è",
        "applyMaterialUpdates": "üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
        "applyEnvironmentUpdates": "üåç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è",
        "applyEffectsUpdates": "‚ú® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤",
        "applyQualityUpdates": "‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞",
        "applyCameraUpdates": "üì∑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã",
        "applyBatchedUpdates": "üöÄ –ü–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
    }

    print("üîß –§–£–ù–ö–¶–ò–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
    found_functions = 0

    for func, description in integration_functions.items():
        if f"function {func}" in content:
            print(f"   ‚úÖ {func}: {description}")
            found_functions += 1
        else:
            print(f"   ‚ùå {func}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ: {found_functions}/{len(integration_functions)} —Ñ—É–Ω–∫—Ü–∏–π")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
    print("\nüéÆ –ì–†–ê–§–ò–ß–ï–°–ö–ò–ï –°–í–û–ô–°–¢–í–ê:")

    graphics_properties = {
        "iblEnabled": "üåü IBL –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "glassIOR": "üîç –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è",
        "bloomEnabled": "‚ú® Bloom —ç—Ñ—Ñ–µ–∫—Ç",
        "ssaoEnabled": "üåë SSAO –∑–∞—Ç–µ–Ω–µ–Ω–∏–µ",
        "shadowSoftness": "üå´Ô∏è –ú—è–≥–∫–æ—Å—Ç—å —Ç–µ–Ω–µ–π",
        "tonemapEnabled": "üé® –¢–æ–Ω–µ–º–∞–ø–ø–∏–Ω–≥",
        "vignetteEnabled": "üñºÔ∏è –í–∏–Ω—å–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "depthOfFieldEnabled": "üîç –ì–ª—É–±–∏–Ω–∞ —Ä–µ–∑–∫–æ—Å—Ç–∏",
    }

    found_properties = 0

    for prop, description in graphics_properties.items():
        if "property" in content and prop in content:
            print(f"   ‚úÖ {prop}: {description}")
            found_properties += 1
        else:
            print(f"   ‚ùå {prop}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ: {found_properties}/{len(graphics_properties)} —Å–≤–æ–π—Å—Ç–≤")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã 3D
    print("\nüì¶ 3D –ò–ú–ü–û–†–¢–´:")

    imports_3d = ["QtQuick3D", "QtQuick3D.Helpers"]

    found_imports = 0
    for imp in imports_3d:
        if f"import {imp}" in content:
            print(f"   ‚úÖ {imp}")
            found_imports += 1
        else:
            print(f"   ‚ùå {imp}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã 3D
    print("\nüé≠ 3D –ö–û–ú–ü–û–ù–ï–ù–¢–´:")

    components_3d = {
        "View3D": "–ì–ª–∞–≤–Ω–æ–µ 3D –æ–∫–Ω–æ",
        "SceneEnvironment": "–û–∫—Ä—É–∂–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã",
        "DirectionalLight": "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–≤–µ—Ç",
        "PointLight": "–¢–æ—á–µ—á–Ω—ã–π —Å–≤–µ—Ç",
        "PrincipledMaterial": "PBR –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
        "Model": "3D –º–æ–¥–µ–ª–∏",
    }

    found_components = 0
    for comp, desc in components_3d.items():
        if comp in content:
            print(f"   ‚úÖ {comp}: {desc}")
            found_components += 1
        else:
            print(f"   ‚ùå {comp}: {desc}")

    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ: {found_components}/{len(components_3d)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")

    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    total_found = found_functions + found_properties + found_imports + found_components
    total_expected = (
        len(integration_functions)
        + len(graphics_properties)
        + len(imports_3d)
        + len(components_3d)
    )

    score_percent = round((total_found / total_expected) * 100)

    print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {total_found}/{total_expected} ({score_percent}%)")

    if score_percent >= 90:
        print("üü¢ –û–¢–õ–ò–ß–ù–û: main.qml –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–∞–Ω–µ–ª—å—é –≥—Ä–∞—Ñ–∏–∫–∏")
        status = "excellent"
    elif score_percent >= 70:
        print("üü° –•–û–†–û–®–û: main.qml –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≥–æ—Ç–æ–≤, –≤–æ–∑–º–æ–∂–Ω—ã –º–µ–ª–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        status = "good"
    elif score_percent >= 50:
        print("üü† –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û: main.qml —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤, —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        status = "partial"
    else:
        print("üî¥ –ü–õ–û–•–û: main.qml –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–∞–Ω–µ–ª—å—é –≥—Ä–∞—Ñ–∏–∫–∏")
        status = "poor"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    print("\nüîé –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò:")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º IOR (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è)
    if "indexOfRefraction" in content:
        print("   ‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö")
    else:
        print("   ‚ö†Ô∏è –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º IBL
    if "lightProbe" in content and "IblProbeLoader" in content:
        print("   ‚úÖ IBL —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
    elif "lightProbe" in content:
        print("   üü° IBL —á–∞—Å—Ç–∏—á–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
    else:
        print("   ‚ùå IBL –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    if "animationCache" in content and "geometryCache" in content:
        print("   ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    else:
        print("   ‚ö†Ô∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

    return status in ["excellent", "good"]


def check_panel_graphics():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–Ω–µ–ª–∏ –≥—Ä–∞—Ñ–∏–∫–∏"""

    print("\nüé® –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–Ω–µ–ª–∏ –≥—Ä–∞—Ñ–∏–∫–∏...")

    panel_path = Path("src/ui/panels/panel_graphics.py")

    if not panel_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {panel_path}")
        return False

    try:
        content = panel_path.read_text(encoding="utf-8")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False

    print(f"üìÅ –§–∞–π–ª: {panel_path}")
    print(f"üìè –†–∞–∑–º–µ—Ä: {round(len(content) / 1024, 1)} KB")
    print(f"üìÑ –°—Ç—Ä–æ–∫: {len(content.splitlines())}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
    print("\nüì° –°–ò–ì–ù–ê–õ–´ –ü–ê–ù–ï–õ–ò:")

    signals = {
        "lighting_changed": "üí° –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è",
        "material_changed": "üé® –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
        "environment_changed": "üåç –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è",
        "effects_changed": "‚ú® –ò–∑–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤",
        "quality_changed": "‚öôÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞",
        "camera_changed": "üì∑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã",
    }

    found_signals = 0
    for signal, desc in signals.items():
        if f"{signal} = Signal" in content:
            print(f"   ‚úÖ {signal}: {desc}")
            found_signals += 1
        else:
            print(f"   ‚ùå {signal}: {desc}")

    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {found_signals}/{len(signals)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã emit
    print("\nüì§ –ú–ï–¢–û–î–´ –û–¢–ü–†–ê–í–ö–ò:")

    emit_methods = {
        "emit_lighting_update": "üí° –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è",
        "emit_material_update": "üé® –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
        "emit_environment_update": "üåç –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è",
        "emit_effects_update": "‚ú® –û—Ç–ø—Ä–∞–≤–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤",
    }

    found_emits = 0
    for method, desc in emit_methods.items():
        if f"def {method}" in content:
            print(f"   ‚úÖ {method}: {desc}")
            found_emits += 1
        else:
            print(f"   ‚ùå {method}: {desc}")

    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–¥–æ–≤: {found_emits}/{len(emit_methods)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    print("\nüîß –ö–õ–Æ–ß–ï–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:")

    key_params = [
        "glass_ior",  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–µ–ª–æ–º–ª–µ–Ω–∏—è
        "ibl_enabled",  # IBL –ø–æ–¥–¥–µ—Ä–∂–∫–∞
        "bloom_threshold",  # –ü–æ—Ä–æ–≥ Bloom
        "ssao_radius",  # –†–∞–¥–∏—É—Å SSAO
        "shadow_softness",  # –ú—è–≥–∫–æ—Å—Ç—å —Ç–µ–Ω–µ–π
        "tonemap_enabled",  # –¢–æ–Ω–µ–º–∞–ø–ø–∏–Ω–≥
        "vignette_enabled",  # –í–∏–Ω—å–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    ]

    found_params = 0
    for param in key_params:
        if f"'{param}'" in content:
            print(f"   ‚úÖ {param}")
            found_params += 1
        else:
            print(f"   ‚ùå {param}")

    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {found_params}/{len(key_params)}")

    total_panel = found_signals + found_emits + found_params
    total_panel_expected = len(signals) + len(emit_methods) + len(key_params)

    panel_score = round((total_panel / total_panel_expected) * 100)
    print(
        f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ê–ù–ï–õ–ò: {total_panel}/{total_panel_expected} ({panel_score}%)"
    )

    return panel_score >= 70


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""

    print("=" * 60)
    print("üöÄ –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò MAIN.QML + –ü–ê–ù–ï–õ–¨ –ì–†–ê–§–ò–ö–ò")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º main.qml
    qml_ok = check_main_qml()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–Ω–µ–ª—å –≥—Ä–∞—Ñ–∏–∫–∏
    panel_ok = check_panel_graphics()

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print("üéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("=" * 60)

    if qml_ok and panel_ok:
        print("üü¢ –û–¢–õ–ò–ß–ù–û: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!")
        print("‚úÖ main.qml —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        print("‚úÖ –ü–∞–Ω–µ–ª—å –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
        print("\nüß™ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("   python test_graphics_integration.py")
        print("   python app.py")
        result = 0
    elif qml_ok:
        print("üü° –ß–ê–°–¢–ò–ß–ù–û: main.qml –≥–æ—Ç–æ–≤, –Ω–æ –ø–∞–Ω–µ–ª—å –≥—Ä–∞—Ñ–∏–∫–∏ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        print("‚úÖ main.qml –≤ –ø–æ—Ä—è–¥–∫–µ")
        print("‚ö†Ô∏è –ü–∞–Ω–µ–ª—å –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–µ–ø–æ–ª–Ω–∞—è")
        result = 1
    elif panel_ok:
        print("üü° –ß–ê–°–¢–ò–ß–ù–û: –ü–∞–Ω–µ–ª—å –≥—Ä–∞—Ñ–∏–∫–∏ –≥–æ—Ç–æ–≤–∞, –Ω–æ main.qml —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        print("‚ö†Ô∏è main.qml –Ω–µ–ø–æ–ª–Ω—ã–π")
        print("‚úÖ –ü–∞–Ω–µ–ª—å –≥—Ä–∞—Ñ–∏–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ")
        result = 1
    else:
        print("üî¥ –ü–õ–û–•–û: –ò main.qml, –∏ –ø–∞–Ω–µ–ª—å –≥—Ä–∞—Ñ–∏–∫–∏ —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        print("‚ùå main.qml –Ω–µ–ø–æ–ª–Ω—ã–π")
        print("‚ùå –ü–∞–Ω–µ–ª—å –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–µ–ø–æ–ª–Ω–∞—è")
        result = 2

    print("\nüìù –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
    print("   python check_qml_graphics.py")

    return result


if __name__ == "__main__":
    sys.exit(main())
