#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
fix_camera_overlay.py
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç CameraController –∏–∑ View3D –Ω–∞—Ä—É–∂—É –∫–∞–∫ overlay
"""
import re
from pathlib import Path

def fix_camera_controller_placement():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ CameraController –≤ main.qml"""
    main_qml = Path("assets/qml/main.qml")
    
    if not main_qml.exists():
        print("‚ùå –§–∞–π–ª main.qml –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    print("üìñ –ß–∏—Ç–∞–µ–º main.qml...")
    content = main_qml.read_text(encoding='utf-8')
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ CameraController –≤–Ω—É—Ç—Ä–∏ View3D
    # –ò—â–µ–º –±–ª–æ–∫ –æ—Ç "CameraController {" –¥–æ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π "}"
    camera_pattern = re.compile(
        r'(\s+)(CameraController\s*\{.*?'  # –ù–∞—á–∞–ª–æ CameraController
        r'Component\.onCompleted:\s*\{.*?'  # Component.onCompleted –±–ª–æ–∫
        r'console\.log\("üì∑ Camera initialized.*?\)\s*'  # console.log
        r'\}\s*'  # –∑–∞–∫—Ä—ã—Ç–∏–µ onCompleted
        r'\})',  # –∑–∞–∫—Ä—ã—Ç–∏–µ CameraController
        re.DOTALL | re.MULTILINE
    )
    
    match = camera_pattern.search(content)
    
    if not match:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω CameraController –±–ª–æ–∫!")
        return False
    
    indent = match.group(1)
    camera_block = match.group(2)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω CameraController –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {match.start()}")
    print(f"   –û—Ç—Å—Ç—É–ø: {len(indent)} –ø—Ä–æ–±–µ–ª–æ–≤")
    
    # –£–¥–∞–ª—è–µ–º CameraController –∏–∑ View3D
    content_without_camera = content[:match.start()] + content[match.end():]
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü View3D
    view3d_end_pattern = re.compile(
        r'(    \}  // –∫–æ–Ω–µ—Ü View3D\n'  # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è View3D
        r'|'
        r'    \}\s*//\s*View3D\n'  # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        r'|'
        r'(\s{4}\})\n\s*\n\s*//\s*===.*MOUSE CONTROLS)',  # –∏–ª–∏ —Å–µ–∫—Ü–∏—è –ø–æ—Å–ª–µ View3D
        re.MULTILINE
    )
    
    view3d_end = view3d_end_pattern.search(content_without_camera)
    
    if not view3d_end:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü View3D, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫...")
        # –ò—â–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ View3D –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö/–∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫
        view3d_start = content_without_camera.find("View3D {")
        if view3d_start == -1:
            print("‚ùå View3D –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–±–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ü–∞ View3D
        depth = 0
        pos = view3d_start
        while pos < len(content_without_camera):
            if content_without_camera[pos] == '{':
                depth += 1
            elif content_without_camera[pos] == '}':
                depth -= 1
                if depth == 0:
                    view3d_end_pos = pos + 1
                    break
            pos += 1
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ View3D!")
            return False
    else:
        view3d_end_pos = view3d_end.end()
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü View3D –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {view3d_end_pos}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π CameraController –±–ª–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º
    new_camera_block = f"""
    // ===============================================================
    // ‚úÖ CRITICAL FIX: CAMERA CONTROLLER AS OVERLAY
    // ===============================================================
    
    // ‚úÖ CameraController –ü–û–í–ï–†–• View3D –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏!
    CameraController {{
        id: cameraController
        
        // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–ø–æ–ª–Ω—è–µ—Ç –≤–µ—Å—å —ç–∫—Ä–∞–Ω –ø–æ–≤–µ—Ä—Ö View3D!
        anchors.fill: parent
        z: 1000  // –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º—ã—à–∏
        
        worldRoot: worldRoot
        view3d: view3d
        
        // ‚úÖ Bind to geometry for pivot/fit calculations
        frameLength: root.userFrameLength
        frameHeight: root.userFrameHeight
        beamSize: root.userBeamSize
        trackWidth: root.userTrackWidth
        
        // ‚úÖ Bind to TAA for motion detection
        taaMotionAdaptive: root.taaMotionAdaptive
        
        // ‚úÖ Callback for animation toggle
        onToggleAnimation: {{
            root.isRunning = !root.isRunning
        }}
        
        // ‚úÖ Initial camera state
        Component.onCompleted: {{
            // Sync camera settings from root to CameraState
            state.fov = root.cameraFov
            state.nearPlane = root.cameraNear
            state.farPlane = root.cameraFar
            state.speed = root.cameraSpeed
            state.autoRotate = root.autoRotate
            state.autoRotateSpeed = root.autoRotateSpeed
            
            console.log("üì∑ Camera initialized: distance =", state.distance, "yaw =", state.yawDeg, "pitch =", state.pitchDeg)
            console.log("üñ±Ô∏è Mouse controls: OVERLAY MODE ACTIVE (z=1000)")
        }}
    }}
"""
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º CameraController –ø–æ—Å–ª–µ View3D
    fixed_content = (
        content_without_camera[:view3d_end_pos] +
        new_camera_block +
        content_without_camera[view3d_end_pos:]
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    print("\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
    main_qml.write_text(fixed_content, encoding='utf-8')
    
    print("\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ò–ú–ï–ù–ï–ù–û!")
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("   ‚úÖ CameraController –ø–µ—Ä–µ–º–µ—â—ë–Ω –ò–ó View3D")
    print("   ‚úÖ CameraController —Ç–µ–ø–µ—Ä—å OVERLAY (z=1000)")
    print("   ‚úÖ anchors.fill: parent –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞")
    print("   ‚úÖ MouseArea –≤–Ω—É—Ç—Ä–∏ CameraController —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    
    print("\nüéØ –û–ñ–ò–î–ê–ï–ú–û–ï –ü–û–í–ï–î–ï–ù–ò–ï:")
    print("   üñ±Ô∏è –õ–ö–ú + drag ‚Üí –æ—Ä–±–∏—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ")
    print("   üñ±Ô∏è –ü–ö–ú + drag ‚Üí –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("   üñ±Ô∏è –ö–æ–ª–µ—Å–æ ‚Üí –∑—É–º")
    print("   ‚å®Ô∏è  R ‚Üí —Å–±—Ä–æ—Å –∫–∞–º–µ—Ä—ã")
    print("   ‚å®Ô∏è  F ‚Üí –∞–≤—Ç–æ—Ñ–∏—Ç")
    
    return True

if __name__ == "__main__":
    print("‚ïê" * 60)
    print("üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: CameraController Overlay")
    print("‚ïê" * 60)
    
    success = fix_camera_controller_placement()
    
    if success:
        print("\n" + "‚ïê" * 60)
        print("‚úÖ –ì–û–¢–û–í–û! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        print("‚ïê" * 60)
    else:
        print("\n" + "‚ïê" * 60)
        print("‚ùå –û–®–ò–ë–ö–ê! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É main.qml –≤—Ä—É—á–Ω—É—é.")
        print("‚ïê" * 60)
