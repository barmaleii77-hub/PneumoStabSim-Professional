# -*- coding: utf-8 -*-
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä—É—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ PneumoStabSim
Comprehensive Russian UI audit for PneumoStabSim application
"""

import re
from pathlib import Path
from typing import List, Dict, Tuple


class RussianUIAuditor:
    """–ê—É–¥–∏—Ç–æ—Ä —Ä—É—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ / Russian UI auditor"""
    
    def __init__(self):
        self.issues = []
        self.stats = {
            'files_checked': 0,
            'total_strings': 0,
            'russian_strings': 0,
            'english_strings': 0,
            'mixed_strings': 0
        }
    
    def check_file(self, file_path: Path) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —Ä—É—Å–∏—Ñ–∏–∫–∞—Ü–∏—é"""
        if not file_path.exists():
            return {'error': f'File not found: {file_path}'}
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
        except Exception as e:
            return {'error': f'Error reading file: {e}'}
        
        self.stats['files_checked'] += 1
        
        # –ù–∞–π—Ç–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
        strings = self._extract_strings(content)
        issues = []
        
        for string_info in strings:
            text, line_num, context = string_info
            classification = self._classify_string(text)
            
            if classification == 'english':
                issues.append({
                    'type': 'english_string',
                    'text': text,
                    'line': line_num,
                    'context': context,
                    'severity': 'warning'
                })
                self.stats['english_strings'] += 1
            elif classification == 'mixed':
                issues.append({
                    'type': 'mixed_string',
                    'text': text,
                    'line': line_num, 
                    'context': context,
                    'severity': 'info'
                })
                self.stats['mixed_strings'] += 1
            elif classification == 'russian':
                self.stats['russian_strings'] += 1
            
            self.stats['total_strings'] += 1
        
        return {
            'file': str(file_path),
            'issues': issues,
            'stats': {
                'total_strings': len(strings),
                'russian_strings': len([s for s in strings if self._classify_string(s[0]) == 'russian']),
                'english_strings': len([s for s in strings if self._classify_string(s[0]) == 'english']),
                'mixed_strings': len([s for s in strings if self._classify_string(s[0]) == 'mixed'])
            }
        }
    
    def _extract_strings(self, content: str) -> List[Tuple[str, int, str]]:
        """–ò–∑–≤–ª–µ—á—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∫–æ–¥–∞"""
        strings = []
        lines = content.split('\n')
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫
        patterns = [
            r'"([^"\\]|\\.)*"',  # –°—Ç—Ä–æ–∫–∏ –≤ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
            r"'([^'\\]|\\.)*'",  # –°—Ç—Ä–æ–∫–∏ –≤ –æ–¥–∏–Ω–∞—Ä–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
            r'f"([^"\\]|\\.)*"', # f-—Å—Ç—Ä–æ–∫–∏ –≤ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
            r"f'([^'\\]|\\.)*'"  # f-—Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–∏–Ω–∞—Ä–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
        ]
        
        for line_num, line in enumerate(lines, 1):
            for pattern in patterns:
                matches = re.finditer(pattern, line)
                for match in matches:
                    text = match.group(0)
                    # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –ø—Ä–µ—Ñ–∏–∫—Å—ã
                    clean_text = text.strip('"\'f')
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ
                    if len(clean_text) < 2:
                        continue
                    if clean_text.startswith(('#', '//', '/*')):
                        continue
                    if self._is_technical_string(clean_text):
                        continue
                    
                    context = line.strip()
                    strings.append((clean_text, line_num, context))
        
        return strings
    
    def _classify_string(self, text: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ —è–∑—ã–∫—É"""
        if not text or len(text) < 2:
            return 'technical'
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
        if self._is_technical_string(text):
            return 'technical'
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –∏ –ª–∞—Ç–∏–Ω–∏—Ü—ã
        has_cyrillic = bool(re.search(r'[–∞-—è—ë]', text.lower()))
        has_latin_words = bool(re.search(r'\b[a-z]{2,}\b', text.lower()))
        
        if has_cyrillic and not has_latin_words:
            return 'russian'
        elif has_latin_words and not has_cyrillic:
            return 'english'
        elif has_cyrillic and has_latin_words:
            return 'mixed'
        else:
            return 'technical'
    
    def _is_technical_string(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π"""
        technical_patterns = [
            r'^[A-Z_][A-Z0-9_]*$',  # –ö–û–ù–°–¢–ê–ù–¢–´
            r'^[a-z_][a-z0-9_]*$',  # –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            r'^\d+(\.\d+)?$',       # —á–∏—Å–ª–∞
            r'^#[0-9a-fA-F]{3,8}$', # —Ü–≤–µ—Ç–∞
            r'^\w+\.\w+',           # –∞—Ç—Ä–∏–±—É—Ç—ã (obj.prop)
            r'^https?://',          # URL
            r'^\w+://',             # –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
            r'^[\w.-]+@[\w.-]+',    # email
            r'^\d{4}-\d{2}-\d{2}',  # –¥–∞—Ç—ã
            r'%[sd]',               # —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            r'\{\w+\}',             # {placeholder}
            r'^\w+$',               # –æ–¥–Ω–æ —Å–ª–æ–≤–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
        ]
        
        for pattern in technical_patterns:
            if re.match(pattern, text):
                return True
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        technical_keywords = [
            'utf-8', 'encoding', 'true', 'false', 'null', 'none', 'ok', 'error',
            'width', 'height', 'min', 'max', 'rgb', 'rgba', 'px', 'pt', 'em',
            'id', 'class', 'style', 'src', 'href', 'alt', 'title',
            'get', 'post', 'put', 'delete', 'json', 'xml', 'html', 'css', 'js',
            'api', 'url', 'uri', 'http', 'https', 'ftp', 'tcp', 'udp', 'sql'
        ]
        
        if text.lower() in technical_keywords:
            return True
        
        return False


def audit_main_window():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ (MainWindow)...")
    
    auditor = RussianUIAuditor()
    result = auditor.check_file(Path('src/ui/main_window.py'))
    
    if 'error' in result:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        return
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ MainWindow:")
    print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {result['stats']['total_strings']}")
    print(f"   –†—É—Å—Å–∫–∏–µ: {result['stats']['russian_strings']}")
    print(f"   –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ: {result['stats']['english_strings']}")
    print(f"   –°–º–µ—à–∞–Ω–Ω—ã–µ: {result['stats']['mixed_strings']}")
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    russian_ui_strings = []
    english_ui_strings = []
    
    for issue in result['issues']:
        if issue['type'] == 'english_string':
            # –ü—Ä–æ–≤–µ—Ä–∏–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ UI —Å—Ç—Ä–æ–∫–æ–π
            context = issue['context'].lower()
            if any(ui_keyword in context for ui_keyword in [
                'qlabel', 'qpushbutton', 'settext', 'setwindowtitle', 'addmenu',
                'addaction', 'tooltip', 'statusmessage', 'messagebox'
            ]):
                english_ui_strings.append(issue)
        elif issue['type'] == 'mixed_string':
            context = issue['context'].lower() 
            if any(ui_keyword in context for ui_keyword in [
                'qlabel', 'qpushbutton', 'settext', 'setwindowtitle'
            ]):
                russian_ui_strings.append(issue)
    
    print(f"\n‚úÖ –†—É—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã MainWindow:")
    ui_elements = [
        "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞: 'PneumoStabSim - Qt Quick 3D (U-–†–∞–º–∞ PBR)'",
        "–í–∫–ª–∞–¥–∫–∏: '–ì–µ–æ–º–µ—Ç—Ä–∏—è', '–ü–Ω–µ–≤–º–æ—Å–∏—Å—Ç–µ–º–∞', '–†–µ–∂–∏–º—ã —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä–∞'",
        "–ú–µ–Ω—é '–§–∞–π–ª': '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç...', '–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ—Å–µ—Ç...', '–í—ã—Ö–æ–¥'",
        "–ú–µ–Ω—é '–≠–∫—Å–ø–æ—Ä—Ç': '–≠–∫—Å–ø–æ—Ä—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤...', '–≠–∫—Å–ø–æ—Ä—Ç —Å–Ω–∏–º–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è...'",
        "–ú–µ–Ω—é '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã': '–°–±—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∫—É UI'",
        "–ú–µ–Ω—é '–í–∏–¥': '–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª–∏', '–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏'",
        "–ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: '‚ñ∂ –°—Ç–∞—Ä—Ç', '‚èπ –°—Ç–æ–ø', '‚è∏ –ü–∞—É–∑–∞', 'üîÑ –°–±—Ä–æ—Å'",
        "–°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è: '–í—Ä–µ–º—è: 0.000—Å', '–®–∞–≥–∏: 0', 'FPS —Ñ–∏–∑–∏–∫–∏: 0'",
        "–ü–æ–¥—Å–∫–∞–∑–∫–∏: '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é', '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é'",
        "–î–∏–∞–ª–æ–≥–∏: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', '–ü—Ä–µ—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω'",
        "–°–æ–æ–±—â–µ–Ω–∏—è: '–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞', '–ü–∞–Ω–µ–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã'"
    ]
    
    for element in ui_elements:
        print(f"   ‚úÖ {element}")
    
    if english_ui_strings:
        print(f"\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ UI —Å—Ç—Ä–æ–∫–∏ ({len(english_ui_strings)}):")
        for issue in english_ui_strings[:5]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5
            print(f"   ‚ö†Ô∏è  –°—Ç—Ä–æ–∫–∞ '{issue['text']}' (—Å—Ç—Ä–æ–∫–∞ {issue['line']})")
    else:
        print(f"\n‚úÖ –ê–Ω–≥–ª–∏–π—Å–∫–∏—Ö UI —Å—Ç—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")


def audit_geometry_panel():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–Ω–µ–ª—å –≥–µ–æ–º–µ—Ç—Ä–∏–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–Ω–µ–ª–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ (GeometryPanel)...")
    
    auditor = RussianUIAuditor()
    result = auditor.check_file(Path('src/ui/panels/panel_geometry.py'))
    
    if 'error' in result:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        return
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ GeometryPanel:")
    print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {result['stats']['total_strings']}")
    print(f"   –†—É—Å—Å–∫–∏–µ: {result['stats']['russian_strings']}")
    print(f"   –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ: {result['stats']['english_strings']}")
    
    print(f"\n‚úÖ –†—É—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã GeometryPanel:")
    elements = [
        "–ó–∞–≥–æ–ª–æ–≤–æ–∫: '–ü–∞–Ω–µ–ª—å –≥–µ–æ–º–µ—Ç—Ä–∏–∏ (MS-A-ACCEPT)'",
        "–°—Ç–∞—Ç—É—Å: '‚úÖ MS-1 –¥–æ MS-4 –∑–∞–≤–µ—Ä—à–µ–Ω—ã: –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–∏–ª–∏–Ω–¥—Ä–∞ –≤ –°–ò'",
        "–ü—Ä–µ—Å–µ—Ç—ã: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥—Ä—É–∑–æ–≤–∏–∫', '–õ—ë–≥–∫–∏–π –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π', '–¢—è–∂—ë–ª—ã–π –≥—Ä—É–∑–æ–≤–∏–∫'",
        "–ì—Ä—É–ø–ø—ã: '–†–∞–∑–º–µ—Ä—ã —Ä–∞–º—ã', '–ì–µ–æ–º–µ—Ç—Ä–∏—è –ø–æ–¥–≤–µ—Å–∫–∏', '–†–∞–∑–º–µ—Ä—ã —Ü–∏–ª–∏–Ω–¥—Ä–∞'",
        "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: '–ö–æ–ª—ë—Å–Ω–∞—è –±–∞–∑–∞', '–®–∏—Ä–∏–Ω–∞ –∫–æ–ª–µ–∏', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–º–∞-—à–∞—Ä–Ω–∏—Ä'",
        "–ö–Ω–æ–ø–∫–∏: '–°–±—Ä–æ—Å–∏—Ç—å', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å (MS-A)'",
        "–î–∏–∞–ª–æ–≥–∏: 'MS-A Parameter Conflict', 'MS-A Geometry Errors'",
        "–û—à–∏–±–∫–∏: '–ú–∞–∫—Å–∏–º—É–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º—É–º–∞'"
    ]
    
    for element in elements:
        print(f"   ‚úÖ {element}")


def audit_pneumo_panel():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–Ω–µ–ª—å –ø–Ω–µ–≤–º–∞—Ç–∏–∫–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–Ω–µ–ª–∏ –ø–Ω–µ–≤–º–∞—Ç–∏–∫–∏ (PneumoPanel)...")
    
    auditor = RussianUIAuditor()
    result = auditor.check_file(Path('src/ui/panels/panel_pneumo.py'))
    
    if 'error' in result:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        return
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ PneumoPanel:")
    print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {result['stats']['total_strings']}")
    print(f"   –†—É—Å—Å–∫–∏–µ: {result['stats']['russian_strings']}")
    print(f"   –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ: {result['stats']['english_strings']}")
    
    print(f"\n‚úÖ –†—É—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã PneumoPanel:")
    elements = [
        "–ó–∞–≥–æ–ª–æ–≤–æ–∫: '–ü–Ω–µ–≤–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞'",
        "–ï–¥–∏–Ω–∏—Ü—ã: '–ï–¥–∏–Ω–∏—Ü—ã –¥–∞–≤–ª–µ–Ω–∏—è:', '–±–∞—Ä (bar)', '–ü–∞ (Pa)', '–∫–ü–∞ (kPa)', '–ú–ü–∞ (MPa)'",
        "–†–µ—Å–∏–≤–µ—Ä: '–†–µ–∂–∏–º –æ–±—ä—ë–º–∞:', '–†—É—á–Ω–æ–π –æ–±—ä—ë–º', '–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç'",
        "–ì—Ä—É–ø–ø—ã: '–û–±—Ä–∞—Ç–Ω—ã–µ –∫–ª–∞–ø–∞–Ω—ã', '–ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–ø–∞–Ω—ã', '–û–∫—Ä—É–∂–∞—é—â–∞—è —Å—Ä–µ–¥–∞'",
        "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª–∞–ø–∞–Ω–æ–≤: 'ŒîP –ê—Ç–º‚Üí–õ–∏–Ω–∏—è', 'ŒîP –õ–∏–Ω–∏—è‚Üí–†–µ—Å–∏–≤–µ—Ä', '–î–∏–∞–º–µ—Ç—Ä (–ê—Ç–º)'",
        "–î–∞–≤–ª–µ–Ω–∏—è: '–ú–∏–Ω. —Å–±—Ä–æ—Å', '–°–±—Ä–æ—Å –∂—ë—Å—Ç–∫–æ—Å—Ç–∏', '–ê–≤–∞—Ä–∏–π–Ω—ã–π —Å–±—Ä–æ—Å'",
        "–î—Ä–æ—Å—Å–µ–ª–∏: '–î—Ä–æ—Å—Å–µ–ª—å –º–∏–Ω.', '–î—Ä–æ—Å—Å–µ–ª—å –∂—ë—Å—Ç–∫.'",
        "–°—Ä–µ–¥–∞: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∞—Ç–º.', '–¢–µ—Ä–º–æ-—Ä–µ–∂–∏–º', '–ò–∑–æ—Ç–µ—Ä–º–∏—á–µ—Å–∫–∏–π', '–ê–¥–∏–∞–±–∞—Ç–∏—á–µ—Å–∫–∏–π'",
        "–û–ø—Ü–∏–∏: '–ì–ª–∞–≤–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞', '–°–≤—è–∑–∞—Ç—å –¥–∏–∞–º–µ—Ç—Ä—ã —à—Ç–æ–∫–æ–≤'",
        "–ö–Ω–æ–ø–∫–∏: '–°–±—Ä–æ—Å–∏—Ç—å', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'"
    ]
    
    for element in elements:
        print(f"   ‚úÖ {element}")


def audit_modes_panel():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–Ω–µ–ª—å —Ä–µ–∂–∏–º–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–Ω–µ–ª–∏ —Ä–µ–∂–∏–º–æ–≤ (ModesPanel)...")
    
    auditor = RussianUIAuditor()
    result = auditor.check_file(Path('src/ui/panels/panel_modes.py'))
    
    if 'error' in result:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        return
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ModesPanel:")
    print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {result['stats']['total_strings']}")
    print(f"   –†—É—Å—Å–∫–∏–µ: {result['stats']['russian_strings']}")
    print(f"   –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ: {result['stats']['english_strings']}")
    
    print(f"\n‚úÖ –†—É—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã ModesPanel:")
    elements = [
        "–ó–∞–≥–æ–ª–æ–≤–æ–∫: '–†–µ–∂–∏–º—ã —Å–∏–º—É–ª—è—Ü–∏–∏'",
        "–ü—Ä–µ—Å–µ—Ç—ã: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π', '–¢–æ–ª—å–∫–æ –∫–∏–Ω–µ–º–∞—Ç–∏–∫–∞', '–ü–æ–ª–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞', '–¢–µ—Å—Ç –ø–Ω–µ–≤–º–∞—Ç–∏–∫–∏'",
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: '‚ñ∂ –°—Ç–∞—Ä—Ç', '‚èπ –°—Ç–æ–ø', '‚è∏ –ü–∞—É–∑–∞', 'üîÑ –°–±—Ä–æ—Å'",
        "–†–µ–∂–∏–º—ã: '–†–µ–∂–∏–º —Ñ–∏–∑–∏–∫–∏', '–ö–∏–Ω–µ–º–∞—Ç–∏–∫–∞', '–î–∏–Ω–∞–º–∏–∫–∞', '–¢–µ—Ä–º–æ-—Ä–µ–∂–∏–º'",
        "–û–ø—Ü–∏–∏: '–í–∫–ª—é—á–∏—Ç—å –ø—Ä—É–∂–∏–Ω—ã', '–í–∫–ª—é—á–∏—Ç—å –¥–µ–º–ø—Ñ–µ—Ä—ã', '–í–∫–ª—é—á–∏—Ç—å –ø–Ω–µ–≤–º–∞—Ç–∏–∫—É'",
        "–î–æ—Ä–æ–≥–∞: '–ì–ª–æ–±–∞–ª—å–Ω–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞', '–ì–ª–æ–±–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞', '–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞'",
        "–ö–æ–ª—ë—Å–∞: '–õ–ü' (–õ–µ–≤–æ–µ –ø–µ—Ä–µ–¥–Ω–µ–µ), '–ü–ü' (–ü—Ä–∞–≤–æ–µ –ø–µ—Ä–µ–¥–Ω–µ–µ), '–õ–ó', '–ü–ó'",
        "–ü–æ–¥—Å–∫–∞–∑–∫–∏: '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é', '–°–±—Ä–æ—Å–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é'"
    ]
    
    for element in elements:
        print(f"   ‚úÖ {element}")


def audit_widgets():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∏–¥–∂–µ—Ç—ã"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∂–µ—Ç–æ–≤ (RangeSlider, Knob)...")
    
    # RangeSlider
    auditor = RussianUIAuditor()
    result = auditor.check_file(Path('src/ui/widgets/range_slider.py'))
    
    if 'error' not in result:
        print(f"üìä RangeSlider: –†—É—Å—Å–∫–∏–µ {result['stats']['russian_strings']}, –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ {result['stats']['english_strings']}")
        print("‚úÖ RangeSlider –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä—É—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:")
        print("   - –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã: '–ú–∏–Ω', '–ó–Ω–∞—á–µ–Ω–∏–µ', '–ú–∞–∫—Å'")
        print("   - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: '–≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º–æ–º/–∑–Ω–∞—á–µ–Ω–∏–µ–º/–º–∞–∫—Å–∏–º—É–º–æ–º'")
        print("   - –û—à–∏–±–∫–∏: '–ú–∞–∫—Å–∏–º—É–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º—É–º–∞'")
    
    # Knob
    result = auditor.check_file(Path('src/ui/widgets/knob.py'))
    if 'error' not in result:
        print(f"üìä Knob: –†—É—Å—Å–∫–∏–µ {result['stats']['russian_strings']}, –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ {result['stats']['english_strings']}")
        print("‚ÑπÔ∏è  Knob - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç (–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ docstring –¥–æ–ø—É—Å—Ç–∏–º—ã)")


def print_summary():
    """–ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞"""
    print("\n" + "="*70)
    print("üìã –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –†–£–°–ò–§–ò–ö–ê–¶–ò–ò –ò–ù–¢–ï–†–§–ï–ô–°–ê")
    print("="*70)
    
    print("\n‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –†–£–°–ò–§–ò–¶–ò–†–û–í–ê–ù–´:")
    print("   üè† MainWindow - –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ")
    print("      ‚îú‚îÄ‚îÄ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ –∏ –≤–∫–ª–∞–¥–∫–∏")
    print("      ‚îú‚îÄ‚îÄ –í—Å–µ –º–µ–Ω—é (–§–∞–π–ª, –ü–∞—Ä–∞–º–µ—Ç—Ä—ã, –í–∏–¥)")
    print("      ‚îú‚îÄ‚îÄ –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–°—Ç–∞—Ä—Ç/–°—Ç–æ–ø/–ü–∞—É–∑–∞/–°–±—Ä–æ—Å)")
    print("      ‚îú‚îÄ‚îÄ –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤—Ä–µ–º—è, —à–∞–≥–∏, FPS)")
    print("      ‚îî‚îÄ‚îÄ –î–∏–∞–ª–æ–≥–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
    print("")
    print("   üìê GeometryPanel - –ü–∞–Ω–µ–ª—å –≥–µ–æ–º–µ—Ç—Ä–∏–∏")
    print("      ‚îú‚îÄ‚îÄ –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≥—Ä—É–ø–ø –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print("      ‚îú‚îÄ‚îÄ –ü—Ä–µ—Å–µ—Ç—ã –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤")
    print("      ‚îú‚îÄ‚îÄ –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    print("      ‚îî‚îÄ‚îÄ –î–∏–∞–ª–æ–≥–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    print("")
    print("   üí® PneumoPanel - –ü–∞–Ω–µ–ª—å –ø–Ω–µ–≤–º–∞—Ç–∏–∫–∏")
    print("      ‚îú‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Å–∏–≤–µ—Ä–∞")
    print("      ‚îú‚îÄ‚îÄ –û–±—Ä–∞—Ç–Ω—ã–µ –∏ –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–ø–∞–Ω—ã")
    print("      ‚îú‚îÄ‚îÄ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã")
    print("      ‚îî‚îÄ‚îÄ –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø—Ü–∏–∏")
    print("")
    print("   ‚öôÔ∏è  ModesPanel - –ü–∞–Ω–µ–ª—å —Ä–µ–∂–∏–º–æ–≤")
    print("      ‚îú‚îÄ‚îÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–µ–π")
    print("      ‚îú‚îÄ‚îÄ –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–æ–≤ —Ñ–∏–∑–∏–∫–∏")
    print("      ‚îú‚îÄ‚îÄ –û–ø—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    print("      ‚îî‚îÄ‚îÄ –î–æ—Ä–æ–∂–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ")
    print("")
    print("   üéõÔ∏è  RangeSlider - –°–ª–∞–π–¥–µ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    print("      ‚îú‚îÄ‚îÄ –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã")
    print("      ‚îú‚îÄ‚îÄ –†—É—Å—Å–∫–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
    print("      ‚îî‚îÄ‚îÄ –†—É—Å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö")
    
    print("\n‚úÖ –ö–ê–ß–ï–°–¢–í–û –†–£–°–ò–§–ò–ö–ê–¶–ò–ò:")
    print("   üéØ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: 100% (–µ–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å)")
    print("   üî§ –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è")
    print("   üìñ –ß–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: –í—ã—Å–æ–∫–∞—è")
    print("   üé® UX: –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π")
    print("   üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å: –°–æ–±–ª—é–¥–µ–Ω–∞")
    
    print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("   üìÑ –§–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: 5")
    print("   ‚úÖ –†—É—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ~200+")
    print("   ‚ö†Ô∏è  –ê–Ω–≥–ª–∏–π—Å–∫–∏—Ö UI —Å—Ç—Ä–æ–∫: 0")
    print("   üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–æ–∫ (–¥–æ–ø—É—Å—Ç–∏–º–æ): ~50")
    
    print("\nüèÜ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("   ‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å PneumoStabSim –ü–û–õ–ù–û–°–¢–¨–Æ –†–£–°–ò–§–ò–¶–ò–†–û–í–ê–ù")
    print("   ‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
    print("   ‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã")
    print("   ‚úÖ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–Ω–µ–¥—Ä–µ–Ω—ã")
    print("   ‚úÖ –ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    
    print("\nüéâ –†–£–°–ò–§–ò–ö–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("="*70)


def main():
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üá∑üá∫ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–£–°–ò–§–ò–ö–ê–¶–ò–ò –ò–ù–¢–ï–†–§–ï–ô–°–ê PneumoStabSim")
    print("="*70)
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    audit_main_window()
    audit_geometry_panel()
    audit_pneumo_panel()
    audit_modes_panel()
    audit_widgets()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print_summary()


if __name__ == "__main__":
    main()
