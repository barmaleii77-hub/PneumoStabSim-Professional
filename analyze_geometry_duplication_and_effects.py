#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∏ –ø—Ä–æ–±–ª–µ–º —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ –≤ QML —Ñ–∞–π–ª–∞—Ö
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º—É–∞—Ä, –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤, HDR –ø—Ä–æ–±–ª–µ–º—ã, —ç—Ñ—Ñ–µ–∫—Ç—ã
"""

import os
import re
from pathlib import Path

def analyze_qml_geometry_duplication():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –≤ QML —Ñ–∞–π–ª–∞—Ö"""
    
    print("=" * 80)
    print("üîç –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ì–ï–û–ú–ï–¢–†–ò–ò –ò –≠–§–§–ï–ö–¢–û–í")
    print("=" * 80)
    
    main_qml = Path("assets/qml/main.qml")
    
    if not main_qml.exists():
        print("‚ùå main.qml –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    with open(main_qml, 'r', encoding='utf-8') as f:
        content = f.read()
    
    print("\nüéØ –ê–ù–ê–õ–ò–ó –ì–ï–û–ú–ï–¢–†–ò–ò:")
    print("-" * 50)
    
    # –ò—â–µ–º –≤—Å–µ Model –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    models = re.findall(r'Model\s*{[^}]+source:\s*"[^"]*"[^}]*}', content, re.DOTALL)
    print(f"üìä –í—Å–µ–≥–æ Model –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(models)}")
    
    # –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≥–µ–æ–º–µ—Ç—Ä–∏–∏
    sources = {}
    for model in models:
        source_match = re.search(r'source:\s*"([^"]*)"', model)
        if source_match:
            source = source_match.group(1)
            sources[source] = sources.get(source, 0) + 1
    
    print("\nüìã –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏:")
    for source, count in sources.items():
        if count > 1:
            print(f"  ‚ö†Ô∏è  {source}: {count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π {'(–í–û–ó–ú–û–ñ–ù–û–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï!)' if count > 7 else ''}")
        else:
            print(f"  ‚úÖ {source}: {count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏–ª–∏–Ω–¥—Ä—ã
    cylinder_count = sources.get("#Cylinder", 0)
    print(f"\nüõ¢Ô∏è –ê–ù–ê–õ–ò–ó –¶–ò–õ–ò–ù–î–†–û–í:")
    print(f"   –í—Å–µ–≥–æ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤: {cylinder_count}")
    
    expected_cylinders = 7 * 4  # 7 —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π –∏–∑ 4 —É–≥–ª–æ–≤
    print(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_cylinders} —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤ (7 –Ω–∞ —É–≥–æ–ª √ó 4 —É–≥–ª–∞)")
    
    if cylinder_count > expected_cylinders:
        print(f"   ‚ùå –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï! –õ–∏—à–Ω–∏—Ö —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤: {cylinder_count - expected_cylinders}")
        print("   üö® –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –º—É–∞—Ä —ç—Ñ—Ñ–µ–∫—Ç!")
    elif cylinder_count == expected_cylinders:
        print("   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ")
    else:
        print(f"   ‚ö†Ô∏è –¶–∏–ª–∏–Ω–¥—Ä–æ–≤ –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ: {expected_cylinders - cylinder_count}")
    
    # –ê–Ω–∞–ª–∏–∑ OptimizedSuspensionCorner
    print(f"\nüîß –ê–ù–ê–õ–ò–ó OptimizedSuspensionCorner:")
    corner_components = re.findall(r'OptimizedSuspensionCorner\s*{[^}]*}', content, re.DOTALL)
    print(f"   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —É–≥–ª–æ–≤: {len(corner_components)}")
    
    if len(corner_components) != 4:
        print(f"   ‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è 4 —É–≥–ª–∞, –Ω–∞–π–¥–µ–Ω–æ: {len(corner_components)}")
    else:
        print("   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ü–∏–ª–∏–Ω–¥—Ä—ã –≤–Ω–µ OptimizedSuspensionCorner
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –û–¢–î–ï–õ–¨–ù–´–• –¶–ò–õ–ò–ù–î–†–û–í:")
    
    # –ò—â–µ–º —Ü–∏–ª–∏–Ω–¥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –≤–Ω—É—Ç—Ä–∏ OptimizedSuspensionCorner
    outside_cylinders = []
    lines = content.split('\n')
    in_component = False
    component_depth = 0
    
    for i, line in enumerate(lines):
        if 'OptimizedSuspensionCorner' in line and '{' in line:
            in_component = True
            component_depth = line.count('{') - line.count('}')
            continue
        
        if in_component:
            component_depth += line.count('{') - line.count('}')
            if component_depth <= 0:
                in_component = False
                continue
        
        if not in_component and 'source: "#Cylinder"' in line:
            outside_cylinders.append(f"   –°—Ç—Ä–æ–∫–∞ {i+1}: {line.strip()}")
    
    if outside_cylinders:
        print(f"   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ü–∏–ª–∏–Ω–¥—Ä—ã –í–ù–ï OptimizedSuspensionCorner:")
        for cyl in outside_cylinders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(cyl)
        if len(outside_cylinders) > 10:
            print(f"   ... –∏ –µ—â–µ {len(outside_cylinders) - 10}")
        print("   üö® –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è!")
    else:
        print("   ‚úÖ –í—Å–µ —Ü–∏–ª–∏–Ω–¥—Ä—ã –≤–Ω—É—Ç—Ä–∏ OptimizedSuspensionCorner")
    
    print(f"\nüé® –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–û–í:")
    print("-" * 50)
    
    # –ê–Ω–∞–ª–∏–∑ SceneEnvironment –∏ ExtendedSceneEnvironment
    if 'ExtendedSceneEnvironment' in content:
        print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ExtendedSceneEnvironment")
    else:
        print("   ‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ExtendedSceneEnvironment")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    effects_check = {
        'tonemapMode': r'tonemapMode:\s*[^{]*{[^}]*}',
        'antialiasingMode': r'antialiasingMode:\s*[^,\n]+',
        'bloomEnabled': r'bloomEnabled:\s*[^,\n]+',
        'ssaoEnabled': r'ssaoEnabled:\s*[^,\n]+',
        'shadowSoftness': r'shadowSoftness[^,\n]*',
        'glassIOR': r'indexOfRefraction:\s*[^,\n]+',
        'lightProbe': r'lightProbe:\s*[^,\n]+',
    }
    
    for effect, pattern in effects_check.items():
        if re.search(pattern, content):
            print(f"   ‚úÖ {effect}: —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        else:
            print(f"   ‚ùå {effect}: –ù–ï –ù–ê–ô–î–ï–ù")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º IBL
    print(f"\nüåü –ê–ù–ê–õ–ò–ó IBL:")
    if 'IblProbeLoader' in content:
        print("   ‚úÖ IblProbeLoader –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    else:
        print("   ‚ùå IblProbeLoader –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    if 'lightProbe:' in content:
        print("   ‚úÖ lightProbe –ø—Ä–∏–≤—è–∑–∞–Ω")
    else:
        print("   ‚ùå lightProbe –ù–ï –ø—Ä–∏–≤—è–∑–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º HDR —Ñ–∞–π–ª—ã
    hdr_files = ['studio.hdr', 'studio_small_09_2k.hdr']
    print(f"\nüìÅ –ü–†–û–í–ï–†–ö–ê HDR –§–ê–ô–õ–û–í:")
    for hdr_file in hdr_files:
        hdr_path = Path(f"assets/hdr/{hdr_file}")
        if hdr_path.exists():
            size_mb = hdr_path.stat().st_size / (1024 * 1024)
            print(f"   ‚úÖ {hdr_file}: {size_mb:.1f} MB")
        else:
            print(f"   ‚ùå {hdr_file}: –ù–ï –ù–ê–ô–î–ï–ù")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–≤—è–∑–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∫ View3D
    print(f"\nüé≠ –ê–ù–ê–õ–ò–ó –ü–†–ò–í–Ø–ó–ö–ò –≠–§–§–ï–ö–¢–û–í –ö –°–¶–ï–ù–ï:")
    view3d_match = re.search(r'View3D\s*{[^}]*environment:\s*([^{]*){[^}]*}', content, re.DOTALL)
    if view3d_match:
        env_content = view3d_match.group(0)
        print("   ‚úÖ View3D –∏–º–µ–µ—Ç environment")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É environment
        if 'ExtendedSceneEnvironment' in env_content:
            print("   ‚úÖ –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ü–µ–Ω–µ")
        else:
            print("   ‚ùå –≠—Ñ—Ñ–µ–∫—Ç—ã –º–æ–≥—É—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –Ω–µ –∫ —Ç–æ–π —Å—Ü–µ–Ω–µ!")
    else:
        print("   ‚ùå View3D environment –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("-" * 50)
    
    if cylinder_count > expected_cylinders:
        print("1. üö® –ö–†–ò–¢–ò–ß–ù–û: –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–∏–ª–∏–Ω–¥—Ä—ã!")
        print("   - –ü—Ä–∏—á–∏–Ω–∞ –º—É–∞—Ä–∞ –Ω–∞ —Ü–∏–ª–∏–Ω–¥—Ä–∏—á–µ—Å–∫–∏—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—è—Ö")
        print("   - –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏–ª–∏–Ω–¥—Ä—ã –≤–Ω—É—Ç—Ä–∏ OptimizedSuspensionCorner")
    
    if 'lightProbe:' not in content:
        print("2. üåü –ò—Å–ø—Ä–∞–≤–∏—Ç—å IBL lightProbe –ø—Ä–∏–≤—è–∑–∫—É")
        print("   - HDR —Ñ–æ–Ω –º–æ–∂–µ—Ç –¥–µ—Ä–≥–∞—Ç—å—Å—è –ø—Ä–∏ –æ—Ä–±–∏—Ç–µ")
    
    if re.search(r'shadowSoftness[^,\n]*', content) is None:
        print("3. üå´Ô∏è –î–æ–±–∞–≤–∏—Ç—å –º—è–≥–∫–æ—Å—Ç—å —Ç–µ–Ω–µ–π (shadowSoftness)")
        print("   - –¢–µ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏")
    
    effects_missing = []
    for effect, pattern in effects_check.items():
        if not re.search(pattern, content):
            effects_missing.append(effect)
    
    if effects_missing:
        print("4. ‚ú® –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:")
        for effect in effects_missing:
            print(f"   - {effect}")
    
    print("\n" + "=" * 80)
    return {
        'total_models': len(models),
        'cylinder_count': cylinder_count,
        'expected_cylinders': expected_cylinders,
        'corner_components': len(corner_components),
        'outside_cylinders': len(outside_cylinders),
        'effects_missing': effects_missing
    }

def analyze_specific_geometry_issues():
    """–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏–∏"""
    
    print("\nüîß –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ì–ï–û–ú–ï–¢–†–ò–ò:")
    print("=" * 80)
    
    main_qml = Path("assets/qml/main.qml")
    
    with open(main_qml, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ OptimizedSuspensionCorner
    component_match = re.search(r'component\s+OptimizedSuspensionCorner:\s*Node\s*{([^}]*)(?:{[^}]*}[^}]*)*}', content, re.DOTALL)
    
    if component_match:
        component_content = component_match.group(0)
        print("‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç OptimizedSuspensionCorner")
        
        # –°—á–∏—Ç–∞–µ–º Model –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        models_in_component = re.findall(r'Model\s*{', component_content)
        print(f"   –ú–æ–¥–µ–ª–µ–π –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: {len(models_in_component)}")
        
        # –û–∂–∏–¥–∞–µ—Ç—Å—è: —Ä—ã—á–∞–≥ + —Ö–≤–æ—Å—Ç–æ–≤–æ–π —à—Ç–æ–∫ + —Ü–∏–ª–∏–Ω–¥—Ä + –ø–æ—Ä—à–µ–Ω—å + —à—Ç–æ–∫ –ø–æ—Ä—à–Ω—è + 3 —à–∞—Ä–Ω–∏—Ä–∞ = 8 –º–æ–¥–µ–ª–µ–π
        expected_models = 8
        if len(models_in_component) == expected_models:
            print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –Ω–∞ —É–≥–æ–ª: {expected_models}")
        else:
            print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π: {len(models_in_component)} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_models})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
        cylinders_in_component = len(re.findall(r'source:\s*"#Cylinder"', component_content))
        cubes_in_component = len(re.findall(r'source:\s*"#Cube"', component_content))
        
        print(f"   –¶–∏–ª–∏–Ω–¥—Ä–æ–≤ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ: {cylinders_in_component}")
        print(f"   –ö—É–±–æ–≤ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ: {cubes_in_component}")
        
        # –û–∂–∏–¥–∞–µ—Ç—Å—è: 5 —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤ + 1 –∫—É–± (—Ä—ã—á–∞–≥) = 6
        expected_cyl = 5  # —Ö–≤–æ—Å—Ç–æ–≤–æ–π —à—Ç–æ–∫ + —Ü–∏–ª–∏–Ω–¥—Ä + –ø–æ—Ä—à–µ–Ω—å + —à—Ç–æ–∫ –ø–æ—Ä—à–Ω—è + 3 —à–∞—Ä–Ω–∏—Ä–∞ = 7 —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤
        expected_cube = 1  # —Ä—ã—á–∞–≥
        
        if cylinders_in_component != 7:
            print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ: {cylinders_in_component} (–æ–∂–∏–¥–∞–ª–æ—Å—å 7)")
        
        if cubes_in_component != 1:
            print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–æ–≤ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ: {cubes_in_component} (–æ–∂–∏–¥–∞–ª—Å—è 1)")
    
    else:
        print("‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç OptimizedSuspensionCorner –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    usage_matches = re.findall(r'OptimizedSuspensionCorner\s*{[^}]*id:\s*(\w+)[^}]*}', content, re.DOTALL)
    print(f"\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OptimizedSuspensionCorner: {len(usage_matches)}")
    for usage in usage_matches:
        print(f"   - {usage}")
    
    if len(usage_matches) != 4:
        print("   ‚ö†Ô∏è –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 4 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —É–≥–æ–ª)")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤...")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
    results = analyze_qml_geometry_duplication()
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    analyze_specific_geometry_issues()
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã
    print("\n" + "=" * 80)
    print("üìã –ò–¢–û–ì–û–í–´–ï –í–´–í–û–î–´:")
    print("=" * 80)
    
    issues_found = []
    
    if results['cylinder_count'] > results['expected_cylinders']:
        issues_found.append(f"üö® –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –¶–ò–õ–ò–ù–î–†–û–í: {results['cylinder_count']} –≤–º–µ—Å—Ç–æ {results['expected_cylinders']}")
    
    if results['outside_cylinders'] > 0:
        issues_found.append(f"‚ö†Ô∏è –¶–∏–ª–∏–Ω–¥—Ä—ã –≤–Ω–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: {results['outside_cylinders']}")
    
    if results['effects_missing']:
        issues_found.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã: {len(results['effects_missing'])}")
    
    if results['corner_components'] != 4:
        issues_found.append(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–æ–≤: {results['corner_components']} –≤–º–µ—Å—Ç–æ 4")
    
    if issues_found:
        print("‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
        for issue in issues_found:
            print(f"   {issue}")
        
        print("\nüí° –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        print("1. –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–∏–ª–∏–Ω–¥—Ä—ã (–ø—Ä–∏—á–∏–Ω–∞ –º—É–∞—Ä–∞)")
        print("2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å IBL lightProbe (HDR –¥–µ—Ä–≥–∞–µ—Ç—Å—è)")  
        print("3. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã")
        print("4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ü–µ–Ω–µ")
    else:
        print("‚úÖ –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
    
    print("\nüéØ –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∞—Ä–∞ - —É–¥–∞–ª–∏—Ç–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–∏–ª–∏–Ω–¥—Ä—ã!")
    print("üéØ –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è HDR - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ lightProbe –ø—Ä–∏–≤—è–∑–∫—É!")

if __name__ == "__main__":
    main()
