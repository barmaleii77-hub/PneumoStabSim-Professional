"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è event logging –≤ panel_graphics.py
–ó–∞–º–µ–Ω—è–µ—Ç —Å–ª–∞–π–¥–µ—Ä—ã, —á–µ–∫–±–æ–∫—Å—ã –∏ –∫–æ–º–±–æ–±–æ–∫—Å—ã –Ω–∞ –≤–µ—Ä—Å–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import re
import sys
from pathlib import Path


def backup_file(file_path: Path) -> Path:
    """–°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø —Ñ–∞–π–ª–∞"""
    backup_path = file_path.with_suffix(".py.backup")
    backup_path.write_text(file_path.read_text(encoding="utf-8"), encoding="utf-8")
    print(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
    return backup_path


def add_imports(content: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–º–ø–æ—Ä—Ç
    if "from src.common.event_logger import" in content:
        print("‚ÑπÔ∏è  –ò–º–ø–æ—Ä—Ç—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        return content

    # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)
    import_pattern = r"(from \.graphics_logger import get_graphics_logger\n)"

    new_imports = """
# ‚úÖ –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è event logging
from src.common.event_logger import get_event_logger
from src.common.logging_slider_wrapper import create_logging_slider, LoggingColorButton

"""

    content = re.sub(import_pattern, r"\1" + new_imports, content)
    print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    return content


def add_event_logger_init(content: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é event_logger –≤ __init__"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ
    if "self.event_logger = get_event_logger()" in content:
        print("‚ÑπÔ∏è  event_logger —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return content

    # –ò—â–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é graphics_logger
    pattern = r'(self\.graphics_logger = get_graphics_logger\(\)\n\s+self\.logger\.info\("üìä Graphics logger initialized"\))'

    replacement = r"""\1

        # ‚úÖ –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º event logger
        self.event_logger = get_event_logger()
        self.logger.info("üîó Event logger initialized")"""

    content = re.sub(pattern, replacement, content)
    print("‚úÖ event_logger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return content


def wrap_labeled_slider(content: str) -> str:
    """–ó–∞–º–µ–Ω—è–µ—Ç LabeledSlider –Ω–∞ –≤–µ—Ä—Å–∏—é —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è LabeledSlider
    pattern = r"""(\w+)\s*=\s*LabeledSlider\(
        \s*"([^"]+)",\s*           # title
        ([\d.]+),\s*                # minimum
        ([\d.]+),\s*                # maximum
        ([\d.]+),\s*                # step
        (?:decimals=(\d+))?         # decimals (optional)
        (?:,?\s*unit="([^"]+)")?    # unit (optional)
        \s*\)"""

    def replace_slider(match):
        var_name = match.group(1)
        title = match.group(2)
        minimum = match.group(3)
        maximum = match.group(4)
        step = match.group(5)
        decimals = match.group(6) or "2"
        unit = match.group(7)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        widget_name = var_name.replace("_", ".")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—É
        replacement = f"""{var_name}_slider, {var_name}_logging = create_logging_slider(
            title="{title}",
            minimum={minimum},
            maximum={maximum},
            step={step},
            widget_name="{widget_name}",
            decimals={decimals}"""

        if unit:
            replacement += f',\n            unit="{unit}"'

        replacement += ",\n            parent=self\n        )"

        return replacement

    new_content = re.sub(pattern, replace_slider, content, flags=re.VERBOSE)

    if new_content != content:
        print("‚úÖ LabeledSlider'—ã –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –≤–µ—Ä—Å–∏—é —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")

    return new_content


def update_slider_connections(content: str) -> str:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–æ–≤"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ connect —Å LabeledSlider
    pattern = r'(\w+)\.valueChanged\.connect\(lambda v: self\._update_(\w+)\("(\w+)", "(\w+)", v\)\)'

    def replace_connection(match):
        var_name = match.group(1)
        update_func = match.group(2)
        group = match.group(3)
        key = match.group(4)

        # –ï—Å–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è logging –≤–µ—Ä—Å–∏—è
        if "_logging" in var_name:
            return match.group(0)

        # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ logging –≤–µ—Ä—Å–∏—é
        return f'{var_name}_logging.valueChanged.connect(lambda v: self._update_{update_func}("{group}", "{key}", v))'

    new_content = re.sub(pattern, replace_connection, content)

    if new_content != content:
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    return new_content


def update_control_storage(content: str) -> str:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—è—Ö"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ _controls
    pattern = r'self\._(\w+)_controls\["([^"]+)"\] = (\w+)'

    def replace_storage(match):
        category = match.group(1)
        key = match.group(2)
        var_name = match.group(3)

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è - —ç—Ç–æ slider —Å logging
        if "_slider" in var_name or "_logging" in var_name:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π —Å–ª–∞–π–¥–µ—Ä (–±–µ–∑ _logging)
            base_var = var_name.replace("_logging", "_slider")
            return f'self._{category}_controls["{key}"] = {base_var}'

        return match.group(0)

    new_content = re.sub(pattern, replace_storage, content)

    return new_content


def add_checkbox_wrappers(content: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç wrapper'—ã –¥–ª—è QCheckBox"""
    # –≠—Ç–æ —Å–ª–æ–∂–Ω–µ–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –≤—ã–≤–µ–¥–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä—É—á–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏
    checkbox_pattern = r'(\w+)\s*=\s*QCheckBox\("([^"]+)", self\)\s*\n\s*\1\.stateChanged\.connect\(lambda state: self\._update_(\w+)\("(\w+)", state == Qt\.Checked\)\)'

    checkboxes = re.findall(checkbox_pattern, content)

    if checkboxes:
        print("\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã QCheckBox, —Ç—Ä–µ–±—É—é—â–∏–µ —Ä—É—á–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏:")
        for var_name, text, update_func, key in checkboxes:
            print(f"   ‚Ä¢ {var_name} ('{text}')")

        print("\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω –∏–∑ FULL_UI_EVENT_LOGGING_GUIDE.md")

    return content


def main():
    """Main entry point"""
    panel_file = Path("src/ui/panels/panel_graphics.py")

    if not panel_file.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {panel_file}")
        return 1

    print("=" * 60)
    print("üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø EVENT LOGGING")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    backup_file(panel_file)

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    content = panel_file.read_text(encoding="utf-8")

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    content = add_imports(content)
    content = add_event_logger_init(content)
    content = wrap_labeled_slider(content)
    content = update_slider_connections(content)
    content = update_control_storage(content)
    content = add_checkbox_wrappers(content)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    panel_file.write_text(content, encoding="utf-8")

    print("\n" + "=" * 60)
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("=" * 60)

    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ panel_graphics.py")
    print("2. –í—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤—å—Ç–µ wrapper'—ã –¥–ª—è QCheckBox (—Å–º. —Å–ø–∏—Å–æ–∫ –≤—ã—à–µ)")
    print("3. –î–æ–±–∞–≤—å—Ç–µ MouseEventLogger –≤ main.qml")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ logs/events_*.json")

    return 0


if __name__ == "__main__":
    sys.exit(main())
