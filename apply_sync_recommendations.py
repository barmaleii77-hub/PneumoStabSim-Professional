# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ QML –∏ Python
–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
"""

import re
from pathlib import Path
from datetime import datetime

def backup_file(file_path):
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞"""
    backup_path = file_path.with_suffix(file_path.suffix + f'.backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}')
    with open(file_path, 'r', encoding='utf-8') as src:
        with open(backup_path, 'w', encoding='utf-8') as dst:
            dst.write(src.read())
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    return backup_path

def add_qml_properties(qml_file):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ QML —Ñ–∞–π–ª"""
    print(f"\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {qml_file}...")
    
    with open(qml_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ù–∞–π—Ç–∏ —Ä–∞–∑–¥–µ–ª COMPLETE GRAPHICS PROPERTIES
    pattern = r'(// ={60,}\s+// ‚úÖ COMPLETE GRAPHICS PROPERTIES.*?\s+// ={60,})'
    match = re.search(pattern, content, re.DOTALL)
    
    if not match:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª COMPLETE GRAPHICS PROPERTIES")
        return False
    
    # –°–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    new_properties = """
    // ===== –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ú–ê–¢–ï–†–ò–ê–õ–´ =====
    
    // Cylinder (–∫–æ—Ä–ø—É—Å —Ü–∏–ª–∏–Ω–¥—Ä–∞)
    property string cylinderColor: "#ffffff"
    property real cylinderMetalness: 0.0
    property real cylinderRoughness: 0.05
    
    // Piston body (–∫–æ—Ä–ø—É—Å –ø–æ—Ä—à–Ω—è)
    property string pistonBodyColor: "#ff0066"
    property string pistonBodyWarningColor: "#ff4444"
    property real pistonBodyMetalness: 1.0
    property real pistonBodyRoughness: 0.28
    
    // Piston rod (—à—Ç–æ–∫ –ø–æ—Ä—à–Ω—è)
    property string pistonRodColor: "#cccccc"
    property string pistonRodWarningColor: "#ff0000"
    property real pistonRodMetalness: 1.0
    property real pistonRodRoughness: 0.28
    
    // Joints (—à–∞—Ä–Ω–∏—Ä—ã)
    property string jointTailColor: "#0088ff"
    property string jointArmColor: "#ff8800"
    property string jointRodOkColor: "#00ff44"
    property string jointRodErrorColor: "#ff0000"
    property real jointMetalness: 0.9
    property real jointRoughness: 0.35
    
    // Frame advanced (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–º—ã)
    property string frameColor: "#cc0000"
    property real frameClearcoat: 0.1
    property real frameClearcoatRoughness: 0.2
    
    // Lever advanced (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä—ã—á–∞–≥–æ–≤)
    property string leverColor: "#888888"
    property real leverClearcoat: 0.25
    property real leverClearcoatRoughness: 0.1
    
    // Tail rod (—Ö–≤–æ—Å—Ç–æ–≤–æ–π —à—Ç–æ–∫)
    property string tailColor: "#cccccc"
    property real tailMetalness: 1.0
    property real tailRoughness: 0.3
    
    // ===== –†–ê–°–®–ò–†–ï–ù–ù–û–ï –û–°–í–ï–©–ï–ù–ò–ï =====
    property real rimBrightness: 1.5
    property string rimColor: "#ffffcc"
    property string pointColor: "#ffffff"
    property real pointFade: 0.00008
    
    // ===== IBL –†–ê–°–®–ò–†–ï–ù–ù–´–ï =====
    property string iblSource: "../hdr/studio.hdr"
    property string iblFallback: "assets/studio_small_09_2k.hdr"
"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏ —É–∂–µ —ç—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–∞
    if 'property string cylinderColor' in content:
        print("‚ö†Ô∏è –°–≤–æ–π—Å—Ç–≤–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return True
    
    # –ù–∞–π—Ç–∏ –∫–æ–Ω–µ—Ü —Ä–∞–∑–¥–µ–ª–∞ —Å–≤–æ–π—Å—Ç–≤ (–ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–µ–π)
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ property –≤ —Ä–∞–∑–¥–µ–ª–µ
    insert_position = content.find('// ===============================================================', match.end())
    
    if insert_position == -1:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏")
        return False
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    updated_content = content[:insert_position] + new_properties + "\n    " + content[insert_position:]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(qml_file, 'w', encoding='utf-8') as f:
        f.write(updated_content)
    
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {new_properties.count('property')} –Ω–æ–≤—ã—Ö —Å–≤–æ–π—Å—Ç–≤")
    return True

def update_qml_material_function(qml_file):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é applyMaterialUpdates –≤ QML"""
    print(f"\nüîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ applyMaterialUpdates()...")
    
    with open(qml_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ù–∞–π—Ç–∏ —Ñ—É–Ω–∫—Ü–∏—é applyMaterialUpdates
    pattern = r'(function applyMaterialUpdates\(params\) \{.*?)(console\.log\("  ‚úÖ Materials updated.*?\"\))'
    match = re.search(pattern, content, re.DOTALL)
    
    if not match:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è applyMaterialUpdates")
        return False
    
    # –ù–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    new_code = """
        
        // ‚úÖ –ù–û–í–û–ï: Frame advanced
        if (params.frame !== undefined) {
            if (params.frame.color !== undefined) frameColor = params.frame.color
            if (params.frame.metalness !== undefined) frameMetalness = params.frame.metalness
            if (params.frame.roughness !== undefined) frameRoughness = params.frame.roughness
            if (params.frame.clearcoat !== undefined) frameClearcoat = params.frame.clearcoat
            if (params.frame.clearcoat_roughness !== undefined) frameClearcoatRoughness = params.frame.clearcoat_roughness
        }
        
        // ‚úÖ –ù–û–í–û–ï: Lever advanced
        if (params.lever !== undefined) {
            if (params.lever.color !== undefined) leverColor = params.lever.color
            if (params.lever.metalness !== undefined) leverMetalness = params.lever.metalness
            if (params.lever.roughness !== undefined) leverRoughness = params.lever.roughness
            if (params.lever.clearcoat !== undefined) leverClearcoat = params.lever.clearcoat
            if (params.lever.clearcoat_roughness !== undefined) leverClearcoatRoughness = params.lever.clearcoat_roughness
        }
        
        // ‚úÖ –ù–û–í–û–ï: Tail rod
        if (params.tail !== undefined) {
            if (params.tail.color !== undefined) tailColor = params.tail.color
            if (params.tail.metalness !== undefined) tailMetalness = params.tail.metalness
            if (params.tail.roughness !== undefined) tailRoughness = params.tail.roughness
        }
        
        // ‚úÖ –ù–û–í–û–ï: Cylinder
        if (params.cylinder !== undefined) {
            if (params.cylinder.color !== undefined) cylinderColor = params.cylinder.color
            if (params.cylinder.metalness !== undefined) cylinderMetalness = params.cylinder.metalness
            if (params.cylinder.roughness !== undefined) cylinderRoughness = params.cylinder.roughness
        }
        
        // ‚úÖ –ù–û–í–û–ï: Piston body
        if (params.piston_body !== undefined) {
            if (params.piston_body.color !== undefined) pistonBodyColor = params.piston_body.color
            if (params.piston_body.warning_color !== undefined) pistonBodyWarningColor = params.piston_body.warning_color
            if (params.piston_body.metalness !== undefined) pistonBodyMetalness = params.piston_body.metalness
            if (params.piston_body.roughness !== undefined) pistonBodyRoughness = params.piston_body.roughness
        }
        
        // ‚úÖ –ù–û–í–û–ï: Piston rod
        if (params.piston_rod !== undefined) {
            if (params.piston_rod.color !== undefined) pistonRodColor = params.piston_rod.color
            if (params.piston_rod.warning_color !== undefined) pistonRodWarningColor = params.piston_rod.warning_color
            if (params.piston_rod.metalness !== undefined) pistonRodMetalness = params.piston_rod.metalness
            if (params.piston_rod.roughness !== undefined) pistonRodRoughness = params.piston_rod.roughness
        }
        
        // ‚úÖ –ù–û–í–û–ï: Joints
        if (params.joint !== undefined) {
            if (params.joint.tail_color !== undefined) jointTailColor = params.joint.tail_color
            if (params.joint.arm_color !== undefined) jointArmColor = params.joint.arm_color
            if (params.joint.rod_ok_color !== undefined) jointRodOkColor = params.joint.rod_ok_color
            if (params.joint.rod_error_color !== undefined) jointRodErrorColor = params.joint.rod_error_color
            if (params.joint.metalness !== undefined) jointMetalness = params.joint.metalness
            if (params.joint.roughness !== undefined) jointRoughness = params.joint.roughness
        }
        
        """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–æ–¥
    if 'params.cylinder' in content:
        print("‚ö†Ô∏è –ö–æ–¥ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return True
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    updated_content = content[:match.start(2)] + new_code + "\n        " + content[match.start(2):]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    updated_content = updated_content.replace(
        'console.log("  ‚úÖ Materials updated successfully (including IOR)")',
        'console.log("  ‚úÖ Materials updated successfully (COMPLETE with all colors)")'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(qml_file, 'w', encoding='utf-8') as f:
        f.write(updated_content)
    
    print("‚úÖ –§—É–Ω–∫—Ü–∏—è applyMaterialUpdates() –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    return True

def update_qml_lighting_function(qml_file):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é applyLightingUpdates –≤ QML"""
    print(f"\nüí° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ applyLightingUpdates()...")
    
    with open(qml_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ù–∞–π—Ç–∏ —Ñ—É–Ω–∫—Ü–∏—é applyLightingUpdates
    pattern = r'(function applyLightingUpdates\(params\) \{.*?)(console\.log\("  ‚úÖ Lighting updated.*?\"\))'
    match = re.search(pattern, content, re.DOTALL)
    
    if not match:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è applyLightingUpdates")
        return False
    
    # –ù–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    new_code = """
        
        // ‚úÖ –ù–û–í–û–ï: Rim light
        if (params.rim_light) {
            if (params.rim_light.brightness !== undefined) rimBrightness = params.rim_light.brightness
            if (params.rim_light.color !== undefined) rimColor = params.rim_light.color
        }
        
        // ‚úÖ –†–ê–°–®–ò–†–ï–ù–ù–û–ï: Point light
        if (params.point_light) {
            if (params.point_light.brightness !== undefined) pointLightBrightness = params.point_light.brightness
            if (params.point_light.color !== undefined) pointColor = params.point_light.color
            if (params.point_light.position_y !== undefined) pointLightY = params.point_light.position_y
            if (params.point_light.fade !== undefined) pointFade = params.point_light.fade
        }
        """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–æ–¥
    if 'params.rim_light' in content:
        print("‚ö†Ô∏è –ö–æ–¥ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return True
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    updated_content = content[:match.start(2)] + new_code + "\n        " + content[match.start(2):]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    updated_content = updated_content.replace(
        'console.log("  ‚úÖ Lighting updated successfully")',
        'console.log("  ‚úÖ Lighting updated successfully (COMPLETE)")'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(qml_file, 'w', encoding='utf-8') as f:
        f.write(updated_content)
    
    print("‚úÖ –§—É–Ω–∫—Ü–∏—è applyLightingUpdates() –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    return True

def update_python_material_emit(py_file):
    """–û–±–Ω–æ–≤–∏—Ç—å emit_material_update –≤ Python"""
    print(f"\nüêç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ emit_material_update()...")
    
    with open(py_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ù–∞–π—Ç–∏ —Ñ—É–Ω–∫—Ü–∏—é emit_material_update
    pattern = r'(def emit_material_update\(self\):.*?)(self\.logger\.info.*?self\.material_changed\.emit\(material_params\))'
    match = re.search(pattern, content, re.DOTALL)
    
    if not match:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è emit_material_update")
        return False
    
    # –ù–æ–≤—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
    new_function_body = '''"""–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–ü–û–õ–ù–´–ô –ù–ê–ë–û–†)"""
        material_params = {
            # Metal (–æ–±—â–∏–µ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏)
            'metal': {
                'roughness': self.current_graphics['metal_roughness'],
                'metalness': self.current_graphics['metal_metalness'],
                'clearcoat': self.current_graphics['metal_clearcoat'],
            },
            
            # Glass (—Å—Ç–µ–∫–ª—è–Ω–Ω—ã–µ —á–∞—Å—Ç–∏)
            'glass': {
                'opacity': self.current_graphics['glass_opacity'],
                'roughness': self.current_graphics['glass_roughness'],
                'ior': self.current_graphics['glass_ior'],
            },
            
            # Frame (—Ä–∞–º–∞)
            'frame': {
                'color': self.current_graphics['frame_color'],
                'metalness': self.current_graphics['frame_metalness'],
                'roughness': self.current_graphics['frame_roughness'],
                'clearcoat': self.current_graphics['frame_clearcoat'],
                'clearcoat_roughness': self.current_graphics['frame_clearcoat_roughness'],
            },
            
            # Lever (—Ä—ã—á–∞–≥–∏)
            'lever': {
                'color': self.current_graphics['lever_color'],
                'metalness': self.current_graphics['lever_metalness'],
                'roughness': self.current_graphics['lever_roughness'],
                'clearcoat': self.current_graphics['lever_clearcoat'],
                'clearcoat_roughness': self.current_graphics['lever_clearcoat_roughness'],
            },
            
            # Tail (—Ö–≤–æ—Å—Ç–æ–≤–æ–π —à—Ç–æ–∫)
            'tail': {
                'color': self.current_graphics['tail_color'],
                'metalness': self.current_graphics['tail_metalness'],
                'roughness': self.current_graphics['tail_roughness'],
            },
            
            # Cylinder (–∫–æ—Ä–ø—É—Å —Ü–∏–ª–∏–Ω–¥—Ä–∞)
            'cylinder': {
                'color': self.current_graphics['cylinder_color'],
                'metalness': self.current_graphics['cylinder_metalness'],
                'roughness': self.current_graphics['cylinder_roughness'],
            },
            
            # Piston body (–∫–æ—Ä–ø—É—Å –ø–æ—Ä—à–Ω—è)
            'piston_body': {
                'color': self.current_graphics['piston_body_color'],
                'warning_color': self.current_graphics['piston_body_warning_color'],
                'metalness': self.current_graphics['piston_body_metalness'],
                'roughness': self.current_graphics['piston_body_roughness'],
            },
            
            # Piston rod (—à—Ç–æ–∫ –ø–æ—Ä—à–Ω—è)
            'piston_rod': {
                'color': self.current_graphics['piston_rod_color'],
                'warning_color': self.current_graphics['piston_rod_warning_color'],
                'metalness': self.current_graphics['piston_rod_metalness'],
                'roughness': self.current_graphics['piston_rod_roughness'],
            },
            
            # Joints (—à–∞—Ä–Ω–∏—Ä—ã)
            'joint': {
                'tail_color': self.current_graphics['joint_tail_color'],
                'arm_color': self.current_graphics['joint_arm_color'],
                'rod_ok_color': self.current_graphics['joint_rod_ok_color'],
                'rod_error_color': self.current_graphics['joint_rod_error_color'],
                'metalness': self.current_graphics['joint_metalness'],
                'roughness': self.current_graphics['joint_roughness'],
            },
        }
        
        '''
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —Ñ—É–Ω–∫—Ü–∏—è
    if "'cylinder':" in content and 'emit_material_update' in content:
        print("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return True
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
    updated_content = content.replace(match.group(0), 
        f"def emit_material_update(self):\n        {new_function_body}" +
        f"self.logger.info(f\"Materials updated (COMPLETE): {{len(material_params)}} groups\")\n        " +
        "self.material_changed.emit(material_params)")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(py_file, 'w', encoding='utf-8') as f:
        f.write(updated_content)
    
    print("‚úÖ –§—É–Ω–∫—Ü–∏—è emit_material_update() –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 80)
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô –ü–û –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò QML –ò PYTHON")
    print("=" * 80)
    
    qml_file = Path('assets/qml/main_optimized.qml')
    py_file = Path('src/ui/panels/panel_graphics.py')
    
    if not qml_file.exists():
        print(f"‚ùå QML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {qml_file}")
        return
    
    if not py_file.exists():
        print(f"‚ùå Python —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {py_file}")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    print("\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")
    qml_backup = backup_file(qml_file)
    py_backup = backup_file(py_file)
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º QML
        success_qml_props = add_qml_properties(qml_file)
        success_qml_materials = update_qml_material_function(qml_file)
        success_qml_lighting = update_qml_lighting_function(qml_file)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º Python
        success_py_materials = update_python_material_emit(py_file)
        
        print("\n" + "=" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("=" * 80)
        print(f"{'‚úÖ' if success_qml_props else '‚ùå'} –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ –≤ QML")
        print(f"{'‚úÖ' if success_qml_materials else '‚ùå'} –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ applyMaterialUpdates() –≤ QML")
        print(f"{'‚úÖ' if success_qml_lighting else '‚ùå'} –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ applyLightingUpdates() –≤ QML")
        print(f"{'‚úÖ' if success_py_materials else '‚ùå'} –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ emit_material_update() –≤ Python")
        
        all_success = all([success_qml_props, success_qml_materials, success_qml_lighting, success_py_materials])
        
        if all_success:
            print("\n‚úÖ –í–°–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print(f"\nüí° –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
            print(f"   - {qml_backup}")
            print(f"   - {py_backup}")
            print(f"\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
            print(f"   py app.py --force-optimized")
        else:
            print("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ù–ï –ü–†–ò–ú–ï–ù–ï–ù–´")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –≤—Ä—É—á–Ω—É—é")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        print(f"\n‚Ü©Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–æ–≤
        import shutil
        shutil.copy(qml_backup, qml_file)
        shutil.copy(py_backup, py_file)
        
        print("‚úÖ –§–∞–π–ª—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
    
    print("\n" + "=" * 80)

if __name__ == '__main__':
    main()
