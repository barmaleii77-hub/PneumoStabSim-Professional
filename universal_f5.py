#!/usr/bin/env python3
"""
Universal F5 Launcher –¥–ª—è PneumoStabSim Professional
–†–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –ª—é–±–æ–π IDE —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π F5
"""
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "src"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ.setdefault("PYTHONPATH", f"{project_root};{project_root / 'src'}")
os.environ.setdefault("QT_SCALE_FACTOR_ROUNDING_POLICY", "PassThrough")
os.environ.setdefault("QT_AUTO_SCREEN_SCALE_FACTOR", "1")
os.environ.setdefault("QT_ENABLE_HIGHDPI_SCALING", "1")


def main():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è F5 –∑–∞–ø—É—Å–∫–∞"""

    # –ò–º–ø–æ—Ä—Ç F5 launcher
    try:
        from f5_launch import F5LaunchConfig
    except ImportError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å F5LaunchConfig")
        print("üîß –ó–∞–ø—É—Å–∫–∞–µ–º setup_dev.py –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

        import subprocess

        subprocess.run([sys.executable, "setup_dev.py"], cwd=project_root)

        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
        try:
            from f5_launch import F5LaunchConfig
        except ImportError:
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
            return 1

    # –°–æ–∑–¥–∞–Ω–∏–µ launcher instance
    launcher = F5LaunchConfig()

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞
    if "--debug" in sys.argv or "-d" in sys.argv:
        print("üêõ Universal F5: –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏...")
        process = launcher.launch_debug_mode()
    elif "--safe-mode" in sys.argv or "-s" in sys.argv:
        print("üõ°Ô∏è Universal F5: –ó–∞–ø—É—Å–∫ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
        # Safe mode - —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å —Ñ–ª–∞–≥–æ–º --safe-mode
        if not launcher.setup_environment():
            return 1

        python_exe = launcher.venv_path / (
            "Scripts/python.exe" if os.name == "nt" else "bin/python"
        )
        app_path = launcher.project_root / "app.py"

        import subprocess

        try:
            process = subprocess.Popen(
                [str(python_exe), str(app_path), "--safe-mode"],
                cwd=launcher.project_root,
                env=os.environ.copy(),
            )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            return 1
    elif "--performance" in sys.argv or "-p" in sys.argv:
        print("‚ö° Universal F5: –ó–∞–ø—É—Å–∫ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        if not launcher.setup_environment():
            return 1

        python_exe = launcher.venv_path / (
            "Scripts/python.exe" if os.name == "nt" else "bin/python"
        )
        app_path = launcher.project_root / "app.py"

        import subprocess

        try:
            process = subprocess.Popen(
                [str(python_exe), str(app_path), "--monitor-perf"],
                cwd=launcher.project_root,
                env=os.environ.copy(),
            )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            return 1
    else:
        print("üöÄ Universal F5: –ó–∞–ø—É—Å–∫ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
        process = launcher.launch_normal_mode()

    if not process:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        return 1

    try:
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        return_code = process.wait()
        print(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –∫–æ–¥–æ–º: {return_code}")
        return return_code
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
        process.terminate()
        try:
            process.wait(timeout=5)
        except subprocess.TimeoutExpired:
            process.kill()
        return 0


if __name__ == "__main__":
    sys.exit(main())
