#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""
import sys
import subprocess
import importlib
from pathlib import Path

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    version = sys.version_info
    print(f"Python –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 13):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.13+")
        return False
    else:
        print("‚úÖ –í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥–∏—Ç")
        return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    required_packages = {
        'PySide6': '6.9.0',
        'numpy': '2.0.0',
        'scipy': '1.10.0',
        'matplotlib': '3.5.0'
    }
    
    all_ok = True
    
    for package, min_version in required_packages.items():
        try:
            module = importlib.import_module(package.lower().replace('-', '_'))
            version = getattr(module, '__version__', 'unknown')
            print(f"‚úÖ {package}: {version}")
        except ImportError:
            print(f"‚ùå {package} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            all_ok = False
    
    return all_ok

def check_project_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
    required_dirs = [
        'src', 'src/ui', 'src/core', 'tests', 'assets', 
        'docs', 'config', 'scripts'
    ]
    
    required_files = [
        'app.py', 'requirements.txt', '.editorconfig', 
        '.gitignore', 'README.md'
    ]
    
    all_ok = True
    
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:")
    for dir_path in required_dirs:
        if Path(dir_path).exists():
            print(f"‚úÖ {dir_path}/")
        else:
            print(f"‚ùå {dir_path}/ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            all_ok = False
    
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:")
    for file_path in required_files:
        if Path(file_path).exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            all_ok = False
    
    return all_ok

def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        subprocess.run(['git', 'status'], 
                      capture_output=True, check=True, text=True)
        print("‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        result = subprocess.run(['git', 'remote', '-v'], 
                               capture_output=True, text=True)
        if result.stdout:
            print("‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("=== –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ü–†–û–ï–ö–¢–ê ===\n")
    
    checks = [
        ("Python –≤–µ—Ä—Å–∏—è", check_python_version),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_dependencies), 
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞", check_project_structure),
        ("Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π", check_git_status)
    ]
    
    results = {}
    
    for name, check_func in checks:
        print(f"\n--- {name} ---")
        results[name] = check_func()
    
    print("\n=== –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
    
    all_passed = all(results.values())
    
    for name, passed in results.items():
        status = "‚úÖ –ü–†–û–®–õ–ê" if passed else "‚ùå –ü–†–û–í–ê–õ–ï–ù–ê"
        print(f"{name}: {status}")
    
    if all_passed:
        print(f"\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        return 0
    else:
        print(f"\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
