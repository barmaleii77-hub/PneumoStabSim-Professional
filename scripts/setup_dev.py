#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ PneumoStabSim
"""
import sys
import subprocess
import platform
from pathlib import Path


def run_command(cmd, description=""):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    if description:
        print(f"‚û§ {description}...")

    try:
        result = subprocess.run(
            cmd, shell=True, capture_output=True, text=True, check=True
        )
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        if e.stdout:
            print(f"–í—ã–≤–æ–¥: {e.stdout}")
        if e.stderr:
            print(f"–û—à–∏–±–∫–∞: {e.stderr}")
        return False


def check_prerequisites():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
    print("=== –ü–†–û–í–ï–†–ö–ê –ü–†–ï–î–£–°–¢–ê–ù–û–í–û–ö ===")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    version = sys.version_info
    print(f"Python –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")

    if version.major < 3 or (version.major == 3 and version.minor < 13):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.13+")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º pip
    if not run_command("pip --version", "–ü—Ä–æ–≤–µ—Ä–∫–∞ pip"):
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º git
    if not run_command("git --version", "–ü—Ä–æ–≤–µ—Ä–∫–∞ git"):
        return False

    return True


def create_virtual_environment():
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    print("\n=== –°–û–ó–î–ê–ù–ò–ï –í–ò–†–¢–£–ê–õ–¨–ù–û–ì–û –û–ö–†–£–ñ–ï–ù–ò–Ø ===")

    venv_path = Path(".venv")

    if venv_path.exists():
        print("‚ö†Ô∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True

    if not run_command("python -m venv .venv", "–°–æ–∑–¥–∞–Ω–∏–µ .venv"):
        return False

    return True


def activate_and_install():
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\n=== –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô ===")

    # –ö–æ–º–∞–Ω–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
    system = platform.system()

    if system == "Windows":
        activate_cmd = r".venv\Scripts\activate.bat &&"
    else:
        activate_cmd = "source .venv/bin/activate &&"

    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    if not run_command(f"{activate_cmd} pip install --upgrade pip", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip"):
        return False

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not run_command(
        f"{activate_cmd} pip install -r requirements.txt",
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
    ):
        return False

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    dev_packages = [
        "pytest>=7.0.0",
        "pytest-qt>=4.0.0",
        "pytest-cov>=4.0.0",
        "black>=22.0.0",
        "flake8>=5.0.0",
        "mypy>=1.0.0",
    ]

    dev_cmd = f"{activate_cmd} pip install " + " ".join(dev_packages)
    if not run_command(dev_cmd, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"):
        return False

    return True


def setup_git_hooks():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Git hooks"""
    print("\n=== –ù–ê–°–¢–†–û–ô–ö–ê GIT HOOKS ===")

    hooks_dir = Path(".git/hooks")
    if not hooks_dir.exists():
        print("‚ö†Ô∏è .git/hooks –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ö—É–∫–æ–≤")
        return True

    # –°–æ–∑–¥–∞–µ–º pre-commit hook –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
    pre_commit_hook = hooks_dir / "pre-commit"
    hook_content = """#!/bin/bash
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º

echo "–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞..."

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å Black
black src/ tests/ scripts/ --check --diff
if [ $? -ne 0 ]; then
    echo "–ö–æ–¥ –Ω–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: black src/ tests/ scripts/"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å flake8
flake8 src/ tests/ scripts/
if [ $? -ne 0 ]; then
    echo "–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º –∫–æ–¥–∞"
    exit 1
fi

echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!"
"""

    try:
        pre_commit_hook.write_text(hook_content)
        pre_commit_hook.chmod(0o755)  # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        print("‚úÖ Git pre-commit hook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è git hook: {e}")
        return False


def setup_ide_config():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è IDE"""
    print("\n=== –ù–ê–°–¢–†–û–ô–ö–ê IDE ===")

    # VS Code settings
    vscode_dir = Path(".vscode")
    vscode_dir.mkdir(exist_ok=True)

    # settings.json –¥–ª—è VS Code
    vscode_settings = {
        "python.defaultInterpreterPath": (
            "./.venv/Scripts/python.exe"
            if platform.system() == "Windows"
            else "./.venv/bin/python"
        ),
        "python.formatting.provider": "black",
        "python.linting.enabled": True,
        "python.linting.flake8Enabled": True,
        "python.testing.pytestEnabled": True,
        "python.testing.pytestArgs": ["tests/"],
        "files.associations": {"*.qml": "qml"},
        "editor.formatOnSave": True,
        "editor.codeActionsOnSave": {"source.organizeImports": True},
    }

    try:
        import json

        (vscode_dir / "settings.json").write_text(json.dumps(vscode_settings, indent=2))
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VS Code —Å–æ–∑–¥–∞–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VS Code: {e}")
        return False


def final_check():
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("\n=== –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ===")

    # –ó–∞–ø—É—Å–∫–∞–µ–º health_check
    if Path("scripts/health_check.py").exists():
        system = platform.system()
        if system == "Windows":
            cmd = r".venv\Scripts\python.exe scripts\health_check.py"
        else:
            cmd = ".venv/bin/python scripts/health_check.py"

        return run_command(cmd, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
    else:
        print("‚ö†Ô∏è scripts/health_check.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –°–†–ï–î–´ –†–ê–ó–†–ê–ë–û–¢–ö–ò PNEUMOSTABSIM üöÄ\n")

    steps = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–æ–∫", check_prerequisites),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è", create_virtual_environment),
        ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", activate_and_install),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git hooks", setup_git_hooks),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ IDE", setup_ide_config),
        ("–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", final_check),
    ]

    for step_name, step_func in steps:
        print(f"\n{'='*50}")
        print(f"–≠–¢–ê–ü: {step_name}")
        print("=" * 50)

        if not step_func():
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –ù–ê –≠–¢–ê–ü–ï: {step_name}")
            print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return 1

    print(f"\n{'='*60}")
    print("üéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("='*60")
    print("\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:")
    print("1. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ:")
    if platform.system() == "Windows":
        print("   .venv\\Scripts\\activate.bat")
    else:
        print("   source .venv/bin/activate")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python app.py")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã: pytest tests/ -v")
    print("4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ–µ–∫—Ç–∞: python scripts/health_check.py")

    return 0


if __name__ == "__main__":
    sys.exit(main())
