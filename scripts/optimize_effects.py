#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Qt –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
"""

import sys
from pathlib import Path


def check_pyside_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é PySide6 –∏ —Å–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""

    print("=" * 60)
    print("PYSIDE6 VERSION CHECK & EFFECTS OPTIMIZER")
    print("=" * 60)

    try:
        import PySide6
        from PySide6.QtCore import qVersion

        pyside_version = PySide6.__version__
        qt_version = qVersion()

        print(f"‚úÖ PySide6 version: {pyside_version}")
        print(f"‚úÖ Qt version: {qt_version}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä—Å–∏–∏ Qt
        major, minor = map(int, qt_version.split(".")[:2])
        qt_version_num = major * 100 + minor  # 6.5 -> 605, 6.7 -> 607

        print(f"üìä Qt version number: {qt_version_num}")

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π Qt
        effects_config = {
            605: {  # Qt 6.5
                "available": ["BloomEffect"],
                "description": "–ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤",
            },
            606: {  # Qt 6.6
                "available": ["BloomEffect", "SSAOEffect"],
                "description": "–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ SSAO",
            },
            607: {  # Qt 6.7+
                "available": [
                    "BloomEffect",
                    "SSAOEffect",
                    "TonemappingEffect",
                    "DepthOfFieldEffect",
                ],
                "description": "–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤",
            },
        }

        # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = None
        for version_threshold in sorted(effects_config.keys(), reverse=True):
            if qt_version_num >= version_threshold:
                config = effects_config[version_threshold]
                break

        if not config:
            config = {"available": [], "description": "–≠—Ñ—Ñ–µ–∫—Ç—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è"}

        print(f"üé® {config['description']}")
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã: {len(config['available'])}")

        for effect in config["available"]:
            print(f"   ‚Ä¢ {effect}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QML –∫–æ–¥
        qml_code = generate_effects_qml(config["available"])

        print("\nüìù –û–ü–¢–ò–ú–ê–õ–¨–ù–ê–Ø QML –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
        print("-" * 60)
        print(qml_code)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª
        config_file = Path("assets/qml/effects_config_optimized.qml")
        config_file.write_text(qml_code, encoding="utf-8")
        print(f"\nüíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {config_file}")

        return config["available"]

    except ImportError as e:
        print(f"‚ùå PySide6 –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        return []
    except Exception as e:
        print(f"üíÄ –û—à–∏–±–∫–∞: {e}")
        return []


def generate_effects_qml(available_effects):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π QML –∫–æ–¥ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""

    if not available_effects:
        return "        // –≠—Ñ—Ñ–µ–∫—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ Qt\n        effects: []"

    effects_code = []
    effects_code.append("        // --- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ü–û–°–¢-–≠–§–§–ï–ö–¢–´ ---")
    effects_code.append("        effects: [")

    for i, effect in enumerate(available_effects):
        comma = "," if i < len(available_effects) - 1 else ""

        if effect == "BloomEffect":
            effects_code.extend(
                [
                    "            BloomEffect {",
                    "                id: bloom",
                    "                enabled: root.bloomEnabled",
                    "                threshold: root.bloomThreshold || 0.7",
                    "                strength: root.bloomIntensity || 0.3",
                    f"            }}{comma}",
                ]
            )
        elif effect == "SSAOEffect":
            effects_code.extend(
                [
                    "            SSAOEffect {",
                    "                id: ssao",
                    "                enabled: root.ssaoEnabled",
                    "                radius: root.ssaoRadius || 2.0",
                    "                strength: root.ssaoIntensity || 0.5",
                    f"            }}{comma}",
                ]
            )
        elif effect == "TonemappingEffect":
            effects_code.extend(
                [
                    "            TonemappingEffect {",
                    "                id: tonemap",
                    "                enabled: root.tonemapEnabled",
                    "                mode: [",
                    "                    TonemappingEffect.Mode.None,",
                    "                    TonemappingEffect.Mode.Linear,",
                    "                    TonemappingEffect.Mode.Reinhard,",
                    "                    TonemappingEffect.Mode.Filmic",
                    "                ][root.tonemapMode || 2]",
                    f"            }}{comma}",
                ]
            )
        elif effect == "DepthOfFieldEffect":
            effects_code.extend(
                [
                    "            DepthOfFieldEffect {",
                    "                id: dof",
                    "                enabled: root.depthOfFieldEnabled || false",
                    "                focusDistance: root.dofFocusDistance || 2000",
                    "                focusRange: root.dofFocusRange || 1000",
                    f"            }}{comma}",
                ]
            )
        else:
            # –û–±—â–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            effects_code.extend(
                [
                    f"            {effect} {{",
                    "                enabled: true",
                    f"            }}{comma}",
                ]
            )

    effects_code.append("        ]")

    return "\n".join(effects_code)


if __name__ == "__main__":
    try:
        print("üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Qt –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã...")
        available = check_pyside_version()

        print("\n" + "=" * 60)
        print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("=" * 60)

        if available:
            print("‚úÖ –≠—Ñ—Ñ–µ–∫—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:")
            print("   1. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –≤ main_v2_realism.qml")
            print("   2. –ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ effects: [...]")
            print("   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        else:
            print("‚ö†Ô∏è –≠—Ñ—Ñ–µ–∫—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:")
            print("   1. –û–±–Ω–æ–≤–∏—Ç—å PySide6: pip install --upgrade PySide6")
            print("   2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å effects: [] –≤ QML")
            print("   3. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –æ—Å–≤–µ—â–µ–Ω–∏–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö")

        print("\nüé® –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∞–ª–∏–∑–º–∞ –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ:")
        print("   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ PBR-–æ—Å–≤–µ—â–µ–Ω–∏–µ (—É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)")
        print("   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (—É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)")
        print("   ‚Ä¢ HDR –æ–∫—Ä—É–∂–µ–Ω–∏–µ (—É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)")
        print("   ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç—ã ‚Äî —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –∞ –Ω–µ –æ—Å–Ω–æ–≤–∞")

    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüíÄ –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)
