#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–∏–≥—Ä–∞—Ü–∏—è defaults.py ‚Üí app_settings.json
–ü–µ—Ä–µ–Ω–æ—Å–∏–º –í–°–ï 244 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–∑ –∫–æ–¥–∞ –≤ JSON —Ñ–∞–π–ª
"""

import json
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))

from src.ui.panels.graphics.defaults import build_defaults, build_quality_presets


def migrate_defaults_to_json():
    """
    –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å defaults.py ‚Üí config/app_settings.json

    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:
    {
        "current": { ... —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ...},
        "defaults_snapshot": { ... —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã ... },
        "metadata": { "version", "last_modified", ... }
    }
    """

    print("=" * 60)
    print("üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –î–ï–§–û–õ–¢–û–í: defaults.py ‚Üí app_settings.json")
    print("=" * 60)

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings_file = Path("config/app_settings.json")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    if settings_file.exists():
        print(f"\nüìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: {settings_file}")
        with open(settings_file, "r", encoding="utf-8") as f:
            settings = json.load(f)
    else:
        print(f"\nüìÅ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {settings_file}")
        settings = {"current": {}, "defaults_snapshot": {}, "metadata": {}}

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–µ—Ñ–æ–ª—Ç—ã –∏–∑ defaults.py
    print("\n‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ñ–æ–ª—Ç—ã –∏–∑ defaults.py...")
    graphics_defaults = build_defaults()
    quality_presets = build_quality_presets()

    print(f"   ‚úÖ graphics: {count_parameters(graphics_defaults)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print(f"   ‚úÖ quality_presets: {len(quality_presets)} –ø—Ä–µ—Å–µ—Ç–æ–≤")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    print("\nüìù –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É app_settings.json...")

    # Current settings
    if "current" not in settings:
        settings["current"] = {}

    settings["current"]["graphics"] = graphics_defaults
    settings["current"]["quality_presets"] = quality_presets

    # Defaults snapshot (–∫–æ–ø–∏—è current)
    settings["defaults_snapshot"] = {
        "graphics": graphics_defaults,
        "quality_presets": quality_presets,
    }

    # Metadata
    settings["metadata"] = {
        "version": "4.9.5",
        "last_modified": datetime.now().isoformat(),
        "migrated_from": "src/ui/panels/graphics/defaults.py",
        "migration_date": datetime.now().strftime("%Y-%m-%d"),
        "total_parameters": count_parameters(graphics_defaults),
        "description": "Unified settings file - single source of truth",
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ {settings_file}...")
    with open(settings_file, "w", encoding="utf-8") as f:
        json.dump(settings, f, indent=2, ensure_ascii=False)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    file_size = settings_file.stat().st_size

    print("\n" + "=" * 60)
    print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 60)
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {count_parameters(graphics_defaults)}")
    print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:,} –±–∞–π—Ç ({file_size / 1024:.1f} KB)")
    print(f"   –§–∞–π–ª: {settings_file.absolute()}")

    print("\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print(f"   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ {settings_file}")
    print(
        "   2. –û–±–Ω–æ–≤–∏—Ç–µ panel_graphics_refactored.py –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SettingsManager"
    )
    print("   3. –£–¥–∞–ª–∏—Ç–µ src/ui/panels/graphics/defaults.py")

    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")


def count_parameters(obj):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–¥—Å—á—ë—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ"""
    count = 0
    if isinstance(obj, dict):
        for key, value in obj.items():
            if isinstance(value, dict):
                count += count_parameters(value)
            else:
                count += 1
    return count


if __name__ == "__main__":
    try:
        migrate_defaults_to_json()
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)
