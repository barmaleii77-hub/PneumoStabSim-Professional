#!/usr/bin/env python3
"""
F5 IDE Setup - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ F5 –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö IDE
"""

import json
from pathlib import Path


class F5SetupManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ F5 –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö IDE"""

    def __init__(self):
        self.project_root = Path(__file__).parent

    def setup_all_ides(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö IDE"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ F5 –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –≤—Å–µ—Ö IDE...")

        results = {
            "VS Code": self.setup_vscode(),
            "Visual Studio": self.setup_visual_studio(),
            "PyCharm": self.setup_pycharm(),
            "Sublime Text": self.setup_sublime(),
            "Atom": self.setup_atom(),
        }

        print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        for ide, success in results.items():
            status = "‚úÖ" if success else "‚ùå"
            print(f"  {status} {ide}")

        return results

    def setup_vscode(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ VS Code (—É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)"""
        vscode_dir = self.project_root / ".vscode"
        launch_file = vscode_dir / "launch.json"
        return launch_file.exists()

    def setup_visual_studio(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Visual Studio (—É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)"""
        pyproj_file = self.project_root / "PneumoStabSim.pyproj"
        sln_file = self.project_root / "PneumoStabSim.sln"
        return pyproj_file.exists() and sln_file.exists()

    def setup_pycharm(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PyCharm"""
        idea_dir = self.project_root / ".idea"
        runconf_dir = idea_dir / "runConfigurations"

        if not runconf_dir.exists():
            runconf_dir.mkdir(parents=True, exist_ok=True)

        # –°–æ–∑–¥–∞—Ç—å workspace.xml –¥–ª—è PyCharm
        workspace_content = """<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="RunManager" selected="Python.üöÄ PneumoStabSim">
    <list>
      <item itemvalue="Python.üöÄ PneumoStabSim" />
      <item itemvalue="Python.üêõ PneumoStabSim (Debug)" />
      <item itemvalue="Python.üõ°Ô∏è PneumoStabSim (Safe Mode)" />
      <item itemvalue="Python.‚ö° PneumoStabSim (Performance)" />
    </list>
  </component>
</project>"""

        workspace_file = idea_dir / "workspace.xml"
        try:
            workspace_file.write_text(workspace_content, encoding="utf-8")
            return True
        except Exception:
            return False

    def setup_sublime(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Sublime Text"""
        sublime_config = {
            "build_systems": [
                {
                    "name": "PneumoStabSim - Run",
                    "cmd": ["python", "app.py"],
                    "working_dir": "${project_path}",
                    "env": {"PYTHONPATH": "${project_path};${project_path}/src"},
                    "variants": [
                        {"name": "Debug Mode", "cmd": ["python", "app.py", "--debug"]},
                        {
                            "name": "Safe Mode",
                            "cmd": ["python", "app.py", "--safe-mode"],
                        },
                    ],
                }
            ]
        }

        # –°–æ–∑–¥–∞—Ç—å .sublime-project —Ñ–∞–π–ª
        sublime_project = {
            "folders": [
                {
                    "path": ".",
                    "folder_exclude_patterns": [
                        "venv",
                        ".venv",
                        "__pycache__",
                        ".git",
                        "logs",
                        "build",
                        "dist",
                        ".pytest_cache",
                    ],
                }
            ],
            "settings": {"python_interpreter": "./venv/Scripts/python.exe"},
            "build_systems": sublime_config["build_systems"],
        }

        try:
            project_file = self.project_root / "PneumoStabSim.sublime-project"
            project_file.write_text(
                json.dumps(sublime_project, indent=2), encoding="utf-8"
            )
            return True
        except Exception:
            return False

    def setup_atom(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Atom (—á–µ—Ä–µ–∑ package script-runner)"""
        # –°–æ–∑–¥–∞–Ω–∏–µ script-runner –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Atom
        atom_config = {
            "python": {
                "command": "python",
                "args": ["{FILE_ACTIVE}"],
                "cwd": "{PROJECT_PATH}",
                "env": {"PYTHONPATH": "{PROJECT_PATH};{PROJECT_PATH}/src"},
            }
        }

        try:
            # Atom –∏—Å–ø–æ–ª—å–∑—É–µ—Ç .atom-build.json –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            atom_file = self.project_root / ".atom-build.json"
            atom_build = {
                "cmd": "python",
                "args": ["app.py"],
                "cwd": "{PROJECT_PATH}",
                "env": {"PYTHONPATH": "{PROJECT_PATH};{PROJECT_PATH}/src"},
                "targets": {
                    "Debug Mode": {"cmd": "python", "args": ["app.py", "--debug"]},
                    "Safe Mode": {"cmd": "python", "args": ["app.py", "--safe-mode"]},
                },
            }

            atom_file.write_text(json.dumps(atom_build, indent=2), encoding="utf-8")
            return True
        except Exception:
            return False

    def create_universal_launcher(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ launcher —Å–∫—Ä–∏–ø—Ç–∞"""
        launcher_content = '''#!/usr/bin/env python3
"""Universal F5 Launcher - —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –ª—é–±–æ–π IDE"""
import sys
from pathlib import Path

# Add project root to Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "src"))

# Import and run the F5 launcher
from f5_launch import F5LaunchConfig

if __name__ == "__main__":
    launcher = F5LaunchConfig()

    # Determine launch mode from arguments
    if "--debug" in sys.argv:
        launcher.launch_debug_mode()
    elif "--safe-mode" in sys.argv:
        launcher.launch_normal_mode()  # Safe mode is normal mode with --safe-mode
    else:
        launcher.launch_normal_mode()
'''

        try:
            universal_file = self.project_root / "universal_f5.py"
            universal_file.write_text(launcher_content, encoding="utf-8")
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π launcher: {universal_file}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ launcher: {e}")
            return False

    def print_f5_instructions(self):
        """–ü–µ—á–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é F5 –≤ —Ä–∞–∑–Ω—ã—Ö IDE"""
        instructions = """
üéØ –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ F5 –í –†–ê–ó–ù–´–• IDE

üìù Visual Studio 2022:
   1. –û—Ç–∫—Ä–æ–π—Ç–µ PneumoStabSim.sln
   2. –ù–∞–∂–º–∏—Ç–µ F5 –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π
   3. Ctrl+F5 –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ –æ—Ç–ª–∞–¥–∫–∏

üìù VS Code:
   1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
   2. –ù–∞–∂–º–∏—Ç–µ F5 –∏–ª–∏ Ctrl+F5
   3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é

üìù PyCharm:
   1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–ø–∫—É –∫–∞–∫ –ø—Ä–æ–µ–∫—Ç
   2. –ù–∞–∂–º–∏—Ç–µ Shift+F10 –∏–ª–∏ F5
   3. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã

üìù Sublime Text:
   1. –û—Ç–∫—Ä–æ–π—Ç–µ PneumoStabSim.sublime-project
   2. –ù–∞–∂–º–∏—Ç–µ Ctrl+B –¥–ª—è —Å–±–æ—Ä–∫–∏
   3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é

üìù –õ—é–±–∞—è IDE:
   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python universal_f5.py
   2. –ò–ª–∏: python f5_launch.py
   3. –ò–ª–∏: F5_Launch.bat (Windows)

üöÄ –ë–´–°–¢–†–´–ï –ö–û–ú–ê–ù–î–´:
   ‚Ä¢ python f5_launch.py          - –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
   ‚Ä¢ python f5_launch.py --debug  - –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
   ‚Ä¢ F5_Launch.bat               - Windows —è—Ä–ª—ã–∫
   ‚Ä¢ F5_Launch.bat debug         - Windows —è—Ä–ª—ã–∫ (–æ—Ç–ª–∞–¥–∫–∞)

‚öôÔ∏è –ì–û–†–Ø–ß–ò–ï –ö–õ–ê–í–ò–®–ò:
   ‚Ä¢ F5         - –ó–∞–ø—É—Å–∫ —Å –æ—Ç–ª–∞–¥–∫–æ–π
   ‚Ä¢ Ctrl+F5    - –ó–∞–ø—É—Å–∫ –±–µ–∑ –æ—Ç–ª–∞–¥–∫–∏
   ‚Ä¢ Shift+F5   - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–ª–∞–¥–∫–∏
   ‚Ä¢ F9         - –¢–æ—á–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∞
   ‚Ä¢ F10        - –ü–æ—à–∞–≥–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
   ‚Ä¢ F11        - –ó–∞—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é
"""
        print(instructions)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("üîß F5 IDE Setup Manager")
    print("=" * 40)

    manager = F5SetupManager()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö IDE
    results = manager.setup_all_ides()

    # –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ launcher
    manager.create_universal_launcher()

    # –í—ã–≤–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    manager.print_f5_instructions()

    print("\n" + "=" * 40)
    print("‚úÖ F5 –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å F5 –≤ –ª—é–±–æ–π IDE!")


if __name__ == "__main__":
    main()
