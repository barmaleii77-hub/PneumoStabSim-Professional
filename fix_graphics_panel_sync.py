#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò GRAPHICS PANEL ‚Üî QML

–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:
1. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Å–≤–µ—â–µ–Ω–∏—è (position_y ‚Üí height)
2. –ê–≤—Ç–æ–≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ QML)
3. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (vignette, motion blur, dof)
"""

import sys
from pathlib import Path
import re

def fix_lighting_payload():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å payload –æ—Å–≤–µ—â–µ–Ω–∏—è –≤ panel_graphics.py"""
    file_path = Path("src/ui/panels/panel_graphics.py")
    
    if not file_path.exists():
        print(f"‚ùå File not found: {file_path}")
        return False
    
    print("üîß Fixing lighting payload in panel_graphics.py...")
    
    content = file_path.read_text(encoding='utf-8')
    
    # –ò—Å–ø—Ä–∞–≤–∏—Ç—å position_y ‚Üí height
    old_code = '''if "height" in point:
                pl["position_y"] = point.get("height")'''
    
    new_code = '''if "height" in point:
                pl["height"] = point.get("height")  # ‚úÖ FIXED: use "height" instead of "position_y"'''
    
    if old_code in content:
        content = content.replace(old_code, new_code)
        file_path.write_text(content, encoding='utf-8')
        print("  ‚úÖ Fixed: position_y ‚Üí height")
        return True
    else:
        print("  ‚ö†Ô∏è Pattern not found or already fixed")
        return False

def check_qml_camera_updates():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å applyCameraUpdates –≤ QML"""
    file_path = Path("assets/qml/main.qml")
    
    if not file_path.exists():
        print(f"‚ùå File not found: {file_path}")
        return False
    
    print("\nüîß Checking applyCameraUpdates in main.qml...")
    
    content = file_path.read_text(encoding='utf-8')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ auto_rotate
    if "params.auto_rotate !== undefined" in content:
        print("  ‚úÖ auto_rotate handling already present")
        return True
    
    # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é applyCameraUpdates
    pattern = r'(function applyCameraUpdates\(params\) \{.*?if \(params\.speed !== undefined\) cameraSpeed = params\.speed)'
    
    match = re.search(pattern, content, re.DOTALL)
    
    if not match:
        print("  ‚ùå applyCameraUpdates function not found")
        return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É auto_rotate
    new_code = match.group(1) + '''
    
    // ‚úÖ FIXED: Handle auto_rotate from panel_graphics
    if (params.auto_rotate !== undefined) autoRotate = params.auto_rotate
    if (params.auto_rotate_speed !== undefined) autoRotateSpeed = params.auto_rotate_speed'''
    
    content = content.replace(match.group(0), new_code)
    file_path.write_text(content, encoding='utf-8')
    print("  ‚úÖ Added auto_rotate handling")
    return True

def check_qml_effects_updates():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å applyEffectsUpdates –≤ QML"""
    file_path = Path("assets/qml/main.qml")
    
    if not file_path.exists():
        print(f"‚ùå File not found: {file_path}")
        return False
    
    print("\nüîß Checking applyEffectsUpdates in main.qml...")
    
    content = file_path.read_text(encoding='utf-8')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ vignette_strength
    if "params.vignette_strength !== undefined" in content:
        print("  ‚úÖ vignette_strength handling already present")
        return True
    
    # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é applyEffectsUpdates
    pattern = r'(function applyEffectsUpdates\(params\) \{.*?)(console\.log\("  ‚úÖ.*?"\))'
    
    match = re.search(pattern, content, re.DOTALL)
    
    if not match:
        print("  ‚ùå applyEffectsUpdates function not found")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    existing_code = match.group(1)
    
    needs_update = False
    missing_params = []
    
    if "params.vignette_strength" not in existing_code:
        missing_params.append("vignette_strength")
        needs_update = True
    
    if "params.motion_blur_amount" not in existing_code:
        missing_params.append("motion_blur_amount")
        needs_update = True
    
    if "params.dof_blur" not in existing_code:
        missing_params.append("dof_blur")
        needs_update = True
    
    if not needs_update:
        print("  ‚úÖ All effects parameters already handled")
        return True
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    additional_code = "\n    // ‚úÖ FIXED: Added missing effects parameters\n"
    
    if "vignette_strength" in missing_params:
        additional_code += '''    if (params.vignette !== undefined) vignetteEnabled = params.vignette
    if (params.vignette_strength !== undefined) vignetteStrength = params.vignette_strength
    '''
    
    if "motion_blur_amount" in missing_params:
        additional_code += '''    if (params.motion_blur !== undefined) motionBlurEnabled = params.motion_blur
    if (params.motion_blur_amount !== undefined) motionBlurAmount = params.motion_blur_amount
    '''
    
    if "dof_blur" in missing_params:
        additional_code += '''    if (params.depth_of_field !== undefined) depthOfFieldEnabled = params.depth_of_field
    if (params.dof_focus_distance !== undefined) dofFocusDistance = params.dof_focus_distance
    if (params.dof_blur !== undefined) dofBlurAmount = params.dof_blur
    '''
    
    new_code = match.group(1) + additional_code + "\n    " + match.group(2)
    
    content = content.replace(match.group(0), new_code)
    file_path.write_text(content, encoding='utf-8')
    print(f"  ‚úÖ Added {len(missing_params)} missing parameter(s): {', '.join(missing_params)}")
    return True

def verify_fixes():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("\n" + "="*60)
    print("üîç VERIFYING FIXES")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: Lighting payload
    py_file = Path("src/ui/panels/panel_graphics.py")
    if py_file.exists():
        content = py_file.read_text(encoding='utf-8')
        if 'pl["height"] = point.get("height")' in content:
            print("‚úÖ Lighting payload fixed (position_y ‚Üí height)")
        else:
            print("‚ùå Lighting payload NOT fixed")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: Camera auto_rotate
    qml_file = Path("assets/qml/main.qml")
    if qml_file.exists():
        content = qml_file.read_text(encoding='utf-8')
        if "params.auto_rotate !== undefined" in content:
            print("‚úÖ Camera auto_rotate handling present")
        else:
            print("‚ùå Camera auto_rotate handling MISSING")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: Effects parameters
    if qml_file.exists():
        content = qml_file.read_text(encoding='utf-8')
        vignette_ok = "params.vignette_strength !== undefined" in content
        motion_ok = "params.motion_blur_amount !== undefined" in content
        dof_ok = "params.dof_blur !== undefined" in content
        
        if vignette_ok and motion_ok and dof_ok:
            print("‚úÖ All effects parameters handled")
        else:
            missing = []
            if not vignette_ok:
                missing.append("vignette_strength")
            if not motion_ok:
                missing.append("motion_blur_amount")
            if not dof_ok:
                missing.append("dof_blur")
            print(f"‚ùå Missing effects: {', '.join(missing)}")

def main():
    print("="*60)
    print("üîß GRAPHICS PANEL ‚Üî QML SYNC AUTO-FIX")
    print("="*60)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    success_count = 0
    
    if fix_lighting_payload():
        success_count += 1
    
    if check_qml_camera_updates():
        success_count += 1
    
    if check_qml_effects_updates():
        success_count += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    verify_fixes()
    
    print("\n" + "="*60)
    if success_count == 3:
        print("‚úÖ ALL FIXES APPLIED SUCCESSFULLY")
        print("\nüöÄ Next steps:")
        print("   1. Run: python app.py")
        print("   2. Test lighting changes")
        print("   3. Test camera auto-rotate")
        print("   4. Test effects (vignette, motion blur, dof)")
        print("="*60)
        return 0
    else:
        print(f"‚ö†Ô∏è PARTIAL SUCCESS: {success_count}/3 fixes applied")
        print("\nüîß Manual review required for failed fixes")
        print("="*60)
        return 1

if __name__ == "__main__":
    sys.exit(main())
